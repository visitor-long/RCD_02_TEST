
RCD_04_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  08007b90  08007b90  00017b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008828  08008828  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008828  08008828  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001d4  08008a04  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08008a04  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000755c  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001945  00000000  00000000  0002779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  000290e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000604  00000000  00000000  000298e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e5c  00000000  00000000  00029eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a12b  00000000  00000000  00043d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009280d  00000000  00000000  0004de73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003418  00000000  00000000  000e0680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e3a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08007b78 	.word	0x08007b78

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08007b78 	.word	0x08007b78

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fca3 	bl	8000a94 <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff fa19 	bl	80005b0 <__aeabi_dmul>
 800117e:	f7ff fcef 	bl	8000b60 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f99a 	bl	80004bc <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff fa10 	bl	80005b0 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7ff f852 	bl	8000240 <__aeabi_dsub>
 800119c:	f7ff fce0 	bl	8000b60 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	4b5a      	ldr	r3, [pc, #360]	; (800132c <MX_GPIO_Init+0x180>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a59      	ldr	r2, [pc, #356]	; (800132c <MX_GPIO_Init+0x180>)
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b57      	ldr	r3, [pc, #348]	; (800132c <MX_GPIO_Init+0x180>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b54      	ldr	r3, [pc, #336]	; (800132c <MX_GPIO_Init+0x180>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a53      	ldr	r2, [pc, #332]	; (800132c <MX_GPIO_Init+0x180>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b51      	ldr	r3, [pc, #324]	; (800132c <MX_GPIO_Init+0x180>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b4e      	ldr	r3, [pc, #312]	; (800132c <MX_GPIO_Init+0x180>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <MX_GPIO_Init+0x180>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4b      	ldr	r3, [pc, #300]	; (800132c <MX_GPIO_Init+0x180>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_GPIO_Init+0x180>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a47      	ldr	r2, [pc, #284]	; (800132c <MX_GPIO_Init+0x180>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <MX_GPIO_Init+0x180>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCL_Pin|SDA_Pin|HEART_BLUE_Pin|TRIP_GREEN1_Pin
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001226:	4842      	ldr	r0, [pc, #264]	; (8001330 <MX_GPIO_Init+0x184>)
 8001228:	f001 fa9d 	bl	8002766 <HAL_GPIO_WritePin>
                          |TRIP_BLUE1_Pin|ERROR_RED_Pin|ERROR_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin|CALIBRATION_GREEN_Pin|CALIBRATION_BLUE_Pin|TEST_IN_Pin
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8001232:	4840      	ldr	r0, [pc, #256]	; (8001334 <MX_GPIO_Init+0x188>)
 8001234:	f001 fa97 	bl	8002766 <HAL_GPIO_WritePin>
                          |HEART_RED_Pin|HEART_GREEN_Pin|ERROR_BLUE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TSET_IN_RED_Pin
 8001238:	2201      	movs	r2, #1
 800123a:	f64f 4104 	movw	r1, #64516	; 0xfc04
 800123e:	483e      	ldr	r0, [pc, #248]	; (8001338 <MX_GPIO_Init+0x18c>)
 8001240:	f001 fa91 	bl	8002766 <HAL_GPIO_WritePin>
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin|TRIP_RED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8001244:	2304      	movs	r3, #4
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001248:	2311      	movs	r3, #17
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	4835      	ldr	r0, [pc, #212]	; (8001330 <MX_GPIO_Init+0x184>)
 800125c:	f001 f8d8 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDA_Pin;
 8001260:	2308      	movs	r3, #8
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	482e      	ldr	r0, [pc, #184]	; (8001330 <MX_GPIO_Init+0x184>)
 8001278:	f001 f8ca 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CALIBRATION_RED_Pin|CALIBRATION_GREEN_Pin|CALIBRATION_BLUE_Pin|HEART_RED_Pin
 800127c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 8001280:	613b      	str	r3, [r7, #16]
                          |HEART_GREEN_Pin|ERROR_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	4827      	ldr	r0, [pc, #156]	; (8001334 <MX_GPIO_Init+0x188>)
 8001296:	f001 f8bb 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_IN_Pin;
 800129a:	2310      	movs	r3, #16
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_IN_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4619      	mov	r1, r3
 80012b0:	4820      	ldr	r0, [pc, #128]	; (8001334 <MX_GPIO_Init+0x188>)
 80012b2:	f001 f8ad 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = HEART_BLUE_Pin|TRIP_GREEN1_Pin|TRIP_BLUE1_Pin|ERROR_RED_Pin
 80012b6:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 80012ba:	613b      	str	r3, [r7, #16]
                          |ERROR_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4818      	ldr	r0, [pc, #96]	; (8001330 <MX_GPIO_Init+0x184>)
 80012d0:	f001 f89e 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TSET_IN_RED_Pin
 80012d4:	f64f 4304 	movw	r3, #64516	; 0xfc04
 80012d8:	613b      	str	r3, [r7, #16]
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin|TRIP_RED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	4812      	ldr	r0, [pc, #72]	; (8001338 <MX_GPIO_Init+0x18c>)
 80012ee:	f001 f88f 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_INPUT_Pin;
 80012f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ERROR_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <MX_GPIO_Init+0x184>)
 8001308:	f001 f882 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Calibrate_KEY_Pin;
 800130c:	2308      	movs	r3, #8
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Calibrate_KEY_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <MX_GPIO_Init+0x18c>)
 8001320:	f001 f876 	bl	8002410 <HAL_GPIO_Init>

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	40011000 	.word	0x40011000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00

0800133c <PY_usDelayTest>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
__IO float usDelayBase;
void PY_usDelayTest(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
  __IO uint32_t firstms, secondms;
  __IO uint32_t counter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]

  firstms = HAL_GetTick()+1;
 8001346:	f000 ff75 	bl	8002234 <HAL_GetTick>
 800134a:	4603      	mov	r3, r0
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
  secondms = firstms+1;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]

  while(uwTick!=firstms) ;
 8001356:	bf00      	nop
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <PY_usDelayTest+0x5c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	429a      	cmp	r2, r3
 8001360:	d1fa      	bne.n	8001358 <PY_usDelayTest+0x1c>

  while(uwTick!=secondms) counter++;
 8001362:	e002      	b.n	800136a <PY_usDelayTest+0x2e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <PY_usDelayTest+0x5c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	429a      	cmp	r2, r3
 8001372:	d1f7      	bne.n	8001364 <PY_usDelayTest+0x28>

  usDelayBase = ((float)counter)/1000;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd18 	bl	8000dac <__aeabi_ui2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <PY_usDelayTest+0x60>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe1f 	bl	8000fc4 <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <PY_usDelayTest+0x64>)
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000240 	.word	0x20000240
 800139c:	447a0000 	.word	0x447a0000
 80013a0:	200001f0 	.word	0x200001f0

080013a4 <PY_Delay_us_t>:

void PY_Delay_us_t(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t delayReg;
  __IO uint32_t usNum = (uint32_t)(Delay*usDelayBase);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fcfd 	bl	8000dac <__aeabi_ui2f>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <PY_Delay_us_t+0x48>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff fd4e 	bl	8000e5c <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe9a 	bl	80010fc <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60bb      	str	r3, [r7, #8]

  delayReg = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  while(delayReg!=usNum) delayReg++;
 80013d0:	e002      	b.n	80013d8 <PY_Delay_us_t+0x34>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1f8      	bne.n	80013d2 <PY_Delay_us_t+0x2e>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001f0 	.word	0x200001f0

080013f0 <PY_usDelayOptimize>:

void PY_usDelayOptimize(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
  __IO uint32_t firstms, secondms;
  __IO float coe = 1.0;
 80013f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013fa:	607b      	str	r3, [r7, #4]

  firstms = HAL_GetTick();
 80013fc:	f000 ff1a 	bl	8002234 <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	60fb      	str	r3, [r7, #12]
  PY_Delay_us_t(1000000) ;
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <PY_usDelayOptimize+0x5c>)
 8001406:	f7ff ffcd 	bl	80013a4 <PY_Delay_us_t>
  secondms = HAL_GetTick();
 800140a:	f000 ff13 	bl	8002234 <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	60bb      	str	r3, [r7, #8]

  coe = ((float)1000)/(secondms-firstms);
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fcc7 	bl	8000dac <__aeabi_ui2f>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <PY_usDelayOptimize+0x60>)
 8001424:	f7ff fdce 	bl	8000fc4 <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	607b      	str	r3, [r7, #4]
  usDelayBase = coe*usDelayBase;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <PY_usDelayOptimize+0x64>)
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd11 	bl	8000e5c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <PY_usDelayOptimize+0x64>)
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	000f4240 	.word	0x000f4240
 8001450:	447a0000 	.word	0x447a0000
 8001454:	200001f0 	.word	0x200001f0

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fe92 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f882 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f7ff fea2 	bl	80011ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001468:	f000 fcc2 	bl	8001df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800146c:	f000 fb32 	bl	8001ad4 <OLED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PY_usDelayTest();
 8001470:	f7ff ff64 	bl	800133c <PY_usDelayTest>
  PY_usDelayOptimize();
 8001474:	f7ff ffbc 	bl	80013f0 <PY_usDelayOptimize>

  OnOffLedLight(1,2,0);
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	2001      	movs	r0, #1
 800147e:	f000 fd65 	bl	8001f4c <OnOffLedLight>
  OnOffLedLight(2,2,0);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	2002      	movs	r0, #2
 8001488:	f000 fd60 	bl	8001f4c <OnOffLedLight>
  OnOffLedLight(3,2,0);
 800148c:	2200      	movs	r2, #0
 800148e:	2102      	movs	r1, #2
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fd5b 	bl	8001f4c <OnOffLedLight>
  OnOffLedLight(4,2,0);
 8001496:	2200      	movs	r2, #0
 8001498:	2102      	movs	r1, #2
 800149a:	2004      	movs	r0, #4
 800149c:	f000 fd56 	bl	8001f4c <OnOffLedLight>
  OnOffLedLight(5,2,0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2102      	movs	r1, #2
 80014a4:	2005      	movs	r0, #5
 80014a6:	f000 fd51 	bl	8001f4c <OnOffLedLight>
  OnOffLedLight(6,2,0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	2006      	movs	r0, #6
 80014b0:	f000 fd4c 	bl	8001f4c <OnOffLedLight>

	OLED_Init();
 80014b4:	f000 fb0e 	bl	8001ad4 <OLED_Init>
	OLED_Clear();
 80014b8:	f000 fa30 	bl	800191c <OLED_Clear>
	OLED_ShowString(0,0,"Current ",16);
 80014bc:	2310      	movs	r3, #16
 80014be:	4a24      	ldr	r2, [pc, #144]	; (8001550 <main+0xf8>)
 80014c0:	2100      	movs	r1, #0
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 fad6 	bl	8001a74 <OLED_ShowString>
	OLED_ShowString(0,2,"        XX.XXMA",12);
 80014c8:	230c      	movs	r3, #12
 80014ca:	4a22      	ldr	r2, [pc, #136]	; (8001554 <main+0xfc>)
 80014cc:	2102      	movs	r1, #2
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 fad0 	bl	8001a74 <OLED_ShowString>

  printf("init success\r\n");
 80014d4:	4820      	ldr	r0, [pc, #128]	; (8001558 <main+0x100>)
 80014d6:	f002 fec1 	bl	800425c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, ERROR_INPUT_Pin))
 80014da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <main+0x104>)
 80014e0:	f001 f92a 	bl	8002738 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <main+0x9e>
	  {
		  OnOffLedLight(4,2,1);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	2004      	movs	r0, #4
 80014f0:	f000 fd2c 	bl	8001f4c <OnOffLedLight>
 80014f4:	e00c      	b.n	8001510 <main+0xb8>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOC, ERROR_INPUT_Pin) == 0)
 80014f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <main+0x104>)
 80014fc:	f001 f91c 	bl	8002738 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d104      	bne.n	8001510 <main+0xb8>
	  {
		  OnOffLedLight(4,2,0);
 8001506:	2200      	movs	r2, #0
 8001508:	2102      	movs	r1, #2
 800150a:	2004      	movs	r0, #4
 800150c:	f000 fd1e 	bl	8001f4c <OnOffLedLight>
	  }

	  if(HAL_GPIO_ReadPin(GPIOB, Calibrate_KEY_Pin) == 0)
 8001510:	2108      	movs	r1, #8
 8001512:	4813      	ldr	r0, [pc, #76]	; (8001560 <main+0x108>)
 8001514:	f001 f910 	bl	8002738 <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1dd      	bne.n	80014da <main+0x82>
	  {
		  HAL_msDelay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f000 f8a8 	bl	8001674 <HAL_msDelay>
		  while(HAL_GPIO_ReadPin(GPIOC, Calibrate_KEY_Pin))
 8001524:	e00c      	b.n	8001540 <main+0xe8>
		  {
			  HAL_GPIO_WritePin(GPIOA, TEST_IN_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2110      	movs	r1, #16
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <main+0x10c>)
 800152c:	f001 f91b 	bl	8002766 <HAL_GPIO_WritePin>
			  HAL_msDelay(100);
 8001530:	2064      	movs	r0, #100	; 0x64
 8001532:	f000 f89f 	bl	8001674 <HAL_msDelay>
			  HAL_GPIO_WritePin(GPIOA, TEST_IN_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2110      	movs	r1, #16
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <main+0x10c>)
 800153c:	f001 f913 	bl	8002766 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOC, Calibrate_KEY_Pin))
 8001540:	2108      	movs	r1, #8
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <main+0x104>)
 8001544:	f001 f8f8 	bl	8002738 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1eb      	bne.n	8001526 <main+0xce>
	  if(HAL_GPIO_ReadPin(GPIOC, ERROR_INPUT_Pin))
 800154e:	e7c4      	b.n	80014da <main+0x82>
 8001550:	08007b90 	.word	0x08007b90
 8001554:	08007b9c 	.word	0x08007b9c
 8001558:	08007bac 	.word	0x08007bac
 800155c:	40011000 	.word	0x40011000
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40010800 	.word	0x40010800

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2228      	movs	r2, #40	; 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f002 ff70 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 f8f1 	bl	8002798 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015bc:	f000 faf2 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fb5e 	bl	8002c9c <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015e6:	f000 fadd 	bl	8001ba4 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_usDelay>:

/* USER CODE BEGIN 4 */
void HAL_usDelay(uint32_t udelay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_usDelay+0x7c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 8001602:	f000 fe17 	bl	8002234 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

  delays =udelay * 72;
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	d915      	bls.n	8001648 <HAL_usDelay+0x54>
  {
    while(HAL_GetTick() == tickn);
 800161c:	bf00      	nop
 800161e:	f000 fe09 	bl	8002234 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4293      	cmp	r3, r2
 8001628:	d0f9      	beq.n	800161e <HAL_usDelay+0x2a>
    wait = 72000 + startval - delays;
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001634:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001638:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL);
 800163a:	bf00      	nop
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_usDelay+0x7c>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3fa      	bcc.n	800163c <HAL_usDelay+0x48>
  else
  {
    wait = startval - delays;
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
  }
}
 8001646:	e00f      	b.n	8001668 <HAL_usDelay+0x74>
    wait = startval - delays;
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
 8001650:	bf00      	nop
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_usDelay+0x7c>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d205      	bcs.n	8001668 <HAL_usDelay+0x74>
 800165c:	f000 fdea 	bl	8002234 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4293      	cmp	r3, r2
 8001666:	d0f4      	beq.n	8001652 <HAL_usDelay+0x5e>
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_msDelay>:

void HAL_msDelay(uint32_t udelay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81fb      	strh	r3, [r7, #14]
	for(i = 0;i < udelay;i++)
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	e006      	b.n	8001694 <HAL_msDelay+0x20>
	{
		HAL_usDelay(1000);
 8001686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168a:	f7ff ffb3 	bl	80015f4 <HAL_usDelay>
	for(i = 0;i < udelay;i++)
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	3301      	adds	r3, #1
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f4      	bhi.n	8001686 <HAL_msDelay+0x12>
	}
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <my_SDA_IN>:



void my_SDA_IN(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct= {0};
 80016ae:	463b      	mov	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SDA_Pin;
 80016ba:	2308      	movs	r3, #8
 80016bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4803      	ldr	r0, [pc, #12]	; (80016dc <my_SDA_IN+0x34>)
 80016d0:	f000 fe9e 	bl	8002410 <HAL_GPIO_Init>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40010800 	.word	0x40010800

080016e0 <my_SDA_OUT>:
void my_SDA_OUT(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = SDA_Pin;
 80016e6:	2308      	movs	r3, #8
 80016e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	463b      	mov	r3, r7
 80016f8:	4619      	mov	r1, r3
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <my_SDA_OUT+0x28>)
 80016fc:	f000 fe88 	bl	8002410 <HAL_GPIO_Init>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010800 	.word	0x40010800

0800170c <IIC_Start>:
//	SDA_H;
//	SCL_H;
}

void IIC_Start(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8001710:	f7ff ffe6 	bl	80016e0 <my_SDA_OUT>
	SDA_H;
 8001714:	2201      	movs	r2, #1
 8001716:	2108      	movs	r1, #8
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <IIC_Start+0x40>)
 800171a:	f001 f824 	bl	8002766 <HAL_GPIO_WritePin>
	SCL_H;
 800171e:	2201      	movs	r2, #1
 8001720:	2104      	movs	r1, #4
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <IIC_Start+0x40>)
 8001724:	f001 f81f 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_usDelay(5);
 8001728:	2005      	movs	r0, #5
 800172a:	f7ff ff63 	bl	80015f4 <HAL_usDelay>
 	SDA_L;
 800172e:	2200      	movs	r2, #0
 8001730:	2108      	movs	r1, #8
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <IIC_Start+0x40>)
 8001734:	f001 f817 	bl	8002766 <HAL_GPIO_WritePin>
 	HAL_usDelay(5);
 8001738:	2005      	movs	r0, #5
 800173a:	f7ff ff5b 	bl	80015f4 <HAL_usDelay>
	SCL_L;
 800173e:	2200      	movs	r2, #0
 8001740:	2104      	movs	r1, #4
 8001742:	4802      	ldr	r0, [pc, #8]	; (800174c <IIC_Start+0x40>)
 8001744:	f001 f80f 	bl	8002766 <HAL_GPIO_WritePin>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40011000 	.word	0x40011000

08001750 <IIC_Stop>:

void IIC_Stop(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	SDA_OUT();
 8001754:	f7ff ffc4 	bl	80016e0 <my_SDA_OUT>
	SCL_L;
 8001758:	2200      	movs	r2, #0
 800175a:	2104      	movs	r1, #4
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <IIC_Stop+0x40>)
 800175e:	f001 f802 	bl	8002766 <HAL_GPIO_WritePin>
	SDA_L;
 8001762:	2200      	movs	r2, #0
 8001764:	2108      	movs	r1, #8
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <IIC_Stop+0x40>)
 8001768:	f000 fffd 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_usDelay(4);
 800176c:	2004      	movs	r0, #4
 800176e:	f7ff ff41 	bl	80015f4 <HAL_usDelay>
	SCL_H;
 8001772:	2201      	movs	r2, #1
 8001774:	2104      	movs	r1, #4
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <IIC_Stop+0x40>)
 8001778:	f000 fff5 	bl	8002766 <HAL_GPIO_WritePin>
	SDA_H;
 800177c:	2201      	movs	r2, #1
 800177e:	2108      	movs	r1, #8
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <IIC_Stop+0x40>)
 8001782:	f000 fff0 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_usDelay(4);
 8001786:	2004      	movs	r0, #4
 8001788:	f7ff ff34 	bl	80015f4 <HAL_usDelay>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40011000 	.word	0x40011000

08001794 <IIC_Wait_Ack>:

uint8_t IIC_Wait_Ack(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
	SDA_IN();
 800179e:	f7ff ff83 	bl	80016a8 <my_SDA_IN>
	SDA_H;HAL_usDelay(1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	4815      	ldr	r0, [pc, #84]	; (80017fc <IIC_Wait_Ack+0x68>)
 80017a8:	f000 ffdd 	bl	8002766 <HAL_GPIO_WritePin>
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff ff21 	bl	80015f4 <HAL_usDelay>
	SCL_H;HAL_usDelay(1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2104      	movs	r1, #4
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <IIC_Wait_Ack+0x68>)
 80017b8:	f000 ffd5 	bl	8002766 <HAL_GPIO_WritePin>
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff ff19 	bl	80015f4 <HAL_usDelay>
	while(SDA_read)
 80017c2:	e009      	b.n	80017d8 <IIC_Wait_Ack+0x44>
	{
		ucErrTime++;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	3301      	adds	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2bfa      	cmp	r3, #250	; 0xfa
 80017ce:	d903      	bls.n	80017d8 <IIC_Wait_Ack+0x44>
		{
			IIC_Stop();
 80017d0:	f7ff ffbe 	bl	8001750 <IIC_Stop>
			return 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e00c      	b.n	80017f2 <IIC_Wait_Ack+0x5e>
	while(SDA_read)
 80017d8:	2108      	movs	r1, #8
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <IIC_Wait_Ack+0x68>)
 80017dc:	f000 ffac 	bl	8002738 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ee      	bne.n	80017c4 <IIC_Wait_Ack+0x30>
		}
	}
	SCL_L;
 80017e6:	2200      	movs	r2, #0
 80017e8:	2104      	movs	r1, #4
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <IIC_Wait_Ack+0x68>)
 80017ec:	f000 ffbb 	bl	8002766 <HAL_GPIO_WritePin>
	return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40011000 	.word	0x40011000

08001800 <IIC_Send_Byte>:
	HAL_usDelay(2);
	SCL_L;
}

void IIC_Send_Byte(uint8_t txd)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
	SDA_OUT();
 800180a:	f7ff ff69 	bl	80016e0 <my_SDA_OUT>
    SCL_L;
 800180e:	2200      	movs	r2, #0
 8001810:	2104      	movs	r1, #4
 8001812:	481b      	ldr	r0, [pc, #108]	; (8001880 <IIC_Send_Byte+0x80>)
 8001814:	f000 ffa7 	bl	8002766 <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e027      	b.n	800186e <IIC_Send_Byte+0x6e>
    {
		if((txd&0x80)>>7)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da05      	bge.n	8001832 <IIC_Send_Byte+0x32>
			SDA_H;
 8001826:	2201      	movs	r2, #1
 8001828:	2108      	movs	r1, #8
 800182a:	4815      	ldr	r0, [pc, #84]	; (8001880 <IIC_Send_Byte+0x80>)
 800182c:	f000 ff9b 	bl	8002766 <HAL_GPIO_WritePin>
 8001830:	e004      	b.n	800183c <IIC_Send_Byte+0x3c>
		else
			SDA_L;
 8001832:	2200      	movs	r2, #0
 8001834:	2108      	movs	r1, #8
 8001836:	4812      	ldr	r0, [pc, #72]	; (8001880 <IIC_Send_Byte+0x80>)
 8001838:	f000 ff95 	bl	8002766 <HAL_GPIO_WritePin>
		txd<<=1;
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	71fb      	strb	r3, [r7, #7]
		HAL_usDelay(2);
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fed6 	bl	80015f4 <HAL_usDelay>
		SCL_H;
 8001848:	2201      	movs	r2, #1
 800184a:	2104      	movs	r1, #4
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <IIC_Send_Byte+0x80>)
 800184e:	f000 ff8a 	bl	8002766 <HAL_GPIO_WritePin>
		HAL_usDelay(2);
 8001852:	2002      	movs	r0, #2
 8001854:	f7ff fece 	bl	80015f4 <HAL_usDelay>
		SCL_L;
 8001858:	2200      	movs	r2, #0
 800185a:	2104      	movs	r1, #4
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <IIC_Send_Byte+0x80>)
 800185e:	f000 ff82 	bl	8002766 <HAL_GPIO_WritePin>
		HAL_usDelay(2);
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fec6 	bl	80015f4 <HAL_usDelay>
    for(t=0;t<8;t++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b07      	cmp	r3, #7
 8001872:	d9d4      	bls.n	800181e <IIC_Send_Byte+0x1e>
    }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40011000 	.word	0x40011000

08001884 <OLED_WR_Byte>:
        IIC_Ack();
    return receive;
}

void OLED_WR_Byte(uint8_t dat,uint8_t mode)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
	IIC_Start();
 8001894:	f7ff ff3a 	bl	800170c <IIC_Start>
	IIC_Send_Byte(0x78);
 8001898:	2078      	movs	r0, #120	; 0x78
 800189a:	f7ff ffb1 	bl	8001800 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800189e:	f7ff ff79 	bl	8001794 <IIC_Wait_Ack>
	if(mode)
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <OLED_WR_Byte+0x2c>
		IIC_Send_Byte(0x40);
 80018a8:	2040      	movs	r0, #64	; 0x40
 80018aa:	f7ff ffa9 	bl	8001800 <IIC_Send_Byte>
 80018ae:	e002      	b.n	80018b6 <OLED_WR_Byte+0x32>
	else
		IIC_Send_Byte(0x00);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ffa5 	bl	8001800 <IIC_Send_Byte>
	IIC_Wait_Ack();
 80018b6:	f7ff ff6d 	bl	8001794 <IIC_Wait_Ack>
	IIC_Send_Byte(dat);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff9f 	bl	8001800 <IIC_Send_Byte>
	IIC_Wait_Ack();
 80018c2:	f7ff ff67 	bl	8001794 <IIC_Wait_Ack>
	IIC_Stop();
 80018c6:	f7ff ff43 	bl	8001750 <IIC_Stop>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <OLED_Set_Pos>:
				OLED_WR_Byte(fill_Data,1);
			}
	}
}
void OLED_Set_Pos(unsigned char x, unsigned char y)
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	460a      	mov	r2, r1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	4613      	mov	r3, r2
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	3b50      	subs	r3, #80	; 0x50
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ffca 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffc0 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffb8 	bl	8001884 <OLED_WR_Byte>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}

void OLED_Clear(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001922:	2300      	movs	r3, #0
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	e01f      	b.n	8001968 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0+i,OLED_CMD);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	3b50      	subs	r3, #80	; 0x50
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ffa7 	bl	8001884 <OLED_WR_Byte>
		OLED_WR_Byte(0x00,OLED_CMD);
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ffa3 	bl	8001884 <OLED_WR_Byte>
		OLED_WR_Byte(0x10,OLED_CMD);
 800193e:	2100      	movs	r1, #0
 8001940:	2010      	movs	r0, #16
 8001942:	f7ff ff9f 	bl	8001884 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA);
 8001946:	2300      	movs	r3, #0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	e006      	b.n	800195a <OLED_Clear+0x3e>
 800194c:	2101      	movs	r1, #1
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff ff98 	bl	8001884 <OLED_WR_Byte>
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	3301      	adds	r3, #1
 8001958:	71bb      	strb	r3, [r7, #6]
 800195a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	daf4      	bge.n	800194c <OLED_Clear+0x30>
	for(i=0;i<8;i++)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	3301      	adds	r3, #1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b07      	cmp	r3, #7
 800196c:	d9dc      	bls.n	8001928 <OLED_Clear+0xc>
	}
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <OLED_ShowChar>:
		for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA);
	}
}

void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4604      	mov	r4, r0
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4623      	mov	r3, r4
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	4603      	mov	r3, r0
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	460b      	mov	r3, r1
 8001990:	717b      	strb	r3, [r7, #5]
 8001992:	4613      	mov	r3, r2
 8001994:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 8001996:	2300      	movs	r3, #0
 8001998:	73bb      	strb	r3, [r7, #14]
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	3b20      	subs	r3, #32
 80019a2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da04      	bge.n	80019b6 <OLED_ShowChar+0x3e>
 80019ac:	2300      	movs	r3, #0
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	3302      	adds	r3, #2
 80019b4:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80019b6:	793b      	ldrb	r3, [r7, #4]
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d135      	bne.n	8001a28 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);
 80019bc:	79ba      	ldrb	r2, [r7, #6]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff85 	bl	80018d2 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e00c      	b.n	80019e8 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	011a      	lsls	r2, r3, #4
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <OLED_ShowChar+0xf4>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff51 	bl	8001884 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d9ef      	bls.n	80019ce <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff6a 	bl	80018d2 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e00d      	b.n	8001a20 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	011a      	lsls	r2, r3, #4
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <OLED_ShowChar+0xf4>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	2101      	movs	r1, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff35 	bl	8001884 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	d9ee      	bls.n	8001a04 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);

			}
}
 8001a26:	e01c      	b.n	8001a62 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8001a28:	79ba      	ldrb	r2, [r7, #6]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff4f 	bl	80018d2 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e010      	b.n	8001a5c <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 8001a3a:	7bba      	ldrb	r2, [r7, #14]
 8001a3c:	7bf9      	ldrb	r1, [r7, #15]
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <OLED_ShowChar+0xf8>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4403      	add	r3, r0
 8001a4a:	440b      	add	r3, r1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff17 	bl	8001884 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d9eb      	bls.n	8001a3a <OLED_ShowChar+0xc2>
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08007de4 	.word	0x08007de4
 8001a70:	08007bbc 	.word	0x08007bbc

08001a74 <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
	}
}

void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	603a      	str	r2, [r7, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	460b      	mov	r3, r1
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001a8e:	e016      	b.n	8001abe <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	79b9      	ldrb	r1, [r7, #6]
 8001a9c:	79f8      	ldrb	r0, [r7, #7]
 8001a9e:	f7ff ff6b 	bl	8001978 <OLED_ShowChar>
			x+=8;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b78      	cmp	r3, #120	; 0x78
 8001aac:	d904      	bls.n	8001ab8 <OLED_ShowString+0x44>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	71bb      	strb	r3, [r7, #6]
			j++;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e2      	bne.n	8001a90 <OLED_ShowString+0x1c>
	}
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <OLED_Init>:
	    }
	}
}

void OLED_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    PY_Delay_us_t(200000);
 8001ad8:	4831      	ldr	r0, [pc, #196]	; (8001ba0 <OLED_Init+0xcc>)
 8001ada:	f7ff fc63 	bl	80013a4 <PY_Delay_us_t>
    OLED_WR_Byte(0xAE,OLED_CMD);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	20ae      	movs	r0, #174	; 0xae
 8001ae2:	f7ff fecf 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//---set low column address
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2040      	movs	r0, #64	; 0x40
 8001aea:	f7ff fecb 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//---set high column address
 8001aee:	2100      	movs	r1, #0
 8001af0:	20b0      	movs	r0, #176	; 0xb0
 8001af2:	f7ff fec7 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xC8,OLED_CMD);//-not offset
 8001af6:	2100      	movs	r1, #0
 8001af8:	20c8      	movs	r0, #200	; 0xc8
 8001afa:	f7ff fec3 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2081      	movs	r0, #129	; 0x81
 8001b02:	f7ff febf 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0xff,OLED_CMD);
 8001b06:	2100      	movs	r1, #0
 8001b08:	20ff      	movs	r0, #255	; 0xff
 8001b0a:	f7ff febb 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xa1,OLED_CMD);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	20a1      	movs	r0, #161	; 0xa1
 8001b12:	f7ff feb7 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xa6,OLED_CMD);
 8001b16:	2100      	movs	r1, #0
 8001b18:	20a6      	movs	r0, #166	; 0xa6
 8001b1a:	f7ff feb3 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xa8,OLED_CMD);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	20a8      	movs	r0, #168	; 0xa8
 8001b22:	f7ff feaf 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD);
 8001b26:	2100      	movs	r1, #0
 8001b28:	201f      	movs	r0, #31
 8001b2a:	f7ff feab 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xd3,OLED_CMD);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	20d3      	movs	r0, #211	; 0xd3
 8001b32:	f7ff fea7 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fea3 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xd5,OLED_CMD);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	20d5      	movs	r0, #213	; 0xd5
 8001b42:	f7ff fe9f 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);
 8001b46:	2100      	movs	r1, #0
 8001b48:	20f0      	movs	r0, #240	; 0xf0
 8001b4a:	f7ff fe9b 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xd9,OLED_CMD);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	20d9      	movs	r0, #217	; 0xd9
 8001b52:	f7ff fe97 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x22,OLED_CMD);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2022      	movs	r0, #34	; 0x22
 8001b5a:	f7ff fe93 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xda,OLED_CMD);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	20da      	movs	r0, #218	; 0xda
 8001b62:	f7ff fe8f 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);
 8001b66:	2100      	movs	r1, #0
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7ff fe8b 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xdb,OLED_CMD);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	20db      	movs	r0, #219	; 0xdb
 8001b72:	f7ff fe87 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x49,OLED_CMD);
 8001b76:	2100      	movs	r1, #0
 8001b78:	2049      	movs	r0, #73	; 0x49
 8001b7a:	f7ff fe83 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0x8d,OLED_CMD);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	208d      	movs	r0, #141	; 0x8d
 8001b82:	f7ff fe7f 	bl	8001884 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);
 8001b86:	2100      	movs	r1, #0
 8001b88:	2014      	movs	r0, #20
 8001b8a:	f7ff fe7b 	bl	8001884 <OLED_WR_Byte>

	OLED_WR_Byte(0xaf,OLED_CMD);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	20af      	movs	r0, #175	; 0xaf
 8001b92:	f7ff fe77 	bl	8001884 <OLED_WR_Byte>
	OLED_Clear();
 8001b96:	f7ff fec1 	bl	800191c <OLED_Clear>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	00030d40 	.word	0x00030d40

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	e7fe      	b.n	8001bac <Error_Handler+0x8>
	...

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_MspInit+0x60>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_MspInit+0x60>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5a:	f000 fad9 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  return 1;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <_kill>:

int _kill(int pid, int sig)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7a:	f002 fc41 	bl	8004500 <__errno>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2216      	movs	r2, #22
 8001c82:	601a      	str	r2, [r3, #0]
  return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_exit>:

void _exit (int status)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ffe7 	bl	8001c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca2:	e7fe      	b.n	8001ca2 <_exit+0x12>

08001ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e00a      	b.n	8001ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb6:	f3af 8000 	nop.w
 8001cba:	4601      	mov	r1, r0
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	b2ca      	uxtb	r2, r1
 8001cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf0      	blt.n	8001cb6 <_read+0x12>
  }

  return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e009      	b.n	8001d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f8ef 	bl	8001edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf1      	blt.n	8001cf0 <_write+0x12>
  }
  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_close>:

int _close(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_isatty>:

int _isatty(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f002 fbaa 	bl	8004500 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000c000 	.word	0x2000c000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	200001f4 	.word	0x200001f4
 8001de0:	20000390 	.word	0x20000390

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_USART1_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e28:	f001 f8c6 	bl	8002fb8 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff feb7 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001f8 	.word	0x200001f8
 8001e40:	40013800 	.word	0x40013800

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_UART_MspInit+0x8c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d131      	bne.n	8001ec8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_UART_MspInit+0x90>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <HAL_UART_MspInit+0x94>)
 8001eaa:	f000 fab1 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_UART_MspInit+0x94>)
 8001ec4:	f000 faa4 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010800 	.word	0x40010800

08001edc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001ee4:	1d39      	adds	r1, r7, #4
 8001ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eea:	2201      	movs	r2, #1
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <__io_putchar+0x20>)
 8001eee:	f001 f8b3 	bl	8003058 <HAL_UART_Transmit>
	return ch;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200001f8 	.word	0x200001f8

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff ff70 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f06:	490c      	ldr	r1, [pc, #48]	; (8001f38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f08:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f1c:	4c09      	ldr	r4, [pc, #36]	; (8001f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f002 faef 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff fa93 	bl	8001458 <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f3c:	08008830 	.word	0x08008830
  ldr r2, =_sbss
 8001f40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f44:	20000390 	.word	0x20000390

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <OnOffLedLight>:
 */
#include "led.h"


void OnOffLedLight(unsigned char signal,unsigned char color,unsigned char state)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	460b      	mov	r3, r1
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	717b      	strb	r3, [r7, #5]
	switch(signal){
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	f200 80f7 	bhi.w	8002156 <OnOffLedLight+0x20a>
 8001f68:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <OnOffLedLight+0x24>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001fdb 	.word	0x08001fdb
 8001f74:	0800207b 	.word	0x0800207b
 8001f78:	0800202d 	.word	0x0800202d
 8001f7c:	08001f89 	.word	0x08001f89
 8001f80:	080020c7 	.word	0x080020c7
 8001f84:	0800210f 	.word	0x0800210f
	    case ERROR_LED :
	    	if(color == Green)
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d110      	bne.n	8001fb0 <OnOffLedLight+0x64>
	    	{
	    		if(state)
 8001f8e:	797b      	ldrb	r3, [r7, #5]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <OnOffLedLight+0x56>
	    		 HAL_GPIO_WritePin(GPIOC, ERROR_GREEN_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9a:	4877      	ldr	r0, [pc, #476]	; (8002178 <OnOffLedLight+0x22c>)
 8001f9c:	f000 fbe3 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_SET);
	    	}
	       break; /* 可选的 */
 8001fa0:	e0db      	b.n	800215a <OnOffLedLight+0x20e>
				 HAL_GPIO_WritePin(GPIOC, ERROR_GREEN_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa8:	4873      	ldr	r0, [pc, #460]	; (8002178 <OnOffLedLight+0x22c>)
 8001faa:	f000 fbdc 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8001fae:	e0d4      	b.n	800215a <OnOffLedLight+0x20e>
	    	else if(color == Red)
 8001fb0:	79bb      	ldrb	r3, [r7, #6]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	f040 80d1 	bne.w	800215a <OnOffLedLight+0x20e>
	    		if(state)
 8001fb8:	797b      	ldrb	r3, [r7, #5]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <OnOffLedLight+0x80>
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc4:	486c      	ldr	r0, [pc, #432]	; (8002178 <OnOffLedLight+0x22c>)
 8001fc6:	f000 fbce 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8001fca:	e0c6      	b.n	800215a <OnOffLedLight+0x20e>
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd2:	4869      	ldr	r0, [pc, #420]	; (8002178 <OnOffLedLight+0x22c>)
 8001fd4:	f000 fbc7 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8001fd8:	e0bf      	b.n	800215a <OnOffLedLight+0x20e>
	    case TEST_IN_LED :
	    	if(color == Green)
 8001fda:	79bb      	ldrb	r3, [r7, #6]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d110      	bne.n	8002002 <OnOffLedLight+0xb6>
	    	{
	    		if(state)
 8001fe0:	797b      	ldrb	r3, [r7, #5]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <OnOffLedLight+0xa8>
	    			HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fec:	4863      	ldr	r0, [pc, #396]	; (800217c <OnOffLedLight+0x230>)
 8001fee:	f000 fbba 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_SET);
	    	}
	       break; /* 可选的 */
 8001ff2:	e0b4      	b.n	800215e <OnOffLedLight+0x212>
	    			HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffa:	4860      	ldr	r0, [pc, #384]	; (800217c <OnOffLedLight+0x230>)
 8001ffc:	f000 fbb3 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8002000:	e0ad      	b.n	800215e <OnOffLedLight+0x212>
	    	else if(color == Red)
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	2b01      	cmp	r3, #1
 8002006:	f040 80aa 	bne.w	800215e <OnOffLedLight+0x212>
	    		if(state)
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <OnOffLedLight+0xd2>
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002016:	4859      	ldr	r0, [pc, #356]	; (800217c <OnOffLedLight+0x230>)
 8002018:	f000 fba5 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 800201c:	e09f      	b.n	800215e <OnOffLedLight+0x212>
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002024:	4855      	ldr	r0, [pc, #340]	; (800217c <OnOffLedLight+0x230>)
 8002026:	f000 fb9e 	bl	8002766 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 800202a:	e098      	b.n	800215e <OnOffLedLight+0x212>
	    case TripLed2_LED :
	    	if(color == Green)
 800202c:	79bb      	ldrb	r3, [r7, #6]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d10e      	bne.n	8002050 <OnOffLedLight+0x104>
			{
	    		if(state)
 8002032:	797b      	ldrb	r3, [r7, #5]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <OnOffLedLight+0xf8>
	    			HAL_GPIO_WritePin(GPIOC, TRIP_GREEN1_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	484e      	ldr	r0, [pc, #312]	; (8002178 <OnOffLedLight+0x22c>)
 800203e:	f000 fb92 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 8002042:	e08e      	b.n	8002162 <OnOffLedLight+0x216>
	    			HAL_GPIO_WritePin(GPIOC, TRIP_GREEN1_Pin, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	484b      	ldr	r0, [pc, #300]	; (8002178 <OnOffLedLight+0x22c>)
 800204a:	f000 fb8c 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800204e:	e088      	b.n	8002162 <OnOffLedLight+0x216>
			else if(color == Red)
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 8085 	bne.w	8002162 <OnOffLedLight+0x216>
	    		if(state)
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <OnOffLedLight+0x120>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002064:	4845      	ldr	r0, [pc, #276]	; (800217c <OnOffLedLight+0x230>)
 8002066:	f000 fb7e 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800206a:	e07a      	b.n	8002162 <OnOffLedLight+0x216>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002072:	4842      	ldr	r0, [pc, #264]	; (800217c <OnOffLedLight+0x230>)
 8002074:	f000 fb77 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002078:	e073      	b.n	8002162 <OnOffLedLight+0x216>
	    case TripLed1_LED :
	    	if(color == Green)
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d110      	bne.n	80020a2 <OnOffLedLight+0x156>
			{
	    		if(state)
 8002080:	797b      	ldrb	r3, [r7, #5]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <OnOffLedLight+0x148>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208c:	483b      	ldr	r0, [pc, #236]	; (800217c <OnOffLedLight+0x230>)
 800208e:	f000 fb6a 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 8002092:	e068      	b.n	8002166 <OnOffLedLight+0x21a>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209a:	4838      	ldr	r0, [pc, #224]	; (800217c <OnOffLedLight+0x230>)
 800209c:	f000 fb63 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80020a0:	e061      	b.n	8002166 <OnOffLedLight+0x21a>
			else if(color == Red)
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d15e      	bne.n	8002166 <OnOffLedLight+0x21a>
	    		if(state)
 80020a8:	797b      	ldrb	r3, [r7, #5]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <OnOffLedLight+0x16e>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2104      	movs	r1, #4
 80020b2:	4832      	ldr	r0, [pc, #200]	; (800217c <OnOffLedLight+0x230>)
 80020b4:	f000 fb57 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80020b8:	e055      	b.n	8002166 <OnOffLedLight+0x21a>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	2104      	movs	r1, #4
 80020be:	482f      	ldr	r0, [pc, #188]	; (800217c <OnOffLedLight+0x230>)
 80020c0:	f000 fb51 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80020c4:	e04f      	b.n	8002166 <OnOffLedLight+0x21a>
	    case PWM_LED :
	    	if(color == Green)
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d10e      	bne.n	80020ea <OnOffLedLight+0x19e>
			{
	    		if(state)
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <OnOffLedLight+0x192>
	    			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	482a      	ldr	r0, [pc, #168]	; (8002180 <OnOffLedLight+0x234>)
 80020d8:	f000 fb45 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 80020dc:	e045      	b.n	800216a <OnOffLedLight+0x21e>
	    			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	4827      	ldr	r0, [pc, #156]	; (8002180 <OnOffLedLight+0x234>)
 80020e4:	f000 fb3f 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80020e8:	e03f      	b.n	800216a <OnOffLedLight+0x21e>
			else if(color == Red)
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d13c      	bne.n	800216a <OnOffLedLight+0x21e>
	    		if(state)
 80020f0:	797b      	ldrb	r3, [r7, #5]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <OnOffLedLight+0x1b6>
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2140      	movs	r1, #64	; 0x40
 80020fa:	4821      	ldr	r0, [pc, #132]	; (8002180 <OnOffLedLight+0x234>)
 80020fc:	f000 fb33 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002100:	e033      	b.n	800216a <OnOffLedLight+0x21e>
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	481e      	ldr	r0, [pc, #120]	; (8002180 <OnOffLedLight+0x234>)
 8002108:	f000 fb2d 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800210c:	e02d      	b.n	800216a <OnOffLedLight+0x21e>
	    case CALIBRATE_LED :
	    	if(color == Green)
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d10e      	bne.n	8002132 <OnOffLedLight+0x1e6>
			{
	    		if(state)
 8002114:	797b      	ldrb	r3, [r7, #5]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <OnOffLedLight+0x1da>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_GREEN_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <OnOffLedLight+0x234>)
 8002120:	f000 fb21 	bl	8002766 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 8002124:	e023      	b.n	800216e <OnOffLedLight+0x222>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_GREEN_Pin, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	2104      	movs	r1, #4
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <OnOffLedLight+0x234>)
 800212c:	f000 fb1b 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002130:	e01d      	b.n	800216e <OnOffLedLight+0x222>
			else if(color == Red)
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11a      	bne.n	800216e <OnOffLedLight+0x222>
	    		if(state)
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <OnOffLedLight+0x1fe>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2102      	movs	r1, #2
 8002142:	480f      	ldr	r0, [pc, #60]	; (8002180 <OnOffLedLight+0x234>)
 8002144:	f000 fb0f 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002148:	e011      	b.n	800216e <OnOffLedLight+0x222>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	2102      	movs	r1, #2
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <OnOffLedLight+0x234>)
 8002150:	f000 fb09 	bl	8002766 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002154:	e00b      	b.n	800216e <OnOffLedLight+0x222>
	    /* 您可以有任意数量的 case 语句 */
	    default : /* 可选的 */
	    	break;
 8002156:	bf00      	nop
 8002158:	e00a      	b.n	8002170 <OnOffLedLight+0x224>
	       break; /* 可选的 */
 800215a:	bf00      	nop
 800215c:	e008      	b.n	8002170 <OnOffLedLight+0x224>
	       break; /* 可选的 */
 800215e:	bf00      	nop
 8002160:	e006      	b.n	8002170 <OnOffLedLight+0x224>
		   break; /* 可选的 */
 8002162:	bf00      	nop
 8002164:	e004      	b.n	8002170 <OnOffLedLight+0x224>
		   break; /* 可选的 */
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <OnOffLedLight+0x224>
		   break; /* 可选的 */
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <OnOffLedLight+0x224>
		   break; /* 可选的 */
 800216e:	bf00      	nop
	}
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40011000 	.word	0x40011000
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40010800 	.word	0x40010800

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_Init+0x28>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x28>)
 800218e:	f043 0310 	orr.w	r3, r3, #16
 8002192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f907 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	200f      	movs	r0, #15
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fd06 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f911 	bl	80023f6 <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 f8e7 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000000 	.word	0x20000000
 8002208:	20000008 	.word	0x20000008
 800220c:	20000004 	.word	0x20000004

08002210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_IncTick+0x1c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x20>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_IncTick+0x20>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000008 	.word	0x20000008
 8002230:	20000240 	.word	0x20000240

08002234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_GetTick+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000240 	.word	0x20000240

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff90 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff49 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff5e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff90 	bl	8002300 <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5f 	bl	80022ac <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffb0 	bl	8002364 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e179      	b.n	8002718 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002424:	2201      	movs	r2, #1
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8168 	bne.w	8002712 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a96      	ldr	r2, [pc, #600]	; (80026a0 <HAL_GPIO_Init+0x290>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d05e      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800244c:	4a94      	ldr	r2, [pc, #592]	; (80026a0 <HAL_GPIO_Init+0x290>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d875      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002452:	4a94      	ldr	r2, [pc, #592]	; (80026a4 <HAL_GPIO_Init+0x294>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d058      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002458:	4a92      	ldr	r2, [pc, #584]	; (80026a4 <HAL_GPIO_Init+0x294>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d86f      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800245e:	4a92      	ldr	r2, [pc, #584]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d052      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002464:	4a90      	ldr	r2, [pc, #576]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d869      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800246a:	4a90      	ldr	r2, [pc, #576]	; (80026ac <HAL_GPIO_Init+0x29c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04c      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002470:	4a8e      	ldr	r2, [pc, #568]	; (80026ac <HAL_GPIO_Init+0x29c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d863      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002476:	4a8e      	ldr	r2, [pc, #568]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d046      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800247c:	4a8c      	ldr	r2, [pc, #560]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d85d      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002482:	2b12      	cmp	r3, #18
 8002484:	d82a      	bhi.n	80024dc <HAL_GPIO_Init+0xcc>
 8002486:	2b12      	cmp	r3, #18
 8002488:	d859      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_GPIO_Init+0x80>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	0800250b 	.word	0x0800250b
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024f7 	.word	0x080024f7
 800249c:	08002539 	.word	0x08002539
 80024a0:	0800253f 	.word	0x0800253f
 80024a4:	0800253f 	.word	0x0800253f
 80024a8:	0800253f 	.word	0x0800253f
 80024ac:	0800253f 	.word	0x0800253f
 80024b0:	0800253f 	.word	0x0800253f
 80024b4:	0800253f 	.word	0x0800253f
 80024b8:	0800253f 	.word	0x0800253f
 80024bc:	0800253f 	.word	0x0800253f
 80024c0:	0800253f 	.word	0x0800253f
 80024c4:	0800253f 	.word	0x0800253f
 80024c8:	0800253f 	.word	0x0800253f
 80024cc:	0800253f 	.word	0x0800253f
 80024d0:	0800253f 	.word	0x0800253f
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	08002501 	.word	0x08002501
 80024dc:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_GPIO_Init+0x2a4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e2:	e02c      	b.n	800253e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	623b      	str	r3, [r7, #32]
          break;
 80024ea:	e029      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	3304      	adds	r3, #4
 80024f2:	623b      	str	r3, [r7, #32]
          break;
 80024f4:	e024      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	3308      	adds	r3, #8
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e01f      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	330c      	adds	r3, #12
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e01a      	b.n	8002540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002512:	2304      	movs	r3, #4
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e013      	b.n	8002540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	611a      	str	r2, [r3, #16]
          break;
 800252a:	e009      	b.n	8002540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	615a      	str	r2, [r3, #20]
          break;
 8002536:	e003      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x130>
          break;
 800253e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2bff      	cmp	r3, #255	; 0xff
 8002544:	d801      	bhi.n	800254a <HAL_GPIO_Init+0x13a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	e001      	b.n	800254e <HAL_GPIO_Init+0x13e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2bff      	cmp	r3, #255	; 0xff
 8002554:	d802      	bhi.n	800255c <HAL_GPIO_Init+0x14c>
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x152>
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3b08      	subs	r3, #8
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	210f      	movs	r1, #15
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80c1 	beq.w	8002712 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a8:	4a44      	ldr	r2, [pc, #272]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01f      	beq.n	8002614 <HAL_GPIO_Init+0x204>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <HAL_GPIO_Init+0x2b4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d019      	beq.n	8002610 <HAL_GPIO_Init+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_GPIO_Init+0x2b8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_GPIO_Init+0x1fc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a39      	ldr	r2, [pc, #228]	; (80026cc <HAL_GPIO_Init+0x2bc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00d      	beq.n	8002608 <HAL_GPIO_Init+0x1f8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_GPIO_Init+0x2c0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <HAL_GPIO_Init+0x1f4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_GPIO_Init+0x2c4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_GPIO_Init+0x1f0>
 80025fc:	2305      	movs	r3, #5
 80025fe:	e00a      	b.n	8002616 <HAL_GPIO_Init+0x206>
 8002600:	2306      	movs	r3, #6
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0x206>
 8002604:	2304      	movs	r3, #4
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x206>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x206>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x206>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x206>
 8002614:	2300      	movs	r3, #0
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002626:	4925      	ldr	r1, [pc, #148]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4924      	ldr	r1, [pc, #144]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	43db      	mvns	r3, r3
 8002656:	4920      	ldr	r1, [pc, #128]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002658:	4013      	ands	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	491a      	ldr	r1, [pc, #104]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	43db      	mvns	r3, r3
 800267e:	4916      	ldr	r1, [pc, #88]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002680:	4013      	ands	r3, r2
 8002682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d025      	beq.n	80026dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4910      	ldr	r1, [pc, #64]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e025      	b.n	80026ea <HAL_GPIO_Init+0x2da>
 800269e:	bf00      	nop
 80026a0:	10320000 	.word	0x10320000
 80026a4:	10310000 	.word	0x10310000
 80026a8:	10220000 	.word	0x10220000
 80026ac:	10210000 	.word	0x10210000
 80026b0:	10120000 	.word	0x10120000
 80026b4:	10110000 	.word	0x10110000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40010800 	.word	0x40010800
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40011400 	.word	0x40011400
 80026d0:	40011800 	.word	0x40011800
 80026d4:	40011c00 	.word	0x40011c00
 80026d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_GPIO_Init+0x324>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4913      	ldr	r1, [pc, #76]	; (8002734 <HAL_GPIO_Init+0x324>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_GPIO_Init+0x324>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_GPIO_Init+0x324>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	43db      	mvns	r3, r3
 800270c:	4909      	ldr	r1, [pc, #36]	; (8002734 <HAL_GPIO_Init+0x324>)
 800270e:	4013      	ands	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3301      	adds	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f47f ae7e 	bne.w	8002424 <HAL_GPIO_Init+0x14>
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	372c      	adds	r7, #44	; 0x2c
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e001      	b.n	800275a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]
 8002772:	4613      	mov	r3, r2
 8002774:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002776:	787b      	ldrb	r3, [r7, #1]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277c:	887a      	ldrh	r2, [r7, #2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002782:	e003      	b.n	800278c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e272      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x12c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e24c      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x76>
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7f      	ldr	r2, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a77      	ldr	r2, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xbc>
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a71      	ldr	r2, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fcde 	bl	8002234 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fcda 	bl	8002234 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e200      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe4>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fcca 	bl	8002234 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fcc6 	bl	8002234 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1ec      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x10c>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c0      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4939      	ldr	r1, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7ff fc7f 	bl	8002234 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7ff fc7b 	bl	8002234 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a1      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4927      	ldr	r1, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff fc5e 	bl	8002234 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff fc5a 	bl	8002234 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e180      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03a      	beq.n	8002a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7ff fc3e 	bl	8002234 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7ff fc3a 	bl	8002234 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e160      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f000 face 	bl	8002f7c <RCC_Delay>
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7ff fc24 	bl	8002234 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff fc20 	bl	8002234 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d908      	bls.n	8002a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e146      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	42420000 	.word	0x42420000
 8002a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e9      	bne.n	80029f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a6 	beq.w	8002b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7e      	ldr	r2, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fbe1 	bl	8002234 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7ff fbdd 	bl	8002234 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e103      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x312>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6213      	str	r3, [r2, #32]
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x356>
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aee:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff fb91 	bl	8002234 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7ff fb8d 	bl	8002234 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0b1      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x37e>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff fb7b 	bl	8002234 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7ff fb77 	bl	8002234 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e09b      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8087 	beq.w	8002c8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d061      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d146      	bne.n	8002c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7ff fb4b 	bl	8002234 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7ff fb47 	bl	8002234 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e06d      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4921      	ldr	r1, [pc, #132]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a19      	ldr	r1, [r3, #32]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	430b      	orrs	r3, r1
 8002bee:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fb1b 	bl	8002234 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7ff fb17 	bl	8002234 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e03d      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46a>
 8002c20:	e035      	b.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fb04 	bl	8002234 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff fb00 	bl	8002234 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e026      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x498>
 8002c4e:	e01e      	b.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e019      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x500>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0d0      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4965      	ldr	r1, [pc, #404]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d040      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d115      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e073      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06b      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4936      	ldr	r1, [pc, #216]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff fa52 	bl	8002234 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d94:	f7ff fa4e 	bl	8002234 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e053      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 020c 	and.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1eb      	bne.n	8002d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d210      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4922      	ldr	r1, [pc, #136]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1cc>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f9b0 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	080083d4 	.word	0x080083d4
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9e:	e027      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea2:	613b      	str	r3, [r7, #16]
      break;
 8002ea4:	e027      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c5b      	lsrs	r3, r3, #17
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed2:	fb03 f202 	mul.w	r2, r3, r2
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e004      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	613b      	str	r3, [r7, #16]
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	693b      	ldr	r3, [r7, #16]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	007a1200 	.word	0x007a1200
 8002f0c:	080083ec 	.word	0x080083ec
 8002f10:	080083fc 	.word	0x080083fc
 8002f14:	003d0900 	.word	0x003d0900

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f30:	f7ff fff2 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	080083e4 	.word	0x080083e4

08002f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f58:	f7ff ffde 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0adb      	lsrs	r3, r3, #11
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	080083e4 	.word	0x080083e4

08002f7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <RCC_Delay+0x34>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <RCC_Delay+0x38>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a5b      	lsrs	r3, r3, #9
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f98:	bf00      	nop
  }
  while (Delay --);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e5a      	subs	r2, r3, #1
 8002f9e:	60fa      	str	r2, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <RCC_Delay+0x1c>
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe ff30 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f91d 	bl	800323c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d16d      	bne.n	8003154 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Transmit+0x2c>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e066      	b.n	8003156 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7ff f8cd 	bl	8002234 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030cc:	e02a      	b.n	8003124 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f840 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e036      	b.n	8003156 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	3302      	adds	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e007      	b.n	8003116 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3301      	adds	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1cf      	bne.n	80030ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f810 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e006      	b.n	8003156 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b090      	sub	sp, #64	; 0x40
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	e050      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d04c      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0x30>
 800317e:	f7ff f859 	bl	8002234 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800318a:	429a      	cmp	r2, r3
 800318c:	d241      	bcs.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ae:	637a      	str	r2, [r7, #52]	; 0x34
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	613b      	str	r3, [r7, #16]
   return(result);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e2:	623a      	str	r2, [r7, #32]
 80031e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	69f9      	ldr	r1, [r7, #28]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e00f      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	429a      	cmp	r2, r3
 800322e:	d09f      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3740      	adds	r7, #64	; 0x40
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003276:	f023 030c 	bic.w	r3, r3, #12
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	430b      	orrs	r3, r1
 8003282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <UART_SetConfig+0x114>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff fe56 	bl	8002f54 <HAL_RCC_GetPCLK2Freq>
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	e002      	b.n	80032b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff fe3e 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80032b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	4a22      	ldr	r2, [pc, #136]	; (8003354 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	0119      	lsls	r1, r3, #4
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <UART_SetConfig+0x118>)
 80032ea:	fba3 0302 	umull	r0, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2064      	movs	r0, #100	; 0x64
 80032f2:	fb00 f303 	mul.w	r3, r0, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <UART_SetConfig+0x118>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003308:	4419      	add	r1, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <UART_SetConfig+0x118>)
 8003322:	fba3 0302 	umull	r0, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	440a      	add	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40013800 	.word	0x40013800
 8003354:	51eb851f 	.word	0x51eb851f

08003358 <__cvt>:
 8003358:	2b00      	cmp	r3, #0
 800335a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800335e:	461f      	mov	r7, r3
 8003360:	bfbb      	ittet	lt
 8003362:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003366:	461f      	movlt	r7, r3
 8003368:	2300      	movge	r3, #0
 800336a:	232d      	movlt	r3, #45	; 0x2d
 800336c:	b088      	sub	sp, #32
 800336e:	4614      	mov	r4, r2
 8003370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003372:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003374:	7013      	strb	r3, [r2, #0]
 8003376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003378:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800337c:	f023 0820 	bic.w	r8, r3, #32
 8003380:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003384:	d005      	beq.n	8003392 <__cvt+0x3a>
 8003386:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800338a:	d100      	bne.n	800338e <__cvt+0x36>
 800338c:	3501      	adds	r5, #1
 800338e:	2302      	movs	r3, #2
 8003390:	e000      	b.n	8003394 <__cvt+0x3c>
 8003392:	2303      	movs	r3, #3
 8003394:	aa07      	add	r2, sp, #28
 8003396:	9204      	str	r2, [sp, #16]
 8003398:	aa06      	add	r2, sp, #24
 800339a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800339e:	e9cd 3500 	strd	r3, r5, [sp]
 80033a2:	4622      	mov	r2, r4
 80033a4:	463b      	mov	r3, r7
 80033a6:	f001 f977 	bl	8004698 <_dtoa_r>
 80033aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033ae:	4606      	mov	r6, r0
 80033b0:	d102      	bne.n	80033b8 <__cvt+0x60>
 80033b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033b4:	07db      	lsls	r3, r3, #31
 80033b6:	d522      	bpl.n	80033fe <__cvt+0xa6>
 80033b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033bc:	eb06 0905 	add.w	r9, r6, r5
 80033c0:	d110      	bne.n	80033e4 <__cvt+0x8c>
 80033c2:	7833      	ldrb	r3, [r6, #0]
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d10a      	bne.n	80033de <__cvt+0x86>
 80033c8:	2200      	movs	r2, #0
 80033ca:	2300      	movs	r3, #0
 80033cc:	4620      	mov	r0, r4
 80033ce:	4639      	mov	r1, r7
 80033d0:	f7fd fb56 	bl	8000a80 <__aeabi_dcmpeq>
 80033d4:	b918      	cbnz	r0, 80033de <__cvt+0x86>
 80033d6:	f1c5 0501 	rsb	r5, r5, #1
 80033da:	f8ca 5000 	str.w	r5, [sl]
 80033de:	f8da 3000 	ldr.w	r3, [sl]
 80033e2:	4499      	add	r9, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	2300      	movs	r3, #0
 80033e8:	4620      	mov	r0, r4
 80033ea:	4639      	mov	r1, r7
 80033ec:	f7fd fb48 	bl	8000a80 <__aeabi_dcmpeq>
 80033f0:	b108      	cbz	r0, 80033f6 <__cvt+0x9e>
 80033f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80033f6:	2230      	movs	r2, #48	; 0x30
 80033f8:	9b07      	ldr	r3, [sp, #28]
 80033fa:	454b      	cmp	r3, r9
 80033fc:	d307      	bcc.n	800340e <__cvt+0xb6>
 80033fe:	4630      	mov	r0, r6
 8003400:	9b07      	ldr	r3, [sp, #28]
 8003402:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003404:	1b9b      	subs	r3, r3, r6
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	b008      	add	sp, #32
 800340a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	9107      	str	r1, [sp, #28]
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e7f0      	b.n	80033f8 <__cvt+0xa0>

08003416 <__exponent>:
 8003416:	4603      	mov	r3, r0
 8003418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800341a:	2900      	cmp	r1, #0
 800341c:	f803 2b02 	strb.w	r2, [r3], #2
 8003420:	bfb6      	itet	lt
 8003422:	222d      	movlt	r2, #45	; 0x2d
 8003424:	222b      	movge	r2, #43	; 0x2b
 8003426:	4249      	neglt	r1, r1
 8003428:	2909      	cmp	r1, #9
 800342a:	7042      	strb	r2, [r0, #1]
 800342c:	dd2a      	ble.n	8003484 <__exponent+0x6e>
 800342e:	f10d 0207 	add.w	r2, sp, #7
 8003432:	4617      	mov	r7, r2
 8003434:	260a      	movs	r6, #10
 8003436:	fb91 f5f6 	sdiv	r5, r1, r6
 800343a:	4694      	mov	ip, r2
 800343c:	fb06 1415 	mls	r4, r6, r5, r1
 8003440:	3430      	adds	r4, #48	; 0x30
 8003442:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003446:	460c      	mov	r4, r1
 8003448:	2c63      	cmp	r4, #99	; 0x63
 800344a:	4629      	mov	r1, r5
 800344c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003450:	dcf1      	bgt.n	8003436 <__exponent+0x20>
 8003452:	3130      	adds	r1, #48	; 0x30
 8003454:	f1ac 0402 	sub.w	r4, ip, #2
 8003458:	f802 1c01 	strb.w	r1, [r2, #-1]
 800345c:	4622      	mov	r2, r4
 800345e:	1c41      	adds	r1, r0, #1
 8003460:	42ba      	cmp	r2, r7
 8003462:	d30a      	bcc.n	800347a <__exponent+0x64>
 8003464:	f10d 0209 	add.w	r2, sp, #9
 8003468:	eba2 020c 	sub.w	r2, r2, ip
 800346c:	42bc      	cmp	r4, r7
 800346e:	bf88      	it	hi
 8003470:	2200      	movhi	r2, #0
 8003472:	4413      	add	r3, r2
 8003474:	1a18      	subs	r0, r3, r0
 8003476:	b003      	add	sp, #12
 8003478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800347e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003482:	e7ed      	b.n	8003460 <__exponent+0x4a>
 8003484:	2330      	movs	r3, #48	; 0x30
 8003486:	3130      	adds	r1, #48	; 0x30
 8003488:	7083      	strb	r3, [r0, #2]
 800348a:	70c1      	strb	r1, [r0, #3]
 800348c:	1d03      	adds	r3, r0, #4
 800348e:	e7f1      	b.n	8003474 <__exponent+0x5e>

08003490 <_printf_float>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	b091      	sub	sp, #68	; 0x44
 8003496:	460c      	mov	r4, r1
 8003498:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800349c:	4616      	mov	r6, r2
 800349e:	461f      	mov	r7, r3
 80034a0:	4605      	mov	r5, r0
 80034a2:	f000 ffe3 	bl	800446c <_localeconv_r>
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
 80034ac:	f7fc febc 	bl	8000228 <strlen>
 80034b0:	2300      	movs	r3, #0
 80034b2:	930e      	str	r3, [sp, #56]	; 0x38
 80034b4:	f8d8 3000 	ldr.w	r3, [r8]
 80034b8:	900a      	str	r0, [sp, #40]	; 0x28
 80034ba:	3307      	adds	r3, #7
 80034bc:	f023 0307 	bic.w	r3, r3, #7
 80034c0:	f103 0208 	add.w	r2, r3, #8
 80034c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034c8:	f8d4 b000 	ldr.w	fp, [r4]
 80034cc:	f8c8 2000 	str.w	r2, [r8]
 80034d0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80034d4:	4652      	mov	r2, sl
 80034d6:	4643      	mov	r3, r8
 80034d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034dc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80034e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80034e2:	f04f 32ff 	mov.w	r2, #4294967295
 80034e6:	4650      	mov	r0, sl
 80034e8:	4b9c      	ldr	r3, [pc, #624]	; (800375c <_printf_float+0x2cc>)
 80034ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034ec:	f7fd fafa 	bl	8000ae4 <__aeabi_dcmpun>
 80034f0:	bb70      	cbnz	r0, 8003550 <_printf_float+0xc0>
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	4650      	mov	r0, sl
 80034f8:	4b98      	ldr	r3, [pc, #608]	; (800375c <_printf_float+0x2cc>)
 80034fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034fc:	f7fd fad4 	bl	8000aa8 <__aeabi_dcmple>
 8003500:	bb30      	cbnz	r0, 8003550 <_printf_float+0xc0>
 8003502:	2200      	movs	r2, #0
 8003504:	2300      	movs	r3, #0
 8003506:	4650      	mov	r0, sl
 8003508:	4641      	mov	r1, r8
 800350a:	f7fd fac3 	bl	8000a94 <__aeabi_dcmplt>
 800350e:	b110      	cbz	r0, 8003516 <_printf_float+0x86>
 8003510:	232d      	movs	r3, #45	; 0x2d
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003516:	4a92      	ldr	r2, [pc, #584]	; (8003760 <_printf_float+0x2d0>)
 8003518:	4b92      	ldr	r3, [pc, #584]	; (8003764 <_printf_float+0x2d4>)
 800351a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800351e:	bf94      	ite	ls
 8003520:	4690      	movls	r8, r2
 8003522:	4698      	movhi	r8, r3
 8003524:	2303      	movs	r3, #3
 8003526:	f04f 0a00 	mov.w	sl, #0
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	f02b 0304 	bic.w	r3, fp, #4
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	4633      	mov	r3, r6
 8003534:	4621      	mov	r1, r4
 8003536:	4628      	mov	r0, r5
 8003538:	9700      	str	r7, [sp, #0]
 800353a:	aa0f      	add	r2, sp, #60	; 0x3c
 800353c:	f000 f9d6 	bl	80038ec <_printf_common>
 8003540:	3001      	adds	r0, #1
 8003542:	f040 8090 	bne.w	8003666 <_printf_float+0x1d6>
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	b011      	add	sp, #68	; 0x44
 800354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003550:	4652      	mov	r2, sl
 8003552:	4643      	mov	r3, r8
 8003554:	4650      	mov	r0, sl
 8003556:	4641      	mov	r1, r8
 8003558:	f7fd fac4 	bl	8000ae4 <__aeabi_dcmpun>
 800355c:	b148      	cbz	r0, 8003572 <_printf_float+0xe2>
 800355e:	f1b8 0f00 	cmp.w	r8, #0
 8003562:	bfb8      	it	lt
 8003564:	232d      	movlt	r3, #45	; 0x2d
 8003566:	4a80      	ldr	r2, [pc, #512]	; (8003768 <_printf_float+0x2d8>)
 8003568:	bfb8      	it	lt
 800356a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <_printf_float+0x2dc>)
 8003570:	e7d3      	b.n	800351a <_printf_float+0x8a>
 8003572:	6863      	ldr	r3, [r4, #4]
 8003574:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	d142      	bne.n	8003602 <_printf_float+0x172>
 800357c:	2306      	movs	r3, #6
 800357e:	6063      	str	r3, [r4, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	9206      	str	r2, [sp, #24]
 8003584:	aa0e      	add	r2, sp, #56	; 0x38
 8003586:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800358a:	aa0d      	add	r2, sp, #52	; 0x34
 800358c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003590:	9203      	str	r2, [sp, #12]
 8003592:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003596:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	4652      	mov	r2, sl
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4628      	mov	r0, r5
 80035a4:	4643      	mov	r3, r8
 80035a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80035a8:	f7ff fed6 	bl	8003358 <__cvt>
 80035ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035ae:	4680      	mov	r8, r0
 80035b0:	2947      	cmp	r1, #71	; 0x47
 80035b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035b4:	d108      	bne.n	80035c8 <_printf_float+0x138>
 80035b6:	1cc8      	adds	r0, r1, #3
 80035b8:	db02      	blt.n	80035c0 <_printf_float+0x130>
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	4299      	cmp	r1, r3
 80035be:	dd40      	ble.n	8003642 <_printf_float+0x1b2>
 80035c0:	f1a9 0902 	sub.w	r9, r9, #2
 80035c4:	fa5f f989 	uxtb.w	r9, r9
 80035c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035cc:	d81f      	bhi.n	800360e <_printf_float+0x17e>
 80035ce:	464a      	mov	r2, r9
 80035d0:	3901      	subs	r1, #1
 80035d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035d6:	910d      	str	r1, [sp, #52]	; 0x34
 80035d8:	f7ff ff1d 	bl	8003416 <__exponent>
 80035dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035de:	4682      	mov	sl, r0
 80035e0:	1813      	adds	r3, r2, r0
 80035e2:	2a01      	cmp	r2, #1
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	dc02      	bgt.n	80035ee <_printf_float+0x15e>
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	07d2      	lsls	r2, r2, #31
 80035ec:	d501      	bpl.n	80035f2 <_printf_float+0x162>
 80035ee:	3301      	adds	r3, #1
 80035f0:	6123      	str	r3, [r4, #16]
 80035f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d09b      	beq.n	8003532 <_printf_float+0xa2>
 80035fa:	232d      	movs	r3, #45	; 0x2d
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003600:	e797      	b.n	8003532 <_printf_float+0xa2>
 8003602:	2947      	cmp	r1, #71	; 0x47
 8003604:	d1bc      	bne.n	8003580 <_printf_float+0xf0>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ba      	bne.n	8003580 <_printf_float+0xf0>
 800360a:	2301      	movs	r3, #1
 800360c:	e7b7      	b.n	800357e <_printf_float+0xee>
 800360e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003612:	d118      	bne.n	8003646 <_printf_float+0x1b6>
 8003614:	2900      	cmp	r1, #0
 8003616:	6863      	ldr	r3, [r4, #4]
 8003618:	dd0b      	ble.n	8003632 <_printf_float+0x1a2>
 800361a:	6121      	str	r1, [r4, #16]
 800361c:	b913      	cbnz	r3, 8003624 <_printf_float+0x194>
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	07d0      	lsls	r0, r2, #31
 8003622:	d502      	bpl.n	800362a <_printf_float+0x19a>
 8003624:	3301      	adds	r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	6123      	str	r3, [r4, #16]
 800362a:	f04f 0a00 	mov.w	sl, #0
 800362e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003630:	e7df      	b.n	80035f2 <_printf_float+0x162>
 8003632:	b913      	cbnz	r3, 800363a <_printf_float+0x1aa>
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	07d2      	lsls	r2, r2, #31
 8003638:	d501      	bpl.n	800363e <_printf_float+0x1ae>
 800363a:	3302      	adds	r3, #2
 800363c:	e7f4      	b.n	8003628 <_printf_float+0x198>
 800363e:	2301      	movs	r3, #1
 8003640:	e7f2      	b.n	8003628 <_printf_float+0x198>
 8003642:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003648:	4299      	cmp	r1, r3
 800364a:	db05      	blt.n	8003658 <_printf_float+0x1c8>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	6121      	str	r1, [r4, #16]
 8003650:	07d8      	lsls	r0, r3, #31
 8003652:	d5ea      	bpl.n	800362a <_printf_float+0x19a>
 8003654:	1c4b      	adds	r3, r1, #1
 8003656:	e7e7      	b.n	8003628 <_printf_float+0x198>
 8003658:	2900      	cmp	r1, #0
 800365a:	bfcc      	ite	gt
 800365c:	2201      	movgt	r2, #1
 800365e:	f1c1 0202 	rsble	r2, r1, #2
 8003662:	4413      	add	r3, r2
 8003664:	e7e0      	b.n	8003628 <_printf_float+0x198>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	055a      	lsls	r2, r3, #21
 800366a:	d407      	bmi.n	800367c <_printf_float+0x1ec>
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	4642      	mov	r2, r8
 8003670:	4631      	mov	r1, r6
 8003672:	4628      	mov	r0, r5
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	d12b      	bne.n	80036d2 <_printf_float+0x242>
 800367a:	e764      	b.n	8003546 <_printf_float+0xb6>
 800367c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003680:	f240 80dd 	bls.w	800383e <_printf_float+0x3ae>
 8003684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003688:	2200      	movs	r2, #0
 800368a:	2300      	movs	r3, #0
 800368c:	f7fd f9f8 	bl	8000a80 <__aeabi_dcmpeq>
 8003690:	2800      	cmp	r0, #0
 8003692:	d033      	beq.n	80036fc <_printf_float+0x26c>
 8003694:	2301      	movs	r3, #1
 8003696:	4631      	mov	r1, r6
 8003698:	4628      	mov	r0, r5
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <_printf_float+0x2e0>)
 800369c:	47b8      	blx	r7
 800369e:	3001      	adds	r0, #1
 80036a0:	f43f af51 	beq.w	8003546 <_printf_float+0xb6>
 80036a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036a8:	429a      	cmp	r2, r3
 80036aa:	db02      	blt.n	80036b2 <_printf_float+0x222>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	07d8      	lsls	r0, r3, #31
 80036b0:	d50f      	bpl.n	80036d2 <_printf_float+0x242>
 80036b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	f43f af42 	beq.w	8003546 <_printf_float+0xb6>
 80036c2:	f04f 0800 	mov.w	r8, #0
 80036c6:	f104 091a 	add.w	r9, r4, #26
 80036ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036cc:	3b01      	subs	r3, #1
 80036ce:	4543      	cmp	r3, r8
 80036d0:	dc09      	bgt.n	80036e6 <_printf_float+0x256>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	079b      	lsls	r3, r3, #30
 80036d6:	f100 8104 	bmi.w	80038e2 <_printf_float+0x452>
 80036da:	68e0      	ldr	r0, [r4, #12]
 80036dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036de:	4298      	cmp	r0, r3
 80036e0:	bfb8      	it	lt
 80036e2:	4618      	movlt	r0, r3
 80036e4:	e731      	b.n	800354a <_printf_float+0xba>
 80036e6:	2301      	movs	r3, #1
 80036e8:	464a      	mov	r2, r9
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f af28 	beq.w	8003546 <_printf_float+0xb6>
 80036f6:	f108 0801 	add.w	r8, r8, #1
 80036fa:	e7e6      	b.n	80036ca <_printf_float+0x23a>
 80036fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dc38      	bgt.n	8003774 <_printf_float+0x2e4>
 8003702:	2301      	movs	r3, #1
 8003704:	4631      	mov	r1, r6
 8003706:	4628      	mov	r0, r5
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <_printf_float+0x2e0>)
 800370a:	47b8      	blx	r7
 800370c:	3001      	adds	r0, #1
 800370e:	f43f af1a 	beq.w	8003546 <_printf_float+0xb6>
 8003712:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003716:	4313      	orrs	r3, r2
 8003718:	d102      	bne.n	8003720 <_printf_float+0x290>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	07d9      	lsls	r1, r3, #31
 800371e:	d5d8      	bpl.n	80036d2 <_printf_float+0x242>
 8003720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003724:	4631      	mov	r1, r6
 8003726:	4628      	mov	r0, r5
 8003728:	47b8      	blx	r7
 800372a:	3001      	adds	r0, #1
 800372c:	f43f af0b 	beq.w	8003546 <_printf_float+0xb6>
 8003730:	f04f 0900 	mov.w	r9, #0
 8003734:	f104 0a1a 	add.w	sl, r4, #26
 8003738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800373a:	425b      	negs	r3, r3
 800373c:	454b      	cmp	r3, r9
 800373e:	dc01      	bgt.n	8003744 <_printf_float+0x2b4>
 8003740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003742:	e794      	b.n	800366e <_printf_float+0x1de>
 8003744:	2301      	movs	r3, #1
 8003746:	4652      	mov	r2, sl
 8003748:	4631      	mov	r1, r6
 800374a:	4628      	mov	r0, r5
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	f43f aef9 	beq.w	8003546 <_printf_float+0xb6>
 8003754:	f109 0901 	add.w	r9, r9, #1
 8003758:	e7ee      	b.n	8003738 <_printf_float+0x2a8>
 800375a:	bf00      	nop
 800375c:	7fefffff 	.word	0x7fefffff
 8003760:	080083fe 	.word	0x080083fe
 8003764:	08008402 	.word	0x08008402
 8003768:	08008406 	.word	0x08008406
 800376c:	0800840a 	.word	0x0800840a
 8003770:	0800840e 	.word	0x0800840e
 8003774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003778:	429a      	cmp	r2, r3
 800377a:	bfa8      	it	ge
 800377c:	461a      	movge	r2, r3
 800377e:	2a00      	cmp	r2, #0
 8003780:	4691      	mov	r9, r2
 8003782:	dc37      	bgt.n	80037f4 <_printf_float+0x364>
 8003784:	f04f 0b00 	mov.w	fp, #0
 8003788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800378c:	f104 021a 	add.w	r2, r4, #26
 8003790:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003794:	ebaa 0309 	sub.w	r3, sl, r9
 8003798:	455b      	cmp	r3, fp
 800379a:	dc33      	bgt.n	8003804 <_printf_float+0x374>
 800379c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037a0:	429a      	cmp	r2, r3
 80037a2:	db3b      	blt.n	800381c <_printf_float+0x38c>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	07da      	lsls	r2, r3, #31
 80037a8:	d438      	bmi.n	800381c <_printf_float+0x38c>
 80037aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80037ae:	eba2 0903 	sub.w	r9, r2, r3
 80037b2:	eba2 020a 	sub.w	r2, r2, sl
 80037b6:	4591      	cmp	r9, r2
 80037b8:	bfa8      	it	ge
 80037ba:	4691      	movge	r9, r2
 80037bc:	f1b9 0f00 	cmp.w	r9, #0
 80037c0:	dc34      	bgt.n	800382c <_printf_float+0x39c>
 80037c2:	f04f 0800 	mov.w	r8, #0
 80037c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ca:	f104 0a1a 	add.w	sl, r4, #26
 80037ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	eba3 0309 	sub.w	r3, r3, r9
 80037d8:	4543      	cmp	r3, r8
 80037da:	f77f af7a 	ble.w	80036d2 <_printf_float+0x242>
 80037de:	2301      	movs	r3, #1
 80037e0:	4652      	mov	r2, sl
 80037e2:	4631      	mov	r1, r6
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b8      	blx	r7
 80037e8:	3001      	adds	r0, #1
 80037ea:	f43f aeac 	beq.w	8003546 <_printf_float+0xb6>
 80037ee:	f108 0801 	add.w	r8, r8, #1
 80037f2:	e7ec      	b.n	80037ce <_printf_float+0x33e>
 80037f4:	4613      	mov	r3, r2
 80037f6:	4631      	mov	r1, r6
 80037f8:	4642      	mov	r2, r8
 80037fa:	4628      	mov	r0, r5
 80037fc:	47b8      	blx	r7
 80037fe:	3001      	adds	r0, #1
 8003800:	d1c0      	bne.n	8003784 <_printf_float+0x2f4>
 8003802:	e6a0      	b.n	8003546 <_printf_float+0xb6>
 8003804:	2301      	movs	r3, #1
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	920b      	str	r2, [sp, #44]	; 0x2c
 800380c:	47b8      	blx	r7
 800380e:	3001      	adds	r0, #1
 8003810:	f43f ae99 	beq.w	8003546 <_printf_float+0xb6>
 8003814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003816:	f10b 0b01 	add.w	fp, fp, #1
 800381a:	e7b9      	b.n	8003790 <_printf_float+0x300>
 800381c:	4631      	mov	r1, r6
 800381e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003822:	4628      	mov	r0, r5
 8003824:	47b8      	blx	r7
 8003826:	3001      	adds	r0, #1
 8003828:	d1bf      	bne.n	80037aa <_printf_float+0x31a>
 800382a:	e68c      	b.n	8003546 <_printf_float+0xb6>
 800382c:	464b      	mov	r3, r9
 800382e:	4631      	mov	r1, r6
 8003830:	4628      	mov	r0, r5
 8003832:	eb08 020a 	add.w	r2, r8, sl
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	d1c2      	bne.n	80037c2 <_printf_float+0x332>
 800383c:	e683      	b.n	8003546 <_printf_float+0xb6>
 800383e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003840:	2a01      	cmp	r2, #1
 8003842:	dc01      	bgt.n	8003848 <_printf_float+0x3b8>
 8003844:	07db      	lsls	r3, r3, #31
 8003846:	d539      	bpl.n	80038bc <_printf_float+0x42c>
 8003848:	2301      	movs	r3, #1
 800384a:	4642      	mov	r2, r8
 800384c:	4631      	mov	r1, r6
 800384e:	4628      	mov	r0, r5
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	f43f ae77 	beq.w	8003546 <_printf_float+0xb6>
 8003858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f ae6f 	beq.w	8003546 <_printf_float+0xb6>
 8003868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800386c:	2200      	movs	r2, #0
 800386e:	2300      	movs	r3, #0
 8003870:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003874:	f7fd f904 	bl	8000a80 <__aeabi_dcmpeq>
 8003878:	b9d8      	cbnz	r0, 80038b2 <_printf_float+0x422>
 800387a:	f109 33ff 	add.w	r3, r9, #4294967295
 800387e:	f108 0201 	add.w	r2, r8, #1
 8003882:	4631      	mov	r1, r6
 8003884:	4628      	mov	r0, r5
 8003886:	47b8      	blx	r7
 8003888:	3001      	adds	r0, #1
 800388a:	d10e      	bne.n	80038aa <_printf_float+0x41a>
 800388c:	e65b      	b.n	8003546 <_printf_float+0xb6>
 800388e:	2301      	movs	r3, #1
 8003890:	464a      	mov	r2, r9
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	47b8      	blx	r7
 8003898:	3001      	adds	r0, #1
 800389a:	f43f ae54 	beq.w	8003546 <_printf_float+0xb6>
 800389e:	f108 0801 	add.w	r8, r8, #1
 80038a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038a4:	3b01      	subs	r3, #1
 80038a6:	4543      	cmp	r3, r8
 80038a8:	dcf1      	bgt.n	800388e <_printf_float+0x3fe>
 80038aa:	4653      	mov	r3, sl
 80038ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038b0:	e6de      	b.n	8003670 <_printf_float+0x1e0>
 80038b2:	f04f 0800 	mov.w	r8, #0
 80038b6:	f104 091a 	add.w	r9, r4, #26
 80038ba:	e7f2      	b.n	80038a2 <_printf_float+0x412>
 80038bc:	2301      	movs	r3, #1
 80038be:	4642      	mov	r2, r8
 80038c0:	e7df      	b.n	8003882 <_printf_float+0x3f2>
 80038c2:	2301      	movs	r3, #1
 80038c4:	464a      	mov	r2, r9
 80038c6:	4631      	mov	r1, r6
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b8      	blx	r7
 80038cc:	3001      	adds	r0, #1
 80038ce:	f43f ae3a 	beq.w	8003546 <_printf_float+0xb6>
 80038d2:	f108 0801 	add.w	r8, r8, #1
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038da:	1a5b      	subs	r3, r3, r1
 80038dc:	4543      	cmp	r3, r8
 80038de:	dcf0      	bgt.n	80038c2 <_printf_float+0x432>
 80038e0:	e6fb      	b.n	80036da <_printf_float+0x24a>
 80038e2:	f04f 0800 	mov.w	r8, #0
 80038e6:	f104 0919 	add.w	r9, r4, #25
 80038ea:	e7f4      	b.n	80038d6 <_printf_float+0x446>

080038ec <_printf_common>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	4616      	mov	r6, r2
 80038f2:	4699      	mov	r9, r3
 80038f4:	688a      	ldr	r2, [r1, #8]
 80038f6:	690b      	ldr	r3, [r1, #16]
 80038f8:	4607      	mov	r7, r0
 80038fa:	4293      	cmp	r3, r2
 80038fc:	bfb8      	it	lt
 80038fe:	4613      	movlt	r3, r2
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003906:	460c      	mov	r4, r1
 8003908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800390c:	b10a      	cbz	r2, 8003912 <_printf_common+0x26>
 800390e:	3301      	adds	r3, #1
 8003910:	6033      	str	r3, [r6, #0]
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	0699      	lsls	r1, r3, #26
 8003916:	bf42      	ittt	mi
 8003918:	6833      	ldrmi	r3, [r6, #0]
 800391a:	3302      	addmi	r3, #2
 800391c:	6033      	strmi	r3, [r6, #0]
 800391e:	6825      	ldr	r5, [r4, #0]
 8003920:	f015 0506 	ands.w	r5, r5, #6
 8003924:	d106      	bne.n	8003934 <_printf_common+0x48>
 8003926:	f104 0a19 	add.w	sl, r4, #25
 800392a:	68e3      	ldr	r3, [r4, #12]
 800392c:	6832      	ldr	r2, [r6, #0]
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	42ab      	cmp	r3, r5
 8003932:	dc2b      	bgt.n	800398c <_printf_common+0xa0>
 8003934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003938:	1e13      	subs	r3, r2, #0
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	bf18      	it	ne
 800393e:	2301      	movne	r3, #1
 8003940:	0692      	lsls	r2, r2, #26
 8003942:	d430      	bmi.n	80039a6 <_printf_common+0xba>
 8003944:	4649      	mov	r1, r9
 8003946:	4638      	mov	r0, r7
 8003948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d023      	beq.n	800399a <_printf_common+0xae>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	f003 0306 	and.w	r3, r3, #6
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf14      	ite	ne
 800395e:	2500      	movne	r5, #0
 8003960:	6833      	ldreq	r3, [r6, #0]
 8003962:	f04f 0600 	mov.w	r6, #0
 8003966:	bf08      	it	eq
 8003968:	68e5      	ldreq	r5, [r4, #12]
 800396a:	f104 041a 	add.w	r4, r4, #26
 800396e:	bf08      	it	eq
 8003970:	1aed      	subeq	r5, r5, r3
 8003972:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003976:	bf08      	it	eq
 8003978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800397c:	4293      	cmp	r3, r2
 800397e:	bfc4      	itt	gt
 8003980:	1a9b      	subgt	r3, r3, r2
 8003982:	18ed      	addgt	r5, r5, r3
 8003984:	42b5      	cmp	r5, r6
 8003986:	d11a      	bne.n	80039be <_printf_common+0xd2>
 8003988:	2000      	movs	r0, #0
 800398a:	e008      	b.n	800399e <_printf_common+0xb2>
 800398c:	2301      	movs	r3, #1
 800398e:	4652      	mov	r2, sl
 8003990:	4649      	mov	r1, r9
 8003992:	4638      	mov	r0, r7
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d103      	bne.n	80039a2 <_printf_common+0xb6>
 800399a:	f04f 30ff 	mov.w	r0, #4294967295
 800399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a2:	3501      	adds	r5, #1
 80039a4:	e7c1      	b.n	800392a <_printf_common+0x3e>
 80039a6:	2030      	movs	r0, #48	; 0x30
 80039a8:	18e1      	adds	r1, r4, r3
 80039aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b4:	4422      	add	r2, r4
 80039b6:	3302      	adds	r3, #2
 80039b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039bc:	e7c2      	b.n	8003944 <_printf_common+0x58>
 80039be:	2301      	movs	r3, #1
 80039c0:	4622      	mov	r2, r4
 80039c2:	4649      	mov	r1, r9
 80039c4:	4638      	mov	r0, r7
 80039c6:	47c0      	blx	r8
 80039c8:	3001      	adds	r0, #1
 80039ca:	d0e6      	beq.n	800399a <_printf_common+0xae>
 80039cc:	3601      	adds	r6, #1
 80039ce:	e7d9      	b.n	8003984 <_printf_common+0x98>

080039d0 <_printf_i>:
 80039d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	7e0f      	ldrb	r7, [r1, #24]
 80039d6:	4691      	mov	r9, r2
 80039d8:	2f78      	cmp	r7, #120	; 0x78
 80039da:	4680      	mov	r8, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	469a      	mov	sl, r3
 80039e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039e6:	d807      	bhi.n	80039f8 <_printf_i+0x28>
 80039e8:	2f62      	cmp	r7, #98	; 0x62
 80039ea:	d80a      	bhi.n	8003a02 <_printf_i+0x32>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	f000 80d5 	beq.w	8003b9c <_printf_i+0x1cc>
 80039f2:	2f58      	cmp	r7, #88	; 0x58
 80039f4:	f000 80c1 	beq.w	8003b7a <_printf_i+0x1aa>
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a00:	e03a      	b.n	8003a78 <_printf_i+0xa8>
 8003a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a06:	2b15      	cmp	r3, #21
 8003a08:	d8f6      	bhi.n	80039f8 <_printf_i+0x28>
 8003a0a:	a101      	add	r1, pc, #4	; (adr r1, 8003a10 <_printf_i+0x40>)
 8003a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	080039f9 	.word	0x080039f9
 8003a1c:	080039f9 	.word	0x080039f9
 8003a20:	080039f9 	.word	0x080039f9
 8003a24:	080039f9 	.word	0x080039f9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039f9 	.word	0x080039f9
 8003a30:	080039f9 	.word	0x080039f9
 8003a34:	080039f9 	.word	0x080039f9
 8003a38:	080039f9 	.word	0x080039f9
 8003a3c:	08003b83 	.word	0x08003b83
 8003a40:	08003aa9 	.word	0x08003aa9
 8003a44:	08003b3d 	.word	0x08003b3d
 8003a48:	080039f9 	.word	0x080039f9
 8003a4c:	080039f9 	.word	0x080039f9
 8003a50:	08003ba5 	.word	0x08003ba5
 8003a54:	080039f9 	.word	0x080039f9
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	080039f9 	.word	0x080039f9
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003b45 	.word	0x08003b45
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a0      	b.n	8003bbe <_printf_i+0x1ee>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	682b      	ldr	r3, [r5, #0]
 8003a80:	0607      	lsls	r7, r0, #24
 8003a82:	f103 0104 	add.w	r1, r3, #4
 8003a86:	6029      	str	r1, [r5, #0]
 8003a88:	d501      	bpl.n	8003a8e <_printf_i+0xbe>
 8003a8a:	681e      	ldr	r6, [r3, #0]
 8003a8c:	e003      	b.n	8003a96 <_printf_i+0xc6>
 8003a8e:	0646      	lsls	r6, r0, #25
 8003a90:	d5fb      	bpl.n	8003a8a <_printf_i+0xba>
 8003a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	da03      	bge.n	8003aa2 <_printf_i+0xd2>
 8003a9a:	232d      	movs	r3, #45	; 0x2d
 8003a9c:	4276      	negs	r6, r6
 8003a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	4859      	ldr	r0, [pc, #356]	; (8003c0c <_printf_i+0x23c>)
 8003aa6:	e012      	b.n	8003ace <_printf_i+0xfe>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	1d19      	adds	r1, r3, #4
 8003aae:	6029      	str	r1, [r5, #0]
 8003ab0:	0605      	lsls	r5, r0, #24
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0xe8>
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0xee>
 8003ab8:	0641      	lsls	r1, r0, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0xe4>
 8003abc:	881e      	ldrh	r6, [r3, #0]
 8003abe:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2308      	moveq	r3, #8
 8003ac4:	230a      	movne	r3, #10
 8003ac6:	4851      	ldr	r0, [pc, #324]	; (8003c0c <_printf_i+0x23c>)
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ace:	6865      	ldr	r5, [r4, #4]
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	bfa8      	it	ge
 8003ad4:	6821      	ldrge	r1, [r4, #0]
 8003ad6:	60a5      	str	r5, [r4, #8]
 8003ad8:	bfa4      	itt	ge
 8003ada:	f021 0104 	bicge.w	r1, r1, #4
 8003ade:	6021      	strge	r1, [r4, #0]
 8003ae0:	b90e      	cbnz	r6, 8003ae6 <_printf_i+0x116>
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	d04b      	beq.n	8003b7e <_printf_i+0x1ae>
 8003ae6:	4615      	mov	r5, r2
 8003ae8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aec:	fb03 6711 	mls	r7, r3, r1, r6
 8003af0:	5dc7      	ldrb	r7, [r0, r7]
 8003af2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003af6:	4637      	mov	r7, r6
 8003af8:	42bb      	cmp	r3, r7
 8003afa:	460e      	mov	r6, r1
 8003afc:	d9f4      	bls.n	8003ae8 <_printf_i+0x118>
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d10b      	bne.n	8003b1a <_printf_i+0x14a>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	07de      	lsls	r6, r3, #31
 8003b06:	d508      	bpl.n	8003b1a <_printf_i+0x14a>
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	6861      	ldr	r1, [r4, #4]
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	bfde      	ittt	le
 8003b10:	2330      	movle	r3, #48	; 0x30
 8003b12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b1a:	1b52      	subs	r2, r2, r5
 8003b1c:	6122      	str	r2, [r4, #16]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	4621      	mov	r1, r4
 8003b22:	4640      	mov	r0, r8
 8003b24:	f8cd a000 	str.w	sl, [sp]
 8003b28:	aa03      	add	r2, sp, #12
 8003b2a:	f7ff fedf 	bl	80038ec <_printf_common>
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d14a      	bne.n	8003bc8 <_printf_i+0x1f8>
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	b004      	add	sp, #16
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f043 0320 	orr.w	r3, r3, #32
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	2778      	movs	r7, #120	; 0x78
 8003b46:	4832      	ldr	r0, [pc, #200]	; (8003c10 <_printf_i+0x240>)
 8003b48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	6829      	ldr	r1, [r5, #0]
 8003b50:	061f      	lsls	r7, r3, #24
 8003b52:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b56:	d402      	bmi.n	8003b5e <_printf_i+0x18e>
 8003b58:	065f      	lsls	r7, r3, #25
 8003b5a:	bf48      	it	mi
 8003b5c:	b2b6      	uxthmi	r6, r6
 8003b5e:	07df      	lsls	r7, r3, #31
 8003b60:	bf48      	it	mi
 8003b62:	f043 0320 	orrmi.w	r3, r3, #32
 8003b66:	6029      	str	r1, [r5, #0]
 8003b68:	bf48      	it	mi
 8003b6a:	6023      	strmi	r3, [r4, #0]
 8003b6c:	b91e      	cbnz	r6, 8003b76 <_printf_i+0x1a6>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	f023 0320 	bic.w	r3, r3, #32
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	2310      	movs	r3, #16
 8003b78:	e7a6      	b.n	8003ac8 <_printf_i+0xf8>
 8003b7a:	4824      	ldr	r0, [pc, #144]	; (8003c0c <_printf_i+0x23c>)
 8003b7c:	e7e4      	b.n	8003b48 <_printf_i+0x178>
 8003b7e:	4615      	mov	r5, r2
 8003b80:	e7bd      	b.n	8003afe <_printf_i+0x12e>
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	6826      	ldr	r6, [r4, #0]
 8003b86:	1d18      	adds	r0, r3, #4
 8003b88:	6961      	ldr	r1, [r4, #20]
 8003b8a:	6028      	str	r0, [r5, #0]
 8003b8c:	0635      	lsls	r5, r6, #24
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	d501      	bpl.n	8003b96 <_printf_i+0x1c6>
 8003b92:	6019      	str	r1, [r3, #0]
 8003b94:	e002      	b.n	8003b9c <_printf_i+0x1cc>
 8003b96:	0670      	lsls	r0, r6, #25
 8003b98:	d5fb      	bpl.n	8003b92 <_printf_i+0x1c2>
 8003b9a:	8019      	strh	r1, [r3, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4615      	mov	r5, r2
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	e7bc      	b.n	8003b1e <_printf_i+0x14e>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	602a      	str	r2, [r5, #0]
 8003bac:	681d      	ldr	r5, [r3, #0]
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fcd2 	bl	800455a <memchr>
 8003bb6:	b108      	cbz	r0, 8003bbc <_printf_i+0x1ec>
 8003bb8:	1b40      	subs	r0, r0, r5
 8003bba:	6060      	str	r0, [r4, #4]
 8003bbc:	6863      	ldr	r3, [r4, #4]
 8003bbe:	6123      	str	r3, [r4, #16]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc6:	e7aa      	b.n	8003b1e <_printf_i+0x14e>
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	47d0      	blx	sl
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d0ad      	beq.n	8003b32 <_printf_i+0x162>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	079b      	lsls	r3, r3, #30
 8003bda:	d413      	bmi.n	8003c04 <_printf_i+0x234>
 8003bdc:	68e0      	ldr	r0, [r4, #12]
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	4298      	cmp	r0, r3
 8003be2:	bfb8      	it	lt
 8003be4:	4618      	movlt	r0, r3
 8003be6:	e7a6      	b.n	8003b36 <_printf_i+0x166>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4632      	mov	r2, r6
 8003bec:	4649      	mov	r1, r9
 8003bee:	4640      	mov	r0, r8
 8003bf0:	47d0      	blx	sl
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d09d      	beq.n	8003b32 <_printf_i+0x162>
 8003bf6:	3501      	adds	r5, #1
 8003bf8:	68e3      	ldr	r3, [r4, #12]
 8003bfa:	9903      	ldr	r1, [sp, #12]
 8003bfc:	1a5b      	subs	r3, r3, r1
 8003bfe:	42ab      	cmp	r3, r5
 8003c00:	dcf2      	bgt.n	8003be8 <_printf_i+0x218>
 8003c02:	e7eb      	b.n	8003bdc <_printf_i+0x20c>
 8003c04:	2500      	movs	r5, #0
 8003c06:	f104 0619 	add.w	r6, r4, #25
 8003c0a:	e7f5      	b.n	8003bf8 <_printf_i+0x228>
 8003c0c:	08008410 	.word	0x08008410
 8003c10:	08008421 	.word	0x08008421

08003c14 <_scanf_float>:
 8003c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	688b      	ldr	r3, [r1, #8]
 8003c1e:	4617      	mov	r7, r2
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003c26:	bf85      	ittet	hi
 8003c28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003c2c:	195b      	addhi	r3, r3, r5
 8003c2e:	2300      	movls	r3, #0
 8003c30:	9302      	strhi	r3, [sp, #8]
 8003c32:	bf88      	it	hi
 8003c34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003c38:	468b      	mov	fp, r1
 8003c3a:	f04f 0500 	mov.w	r5, #0
 8003c3e:	bf8c      	ite	hi
 8003c40:	608b      	strhi	r3, [r1, #8]
 8003c42:	9302      	strls	r3, [sp, #8]
 8003c44:	680b      	ldr	r3, [r1, #0]
 8003c46:	4680      	mov	r8, r0
 8003c48:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003c4c:	f84b 3b1c 	str.w	r3, [fp], #28
 8003c50:	460c      	mov	r4, r1
 8003c52:	465e      	mov	r6, fp
 8003c54:	46aa      	mov	sl, r5
 8003c56:	46a9      	mov	r9, r5
 8003c58:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c5c:	9501      	str	r5, [sp, #4]
 8003c5e:	68a2      	ldr	r2, [r4, #8]
 8003c60:	b152      	cbz	r2, 8003c78 <_scanf_float+0x64>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b4e      	cmp	r3, #78	; 0x4e
 8003c68:	d864      	bhi.n	8003d34 <_scanf_float+0x120>
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d83c      	bhi.n	8003ce8 <_scanf_float+0xd4>
 8003c6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003c72:	b2c8      	uxtb	r0, r1
 8003c74:	280e      	cmp	r0, #14
 8003c76:	d93a      	bls.n	8003cee <_scanf_float+0xda>
 8003c78:	f1b9 0f00 	cmp.w	r9, #0
 8003c7c:	d003      	beq.n	8003c86 <_scanf_float+0x72>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c8a:	f1ba 0f01 	cmp.w	sl, #1
 8003c8e:	f200 8113 	bhi.w	8003eb8 <_scanf_float+0x2a4>
 8003c92:	455e      	cmp	r6, fp
 8003c94:	f200 8105 	bhi.w	8003ea2 <_scanf_float+0x28e>
 8003c98:	2501      	movs	r5, #1
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	b007      	add	sp, #28
 8003c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003ca6:	2a0d      	cmp	r2, #13
 8003ca8:	d8e6      	bhi.n	8003c78 <_scanf_float+0x64>
 8003caa:	a101      	add	r1, pc, #4	; (adr r1, 8003cb0 <_scanf_float+0x9c>)
 8003cac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cb0:	08003def 	.word	0x08003def
 8003cb4:	08003c79 	.word	0x08003c79
 8003cb8:	08003c79 	.word	0x08003c79
 8003cbc:	08003c79 	.word	0x08003c79
 8003cc0:	08003e4f 	.word	0x08003e4f
 8003cc4:	08003e27 	.word	0x08003e27
 8003cc8:	08003c79 	.word	0x08003c79
 8003ccc:	08003c79 	.word	0x08003c79
 8003cd0:	08003dfd 	.word	0x08003dfd
 8003cd4:	08003c79 	.word	0x08003c79
 8003cd8:	08003c79 	.word	0x08003c79
 8003cdc:	08003c79 	.word	0x08003c79
 8003ce0:	08003c79 	.word	0x08003c79
 8003ce4:	08003db5 	.word	0x08003db5
 8003ce8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003cec:	e7db      	b.n	8003ca6 <_scanf_float+0x92>
 8003cee:	290e      	cmp	r1, #14
 8003cf0:	d8c2      	bhi.n	8003c78 <_scanf_float+0x64>
 8003cf2:	a001      	add	r0, pc, #4	; (adr r0, 8003cf8 <_scanf_float+0xe4>)
 8003cf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003cf8:	08003da7 	.word	0x08003da7
 8003cfc:	08003c79 	.word	0x08003c79
 8003d00:	08003da7 	.word	0x08003da7
 8003d04:	08003e3b 	.word	0x08003e3b
 8003d08:	08003c79 	.word	0x08003c79
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d91 	.word	0x08003d91
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d91 	.word	0x08003d91
 8003d20:	08003d91 	.word	0x08003d91
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003d91 	.word	0x08003d91
 8003d34:	2b6e      	cmp	r3, #110	; 0x6e
 8003d36:	d809      	bhi.n	8003d4c <_scanf_float+0x138>
 8003d38:	2b60      	cmp	r3, #96	; 0x60
 8003d3a:	d8b2      	bhi.n	8003ca2 <_scanf_float+0x8e>
 8003d3c:	2b54      	cmp	r3, #84	; 0x54
 8003d3e:	d077      	beq.n	8003e30 <_scanf_float+0x21c>
 8003d40:	2b59      	cmp	r3, #89	; 0x59
 8003d42:	d199      	bne.n	8003c78 <_scanf_float+0x64>
 8003d44:	2d07      	cmp	r5, #7
 8003d46:	d197      	bne.n	8003c78 <_scanf_float+0x64>
 8003d48:	2508      	movs	r5, #8
 8003d4a:	e029      	b.n	8003da0 <_scanf_float+0x18c>
 8003d4c:	2b74      	cmp	r3, #116	; 0x74
 8003d4e:	d06f      	beq.n	8003e30 <_scanf_float+0x21c>
 8003d50:	2b79      	cmp	r3, #121	; 0x79
 8003d52:	e7f6      	b.n	8003d42 <_scanf_float+0x12e>
 8003d54:	6821      	ldr	r1, [r4, #0]
 8003d56:	05c8      	lsls	r0, r1, #23
 8003d58:	d51a      	bpl.n	8003d90 <_scanf_float+0x17c>
 8003d5a:	9b02      	ldr	r3, [sp, #8]
 8003d5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003d60:	6021      	str	r1, [r4, #0]
 8003d62:	f109 0901 	add.w	r9, r9, #1
 8003d66:	b11b      	cbz	r3, 8003d70 <_scanf_float+0x15c>
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	3201      	adds	r2, #1
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	60a2      	str	r2, [r4, #8]
 8003d70:	68a3      	ldr	r3, [r4, #8]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	607b      	str	r3, [r7, #4]
 8003d84:	f340 8084 	ble.w	8003e90 <_scanf_float+0x27c>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	e766      	b.n	8003c5e <_scanf_float+0x4a>
 8003d90:	eb1a 0f05 	cmn.w	sl, r5
 8003d94:	f47f af70 	bne.w	8003c78 <_scanf_float+0x64>
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	f806 3b01 	strb.w	r3, [r6], #1
 8003da4:	e7e4      	b.n	8003d70 <_scanf_float+0x15c>
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	0610      	lsls	r0, r2, #24
 8003daa:	f57f af65 	bpl.w	8003c78 <_scanf_float+0x64>
 8003dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db2:	e7f4      	b.n	8003d9e <_scanf_float+0x18a>
 8003db4:	f1ba 0f00 	cmp.w	sl, #0
 8003db8:	d10e      	bne.n	8003dd8 <_scanf_float+0x1c4>
 8003dba:	f1b9 0f00 	cmp.w	r9, #0
 8003dbe:	d10e      	bne.n	8003dde <_scanf_float+0x1ca>
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003dc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003dca:	d108      	bne.n	8003dde <_scanf_float+0x1ca>
 8003dcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003dd0:	f04f 0a01 	mov.w	sl, #1
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	e7e3      	b.n	8003da0 <_scanf_float+0x18c>
 8003dd8:	f1ba 0f02 	cmp.w	sl, #2
 8003ddc:	d055      	beq.n	8003e8a <_scanf_float+0x276>
 8003dde:	2d01      	cmp	r5, #1
 8003de0:	d002      	beq.n	8003de8 <_scanf_float+0x1d4>
 8003de2:	2d04      	cmp	r5, #4
 8003de4:	f47f af48 	bne.w	8003c78 <_scanf_float+0x64>
 8003de8:	3501      	adds	r5, #1
 8003dea:	b2ed      	uxtb	r5, r5
 8003dec:	e7d8      	b.n	8003da0 <_scanf_float+0x18c>
 8003dee:	f1ba 0f01 	cmp.w	sl, #1
 8003df2:	f47f af41 	bne.w	8003c78 <_scanf_float+0x64>
 8003df6:	f04f 0a02 	mov.w	sl, #2
 8003dfa:	e7d1      	b.n	8003da0 <_scanf_float+0x18c>
 8003dfc:	b97d      	cbnz	r5, 8003e1e <_scanf_float+0x20a>
 8003dfe:	f1b9 0f00 	cmp.w	r9, #0
 8003e02:	f47f af3c 	bne.w	8003c7e <_scanf_float+0x6a>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003e0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003e10:	f47f af39 	bne.w	8003c86 <_scanf_float+0x72>
 8003e14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e18:	2501      	movs	r5, #1
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	e7c0      	b.n	8003da0 <_scanf_float+0x18c>
 8003e1e:	2d03      	cmp	r5, #3
 8003e20:	d0e2      	beq.n	8003de8 <_scanf_float+0x1d4>
 8003e22:	2d05      	cmp	r5, #5
 8003e24:	e7de      	b.n	8003de4 <_scanf_float+0x1d0>
 8003e26:	2d02      	cmp	r5, #2
 8003e28:	f47f af26 	bne.w	8003c78 <_scanf_float+0x64>
 8003e2c:	2503      	movs	r5, #3
 8003e2e:	e7b7      	b.n	8003da0 <_scanf_float+0x18c>
 8003e30:	2d06      	cmp	r5, #6
 8003e32:	f47f af21 	bne.w	8003c78 <_scanf_float+0x64>
 8003e36:	2507      	movs	r5, #7
 8003e38:	e7b2      	b.n	8003da0 <_scanf_float+0x18c>
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	0591      	lsls	r1, r2, #22
 8003e3e:	f57f af1b 	bpl.w	8003c78 <_scanf_float+0x64>
 8003e42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003e46:	6022      	str	r2, [r4, #0]
 8003e48:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e4c:	e7a8      	b.n	8003da0 <_scanf_float+0x18c>
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003e54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e58:	d006      	beq.n	8003e68 <_scanf_float+0x254>
 8003e5a:	0550      	lsls	r0, r2, #21
 8003e5c:	f57f af0c 	bpl.w	8003c78 <_scanf_float+0x64>
 8003e60:	f1b9 0f00 	cmp.w	r9, #0
 8003e64:	f43f af0f 	beq.w	8003c86 <_scanf_float+0x72>
 8003e68:	0591      	lsls	r1, r2, #22
 8003e6a:	bf58      	it	pl
 8003e6c:	9901      	ldrpl	r1, [sp, #4]
 8003e6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e72:	bf58      	it	pl
 8003e74:	eba9 0101 	subpl.w	r1, r9, r1
 8003e78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003e7c:	f04f 0900 	mov.w	r9, #0
 8003e80:	bf58      	it	pl
 8003e82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	e78a      	b.n	8003da0 <_scanf_float+0x18c>
 8003e8a:	f04f 0a03 	mov.w	sl, #3
 8003e8e:	e787      	b.n	8003da0 <_scanf_float+0x18c>
 8003e90:	4639      	mov	r1, r7
 8003e92:	4640      	mov	r0, r8
 8003e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e98:	4798      	blx	r3
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f43f aedf 	beq.w	8003c5e <_scanf_float+0x4a>
 8003ea0:	e6ea      	b.n	8003c78 <_scanf_float+0x64>
 8003ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ea6:	463a      	mov	r2, r7
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003eae:	4798      	blx	r3
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6123      	str	r3, [r4, #16]
 8003eb6:	e6ec      	b.n	8003c92 <_scanf_float+0x7e>
 8003eb8:	1e6b      	subs	r3, r5, #1
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d825      	bhi.n	8003f0a <_scanf_float+0x2f6>
 8003ebe:	2d02      	cmp	r5, #2
 8003ec0:	d836      	bhi.n	8003f30 <_scanf_float+0x31c>
 8003ec2:	455e      	cmp	r6, fp
 8003ec4:	f67f aee8 	bls.w	8003c98 <_scanf_float+0x84>
 8003ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ecc:	463a      	mov	r2, r7
 8003ece:	4640      	mov	r0, r8
 8003ed0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ed4:	4798      	blx	r3
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	6123      	str	r3, [r4, #16]
 8003edc:	e7f1      	b.n	8003ec2 <_scanf_float+0x2ae>
 8003ede:	9802      	ldr	r0, [sp, #8]
 8003ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ee4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003ee8:	463a      	mov	r2, r7
 8003eea:	9002      	str	r0, [sp, #8]
 8003eec:	4640      	mov	r0, r8
 8003eee:	4798      	blx	r3
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003efa:	fa5f fa8a 	uxtb.w	sl, sl
 8003efe:	f1ba 0f02 	cmp.w	sl, #2
 8003f02:	d1ec      	bne.n	8003ede <_scanf_float+0x2ca>
 8003f04:	3d03      	subs	r5, #3
 8003f06:	b2ed      	uxtb	r5, r5
 8003f08:	1b76      	subs	r6, r6, r5
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	05da      	lsls	r2, r3, #23
 8003f0e:	d52f      	bpl.n	8003f70 <_scanf_float+0x35c>
 8003f10:	055b      	lsls	r3, r3, #21
 8003f12:	d510      	bpl.n	8003f36 <_scanf_float+0x322>
 8003f14:	455e      	cmp	r6, fp
 8003f16:	f67f aebf 	bls.w	8003c98 <_scanf_float+0x84>
 8003f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f1e:	463a      	mov	r2, r7
 8003f20:	4640      	mov	r0, r8
 8003f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f26:	4798      	blx	r3
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6123      	str	r3, [r4, #16]
 8003f2e:	e7f1      	b.n	8003f14 <_scanf_float+0x300>
 8003f30:	46aa      	mov	sl, r5
 8003f32:	9602      	str	r6, [sp, #8]
 8003f34:	e7df      	b.n	8003ef6 <_scanf_float+0x2e2>
 8003f36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	2965      	cmp	r1, #101	; 0x65
 8003f3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f42:	f106 35ff 	add.w	r5, r6, #4294967295
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	d00c      	beq.n	8003f64 <_scanf_float+0x350>
 8003f4a:	2945      	cmp	r1, #69	; 0x45
 8003f4c:	d00a      	beq.n	8003f64 <_scanf_float+0x350>
 8003f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f52:	463a      	mov	r2, r7
 8003f54:	4640      	mov	r0, r8
 8003f56:	4798      	blx	r3
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	1eb5      	subs	r5, r6, #2
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	463a      	mov	r2, r7
 8003f66:	4640      	mov	r0, r8
 8003f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f6c:	4798      	blx	r3
 8003f6e:	462e      	mov	r6, r5
 8003f70:	6825      	ldr	r5, [r4, #0]
 8003f72:	f015 0510 	ands.w	r5, r5, #16
 8003f76:	d155      	bne.n	8004024 <_scanf_float+0x410>
 8003f78:	7035      	strb	r5, [r6, #0]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f84:	d11d      	bne.n	8003fc2 <_scanf_float+0x3ae>
 8003f86:	9b01      	ldr	r3, [sp, #4]
 8003f88:	454b      	cmp	r3, r9
 8003f8a:	eba3 0209 	sub.w	r2, r3, r9
 8003f8e:	d125      	bne.n	8003fdc <_scanf_float+0x3c8>
 8003f90:	2200      	movs	r2, #0
 8003f92:	4659      	mov	r1, fp
 8003f94:	4640      	mov	r0, r8
 8003f96:	f002 fd13 	bl	80069c0 <_strtod_r>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	f8d4 c000 	ldr.w	ip, [r4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f01c 0f02 	tst.w	ip, #2
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460f      	mov	r7, r1
 8003faa:	f103 0204 	add.w	r2, r3, #4
 8003fae:	d020      	beq.n	8003ff2 <_scanf_float+0x3de>
 8003fb0:	9903      	ldr	r1, [sp, #12]
 8003fb2:	600a      	str	r2, [r1, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e9c3 6700 	strd	r6, r7, [r3]
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60e3      	str	r3, [r4, #12]
 8003fc0:	e66b      	b.n	8003c9a <_scanf_float+0x86>
 8003fc2:	9b04      	ldr	r3, [sp, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0e3      	beq.n	8003f90 <_scanf_float+0x37c>
 8003fc8:	9905      	ldr	r1, [sp, #20]
 8003fca:	230a      	movs	r3, #10
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4640      	mov	r0, r8
 8003fd0:	3101      	adds	r1, #1
 8003fd2:	f002 fd79 	bl	8006ac8 <_strtol_r>
 8003fd6:	9b04      	ldr	r3, [sp, #16]
 8003fd8:	9e05      	ldr	r6, [sp, #20]
 8003fda:	1ac2      	subs	r2, r0, r3
 8003fdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003fe0:	429e      	cmp	r6, r3
 8003fe2:	bf28      	it	cs
 8003fe4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003fe8:	4630      	mov	r0, r6
 8003fea:	490f      	ldr	r1, [pc, #60]	; (8004028 <_scanf_float+0x414>)
 8003fec:	f000 f93e 	bl	800426c <siprintf>
 8003ff0:	e7ce      	b.n	8003f90 <_scanf_float+0x37c>
 8003ff2:	f01c 0f04 	tst.w	ip, #4
 8003ff6:	d1db      	bne.n	8003fb0 <_scanf_float+0x39c>
 8003ff8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003ffc:	f8cc 2000 	str.w	r2, [ip]
 8004000:	f8d3 8000 	ldr.w	r8, [r3]
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	f7fc fd6c 	bl	8000ae4 <__aeabi_dcmpun>
 800400c:	b128      	cbz	r0, 800401a <_scanf_float+0x406>
 800400e:	4807      	ldr	r0, [pc, #28]	; (800402c <_scanf_float+0x418>)
 8004010:	f000 fab2 	bl	8004578 <nanf>
 8004014:	f8c8 0000 	str.w	r0, [r8]
 8004018:	e7cf      	b.n	8003fba <_scanf_float+0x3a6>
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	f7fc fdbf 	bl	8000ba0 <__aeabi_d2f>
 8004022:	e7f7      	b.n	8004014 <_scanf_float+0x400>
 8004024:	2500      	movs	r5, #0
 8004026:	e638      	b.n	8003c9a <_scanf_float+0x86>
 8004028:	08008432 	.word	0x08008432
 800402c:	080087c5 	.word	0x080087c5

08004030 <std>:
 8004030:	2300      	movs	r3, #0
 8004032:	b510      	push	{r4, lr}
 8004034:	4604      	mov	r4, r0
 8004036:	e9c0 3300 	strd	r3, r3, [r0]
 800403a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800403e:	6083      	str	r3, [r0, #8]
 8004040:	8181      	strh	r1, [r0, #12]
 8004042:	6643      	str	r3, [r0, #100]	; 0x64
 8004044:	81c2      	strh	r2, [r0, #14]
 8004046:	6183      	str	r3, [r0, #24]
 8004048:	4619      	mov	r1, r3
 800404a:	2208      	movs	r2, #8
 800404c:	305c      	adds	r0, #92	; 0x5c
 800404e:	f000 fa05 	bl	800445c <memset>
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <std+0x58>)
 8004054:	6224      	str	r4, [r4, #32]
 8004056:	6263      	str	r3, [r4, #36]	; 0x24
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <std+0x5c>)
 800405a:	62a3      	str	r3, [r4, #40]	; 0x28
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <std+0x60>)
 800405e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <std+0x64>)
 8004062:	6323      	str	r3, [r4, #48]	; 0x30
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <std+0x68>)
 8004066:	429c      	cmp	r4, r3
 8004068:	d006      	beq.n	8004078 <std+0x48>
 800406a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800406e:	4294      	cmp	r4, r2
 8004070:	d002      	beq.n	8004078 <std+0x48>
 8004072:	33d0      	adds	r3, #208	; 0xd0
 8004074:	429c      	cmp	r4, r3
 8004076:	d105      	bne.n	8004084 <std+0x54>
 8004078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800407c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004080:	f000 ba68 	b.w	8004554 <__retarget_lock_init_recursive>
 8004084:	bd10      	pop	{r4, pc}
 8004086:	bf00      	nop
 8004088:	080042ad 	.word	0x080042ad
 800408c:	080042cf 	.word	0x080042cf
 8004090:	08004307 	.word	0x08004307
 8004094:	0800432b 	.word	0x0800432b
 8004098:	20000244 	.word	0x20000244

0800409c <stdio_exit_handler>:
 800409c:	4a02      	ldr	r2, [pc, #8]	; (80040a8 <stdio_exit_handler+0xc>)
 800409e:	4903      	ldr	r1, [pc, #12]	; (80040ac <stdio_exit_handler+0x10>)
 80040a0:	4803      	ldr	r0, [pc, #12]	; (80040b0 <stdio_exit_handler+0x14>)
 80040a2:	f000 b869 	b.w	8004178 <_fwalk_sglue>
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	08006e81 	.word	0x08006e81
 80040b0:	20000018 	.word	0x20000018

080040b4 <cleanup_stdio>:
 80040b4:	6841      	ldr	r1, [r0, #4]
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <cleanup_stdio+0x34>)
 80040b8:	b510      	push	{r4, lr}
 80040ba:	4299      	cmp	r1, r3
 80040bc:	4604      	mov	r4, r0
 80040be:	d001      	beq.n	80040c4 <cleanup_stdio+0x10>
 80040c0:	f002 fede 	bl	8006e80 <_fflush_r>
 80040c4:	68a1      	ldr	r1, [r4, #8]
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <cleanup_stdio+0x38>)
 80040c8:	4299      	cmp	r1, r3
 80040ca:	d002      	beq.n	80040d2 <cleanup_stdio+0x1e>
 80040cc:	4620      	mov	r0, r4
 80040ce:	f002 fed7 	bl	8006e80 <_fflush_r>
 80040d2:	68e1      	ldr	r1, [r4, #12]
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <cleanup_stdio+0x3c>)
 80040d6:	4299      	cmp	r1, r3
 80040d8:	d004      	beq.n	80040e4 <cleanup_stdio+0x30>
 80040da:	4620      	mov	r0, r4
 80040dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e0:	f002 bece 	b.w	8006e80 <_fflush_r>
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop
 80040e8:	20000244 	.word	0x20000244
 80040ec:	200002ac 	.word	0x200002ac
 80040f0:	20000314 	.word	0x20000314

080040f4 <global_stdio_init.part.0>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <global_stdio_init.part.0+0x30>)
 80040f8:	4c0b      	ldr	r4, [pc, #44]	; (8004128 <global_stdio_init.part.0+0x34>)
 80040fa:	4a0c      	ldr	r2, [pc, #48]	; (800412c <global_stdio_init.part.0+0x38>)
 80040fc:	4620      	mov	r0, r4
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	2104      	movs	r1, #4
 8004102:	2200      	movs	r2, #0
 8004104:	f7ff ff94 	bl	8004030 <std>
 8004108:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800410c:	2201      	movs	r2, #1
 800410e:	2109      	movs	r1, #9
 8004110:	f7ff ff8e 	bl	8004030 <std>
 8004114:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004118:	2202      	movs	r2, #2
 800411a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411e:	2112      	movs	r1, #18
 8004120:	f7ff bf86 	b.w	8004030 <std>
 8004124:	2000037c 	.word	0x2000037c
 8004128:	20000244 	.word	0x20000244
 800412c:	0800409d 	.word	0x0800409d

08004130 <__sfp_lock_acquire>:
 8004130:	4801      	ldr	r0, [pc, #4]	; (8004138 <__sfp_lock_acquire+0x8>)
 8004132:	f000 ba10 	b.w	8004556 <__retarget_lock_acquire_recursive>
 8004136:	bf00      	nop
 8004138:	20000385 	.word	0x20000385

0800413c <__sfp_lock_release>:
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <__sfp_lock_release+0x8>)
 800413e:	f000 ba0b 	b.w	8004558 <__retarget_lock_release_recursive>
 8004142:	bf00      	nop
 8004144:	20000385 	.word	0x20000385

08004148 <__sinit>:
 8004148:	b510      	push	{r4, lr}
 800414a:	4604      	mov	r4, r0
 800414c:	f7ff fff0 	bl	8004130 <__sfp_lock_acquire>
 8004150:	6a23      	ldr	r3, [r4, #32]
 8004152:	b11b      	cbz	r3, 800415c <__sinit+0x14>
 8004154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004158:	f7ff bff0 	b.w	800413c <__sfp_lock_release>
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <__sinit+0x28>)
 800415e:	6223      	str	r3, [r4, #32]
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <__sinit+0x2c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f5      	bne.n	8004154 <__sinit+0xc>
 8004168:	f7ff ffc4 	bl	80040f4 <global_stdio_init.part.0>
 800416c:	e7f2      	b.n	8004154 <__sinit+0xc>
 800416e:	bf00      	nop
 8004170:	080040b5 	.word	0x080040b5
 8004174:	2000037c 	.word	0x2000037c

08004178 <_fwalk_sglue>:
 8004178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800417c:	4607      	mov	r7, r0
 800417e:	4688      	mov	r8, r1
 8004180:	4614      	mov	r4, r2
 8004182:	2600      	movs	r6, #0
 8004184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004188:	f1b9 0901 	subs.w	r9, r9, #1
 800418c:	d505      	bpl.n	800419a <_fwalk_sglue+0x22>
 800418e:	6824      	ldr	r4, [r4, #0]
 8004190:	2c00      	cmp	r4, #0
 8004192:	d1f7      	bne.n	8004184 <_fwalk_sglue+0xc>
 8004194:	4630      	mov	r0, r6
 8004196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d907      	bls.n	80041b0 <_fwalk_sglue+0x38>
 80041a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041a4:	3301      	adds	r3, #1
 80041a6:	d003      	beq.n	80041b0 <_fwalk_sglue+0x38>
 80041a8:	4629      	mov	r1, r5
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	4306      	orrs	r6, r0
 80041b0:	3568      	adds	r5, #104	; 0x68
 80041b2:	e7e9      	b.n	8004188 <_fwalk_sglue+0x10>

080041b4 <_puts_r>:
 80041b4:	6a03      	ldr	r3, [r0, #32]
 80041b6:	b570      	push	{r4, r5, r6, lr}
 80041b8:	4605      	mov	r5, r0
 80041ba:	460e      	mov	r6, r1
 80041bc:	6884      	ldr	r4, [r0, #8]
 80041be:	b90b      	cbnz	r3, 80041c4 <_puts_r+0x10>
 80041c0:	f7ff ffc2 	bl	8004148 <__sinit>
 80041c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041c6:	07db      	lsls	r3, r3, #31
 80041c8:	d405      	bmi.n	80041d6 <_puts_r+0x22>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	0598      	lsls	r0, r3, #22
 80041ce:	d402      	bmi.n	80041d6 <_puts_r+0x22>
 80041d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041d2:	f000 f9c0 	bl	8004556 <__retarget_lock_acquire_recursive>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	0719      	lsls	r1, r3, #28
 80041da:	d513      	bpl.n	8004204 <_puts_r+0x50>
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	b18b      	cbz	r3, 8004204 <_puts_r+0x50>
 80041e0:	3e01      	subs	r6, #1
 80041e2:	68a3      	ldr	r3, [r4, #8]
 80041e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	b9e9      	cbnz	r1, 800422a <_puts_r+0x76>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da2e      	bge.n	8004250 <_puts_r+0x9c>
 80041f2:	4622      	mov	r2, r4
 80041f4:	210a      	movs	r1, #10
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 f89b 	bl	8004332 <__swbuf_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d007      	beq.n	8004210 <_puts_r+0x5c>
 8004200:	250a      	movs	r5, #10
 8004202:	e007      	b.n	8004214 <_puts_r+0x60>
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f8d0 	bl	80043ac <__swsetup_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	d0e7      	beq.n	80041e0 <_puts_r+0x2c>
 8004210:	f04f 35ff 	mov.w	r5, #4294967295
 8004214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004216:	07da      	lsls	r2, r3, #31
 8004218:	d405      	bmi.n	8004226 <_puts_r+0x72>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	059b      	lsls	r3, r3, #22
 800421e:	d402      	bmi.n	8004226 <_puts_r+0x72>
 8004220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004222:	f000 f999 	bl	8004558 <__retarget_lock_release_recursive>
 8004226:	4628      	mov	r0, r5
 8004228:	bd70      	pop	{r4, r5, r6, pc}
 800422a:	2b00      	cmp	r3, #0
 800422c:	da04      	bge.n	8004238 <_puts_r+0x84>
 800422e:	69a2      	ldr	r2, [r4, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	dc06      	bgt.n	8004242 <_puts_r+0x8e>
 8004234:	290a      	cmp	r1, #10
 8004236:	d004      	beq.n	8004242 <_puts_r+0x8e>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	6022      	str	r2, [r4, #0]
 800423e:	7019      	strb	r1, [r3, #0]
 8004240:	e7cf      	b.n	80041e2 <_puts_r+0x2e>
 8004242:	4622      	mov	r2, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f874 	bl	8004332 <__swbuf_r>
 800424a:	3001      	adds	r0, #1
 800424c:	d1c9      	bne.n	80041e2 <_puts_r+0x2e>
 800424e:	e7df      	b.n	8004210 <_puts_r+0x5c>
 8004250:	250a      	movs	r5, #10
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	6022      	str	r2, [r4, #0]
 8004258:	701d      	strb	r5, [r3, #0]
 800425a:	e7db      	b.n	8004214 <_puts_r+0x60>

0800425c <puts>:
 800425c:	4b02      	ldr	r3, [pc, #8]	; (8004268 <puts+0xc>)
 800425e:	4601      	mov	r1, r0
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	f7ff bfa7 	b.w	80041b4 <_puts_r>
 8004266:	bf00      	nop
 8004268:	20000064 	.word	0x20000064

0800426c <siprintf>:
 800426c:	b40e      	push	{r1, r2, r3}
 800426e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004272:	b500      	push	{lr}
 8004274:	b09c      	sub	sp, #112	; 0x70
 8004276:	ab1d      	add	r3, sp, #116	; 0x74
 8004278:	9002      	str	r0, [sp, #8]
 800427a:	9006      	str	r0, [sp, #24]
 800427c:	9107      	str	r1, [sp, #28]
 800427e:	9104      	str	r1, [sp, #16]
 8004280:	4808      	ldr	r0, [pc, #32]	; (80042a4 <siprintf+0x38>)
 8004282:	4909      	ldr	r1, [pc, #36]	; (80042a8 <siprintf+0x3c>)
 8004284:	f853 2b04 	ldr.w	r2, [r3], #4
 8004288:	9105      	str	r1, [sp, #20]
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	a902      	add	r1, sp, #8
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	f002 fc76 	bl	8006b80 <_svfiprintf_r>
 8004294:	2200      	movs	r2, #0
 8004296:	9b02      	ldr	r3, [sp, #8]
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	b01c      	add	sp, #112	; 0x70
 800429c:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a0:	b003      	add	sp, #12
 80042a2:	4770      	bx	lr
 80042a4:	20000064 	.word	0x20000064
 80042a8:	ffff0208 	.word	0xffff0208

080042ac <__sread>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b4:	f000 f900 	bl	80044b8 <_read_r>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	bfab      	itete	ge
 80042bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042be:	89a3      	ldrhlt	r3, [r4, #12]
 80042c0:	181b      	addge	r3, r3, r0
 80042c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042c6:	bfac      	ite	ge
 80042c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ca:	81a3      	strhlt	r3, [r4, #12]
 80042cc:	bd10      	pop	{r4, pc}

080042ce <__swrite>:
 80042ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d2:	461f      	mov	r7, r3
 80042d4:	898b      	ldrh	r3, [r1, #12]
 80042d6:	4605      	mov	r5, r0
 80042d8:	05db      	lsls	r3, r3, #23
 80042da:	460c      	mov	r4, r1
 80042dc:	4616      	mov	r6, r2
 80042de:	d505      	bpl.n	80042ec <__swrite+0x1e>
 80042e0:	2302      	movs	r3, #2
 80042e2:	2200      	movs	r2, #0
 80042e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e8:	f000 f8d4 	bl	8004494 <_lseek_r>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	4632      	mov	r2, r6
 80042f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	4628      	mov	r0, r5
 80042f8:	463b      	mov	r3, r7
 80042fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004302:	f000 b8eb 	b.w	80044dc <_write_r>

08004306 <__sseek>:
 8004306:	b510      	push	{r4, lr}
 8004308:	460c      	mov	r4, r1
 800430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430e:	f000 f8c1 	bl	8004494 <_lseek_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	bf15      	itete	ne
 8004318:	6560      	strne	r0, [r4, #84]	; 0x54
 800431a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800431e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004322:	81a3      	strheq	r3, [r4, #12]
 8004324:	bf18      	it	ne
 8004326:	81a3      	strhne	r3, [r4, #12]
 8004328:	bd10      	pop	{r4, pc}

0800432a <__sclose>:
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 b8a1 	b.w	8004474 <_close_r>

08004332 <__swbuf_r>:
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	460e      	mov	r6, r1
 8004336:	4614      	mov	r4, r2
 8004338:	4605      	mov	r5, r0
 800433a:	b118      	cbz	r0, 8004344 <__swbuf_r+0x12>
 800433c:	6a03      	ldr	r3, [r0, #32]
 800433e:	b90b      	cbnz	r3, 8004344 <__swbuf_r+0x12>
 8004340:	f7ff ff02 	bl	8004148 <__sinit>
 8004344:	69a3      	ldr	r3, [r4, #24]
 8004346:	60a3      	str	r3, [r4, #8]
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	071a      	lsls	r2, r3, #28
 800434c:	d525      	bpl.n	800439a <__swbuf_r+0x68>
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	b31b      	cbz	r3, 800439a <__swbuf_r+0x68>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	6922      	ldr	r2, [r4, #16]
 8004356:	b2f6      	uxtb	r6, r6
 8004358:	1a98      	subs	r0, r3, r2
 800435a:	6963      	ldr	r3, [r4, #20]
 800435c:	4637      	mov	r7, r6
 800435e:	4283      	cmp	r3, r0
 8004360:	dc04      	bgt.n	800436c <__swbuf_r+0x3a>
 8004362:	4621      	mov	r1, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f002 fd8b 	bl	8006e80 <_fflush_r>
 800436a:	b9e0      	cbnz	r0, 80043a6 <__swbuf_r+0x74>
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	60a3      	str	r3, [r4, #8]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	6022      	str	r2, [r4, #0]
 8004378:	701e      	strb	r6, [r3, #0]
 800437a:	6962      	ldr	r2, [r4, #20]
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	429a      	cmp	r2, r3
 8004380:	d004      	beq.n	800438c <__swbuf_r+0x5a>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	07db      	lsls	r3, r3, #31
 8004386:	d506      	bpl.n	8004396 <__swbuf_r+0x64>
 8004388:	2e0a      	cmp	r6, #10
 800438a:	d104      	bne.n	8004396 <__swbuf_r+0x64>
 800438c:	4621      	mov	r1, r4
 800438e:	4628      	mov	r0, r5
 8004390:	f002 fd76 	bl	8006e80 <_fflush_r>
 8004394:	b938      	cbnz	r0, 80043a6 <__swbuf_r+0x74>
 8004396:	4638      	mov	r0, r7
 8004398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 f805 	bl	80043ac <__swsetup_r>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d0d5      	beq.n	8004352 <__swbuf_r+0x20>
 80043a6:	f04f 37ff 	mov.w	r7, #4294967295
 80043aa:	e7f4      	b.n	8004396 <__swbuf_r+0x64>

080043ac <__swsetup_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <__swsetup_r+0xac>)
 80043b0:	4605      	mov	r5, r0
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	460c      	mov	r4, r1
 80043b6:	b118      	cbz	r0, 80043c0 <__swsetup_r+0x14>
 80043b8:	6a03      	ldr	r3, [r0, #32]
 80043ba:	b90b      	cbnz	r3, 80043c0 <__swsetup_r+0x14>
 80043bc:	f7ff fec4 	bl	8004148 <__sinit>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c6:	0718      	lsls	r0, r3, #28
 80043c8:	d422      	bmi.n	8004410 <__swsetup_r+0x64>
 80043ca:	06d9      	lsls	r1, r3, #27
 80043cc:	d407      	bmi.n	80043de <__swsetup_r+0x32>
 80043ce:	2309      	movs	r3, #9
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d6:	f04f 30ff 	mov.w	r0, #4294967295
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	e034      	b.n	8004448 <__swsetup_r+0x9c>
 80043de:	0758      	lsls	r0, r3, #29
 80043e0:	d512      	bpl.n	8004408 <__swsetup_r+0x5c>
 80043e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e4:	b141      	cbz	r1, 80043f8 <__swsetup_r+0x4c>
 80043e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ea:	4299      	cmp	r1, r3
 80043ec:	d002      	beq.n	80043f4 <__swsetup_r+0x48>
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 ff36 	bl	8005260 <_free_r>
 80043f4:	2300      	movs	r3, #0
 80043f6:	6363      	str	r3, [r4, #52]	; 0x34
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	2300      	movs	r3, #0
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f043 0308 	orr.w	r3, r3, #8
 800440e:	81a3      	strh	r3, [r4, #12]
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	b94b      	cbnz	r3, 8004428 <__swsetup_r+0x7c>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d003      	beq.n	8004428 <__swsetup_r+0x7c>
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f002 fd79 	bl	8006f1a <__smakebuf_r>
 8004428:	89a0      	ldrh	r0, [r4, #12]
 800442a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800442e:	f010 0301 	ands.w	r3, r0, #1
 8004432:	d00a      	beq.n	800444a <__swsetup_r+0x9e>
 8004434:	2300      	movs	r3, #0
 8004436:	60a3      	str	r3, [r4, #8]
 8004438:	6963      	ldr	r3, [r4, #20]
 800443a:	425b      	negs	r3, r3
 800443c:	61a3      	str	r3, [r4, #24]
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	b943      	cbnz	r3, 8004454 <__swsetup_r+0xa8>
 8004442:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004446:	d1c4      	bne.n	80043d2 <__swsetup_r+0x26>
 8004448:	bd38      	pop	{r3, r4, r5, pc}
 800444a:	0781      	lsls	r1, r0, #30
 800444c:	bf58      	it	pl
 800444e:	6963      	ldrpl	r3, [r4, #20]
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	e7f4      	b.n	800443e <__swsetup_r+0x92>
 8004454:	2000      	movs	r0, #0
 8004456:	e7f7      	b.n	8004448 <__swsetup_r+0x9c>
 8004458:	20000064 	.word	0x20000064

0800445c <memset>:
 800445c:	4603      	mov	r3, r0
 800445e:	4402      	add	r2, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	f803 1b01 	strb.w	r1, [r3], #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <_localeconv_r>:
 800446c:	4800      	ldr	r0, [pc, #0]	; (8004470 <_localeconv_r+0x4>)
 800446e:	4770      	bx	lr
 8004470:	20000158 	.word	0x20000158

08004474 <_close_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	2300      	movs	r3, #0
 8004478:	4d05      	ldr	r5, [pc, #20]	; (8004490 <_close_r+0x1c>)
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fd fc49 	bl	8001d16 <_close>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_close_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_close_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	20000380 	.word	0x20000380

08004494 <_lseek_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	2200      	movs	r2, #0
 800449e:	4d05      	ldr	r5, [pc, #20]	; (80044b4 <_lseek_r+0x20>)
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fd fc5b 	bl	8001d5e <_lseek>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_lseek_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_lseek_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20000380 	.word	0x20000380

080044b8 <_read_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	2200      	movs	r2, #0
 80044c2:	4d05      	ldr	r5, [pc, #20]	; (80044d8 <_read_r+0x20>)
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fd fbec 	bl	8001ca4 <_read>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_read_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_read_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	20000380 	.word	0x20000380

080044dc <_write_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	4d05      	ldr	r5, [pc, #20]	; (80044fc <_write_r+0x20>)
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fd fbf7 	bl	8001cde <_write>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_write_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_write_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	20000380 	.word	0x20000380

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000064 	.word	0x20000064

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	2600      	movs	r6, #0
 8004510:	4d0c      	ldr	r5, [pc, #48]	; (8004544 <__libc_init_array+0x38>)
 8004512:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	f003 fb2c 	bl	8007b78 <_init>
 8004520:	2600      	movs	r6, #0
 8004522:	4d0a      	ldr	r5, [pc, #40]	; (800454c <__libc_init_array+0x40>)
 8004524:	4c0a      	ldr	r4, [pc, #40]	; (8004550 <__libc_init_array+0x44>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08008828 	.word	0x08008828
 8004548:	08008828 	.word	0x08008828
 800454c:	08008828 	.word	0x08008828
 8004550:	0800882c 	.word	0x0800882c

08004554 <__retarget_lock_init_recursive>:
 8004554:	4770      	bx	lr

08004556 <__retarget_lock_acquire_recursive>:
 8004556:	4770      	bx	lr

08004558 <__retarget_lock_release_recursive>:
 8004558:	4770      	bx	lr

0800455a <memchr>:
 800455a:	4603      	mov	r3, r0
 800455c:	b510      	push	{r4, lr}
 800455e:	b2c9      	uxtb	r1, r1
 8004560:	4402      	add	r2, r0
 8004562:	4293      	cmp	r3, r2
 8004564:	4618      	mov	r0, r3
 8004566:	d101      	bne.n	800456c <memchr+0x12>
 8004568:	2000      	movs	r0, #0
 800456a:	e003      	b.n	8004574 <memchr+0x1a>
 800456c:	7804      	ldrb	r4, [r0, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	428c      	cmp	r4, r1
 8004572:	d1f6      	bne.n	8004562 <memchr+0x8>
 8004574:	bd10      	pop	{r4, pc}
	...

08004578 <nanf>:
 8004578:	4800      	ldr	r0, [pc, #0]	; (800457c <nanf+0x4>)
 800457a:	4770      	bx	lr
 800457c:	7fc00000 	.word	0x7fc00000

08004580 <quorem>:
 8004580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	6903      	ldr	r3, [r0, #16]
 8004586:	690c      	ldr	r4, [r1, #16]
 8004588:	4607      	mov	r7, r0
 800458a:	42a3      	cmp	r3, r4
 800458c:	db7f      	blt.n	800468e <quorem+0x10e>
 800458e:	3c01      	subs	r4, #1
 8004590:	f100 0514 	add.w	r5, r0, #20
 8004594:	f101 0814 	add.w	r8, r1, #20
 8004598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045a6:	3301      	adds	r3, #1
 80045a8:	429a      	cmp	r2, r3
 80045aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80045ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045b6:	d331      	bcc.n	800461c <quorem+0x9c>
 80045b8:	f04f 0e00 	mov.w	lr, #0
 80045bc:	4640      	mov	r0, r8
 80045be:	46ac      	mov	ip, r5
 80045c0:	46f2      	mov	sl, lr
 80045c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80045c6:	b293      	uxth	r3, r2
 80045c8:	fb06 e303 	mla	r3, r6, r3, lr
 80045cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045d0:	0c1a      	lsrs	r2, r3, #16
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	fb06 220e 	mla	r2, r6, lr, r2
 80045d8:	ebaa 0303 	sub.w	r3, sl, r3
 80045dc:	f8dc a000 	ldr.w	sl, [ip]
 80045e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045e4:	fa1f fa8a 	uxth.w	sl, sl
 80045e8:	4453      	add	r3, sl
 80045ea:	f8dc a000 	ldr.w	sl, [ip]
 80045ee:	b292      	uxth	r2, r2
 80045f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045fe:	4581      	cmp	r9, r0
 8004600:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004604:	f84c 3b04 	str.w	r3, [ip], #4
 8004608:	d2db      	bcs.n	80045c2 <quorem+0x42>
 800460a:	f855 300b 	ldr.w	r3, [r5, fp]
 800460e:	b92b      	cbnz	r3, 800461c <quorem+0x9c>
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	3b04      	subs	r3, #4
 8004614:	429d      	cmp	r5, r3
 8004616:	461a      	mov	r2, r3
 8004618:	d32d      	bcc.n	8004676 <quorem+0xf6>
 800461a:	613c      	str	r4, [r7, #16]
 800461c:	4638      	mov	r0, r7
 800461e:	f001 f9df 	bl	80059e0 <__mcmp>
 8004622:	2800      	cmp	r0, #0
 8004624:	db23      	blt.n	800466e <quorem+0xee>
 8004626:	4629      	mov	r1, r5
 8004628:	2000      	movs	r0, #0
 800462a:	3601      	adds	r6, #1
 800462c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004630:	f8d1 c000 	ldr.w	ip, [r1]
 8004634:	b293      	uxth	r3, r2
 8004636:	1ac3      	subs	r3, r0, r3
 8004638:	0c12      	lsrs	r2, r2, #16
 800463a:	fa1f f08c 	uxth.w	r0, ip
 800463e:	4403      	add	r3, r0
 8004640:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004648:	b29b      	uxth	r3, r3
 800464a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800464e:	45c1      	cmp	r9, r8
 8004650:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004654:	f841 3b04 	str.w	r3, [r1], #4
 8004658:	d2e8      	bcs.n	800462c <quorem+0xac>
 800465a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800465e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004662:	b922      	cbnz	r2, 800466e <quorem+0xee>
 8004664:	3b04      	subs	r3, #4
 8004666:	429d      	cmp	r5, r3
 8004668:	461a      	mov	r2, r3
 800466a:	d30a      	bcc.n	8004682 <quorem+0x102>
 800466c:	613c      	str	r4, [r7, #16]
 800466e:	4630      	mov	r0, r6
 8004670:	b003      	add	sp, #12
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	3b04      	subs	r3, #4
 800467a:	2a00      	cmp	r2, #0
 800467c:	d1cd      	bne.n	800461a <quorem+0x9a>
 800467e:	3c01      	subs	r4, #1
 8004680:	e7c8      	b.n	8004614 <quorem+0x94>
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	3b04      	subs	r3, #4
 8004686:	2a00      	cmp	r2, #0
 8004688:	d1f0      	bne.n	800466c <quorem+0xec>
 800468a:	3c01      	subs	r4, #1
 800468c:	e7eb      	b.n	8004666 <quorem+0xe6>
 800468e:	2000      	movs	r0, #0
 8004690:	e7ee      	b.n	8004670 <quorem+0xf0>
 8004692:	0000      	movs	r0, r0
 8004694:	0000      	movs	r0, r0
	...

08004698 <_dtoa_r>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	4616      	mov	r6, r2
 800469e:	461f      	mov	r7, r3
 80046a0:	69c4      	ldr	r4, [r0, #28]
 80046a2:	b099      	sub	sp, #100	; 0x64
 80046a4:	4605      	mov	r5, r0
 80046a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046ae:	b974      	cbnz	r4, 80046ce <_dtoa_r+0x36>
 80046b0:	2010      	movs	r0, #16
 80046b2:	f000 fe1d 	bl	80052f0 <malloc>
 80046b6:	4602      	mov	r2, r0
 80046b8:	61e8      	str	r0, [r5, #28]
 80046ba:	b920      	cbnz	r0, 80046c6 <_dtoa_r+0x2e>
 80046bc:	21ef      	movs	r1, #239	; 0xef
 80046be:	4bac      	ldr	r3, [pc, #688]	; (8004970 <_dtoa_r+0x2d8>)
 80046c0:	48ac      	ldr	r0, [pc, #688]	; (8004974 <_dtoa_r+0x2dc>)
 80046c2:	f002 fcd9 	bl	8007078 <__assert_func>
 80046c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046ca:	6004      	str	r4, [r0, #0]
 80046cc:	60c4      	str	r4, [r0, #12]
 80046ce:	69eb      	ldr	r3, [r5, #28]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	b151      	cbz	r1, 80046ea <_dtoa_r+0x52>
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	2301      	movs	r3, #1
 80046d8:	4093      	lsls	r3, r2
 80046da:	604a      	str	r2, [r1, #4]
 80046dc:	608b      	str	r3, [r1, #8]
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 fefa 	bl	80054d8 <_Bfree>
 80046e4:	2200      	movs	r2, #0
 80046e6:	69eb      	ldr	r3, [r5, #28]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	1e3b      	subs	r3, r7, #0
 80046ec:	bfaf      	iteee	ge
 80046ee:	2300      	movge	r3, #0
 80046f0:	2201      	movlt	r2, #1
 80046f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046f6:	9305      	strlt	r3, [sp, #20]
 80046f8:	bfa8      	it	ge
 80046fa:	f8c8 3000 	strge.w	r3, [r8]
 80046fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004702:	4b9d      	ldr	r3, [pc, #628]	; (8004978 <_dtoa_r+0x2e0>)
 8004704:	bfb8      	it	lt
 8004706:	f8c8 2000 	strlt.w	r2, [r8]
 800470a:	ea33 0309 	bics.w	r3, r3, r9
 800470e:	d119      	bne.n	8004744 <_dtoa_r+0xac>
 8004710:	f242 730f 	movw	r3, #9999	; 0x270f
 8004714:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800471c:	4333      	orrs	r3, r6
 800471e:	f000 8589 	beq.w	8005234 <_dtoa_r+0xb9c>
 8004722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004724:	b953      	cbnz	r3, 800473c <_dtoa_r+0xa4>
 8004726:	4b95      	ldr	r3, [pc, #596]	; (800497c <_dtoa_r+0x2e4>)
 8004728:	e023      	b.n	8004772 <_dtoa_r+0xda>
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <_dtoa_r+0x2e8>)
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	3308      	adds	r3, #8
 8004730:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	9803      	ldr	r0, [sp, #12]
 8004736:	b019      	add	sp, #100	; 0x64
 8004738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473c:	4b8f      	ldr	r3, [pc, #572]	; (800497c <_dtoa_r+0x2e4>)
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	3303      	adds	r3, #3
 8004742:	e7f5      	b.n	8004730 <_dtoa_r+0x98>
 8004744:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004748:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800474c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	f7fc f994 	bl	8000a80 <__aeabi_dcmpeq>
 8004758:	4680      	mov	r8, r0
 800475a:	b160      	cbz	r0, 8004776 <_dtoa_r+0xde>
 800475c:	2301      	movs	r3, #1
 800475e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8562 	beq.w	800522e <_dtoa_r+0xb96>
 800476a:	4b86      	ldr	r3, [pc, #536]	; (8004984 <_dtoa_r+0x2ec>)
 800476c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	e7de      	b.n	8004734 <_dtoa_r+0x9c>
 8004776:	ab16      	add	r3, sp, #88	; 0x58
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	ab17      	add	r3, sp, #92	; 0x5c
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4628      	mov	r0, r5
 8004780:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004784:	f001 fa3c 	bl	8005c00 <__d2b>
 8004788:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800478c:	4682      	mov	sl, r0
 800478e:	2c00      	cmp	r4, #0
 8004790:	d07e      	beq.n	8004890 <_dtoa_r+0x1f8>
 8004792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004798:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800479c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80047a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80047a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80047ac:	4619      	mov	r1, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	4b75      	ldr	r3, [pc, #468]	; (8004988 <_dtoa_r+0x2f0>)
 80047b2:	f7fb fd45 	bl	8000240 <__aeabi_dsub>
 80047b6:	a368      	add	r3, pc, #416	; (adr r3, 8004958 <_dtoa_r+0x2c0>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb fef8 	bl	80005b0 <__aeabi_dmul>
 80047c0:	a367      	add	r3, pc, #412	; (adr r3, 8004960 <_dtoa_r+0x2c8>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb fd3d 	bl	8000244 <__adddf3>
 80047ca:	4606      	mov	r6, r0
 80047cc:	4620      	mov	r0, r4
 80047ce:	460f      	mov	r7, r1
 80047d0:	f7fb fe84 	bl	80004dc <__aeabi_i2d>
 80047d4:	a364      	add	r3, pc, #400	; (adr r3, 8004968 <_dtoa_r+0x2d0>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fee9 	bl	80005b0 <__aeabi_dmul>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4630      	mov	r0, r6
 80047e4:	4639      	mov	r1, r7
 80047e6:	f7fb fd2d 	bl	8000244 <__adddf3>
 80047ea:	4606      	mov	r6, r0
 80047ec:	460f      	mov	r7, r1
 80047ee:	f7fc f98f 	bl	8000b10 <__aeabi_d2iz>
 80047f2:	2200      	movs	r2, #0
 80047f4:	4683      	mov	fp, r0
 80047f6:	2300      	movs	r3, #0
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fc f94a 	bl	8000a94 <__aeabi_dcmplt>
 8004800:	b148      	cbz	r0, 8004816 <_dtoa_r+0x17e>
 8004802:	4658      	mov	r0, fp
 8004804:	f7fb fe6a 	bl	80004dc <__aeabi_i2d>
 8004808:	4632      	mov	r2, r6
 800480a:	463b      	mov	r3, r7
 800480c:	f7fc f938 	bl	8000a80 <__aeabi_dcmpeq>
 8004810:	b908      	cbnz	r0, 8004816 <_dtoa_r+0x17e>
 8004812:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004816:	f1bb 0f16 	cmp.w	fp, #22
 800481a:	d857      	bhi.n	80048cc <_dtoa_r+0x234>
 800481c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004820:	4b5a      	ldr	r3, [pc, #360]	; (800498c <_dtoa_r+0x2f4>)
 8004822:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fc f933 	bl	8000a94 <__aeabi_dcmplt>
 800482e:	2800      	cmp	r0, #0
 8004830:	d04e      	beq.n	80048d0 <_dtoa_r+0x238>
 8004832:	2300      	movs	r3, #0
 8004834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004838:	930f      	str	r3, [sp, #60]	; 0x3c
 800483a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800483c:	1b1b      	subs	r3, r3, r4
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	bf46      	itte	mi
 8004842:	f1c3 0901 	rsbmi	r9, r3, #1
 8004846:	2300      	movmi	r3, #0
 8004848:	f04f 0900 	movpl.w	r9, #0
 800484c:	9209      	str	r2, [sp, #36]	; 0x24
 800484e:	bf48      	it	mi
 8004850:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004852:	f1bb 0f00 	cmp.w	fp, #0
 8004856:	db3d      	blt.n	80048d4 <_dtoa_r+0x23c>
 8004858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800485e:	445b      	add	r3, fp
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	2300      	movs	r3, #0
 8004864:	930a      	str	r3, [sp, #40]	; 0x28
 8004866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004868:	2b09      	cmp	r3, #9
 800486a:	d867      	bhi.n	800493c <_dtoa_r+0x2a4>
 800486c:	2b05      	cmp	r3, #5
 800486e:	bfc4      	itt	gt
 8004870:	3b04      	subgt	r3, #4
 8004872:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004876:	bfc8      	it	gt
 8004878:	2400      	movgt	r4, #0
 800487a:	f1a3 0302 	sub.w	r3, r3, #2
 800487e:	bfd8      	it	le
 8004880:	2401      	movle	r4, #1
 8004882:	2b03      	cmp	r3, #3
 8004884:	f200 8086 	bhi.w	8004994 <_dtoa_r+0x2fc>
 8004888:	e8df f003 	tbb	[pc, r3]
 800488c:	5637392c 	.word	0x5637392c
 8004890:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004894:	441c      	add	r4, r3
 8004896:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800489a:	2b20      	cmp	r3, #32
 800489c:	bfc1      	itttt	gt
 800489e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80048a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80048aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80048ae:	bfd6      	itet	le
 80048b0:	f1c3 0320 	rsble	r3, r3, #32
 80048b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80048b8:	fa06 f003 	lslle.w	r0, r6, r3
 80048bc:	f7fb fdfe 	bl	80004bc <__aeabi_ui2d>
 80048c0:	2201      	movs	r2, #1
 80048c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80048c6:	3c01      	subs	r4, #1
 80048c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80048ca:	e76f      	b.n	80047ac <_dtoa_r+0x114>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e7b3      	b.n	8004838 <_dtoa_r+0x1a0>
 80048d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80048d2:	e7b2      	b.n	800483a <_dtoa_r+0x1a2>
 80048d4:	f1cb 0300 	rsb	r3, fp, #0
 80048d8:	930a      	str	r3, [sp, #40]	; 0x28
 80048da:	2300      	movs	r3, #0
 80048dc:	eba9 090b 	sub.w	r9, r9, fp
 80048e0:	930e      	str	r3, [sp, #56]	; 0x38
 80048e2:	e7c0      	b.n	8004866 <_dtoa_r+0x1ce>
 80048e4:	2300      	movs	r3, #0
 80048e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dc55      	bgt.n	800499a <_dtoa_r+0x302>
 80048ee:	2301      	movs	r3, #1
 80048f0:	461a      	mov	r2, r3
 80048f2:	9306      	str	r3, [sp, #24]
 80048f4:	9308      	str	r3, [sp, #32]
 80048f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80048f8:	e00b      	b.n	8004912 <_dtoa_r+0x27a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e7f3      	b.n	80048e6 <_dtoa_r+0x24e>
 80048fe:	2300      	movs	r3, #0
 8004900:	930b      	str	r3, [sp, #44]	; 0x2c
 8004902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004904:	445b      	add	r3, fp
 8004906:	9306      	str	r3, [sp, #24]
 8004908:	3301      	adds	r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	9308      	str	r3, [sp, #32]
 800490e:	bfb8      	it	lt
 8004910:	2301      	movlt	r3, #1
 8004912:	2100      	movs	r1, #0
 8004914:	2204      	movs	r2, #4
 8004916:	69e8      	ldr	r0, [r5, #28]
 8004918:	f102 0614 	add.w	r6, r2, #20
 800491c:	429e      	cmp	r6, r3
 800491e:	d940      	bls.n	80049a2 <_dtoa_r+0x30a>
 8004920:	6041      	str	r1, [r0, #4]
 8004922:	4628      	mov	r0, r5
 8004924:	f000 fd98 	bl	8005458 <_Balloc>
 8004928:	9003      	str	r0, [sp, #12]
 800492a:	2800      	cmp	r0, #0
 800492c:	d13c      	bne.n	80049a8 <_dtoa_r+0x310>
 800492e:	4602      	mov	r2, r0
 8004930:	f240 11af 	movw	r1, #431	; 0x1af
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <_dtoa_r+0x2f8>)
 8004936:	e6c3      	b.n	80046c0 <_dtoa_r+0x28>
 8004938:	2301      	movs	r3, #1
 800493a:	e7e1      	b.n	8004900 <_dtoa_r+0x268>
 800493c:	2401      	movs	r4, #1
 800493e:	2300      	movs	r3, #0
 8004940:	940b      	str	r4, [sp, #44]	; 0x2c
 8004942:	9322      	str	r3, [sp, #136]	; 0x88
 8004944:	f04f 33ff 	mov.w	r3, #4294967295
 8004948:	2200      	movs	r2, #0
 800494a:	9306      	str	r3, [sp, #24]
 800494c:	9308      	str	r3, [sp, #32]
 800494e:	2312      	movs	r3, #18
 8004950:	e7d1      	b.n	80048f6 <_dtoa_r+0x25e>
 8004952:	bf00      	nop
 8004954:	f3af 8000 	nop.w
 8004958:	636f4361 	.word	0x636f4361
 800495c:	3fd287a7 	.word	0x3fd287a7
 8004960:	8b60c8b3 	.word	0x8b60c8b3
 8004964:	3fc68a28 	.word	0x3fc68a28
 8004968:	509f79fb 	.word	0x509f79fb
 800496c:	3fd34413 	.word	0x3fd34413
 8004970:	08008444 	.word	0x08008444
 8004974:	0800845b 	.word	0x0800845b
 8004978:	7ff00000 	.word	0x7ff00000
 800497c:	08008440 	.word	0x08008440
 8004980:	08008437 	.word	0x08008437
 8004984:	0800840f 	.word	0x0800840f
 8004988:	3ff80000 	.word	0x3ff80000
 800498c:	08008548 	.word	0x08008548
 8004990:	080084b3 	.word	0x080084b3
 8004994:	2301      	movs	r3, #1
 8004996:	930b      	str	r3, [sp, #44]	; 0x2c
 8004998:	e7d4      	b.n	8004944 <_dtoa_r+0x2ac>
 800499a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800499c:	9306      	str	r3, [sp, #24]
 800499e:	9308      	str	r3, [sp, #32]
 80049a0:	e7b7      	b.n	8004912 <_dtoa_r+0x27a>
 80049a2:	3101      	adds	r1, #1
 80049a4:	0052      	lsls	r2, r2, #1
 80049a6:	e7b7      	b.n	8004918 <_dtoa_r+0x280>
 80049a8:	69eb      	ldr	r3, [r5, #28]
 80049aa:	9a03      	ldr	r2, [sp, #12]
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	9b08      	ldr	r3, [sp, #32]
 80049b0:	2b0e      	cmp	r3, #14
 80049b2:	f200 80a8 	bhi.w	8004b06 <_dtoa_r+0x46e>
 80049b6:	2c00      	cmp	r4, #0
 80049b8:	f000 80a5 	beq.w	8004b06 <_dtoa_r+0x46e>
 80049bc:	f1bb 0f00 	cmp.w	fp, #0
 80049c0:	dd34      	ble.n	8004a2c <_dtoa_r+0x394>
 80049c2:	4b9a      	ldr	r3, [pc, #616]	; (8004c2c <_dtoa_r+0x594>)
 80049c4:	f00b 020f 	and.w	r2, fp, #15
 80049c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80049d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80049dc:	d016      	beq.n	8004a0c <_dtoa_r+0x374>
 80049de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049e2:	4b93      	ldr	r3, [pc, #588]	; (8004c30 <_dtoa_r+0x598>)
 80049e4:	2703      	movs	r7, #3
 80049e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049ea:	f7fb ff0b 	bl	8000804 <__aeabi_ddiv>
 80049ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049f2:	f004 040f 	and.w	r4, r4, #15
 80049f6:	4e8e      	ldr	r6, [pc, #568]	; (8004c30 <_dtoa_r+0x598>)
 80049f8:	b954      	cbnz	r4, 8004a10 <_dtoa_r+0x378>
 80049fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a02:	f7fb feff 	bl	8000804 <__aeabi_ddiv>
 8004a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a0a:	e029      	b.n	8004a60 <_dtoa_r+0x3c8>
 8004a0c:	2702      	movs	r7, #2
 8004a0e:	e7f2      	b.n	80049f6 <_dtoa_r+0x35e>
 8004a10:	07e1      	lsls	r1, r4, #31
 8004a12:	d508      	bpl.n	8004a26 <_dtoa_r+0x38e>
 8004a14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a1c:	f7fb fdc8 	bl	80005b0 <__aeabi_dmul>
 8004a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a24:	3701      	adds	r7, #1
 8004a26:	1064      	asrs	r4, r4, #1
 8004a28:	3608      	adds	r6, #8
 8004a2a:	e7e5      	b.n	80049f8 <_dtoa_r+0x360>
 8004a2c:	f000 80a5 	beq.w	8004b7a <_dtoa_r+0x4e2>
 8004a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a34:	f1cb 0400 	rsb	r4, fp, #0
 8004a38:	4b7c      	ldr	r3, [pc, #496]	; (8004c2c <_dtoa_r+0x594>)
 8004a3a:	f004 020f 	and.w	r2, r4, #15
 8004a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fdb3 	bl	80005b0 <__aeabi_dmul>
 8004a4a:	2702      	movs	r7, #2
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a52:	4e77      	ldr	r6, [pc, #476]	; (8004c30 <_dtoa_r+0x598>)
 8004a54:	1124      	asrs	r4, r4, #4
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	f040 8084 	bne.w	8004b64 <_dtoa_r+0x4cc>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1d2      	bne.n	8004a06 <_dtoa_r+0x36e>
 8004a60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <_dtoa_r+0x4e6>
 8004a70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a74:	2200      	movs	r2, #0
 8004a76:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <_dtoa_r+0x59c>)
 8004a78:	f7fc f80c 	bl	8000a94 <__aeabi_dcmplt>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d07e      	beq.n	8004b7e <_dtoa_r+0x4e6>
 8004a80:	9b08      	ldr	r3, [sp, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d07b      	beq.n	8004b7e <_dtoa_r+0x4e6>
 8004a86:	9b06      	ldr	r3, [sp, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dd38      	ble.n	8004afe <_dtoa_r+0x466>
 8004a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a90:	2200      	movs	r2, #0
 8004a92:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <_dtoa_r+0x5a0>)
 8004a94:	f7fb fd8c 	bl	80005b0 <__aeabi_dmul>
 8004a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a9c:	9c06      	ldr	r4, [sp, #24]
 8004a9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004aa2:	3701      	adds	r7, #1
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f7fb fd19 	bl	80004dc <__aeabi_i2d>
 8004aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aae:	f7fb fd7f 	bl	80005b0 <__aeabi_dmul>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <_dtoa_r+0x5a4>)
 8004ab6:	f7fb fbc5 	bl	8000244 <__adddf3>
 8004aba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ac2:	9611      	str	r6, [sp, #68]	; 0x44
 8004ac4:	2c00      	cmp	r4, #0
 8004ac6:	d15d      	bne.n	8004b84 <_dtoa_r+0x4ec>
 8004ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004acc:	2200      	movs	r2, #0
 8004ace:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <_dtoa_r+0x5a8>)
 8004ad0:	f7fb fbb6 	bl	8000240 <__aeabi_dsub>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004adc:	4633      	mov	r3, r6
 8004ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae0:	f7fb fff6 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	f040 8295 	bne.w	8005014 <_dtoa_r+0x97c>
 8004aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004af0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004af4:	f7fb ffce 	bl	8000a94 <__aeabi_dcmplt>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	f040 8289 	bne.w	8005010 <_dtoa_r+0x978>
 8004afe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f2c0 8151 	blt.w	8004db0 <_dtoa_r+0x718>
 8004b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8004b12:	f300 814d 	bgt.w	8004db0 <_dtoa_r+0x718>
 8004b16:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <_dtoa_r+0x594>)
 8004b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f280 80da 	bge.w	8004ce0 <_dtoa_r+0x648>
 8004b2c:	9b08      	ldr	r3, [sp, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f300 80d6 	bgt.w	8004ce0 <_dtoa_r+0x648>
 8004b34:	f040 826b 	bne.w	800500e <_dtoa_r+0x976>
 8004b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <_dtoa_r+0x5a8>)
 8004b40:	f7fb fd36 	bl	80005b0 <__aeabi_dmul>
 8004b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b48:	f7fb ffb8 	bl	8000abc <__aeabi_dcmpge>
 8004b4c:	9c08      	ldr	r4, [sp, #32]
 8004b4e:	4626      	mov	r6, r4
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f040 8241 	bne.w	8004fd8 <_dtoa_r+0x940>
 8004b56:	2331      	movs	r3, #49	; 0x31
 8004b58:	9f03      	ldr	r7, [sp, #12]
 8004b5a:	f10b 0b01 	add.w	fp, fp, #1
 8004b5e:	f807 3b01 	strb.w	r3, [r7], #1
 8004b62:	e23d      	b.n	8004fe0 <_dtoa_r+0x948>
 8004b64:	07e2      	lsls	r2, r4, #31
 8004b66:	d505      	bpl.n	8004b74 <_dtoa_r+0x4dc>
 8004b68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b6c:	f7fb fd20 	bl	80005b0 <__aeabi_dmul>
 8004b70:	2301      	movs	r3, #1
 8004b72:	3701      	adds	r7, #1
 8004b74:	1064      	asrs	r4, r4, #1
 8004b76:	3608      	adds	r6, #8
 8004b78:	e76d      	b.n	8004a56 <_dtoa_r+0x3be>
 8004b7a:	2702      	movs	r7, #2
 8004b7c:	e770      	b.n	8004a60 <_dtoa_r+0x3c8>
 8004b7e:	46d8      	mov	r8, fp
 8004b80:	9c08      	ldr	r4, [sp, #32]
 8004b82:	e78f      	b.n	8004aa4 <_dtoa_r+0x40c>
 8004b84:	9903      	ldr	r1, [sp, #12]
 8004b86:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <_dtoa_r+0x594>)
 8004b88:	4421      	add	r1, r4
 8004b8a:	9112      	str	r1, [sp, #72]	; 0x48
 8004b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004b96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b9a:	2900      	cmp	r1, #0
 8004b9c:	d054      	beq.n	8004c48 <_dtoa_r+0x5b0>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	4928      	ldr	r1, [pc, #160]	; (8004c44 <_dtoa_r+0x5ac>)
 8004ba2:	f7fb fe2f 	bl	8000804 <__aeabi_ddiv>
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	4632      	mov	r2, r6
 8004baa:	f7fb fb49 	bl	8000240 <__aeabi_dsub>
 8004bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bb2:	9f03      	ldr	r7, [sp, #12]
 8004bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb8:	f7fb ffaa 	bl	8000b10 <__aeabi_d2iz>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	f7fb fc8d 	bl	80004dc <__aeabi_i2d>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bca:	f7fb fb39 	bl	8000240 <__aeabi_dsub>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	3430      	adds	r4, #48	; 0x30
 8004bd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bdc:	f807 4b01 	strb.w	r4, [r7], #1
 8004be0:	f7fb ff58 	bl	8000a94 <__aeabi_dcmplt>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d173      	bne.n	8004cd0 <_dtoa_r+0x638>
 8004be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bec:	2000      	movs	r0, #0
 8004bee:	4911      	ldr	r1, [pc, #68]	; (8004c34 <_dtoa_r+0x59c>)
 8004bf0:	f7fb fb26 	bl	8000240 <__aeabi_dsub>
 8004bf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bf8:	f7fb ff4c 	bl	8000a94 <__aeabi_dcmplt>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f040 80b6 	bne.w	8004d6e <_dtoa_r+0x6d6>
 8004c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c04:	429f      	cmp	r7, r3
 8004c06:	f43f af7a 	beq.w	8004afe <_dtoa_r+0x466>
 8004c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <_dtoa_r+0x5a0>)
 8004c12:	f7fb fccd 	bl	80005b0 <__aeabi_dmul>
 8004c16:	2200      	movs	r2, #0
 8004c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <_dtoa_r+0x5a0>)
 8004c22:	f7fb fcc5 	bl	80005b0 <__aeabi_dmul>
 8004c26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c2a:	e7c3      	b.n	8004bb4 <_dtoa_r+0x51c>
 8004c2c:	08008548 	.word	0x08008548
 8004c30:	08008520 	.word	0x08008520
 8004c34:	3ff00000 	.word	0x3ff00000
 8004c38:	40240000 	.word	0x40240000
 8004c3c:	401c0000 	.word	0x401c0000
 8004c40:	40140000 	.word	0x40140000
 8004c44:	3fe00000 	.word	0x3fe00000
 8004c48:	4630      	mov	r0, r6
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb fcb0 	bl	80005b0 <__aeabi_dmul>
 8004c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c56:	9c03      	ldr	r4, [sp, #12]
 8004c58:	9314      	str	r3, [sp, #80]	; 0x50
 8004c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c5e:	f7fb ff57 	bl	8000b10 <__aeabi_d2iz>
 8004c62:	9015      	str	r0, [sp, #84]	; 0x54
 8004c64:	f7fb fc3a 	bl	80004dc <__aeabi_i2d>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c70:	f7fb fae6 	bl	8000240 <__aeabi_dsub>
 8004c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c76:	4606      	mov	r6, r0
 8004c78:	3330      	adds	r3, #48	; 0x30
 8004c7a:	f804 3b01 	strb.w	r3, [r4], #1
 8004c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c80:	460f      	mov	r7, r1
 8004c82:	429c      	cmp	r4, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	d124      	bne.n	8004cd4 <_dtoa_r+0x63c>
 8004c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c8e:	4baf      	ldr	r3, [pc, #700]	; (8004f4c <_dtoa_r+0x8b4>)
 8004c90:	f7fb fad8 	bl	8000244 <__adddf3>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb ff18 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d163      	bne.n	8004d6c <_dtoa_r+0x6d4>
 8004ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ca8:	2000      	movs	r0, #0
 8004caa:	49a8      	ldr	r1, [pc, #672]	; (8004f4c <_dtoa_r+0x8b4>)
 8004cac:	f7fb fac8 	bl	8000240 <__aeabi_dsub>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	f7fb feec 	bl	8000a94 <__aeabi_dcmplt>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f43f af1e 	beq.w	8004afe <_dtoa_r+0x466>
 8004cc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004cc4:	1e7b      	subs	r3, r7, #1
 8004cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8004cc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ccc:	2b30      	cmp	r3, #48	; 0x30
 8004cce:	d0f8      	beq.n	8004cc2 <_dtoa_r+0x62a>
 8004cd0:	46c3      	mov	fp, r8
 8004cd2:	e03b      	b.n	8004d4c <_dtoa_r+0x6b4>
 8004cd4:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <_dtoa_r+0x8b8>)
 8004cd6:	f7fb fc6b 	bl	80005b0 <__aeabi_dmul>
 8004cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cde:	e7bc      	b.n	8004c5a <_dtoa_r+0x5c2>
 8004ce0:	9f03      	ldr	r7, [sp, #12]
 8004ce2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fd89 	bl	8000804 <__aeabi_ddiv>
 8004cf2:	f7fb ff0d 	bl	8000b10 <__aeabi_d2iz>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	f7fb fbf0 	bl	80004dc <__aeabi_i2d>
 8004cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d00:	f7fb fc56 	bl	80005b0 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4640      	mov	r0, r8
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	f7fb fa98 	bl	8000240 <__aeabi_dsub>
 8004d10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d14:	f807 6b01 	strb.w	r6, [r7], #1
 8004d18:	9e03      	ldr	r6, [sp, #12]
 8004d1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004d1e:	1bbe      	subs	r6, r7, r6
 8004d20:	45b4      	cmp	ip, r6
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	d136      	bne.n	8004d96 <_dtoa_r+0x6fe>
 8004d28:	f7fb fa8c 	bl	8000244 <__adddf3>
 8004d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d30:	4680      	mov	r8, r0
 8004d32:	4689      	mov	r9, r1
 8004d34:	f7fb fecc 	bl	8000ad0 <__aeabi_dcmpgt>
 8004d38:	bb58      	cbnz	r0, 8004d92 <_dtoa_r+0x6fa>
 8004d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d3e:	4640      	mov	r0, r8
 8004d40:	4649      	mov	r1, r9
 8004d42:	f7fb fe9d 	bl	8000a80 <__aeabi_dcmpeq>
 8004d46:	b108      	cbz	r0, 8004d4c <_dtoa_r+0x6b4>
 8004d48:	07e3      	lsls	r3, r4, #31
 8004d4a:	d422      	bmi.n	8004d92 <_dtoa_r+0x6fa>
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 fbc2 	bl	80054d8 <_Bfree>
 8004d54:	2300      	movs	r3, #0
 8004d56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d58:	703b      	strb	r3, [r7, #0]
 8004d5a:	f10b 0301 	add.w	r3, fp, #1
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f43f ace6 	beq.w	8004734 <_dtoa_r+0x9c>
 8004d68:	601f      	str	r7, [r3, #0]
 8004d6a:	e4e3      	b.n	8004734 <_dtoa_r+0x9c>
 8004d6c:	4627      	mov	r7, r4
 8004d6e:	463b      	mov	r3, r7
 8004d70:	461f      	mov	r7, r3
 8004d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d76:	2a39      	cmp	r2, #57	; 0x39
 8004d78:	d107      	bne.n	8004d8a <_dtoa_r+0x6f2>
 8004d7a:	9a03      	ldr	r2, [sp, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1f7      	bne.n	8004d70 <_dtoa_r+0x6d8>
 8004d80:	2230      	movs	r2, #48	; 0x30
 8004d82:	9903      	ldr	r1, [sp, #12]
 8004d84:	f108 0801 	add.w	r8, r8, #1
 8004d88:	700a      	strb	r2, [r1, #0]
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	3201      	adds	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e79e      	b.n	8004cd0 <_dtoa_r+0x638>
 8004d92:	46d8      	mov	r8, fp
 8004d94:	e7eb      	b.n	8004d6e <_dtoa_r+0x6d6>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <_dtoa_r+0x8b8>)
 8004d9a:	f7fb fc09 	bl	80005b0 <__aeabi_dmul>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2300      	movs	r3, #0
 8004da2:	4680      	mov	r8, r0
 8004da4:	4689      	mov	r9, r1
 8004da6:	f7fb fe6b 	bl	8000a80 <__aeabi_dcmpeq>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d09b      	beq.n	8004ce6 <_dtoa_r+0x64e>
 8004dae:	e7cd      	b.n	8004d4c <_dtoa_r+0x6b4>
 8004db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	f000 80c4 	beq.w	8004f40 <_dtoa_r+0x8a8>
 8004db8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dba:	2a01      	cmp	r2, #1
 8004dbc:	f300 80a8 	bgt.w	8004f10 <_dtoa_r+0x878>
 8004dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dc2:	2a00      	cmp	r2, #0
 8004dc4:	f000 80a0 	beq.w	8004f08 <_dtoa_r+0x870>
 8004dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dcc:	464f      	mov	r7, r9
 8004dce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	441a      	add	r2, r3
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	4499      	add	r9, r3
 8004dda:	9209      	str	r2, [sp, #36]	; 0x24
 8004ddc:	f000 fc7c 	bl	80056d8 <__i2b>
 8004de0:	4606      	mov	r6, r0
 8004de2:	b15f      	cbz	r7, 8004dfc <_dtoa_r+0x764>
 8004de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	dd08      	ble.n	8004dfc <_dtoa_r+0x764>
 8004dea:	42bb      	cmp	r3, r7
 8004dec:	bfa8      	it	ge
 8004dee:	463b      	movge	r3, r7
 8004df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df2:	eba9 0903 	sub.w	r9, r9, r3
 8004df6:	1aff      	subs	r7, r7, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfe:	b1f3      	cbz	r3, 8004e3e <_dtoa_r+0x7a6>
 8004e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a0 	beq.w	8004f48 <_dtoa_r+0x8b0>
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	dd10      	ble.n	8004e2e <_dtoa_r+0x796>
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 fd1f 	bl	8005854 <__pow5mult>
 8004e16:	4652      	mov	r2, sl
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 fc71 	bl	8005704 <__multiply>
 8004e22:	4680      	mov	r8, r0
 8004e24:	4651      	mov	r1, sl
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 fb56 	bl	80054d8 <_Bfree>
 8004e2c:	46c2      	mov	sl, r8
 8004e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e30:	1b1a      	subs	r2, r3, r4
 8004e32:	d004      	beq.n	8004e3e <_dtoa_r+0x7a6>
 8004e34:	4651      	mov	r1, sl
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fd0c 	bl	8005854 <__pow5mult>
 8004e3c:	4682      	mov	sl, r0
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 fc49 	bl	80056d8 <__i2b>
 8004e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e48:	4604      	mov	r4, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f340 8082 	ble.w	8004f54 <_dtoa_r+0x8bc>
 8004e50:	461a      	mov	r2, r3
 8004e52:	4601      	mov	r1, r0
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fcfd 	bl	8005854 <__pow5mult>
 8004e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	dd7b      	ble.n	8004f5a <_dtoa_r+0x8c2>
 8004e62:	f04f 0800 	mov.w	r8, #0
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e6c:	6918      	ldr	r0, [r3, #16]
 8004e6e:	f000 fbe5 	bl	800563c <__hi0bits>
 8004e72:	f1c0 0020 	rsb	r0, r0, #32
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	4418      	add	r0, r3
 8004e7a:	f010 001f 	ands.w	r0, r0, #31
 8004e7e:	f000 8092 	beq.w	8004fa6 <_dtoa_r+0x90e>
 8004e82:	f1c0 0320 	rsb	r3, r0, #32
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	f340 8085 	ble.w	8004f96 <_dtoa_r+0x8fe>
 8004e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8e:	f1c0 001c 	rsb	r0, r0, #28
 8004e92:	4403      	add	r3, r0
 8004e94:	4481      	add	r9, r0
 8004e96:	4407      	add	r7, r0
 8004e98:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9a:	f1b9 0f00 	cmp.w	r9, #0
 8004e9e:	dd05      	ble.n	8004eac <_dtoa_r+0x814>
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	464a      	mov	r2, r9
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 fd2f 	bl	8005908 <__lshift>
 8004eaa:	4682      	mov	sl, r0
 8004eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dd05      	ble.n	8004ebe <_dtoa_r+0x826>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fd26 	bl	8005908 <__lshift>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d072      	beq.n	8004faa <_dtoa_r+0x912>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f000 fd8a 	bl	80059e0 <__mcmp>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	da6c      	bge.n	8004faa <_dtoa_r+0x912>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	220a      	movs	r2, #10
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 fb20 	bl	800551c <__multadd>
 8004edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ede:	4682      	mov	sl, r0
 8004ee0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 81ac 	beq.w	8005242 <_dtoa_r+0xbaa>
 8004eea:	2300      	movs	r3, #0
 8004eec:	4631      	mov	r1, r6
 8004eee:	220a      	movs	r2, #10
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 fb13 	bl	800551c <__multadd>
 8004ef6:	9b06      	ldr	r3, [sp, #24]
 8004ef8:	4606      	mov	r6, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f300 8093 	bgt.w	8005026 <_dtoa_r+0x98e>
 8004f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	dc59      	bgt.n	8004fba <_dtoa_r+0x922>
 8004f06:	e08e      	b.n	8005026 <_dtoa_r+0x98e>
 8004f08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f0e:	e75d      	b.n	8004dcc <_dtoa_r+0x734>
 8004f10:	9b08      	ldr	r3, [sp, #32]
 8004f12:	1e5c      	subs	r4, r3, #1
 8004f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	bfbf      	itttt	lt
 8004f1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004f1e:	1ae3      	sublt	r3, r4, r3
 8004f20:	18d2      	addlt	r2, r2, r3
 8004f22:	bfa8      	it	ge
 8004f24:	1b1c      	subge	r4, r3, r4
 8004f26:	9b08      	ldr	r3, [sp, #32]
 8004f28:	bfbe      	ittt	lt
 8004f2a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004f2e:	2400      	movlt	r4, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfb5      	itete	lt
 8004f34:	eba9 0703 	sublt.w	r7, r9, r3
 8004f38:	464f      	movge	r7, r9
 8004f3a:	2300      	movlt	r3, #0
 8004f3c:	9b08      	ldrge	r3, [sp, #32]
 8004f3e:	e747      	b.n	8004dd0 <_dtoa_r+0x738>
 8004f40:	464f      	mov	r7, r9
 8004f42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f46:	e74c      	b.n	8004de2 <_dtoa_r+0x74a>
 8004f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f4a:	e773      	b.n	8004e34 <_dtoa_r+0x79c>
 8004f4c:	3fe00000 	.word	0x3fe00000
 8004f50:	40240000 	.word	0x40240000
 8004f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	dc18      	bgt.n	8004f8c <_dtoa_r+0x8f4>
 8004f5a:	9b04      	ldr	r3, [sp, #16]
 8004f5c:	b9b3      	cbnz	r3, 8004f8c <_dtoa_r+0x8f4>
 8004f5e:	9b05      	ldr	r3, [sp, #20]
 8004f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f64:	b993      	cbnz	r3, 8004f8c <_dtoa_r+0x8f4>
 8004f66:	9b05      	ldr	r3, [sp, #20]
 8004f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	051b      	lsls	r3, r3, #20
 8004f70:	b17b      	cbz	r3, 8004f92 <_dtoa_r+0x8fa>
 8004f72:	f04f 0801 	mov.w	r8, #1
 8004f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f78:	f109 0901 	add.w	r9, r9, #1
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f47f af6f 	bne.w	8004e66 <_dtoa_r+0x7ce>
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e774      	b.n	8004e76 <_dtoa_r+0x7de>
 8004f8c:	f04f 0800 	mov.w	r8, #0
 8004f90:	e7f6      	b.n	8004f80 <_dtoa_r+0x8e8>
 8004f92:	4698      	mov	r8, r3
 8004f94:	e7f4      	b.n	8004f80 <_dtoa_r+0x8e8>
 8004f96:	d080      	beq.n	8004e9a <_dtoa_r+0x802>
 8004f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9a:	331c      	adds	r3, #28
 8004f9c:	441a      	add	r2, r3
 8004f9e:	4499      	add	r9, r3
 8004fa0:	441f      	add	r7, r3
 8004fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa4:	e779      	b.n	8004e9a <_dtoa_r+0x802>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	e7f6      	b.n	8004f98 <_dtoa_r+0x900>
 8004faa:	9b08      	ldr	r3, [sp, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dc34      	bgt.n	800501a <_dtoa_r+0x982>
 8004fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	dd31      	ble.n	800501a <_dtoa_r+0x982>
 8004fb6:	9b08      	ldr	r3, [sp, #32]
 8004fb8:	9306      	str	r3, [sp, #24]
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	b963      	cbnz	r3, 8004fd8 <_dtoa_r+0x940>
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 faaa 	bl	800551c <__multadd>
 8004fc8:	4601      	mov	r1, r0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4650      	mov	r0, sl
 8004fce:	f000 fd07 	bl	80059e0 <__mcmp>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f73f adbf 	bgt.w	8004b56 <_dtoa_r+0x4be>
 8004fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fda:	9f03      	ldr	r7, [sp, #12]
 8004fdc:	ea6f 0b03 	mvn.w	fp, r3
 8004fe0:	f04f 0800 	mov.w	r8, #0
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 fa76 	bl	80054d8 <_Bfree>
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	f43f aead 	beq.w	8004d4c <_dtoa_r+0x6b4>
 8004ff2:	f1b8 0f00 	cmp.w	r8, #0
 8004ff6:	d005      	beq.n	8005004 <_dtoa_r+0x96c>
 8004ff8:	45b0      	cmp	r8, r6
 8004ffa:	d003      	beq.n	8005004 <_dtoa_r+0x96c>
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fa6a 	bl	80054d8 <_Bfree>
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fa66 	bl	80054d8 <_Bfree>
 800500c:	e69e      	b.n	8004d4c <_dtoa_r+0x6b4>
 800500e:	2400      	movs	r4, #0
 8005010:	4626      	mov	r6, r4
 8005012:	e7e1      	b.n	8004fd8 <_dtoa_r+0x940>
 8005014:	46c3      	mov	fp, r8
 8005016:	4626      	mov	r6, r4
 8005018:	e59d      	b.n	8004b56 <_dtoa_r+0x4be>
 800501a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80c8 	beq.w	80051b2 <_dtoa_r+0xb1a>
 8005022:	9b08      	ldr	r3, [sp, #32]
 8005024:	9306      	str	r3, [sp, #24]
 8005026:	2f00      	cmp	r7, #0
 8005028:	dd05      	ble.n	8005036 <_dtoa_r+0x99e>
 800502a:	4631      	mov	r1, r6
 800502c:	463a      	mov	r2, r7
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fc6a 	bl	8005908 <__lshift>
 8005034:	4606      	mov	r6, r0
 8005036:	f1b8 0f00 	cmp.w	r8, #0
 800503a:	d05b      	beq.n	80050f4 <_dtoa_r+0xa5c>
 800503c:	4628      	mov	r0, r5
 800503e:	6871      	ldr	r1, [r6, #4]
 8005040:	f000 fa0a 	bl	8005458 <_Balloc>
 8005044:	4607      	mov	r7, r0
 8005046:	b928      	cbnz	r0, 8005054 <_dtoa_r+0x9bc>
 8005048:	4602      	mov	r2, r0
 800504a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800504e:	4b81      	ldr	r3, [pc, #516]	; (8005254 <_dtoa_r+0xbbc>)
 8005050:	f7ff bb36 	b.w	80046c0 <_dtoa_r+0x28>
 8005054:	6932      	ldr	r2, [r6, #16]
 8005056:	f106 010c 	add.w	r1, r6, #12
 800505a:	3202      	adds	r2, #2
 800505c:	0092      	lsls	r2, r2, #2
 800505e:	300c      	adds	r0, #12
 8005060:	f001 fff6 	bl	8007050 <memcpy>
 8005064:	2201      	movs	r2, #1
 8005066:	4639      	mov	r1, r7
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fc4d 	bl	8005908 <__lshift>
 800506e:	46b0      	mov	r8, r6
 8005070:	4606      	mov	r6, r0
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	9a03      	ldr	r2, [sp, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	9308      	str	r3, [sp, #32]
 800507a:	9b06      	ldr	r3, [sp, #24]
 800507c:	4413      	add	r3, r2
 800507e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005080:	9b04      	ldr	r3, [sp, #16]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	930a      	str	r3, [sp, #40]	; 0x28
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	4621      	mov	r1, r4
 800508c:	3b01      	subs	r3, #1
 800508e:	4650      	mov	r0, sl
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	f7ff fa75 	bl	8004580 <quorem>
 8005096:	4641      	mov	r1, r8
 8005098:	9006      	str	r0, [sp, #24]
 800509a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800509e:	4650      	mov	r0, sl
 80050a0:	f000 fc9e 	bl	80059e0 <__mcmp>
 80050a4:	4632      	mov	r2, r6
 80050a6:	9009      	str	r0, [sp, #36]	; 0x24
 80050a8:	4621      	mov	r1, r4
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 fcb4 	bl	8005a18 <__mdiff>
 80050b0:	68c2      	ldr	r2, [r0, #12]
 80050b2:	4607      	mov	r7, r0
 80050b4:	bb02      	cbnz	r2, 80050f8 <_dtoa_r+0xa60>
 80050b6:	4601      	mov	r1, r0
 80050b8:	4650      	mov	r0, sl
 80050ba:	f000 fc91 	bl	80059e0 <__mcmp>
 80050be:	4602      	mov	r2, r0
 80050c0:	4639      	mov	r1, r7
 80050c2:	4628      	mov	r0, r5
 80050c4:	920c      	str	r2, [sp, #48]	; 0x30
 80050c6:	f000 fa07 	bl	80054d8 <_Bfree>
 80050ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050ce:	9f08      	ldr	r7, [sp, #32]
 80050d0:	ea43 0102 	orr.w	r1, r3, r2
 80050d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d6:	4319      	orrs	r1, r3
 80050d8:	d110      	bne.n	80050fc <_dtoa_r+0xa64>
 80050da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80050de:	d029      	beq.n	8005134 <_dtoa_r+0xa9c>
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dd02      	ble.n	80050ec <_dtoa_r+0xa54>
 80050e6:	9b06      	ldr	r3, [sp, #24]
 80050e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80050ec:	9b04      	ldr	r3, [sp, #16]
 80050ee:	f883 9000 	strb.w	r9, [r3]
 80050f2:	e777      	b.n	8004fe4 <_dtoa_r+0x94c>
 80050f4:	4630      	mov	r0, r6
 80050f6:	e7ba      	b.n	800506e <_dtoa_r+0x9d6>
 80050f8:	2201      	movs	r2, #1
 80050fa:	e7e1      	b.n	80050c0 <_dtoa_r+0xa28>
 80050fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	db04      	blt.n	800510c <_dtoa_r+0xa74>
 8005102:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005104:	430b      	orrs	r3, r1
 8005106:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005108:	430b      	orrs	r3, r1
 800510a:	d120      	bne.n	800514e <_dtoa_r+0xab6>
 800510c:	2a00      	cmp	r2, #0
 800510e:	dded      	ble.n	80050ec <_dtoa_r+0xa54>
 8005110:	4651      	mov	r1, sl
 8005112:	2201      	movs	r2, #1
 8005114:	4628      	mov	r0, r5
 8005116:	f000 fbf7 	bl	8005908 <__lshift>
 800511a:	4621      	mov	r1, r4
 800511c:	4682      	mov	sl, r0
 800511e:	f000 fc5f 	bl	80059e0 <__mcmp>
 8005122:	2800      	cmp	r0, #0
 8005124:	dc03      	bgt.n	800512e <_dtoa_r+0xa96>
 8005126:	d1e1      	bne.n	80050ec <_dtoa_r+0xa54>
 8005128:	f019 0f01 	tst.w	r9, #1
 800512c:	d0de      	beq.n	80050ec <_dtoa_r+0xa54>
 800512e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005132:	d1d8      	bne.n	80050e6 <_dtoa_r+0xa4e>
 8005134:	2339      	movs	r3, #57	; 0x39
 8005136:	9a04      	ldr	r2, [sp, #16]
 8005138:	7013      	strb	r3, [r2, #0]
 800513a:	463b      	mov	r3, r7
 800513c:	461f      	mov	r7, r3
 800513e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005142:	3b01      	subs	r3, #1
 8005144:	2a39      	cmp	r2, #57	; 0x39
 8005146:	d06b      	beq.n	8005220 <_dtoa_r+0xb88>
 8005148:	3201      	adds	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	e74a      	b.n	8004fe4 <_dtoa_r+0x94c>
 800514e:	2a00      	cmp	r2, #0
 8005150:	dd07      	ble.n	8005162 <_dtoa_r+0xaca>
 8005152:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005156:	d0ed      	beq.n	8005134 <_dtoa_r+0xa9c>
 8005158:	9a04      	ldr	r2, [sp, #16]
 800515a:	f109 0301 	add.w	r3, r9, #1
 800515e:	7013      	strb	r3, [r2, #0]
 8005160:	e740      	b.n	8004fe4 <_dtoa_r+0x94c>
 8005162:	9b08      	ldr	r3, [sp, #32]
 8005164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005166:	f803 9c01 	strb.w	r9, [r3, #-1]
 800516a:	4293      	cmp	r3, r2
 800516c:	d042      	beq.n	80051f4 <_dtoa_r+0xb5c>
 800516e:	4651      	mov	r1, sl
 8005170:	2300      	movs	r3, #0
 8005172:	220a      	movs	r2, #10
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f9d1 	bl	800551c <__multadd>
 800517a:	45b0      	cmp	r8, r6
 800517c:	4682      	mov	sl, r0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	f04f 020a 	mov.w	r2, #10
 8005186:	4641      	mov	r1, r8
 8005188:	4628      	mov	r0, r5
 800518a:	d107      	bne.n	800519c <_dtoa_r+0xb04>
 800518c:	f000 f9c6 	bl	800551c <__multadd>
 8005190:	4680      	mov	r8, r0
 8005192:	4606      	mov	r6, r0
 8005194:	9b08      	ldr	r3, [sp, #32]
 8005196:	3301      	adds	r3, #1
 8005198:	9308      	str	r3, [sp, #32]
 800519a:	e775      	b.n	8005088 <_dtoa_r+0x9f0>
 800519c:	f000 f9be 	bl	800551c <__multadd>
 80051a0:	4631      	mov	r1, r6
 80051a2:	4680      	mov	r8, r0
 80051a4:	2300      	movs	r3, #0
 80051a6:	220a      	movs	r2, #10
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 f9b7 	bl	800551c <__multadd>
 80051ae:	4606      	mov	r6, r0
 80051b0:	e7f0      	b.n	8005194 <_dtoa_r+0xafc>
 80051b2:	9b08      	ldr	r3, [sp, #32]
 80051b4:	9306      	str	r3, [sp, #24]
 80051b6:	9f03      	ldr	r7, [sp, #12]
 80051b8:	4621      	mov	r1, r4
 80051ba:	4650      	mov	r0, sl
 80051bc:	f7ff f9e0 	bl	8004580 <quorem>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051c6:	f807 9b01 	strb.w	r9, [r7], #1
 80051ca:	1afa      	subs	r2, r7, r3
 80051cc:	9b06      	ldr	r3, [sp, #24]
 80051ce:	4293      	cmp	r3, r2
 80051d0:	dd07      	ble.n	80051e2 <_dtoa_r+0xb4a>
 80051d2:	4651      	mov	r1, sl
 80051d4:	2300      	movs	r3, #0
 80051d6:	220a      	movs	r2, #10
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 f99f 	bl	800551c <__multadd>
 80051de:	4682      	mov	sl, r0
 80051e0:	e7ea      	b.n	80051b8 <_dtoa_r+0xb20>
 80051e2:	9b06      	ldr	r3, [sp, #24]
 80051e4:	f04f 0800 	mov.w	r8, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfcc      	ite	gt
 80051ec:	461f      	movgt	r7, r3
 80051ee:	2701      	movle	r7, #1
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	441f      	add	r7, r3
 80051f4:	4651      	mov	r1, sl
 80051f6:	2201      	movs	r2, #1
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 fb85 	bl	8005908 <__lshift>
 80051fe:	4621      	mov	r1, r4
 8005200:	4682      	mov	sl, r0
 8005202:	f000 fbed 	bl	80059e0 <__mcmp>
 8005206:	2800      	cmp	r0, #0
 8005208:	dc97      	bgt.n	800513a <_dtoa_r+0xaa2>
 800520a:	d102      	bne.n	8005212 <_dtoa_r+0xb7a>
 800520c:	f019 0f01 	tst.w	r9, #1
 8005210:	d193      	bne.n	800513a <_dtoa_r+0xaa2>
 8005212:	463b      	mov	r3, r7
 8005214:	461f      	mov	r7, r3
 8005216:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800521a:	2a30      	cmp	r2, #48	; 0x30
 800521c:	d0fa      	beq.n	8005214 <_dtoa_r+0xb7c>
 800521e:	e6e1      	b.n	8004fe4 <_dtoa_r+0x94c>
 8005220:	9a03      	ldr	r2, [sp, #12]
 8005222:	429a      	cmp	r2, r3
 8005224:	d18a      	bne.n	800513c <_dtoa_r+0xaa4>
 8005226:	2331      	movs	r3, #49	; 0x31
 8005228:	f10b 0b01 	add.w	fp, fp, #1
 800522c:	e797      	b.n	800515e <_dtoa_r+0xac6>
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <_dtoa_r+0xbc0>)
 8005230:	f7ff ba9f 	b.w	8004772 <_dtoa_r+0xda>
 8005234:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005236:	2b00      	cmp	r3, #0
 8005238:	f47f aa77 	bne.w	800472a <_dtoa_r+0x92>
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <_dtoa_r+0xbc4>)
 800523e:	f7ff ba98 	b.w	8004772 <_dtoa_r+0xda>
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	dcb6      	bgt.n	80051b6 <_dtoa_r+0xb1e>
 8005248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800524a:	2b02      	cmp	r3, #2
 800524c:	f73f aeb5 	bgt.w	8004fba <_dtoa_r+0x922>
 8005250:	e7b1      	b.n	80051b6 <_dtoa_r+0xb1e>
 8005252:	bf00      	nop
 8005254:	080084b3 	.word	0x080084b3
 8005258:	0800840e 	.word	0x0800840e
 800525c:	08008437 	.word	0x08008437

08005260 <_free_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	2900      	cmp	r1, #0
 8005266:	d040      	beq.n	80052ea <_free_r+0x8a>
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f0c      	subs	r4, r1, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfb8      	it	lt
 8005272:	18e4      	addlt	r4, r4, r3
 8005274:	f000 f8e4 	bl	8005440 <__malloc_lock>
 8005278:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <_free_r+0x8c>)
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	b933      	cbnz	r3, 800528c <_free_r+0x2c>
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	4628      	mov	r0, r5
 8005284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005288:	f000 b8e0 	b.w	800544c <__malloc_unlock>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d908      	bls.n	80052a2 <_free_r+0x42>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	1821      	adds	r1, r4, r0
 8005294:	428b      	cmp	r3, r1
 8005296:	bf01      	itttt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	e7ed      	b.n	800527e <_free_r+0x1e>
 80052a2:	461a      	mov	r2, r3
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b10b      	cbz	r3, 80052ac <_free_r+0x4c>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x42>
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	1850      	adds	r0, r2, r1
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x6c>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	4401      	add	r1, r0
 80052b8:	1850      	adds	r0, r2, r1
 80052ba:	4283      	cmp	r3, r0
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	d1e0      	bne.n	8005282 <_free_r+0x22>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4408      	add	r0, r1
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	6053      	str	r3, [r2, #4]
 80052ca:	e7da      	b.n	8005282 <_free_r+0x22>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x74>
 80052ce:	230c      	movs	r3, #12
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	e7d6      	b.n	8005282 <_free_r+0x22>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf01      	itttt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	1809      	addeq	r1, r1, r0
 80052e2:	6021      	streq	r1, [r4, #0]
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	6054      	str	r4, [r2, #4]
 80052e8:	e7cb      	b.n	8005282 <_free_r+0x22>
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000388 	.word	0x20000388

080052f0 <malloc>:
 80052f0:	4b02      	ldr	r3, [pc, #8]	; (80052fc <malloc+0xc>)
 80052f2:	4601      	mov	r1, r0
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	f000 b823 	b.w	8005340 <_malloc_r>
 80052fa:	bf00      	nop
 80052fc:	20000064 	.word	0x20000064

08005300 <sbrk_aligned>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4e0e      	ldr	r6, [pc, #56]	; (800533c <sbrk_aligned+0x3c>)
 8005304:	460c      	mov	r4, r1
 8005306:	6831      	ldr	r1, [r6, #0]
 8005308:	4605      	mov	r5, r0
 800530a:	b911      	cbnz	r1, 8005312 <sbrk_aligned+0x12>
 800530c:	f001 fe90 	bl	8007030 <_sbrk_r>
 8005310:	6030      	str	r0, [r6, #0]
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f001 fe8b 	bl	8007030 <_sbrk_r>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	d00a      	beq.n	8005334 <sbrk_aligned+0x34>
 800531e:	1cc4      	adds	r4, r0, #3
 8005320:	f024 0403 	bic.w	r4, r4, #3
 8005324:	42a0      	cmp	r0, r4
 8005326:	d007      	beq.n	8005338 <sbrk_aligned+0x38>
 8005328:	1a21      	subs	r1, r4, r0
 800532a:	4628      	mov	r0, r5
 800532c:	f001 fe80 	bl	8007030 <_sbrk_r>
 8005330:	3001      	adds	r0, #1
 8005332:	d101      	bne.n	8005338 <sbrk_aligned+0x38>
 8005334:	f04f 34ff 	mov.w	r4, #4294967295
 8005338:	4620      	mov	r0, r4
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	2000038c 	.word	0x2000038c

08005340 <_malloc_r>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	1ccd      	adds	r5, r1, #3
 8005346:	f025 0503 	bic.w	r5, r5, #3
 800534a:	3508      	adds	r5, #8
 800534c:	2d0c      	cmp	r5, #12
 800534e:	bf38      	it	cc
 8005350:	250c      	movcc	r5, #12
 8005352:	2d00      	cmp	r5, #0
 8005354:	4607      	mov	r7, r0
 8005356:	db01      	blt.n	800535c <_malloc_r+0x1c>
 8005358:	42a9      	cmp	r1, r5
 800535a:	d905      	bls.n	8005368 <_malloc_r+0x28>
 800535c:	230c      	movs	r3, #12
 800535e:	2600      	movs	r6, #0
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4630      	mov	r0, r6
 8005364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005368:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800543c <_malloc_r+0xfc>
 800536c:	f000 f868 	bl	8005440 <__malloc_lock>
 8005370:	f8d8 3000 	ldr.w	r3, [r8]
 8005374:	461c      	mov	r4, r3
 8005376:	bb5c      	cbnz	r4, 80053d0 <_malloc_r+0x90>
 8005378:	4629      	mov	r1, r5
 800537a:	4638      	mov	r0, r7
 800537c:	f7ff ffc0 	bl	8005300 <sbrk_aligned>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	4604      	mov	r4, r0
 8005384:	d155      	bne.n	8005432 <_malloc_r+0xf2>
 8005386:	f8d8 4000 	ldr.w	r4, [r8]
 800538a:	4626      	mov	r6, r4
 800538c:	2e00      	cmp	r6, #0
 800538e:	d145      	bne.n	800541c <_malloc_r+0xdc>
 8005390:	2c00      	cmp	r4, #0
 8005392:	d048      	beq.n	8005426 <_malloc_r+0xe6>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	4631      	mov	r1, r6
 8005398:	4638      	mov	r0, r7
 800539a:	eb04 0903 	add.w	r9, r4, r3
 800539e:	f001 fe47 	bl	8007030 <_sbrk_r>
 80053a2:	4581      	cmp	r9, r0
 80053a4:	d13f      	bne.n	8005426 <_malloc_r+0xe6>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	4638      	mov	r0, r7
 80053aa:	1a6d      	subs	r5, r5, r1
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7ff ffa7 	bl	8005300 <sbrk_aligned>
 80053b2:	3001      	adds	r0, #1
 80053b4:	d037      	beq.n	8005426 <_malloc_r+0xe6>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	442b      	add	r3, r5
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	f8d8 3000 	ldr.w	r3, [r8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d038      	beq.n	8005436 <_malloc_r+0xf6>
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	42a2      	cmp	r2, r4
 80053c8:	d12b      	bne.n	8005422 <_malloc_r+0xe2>
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	e00f      	b.n	80053f0 <_malloc_r+0xb0>
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	1b52      	subs	r2, r2, r5
 80053d4:	d41f      	bmi.n	8005416 <_malloc_r+0xd6>
 80053d6:	2a0b      	cmp	r2, #11
 80053d8:	d917      	bls.n	800540a <_malloc_r+0xca>
 80053da:	1961      	adds	r1, r4, r5
 80053dc:	42a3      	cmp	r3, r4
 80053de:	6025      	str	r5, [r4, #0]
 80053e0:	bf18      	it	ne
 80053e2:	6059      	strne	r1, [r3, #4]
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	bf08      	it	eq
 80053e8:	f8c8 1000 	streq.w	r1, [r8]
 80053ec:	5162      	str	r2, [r4, r5]
 80053ee:	604b      	str	r3, [r1, #4]
 80053f0:	4638      	mov	r0, r7
 80053f2:	f104 060b 	add.w	r6, r4, #11
 80053f6:	f000 f829 	bl	800544c <__malloc_unlock>
 80053fa:	f026 0607 	bic.w	r6, r6, #7
 80053fe:	1d23      	adds	r3, r4, #4
 8005400:	1af2      	subs	r2, r6, r3
 8005402:	d0ae      	beq.n	8005362 <_malloc_r+0x22>
 8005404:	1b9b      	subs	r3, r3, r6
 8005406:	50a3      	str	r3, [r4, r2]
 8005408:	e7ab      	b.n	8005362 <_malloc_r+0x22>
 800540a:	42a3      	cmp	r3, r4
 800540c:	6862      	ldr	r2, [r4, #4]
 800540e:	d1dd      	bne.n	80053cc <_malloc_r+0x8c>
 8005410:	f8c8 2000 	str.w	r2, [r8]
 8005414:	e7ec      	b.n	80053f0 <_malloc_r+0xb0>
 8005416:	4623      	mov	r3, r4
 8005418:	6864      	ldr	r4, [r4, #4]
 800541a:	e7ac      	b.n	8005376 <_malloc_r+0x36>
 800541c:	4634      	mov	r4, r6
 800541e:	6876      	ldr	r6, [r6, #4]
 8005420:	e7b4      	b.n	800538c <_malloc_r+0x4c>
 8005422:	4613      	mov	r3, r2
 8005424:	e7cc      	b.n	80053c0 <_malloc_r+0x80>
 8005426:	230c      	movs	r3, #12
 8005428:	4638      	mov	r0, r7
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	f000 f80e 	bl	800544c <__malloc_unlock>
 8005430:	e797      	b.n	8005362 <_malloc_r+0x22>
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	e7dc      	b.n	80053f0 <_malloc_r+0xb0>
 8005436:	605b      	str	r3, [r3, #4]
 8005438:	deff      	udf	#255	; 0xff
 800543a:	bf00      	nop
 800543c:	20000388 	.word	0x20000388

08005440 <__malloc_lock>:
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <__malloc_lock+0x8>)
 8005442:	f7ff b888 	b.w	8004556 <__retarget_lock_acquire_recursive>
 8005446:	bf00      	nop
 8005448:	20000384 	.word	0x20000384

0800544c <__malloc_unlock>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__malloc_unlock+0x8>)
 800544e:	f7ff b883 	b.w	8004558 <__retarget_lock_release_recursive>
 8005452:	bf00      	nop
 8005454:	20000384 	.word	0x20000384

08005458 <_Balloc>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	69c6      	ldr	r6, [r0, #28]
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	b976      	cbnz	r6, 8005480 <_Balloc+0x28>
 8005462:	2010      	movs	r0, #16
 8005464:	f7ff ff44 	bl	80052f0 <malloc>
 8005468:	4602      	mov	r2, r0
 800546a:	61e0      	str	r0, [r4, #28]
 800546c:	b920      	cbnz	r0, 8005478 <_Balloc+0x20>
 800546e:	216b      	movs	r1, #107	; 0x6b
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <_Balloc+0x78>)
 8005472:	4818      	ldr	r0, [pc, #96]	; (80054d4 <_Balloc+0x7c>)
 8005474:	f001 fe00 	bl	8007078 <__assert_func>
 8005478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800547c:	6006      	str	r6, [r0, #0]
 800547e:	60c6      	str	r6, [r0, #12]
 8005480:	69e6      	ldr	r6, [r4, #28]
 8005482:	68f3      	ldr	r3, [r6, #12]
 8005484:	b183      	cbz	r3, 80054a8 <_Balloc+0x50>
 8005486:	69e3      	ldr	r3, [r4, #28]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800548e:	b9b8      	cbnz	r0, 80054c0 <_Balloc+0x68>
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f605 	lsl.w	r6, r1, r5
 8005496:	1d72      	adds	r2, r6, #5
 8005498:	4620      	mov	r0, r4
 800549a:	0092      	lsls	r2, r2, #2
 800549c:	f001 fe0a 	bl	80070b4 <_calloc_r>
 80054a0:	b160      	cbz	r0, 80054bc <_Balloc+0x64>
 80054a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054a6:	e00e      	b.n	80054c6 <_Balloc+0x6e>
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	2104      	movs	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 fe01 	bl	80070b4 <_calloc_r>
 80054b2:	69e3      	ldr	r3, [r4, #28]
 80054b4:	60f0      	str	r0, [r6, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <_Balloc+0x2e>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	6802      	ldr	r2, [r0, #0]
 80054c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054cc:	e7f7      	b.n	80054be <_Balloc+0x66>
 80054ce:	bf00      	nop
 80054d0:	08008444 	.word	0x08008444
 80054d4:	080084c4 	.word	0x080084c4

080054d8 <_Bfree>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	69c6      	ldr	r6, [r0, #28]
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Bfree+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ff04 	bl	80052f0 <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	61e8      	str	r0, [r5, #28]
 80054ec:	b920      	cbnz	r0, 80054f8 <_Bfree+0x20>
 80054ee:	218f      	movs	r1, #143	; 0x8f
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <_Bfree+0x3c>)
 80054f2:	4809      	ldr	r0, [pc, #36]	; (8005518 <_Bfree+0x40>)
 80054f4:	f001 fdc0 	bl	8007078 <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	b13c      	cbz	r4, 8005512 <_Bfree+0x3a>
 8005502:	69eb      	ldr	r3, [r5, #28]
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	08008444 	.word	0x08008444
 8005518:	080084c4 	.word	0x080084c4

0800551c <__multadd>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	4607      	mov	r7, r0
 8005522:	460c      	mov	r4, r1
 8005524:	461e      	mov	r6, r3
 8005526:	2000      	movs	r0, #0
 8005528:	690d      	ldr	r5, [r1, #16]
 800552a:	f101 0c14 	add.w	ip, r1, #20
 800552e:	f8dc 3000 	ldr.w	r3, [ip]
 8005532:	3001      	adds	r0, #1
 8005534:	b299      	uxth	r1, r3
 8005536:	fb02 6101 	mla	r1, r2, r1, r6
 800553a:	0c1e      	lsrs	r6, r3, #16
 800553c:	0c0b      	lsrs	r3, r1, #16
 800553e:	fb02 3306 	mla	r3, r2, r6, r3
 8005542:	b289      	uxth	r1, r1
 8005544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005548:	4285      	cmp	r5, r0
 800554a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800554e:	f84c 1b04 	str.w	r1, [ip], #4
 8005552:	dcec      	bgt.n	800552e <__multadd+0x12>
 8005554:	b30e      	cbz	r6, 800559a <__multadd+0x7e>
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc19      	bgt.n	8005590 <__multadd+0x74>
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4638      	mov	r0, r7
 8005560:	3101      	adds	r1, #1
 8005562:	f7ff ff79 	bl	8005458 <_Balloc>
 8005566:	4680      	mov	r8, r0
 8005568:	b928      	cbnz	r0, 8005576 <__multadd+0x5a>
 800556a:	4602      	mov	r2, r0
 800556c:	21ba      	movs	r1, #186	; 0xba
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <__multadd+0x84>)
 8005570:	480c      	ldr	r0, [pc, #48]	; (80055a4 <__multadd+0x88>)
 8005572:	f001 fd81 	bl	8007078 <__assert_func>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	f104 010c 	add.w	r1, r4, #12
 800557c:	3202      	adds	r2, #2
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	300c      	adds	r0, #12
 8005582:	f001 fd65 	bl	8007050 <memcpy>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ffa5 	bl	80054d8 <_Bfree>
 800558e:	4644      	mov	r4, r8
 8005590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005594:	3501      	adds	r5, #1
 8005596:	615e      	str	r6, [r3, #20]
 8005598:	6125      	str	r5, [r4, #16]
 800559a:	4620      	mov	r0, r4
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	080084b3 	.word	0x080084b3
 80055a4:	080084c4 	.word	0x080084c4

080055a8 <__s2b>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	4615      	mov	r5, r2
 80055ae:	2209      	movs	r2, #9
 80055b0:	461f      	mov	r7, r3
 80055b2:	3308      	adds	r3, #8
 80055b4:	460c      	mov	r4, r1
 80055b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ba:	4606      	mov	r6, r0
 80055bc:	2201      	movs	r2, #1
 80055be:	2100      	movs	r1, #0
 80055c0:	429a      	cmp	r2, r3
 80055c2:	db09      	blt.n	80055d8 <__s2b+0x30>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7ff ff47 	bl	8005458 <_Balloc>
 80055ca:	b940      	cbnz	r0, 80055de <__s2b+0x36>
 80055cc:	4602      	mov	r2, r0
 80055ce:	21d3      	movs	r1, #211	; 0xd3
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <__s2b+0x8c>)
 80055d2:	4819      	ldr	r0, [pc, #100]	; (8005638 <__s2b+0x90>)
 80055d4:	f001 fd50 	bl	8007078 <__assert_func>
 80055d8:	0052      	lsls	r2, r2, #1
 80055da:	3101      	adds	r1, #1
 80055dc:	e7f0      	b.n	80055c0 <__s2b+0x18>
 80055de:	9b08      	ldr	r3, [sp, #32]
 80055e0:	2d09      	cmp	r5, #9
 80055e2:	6143      	str	r3, [r0, #20]
 80055e4:	f04f 0301 	mov.w	r3, #1
 80055e8:	6103      	str	r3, [r0, #16]
 80055ea:	dd16      	ble.n	800561a <__s2b+0x72>
 80055ec:	f104 0909 	add.w	r9, r4, #9
 80055f0:	46c8      	mov	r8, r9
 80055f2:	442c      	add	r4, r5
 80055f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055f8:	4601      	mov	r1, r0
 80055fa:	220a      	movs	r2, #10
 80055fc:	4630      	mov	r0, r6
 80055fe:	3b30      	subs	r3, #48	; 0x30
 8005600:	f7ff ff8c 	bl	800551c <__multadd>
 8005604:	45a0      	cmp	r8, r4
 8005606:	d1f5      	bne.n	80055f4 <__s2b+0x4c>
 8005608:	f1a5 0408 	sub.w	r4, r5, #8
 800560c:	444c      	add	r4, r9
 800560e:	1b2d      	subs	r5, r5, r4
 8005610:	1963      	adds	r3, r4, r5
 8005612:	42bb      	cmp	r3, r7
 8005614:	db04      	blt.n	8005620 <__s2b+0x78>
 8005616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561a:	2509      	movs	r5, #9
 800561c:	340a      	adds	r4, #10
 800561e:	e7f6      	b.n	800560e <__s2b+0x66>
 8005620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005624:	4601      	mov	r1, r0
 8005626:	220a      	movs	r2, #10
 8005628:	4630      	mov	r0, r6
 800562a:	3b30      	subs	r3, #48	; 0x30
 800562c:	f7ff ff76 	bl	800551c <__multadd>
 8005630:	e7ee      	b.n	8005610 <__s2b+0x68>
 8005632:	bf00      	nop
 8005634:	080084b3 	.word	0x080084b3
 8005638:	080084c4 	.word	0x080084c4

0800563c <__hi0bits>:
 800563c:	0c02      	lsrs	r2, r0, #16
 800563e:	0412      	lsls	r2, r2, #16
 8005640:	4603      	mov	r3, r0
 8005642:	b9ca      	cbnz	r2, 8005678 <__hi0bits+0x3c>
 8005644:	0403      	lsls	r3, r0, #16
 8005646:	2010      	movs	r0, #16
 8005648:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800564c:	bf04      	itt	eq
 800564e:	021b      	lsleq	r3, r3, #8
 8005650:	3008      	addeq	r0, #8
 8005652:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005656:	bf04      	itt	eq
 8005658:	011b      	lsleq	r3, r3, #4
 800565a:	3004      	addeq	r0, #4
 800565c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005660:	bf04      	itt	eq
 8005662:	009b      	lsleq	r3, r3, #2
 8005664:	3002      	addeq	r0, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	db05      	blt.n	8005676 <__hi0bits+0x3a>
 800566a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800566e:	f100 0001 	add.w	r0, r0, #1
 8005672:	bf08      	it	eq
 8005674:	2020      	moveq	r0, #32
 8005676:	4770      	bx	lr
 8005678:	2000      	movs	r0, #0
 800567a:	e7e5      	b.n	8005648 <__hi0bits+0xc>

0800567c <__lo0bits>:
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	4602      	mov	r2, r0
 8005680:	f013 0007 	ands.w	r0, r3, #7
 8005684:	d00b      	beq.n	800569e <__lo0bits+0x22>
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	d421      	bmi.n	80056ce <__lo0bits+0x52>
 800568a:	0798      	lsls	r0, r3, #30
 800568c:	bf49      	itett	mi
 800568e:	085b      	lsrmi	r3, r3, #1
 8005690:	089b      	lsrpl	r3, r3, #2
 8005692:	2001      	movmi	r0, #1
 8005694:	6013      	strmi	r3, [r2, #0]
 8005696:	bf5c      	itt	pl
 8005698:	2002      	movpl	r0, #2
 800569a:	6013      	strpl	r3, [r2, #0]
 800569c:	4770      	bx	lr
 800569e:	b299      	uxth	r1, r3
 80056a0:	b909      	cbnz	r1, 80056a6 <__lo0bits+0x2a>
 80056a2:	2010      	movs	r0, #16
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b2d9      	uxtb	r1, r3
 80056a8:	b909      	cbnz	r1, 80056ae <__lo0bits+0x32>
 80056aa:	3008      	adds	r0, #8
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	0719      	lsls	r1, r3, #28
 80056b0:	bf04      	itt	eq
 80056b2:	091b      	lsreq	r3, r3, #4
 80056b4:	3004      	addeq	r0, #4
 80056b6:	0799      	lsls	r1, r3, #30
 80056b8:	bf04      	itt	eq
 80056ba:	089b      	lsreq	r3, r3, #2
 80056bc:	3002      	addeq	r0, #2
 80056be:	07d9      	lsls	r1, r3, #31
 80056c0:	d403      	bmi.n	80056ca <__lo0bits+0x4e>
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f100 0001 	add.w	r0, r0, #1
 80056c8:	d003      	beq.n	80056d2 <__lo0bits+0x56>
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	4770      	bx	lr
 80056ce:	2000      	movs	r0, #0
 80056d0:	4770      	bx	lr
 80056d2:	2020      	movs	r0, #32
 80056d4:	4770      	bx	lr
	...

080056d8 <__i2b>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	460c      	mov	r4, r1
 80056dc:	2101      	movs	r1, #1
 80056de:	f7ff febb 	bl	8005458 <_Balloc>
 80056e2:	4602      	mov	r2, r0
 80056e4:	b928      	cbnz	r0, 80056f2 <__i2b+0x1a>
 80056e6:	f240 1145 	movw	r1, #325	; 0x145
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__i2b+0x24>)
 80056ec:	4804      	ldr	r0, [pc, #16]	; (8005700 <__i2b+0x28>)
 80056ee:	f001 fcc3 	bl	8007078 <__assert_func>
 80056f2:	2301      	movs	r3, #1
 80056f4:	6144      	str	r4, [r0, #20]
 80056f6:	6103      	str	r3, [r0, #16]
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	080084b3 	.word	0x080084b3
 8005700:	080084c4 	.word	0x080084c4

08005704 <__multiply>:
 8005704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005708:	4691      	mov	r9, r2
 800570a:	690a      	ldr	r2, [r1, #16]
 800570c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005710:	460c      	mov	r4, r1
 8005712:	429a      	cmp	r2, r3
 8005714:	bfbe      	ittt	lt
 8005716:	460b      	movlt	r3, r1
 8005718:	464c      	movlt	r4, r9
 800571a:	4699      	movlt	r9, r3
 800571c:	6927      	ldr	r7, [r4, #16]
 800571e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005722:	68a3      	ldr	r3, [r4, #8]
 8005724:	6861      	ldr	r1, [r4, #4]
 8005726:	eb07 060a 	add.w	r6, r7, sl
 800572a:	42b3      	cmp	r3, r6
 800572c:	b085      	sub	sp, #20
 800572e:	bfb8      	it	lt
 8005730:	3101      	addlt	r1, #1
 8005732:	f7ff fe91 	bl	8005458 <_Balloc>
 8005736:	b930      	cbnz	r0, 8005746 <__multiply+0x42>
 8005738:	4602      	mov	r2, r0
 800573a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800573e:	4b43      	ldr	r3, [pc, #268]	; (800584c <__multiply+0x148>)
 8005740:	4843      	ldr	r0, [pc, #268]	; (8005850 <__multiply+0x14c>)
 8005742:	f001 fc99 	bl	8007078 <__assert_func>
 8005746:	f100 0514 	add.w	r5, r0, #20
 800574a:	462b      	mov	r3, r5
 800574c:	2200      	movs	r2, #0
 800574e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005752:	4543      	cmp	r3, r8
 8005754:	d321      	bcc.n	800579a <__multiply+0x96>
 8005756:	f104 0314 	add.w	r3, r4, #20
 800575a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800575e:	f109 0314 	add.w	r3, r9, #20
 8005762:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005766:	9202      	str	r2, [sp, #8]
 8005768:	1b3a      	subs	r2, r7, r4
 800576a:	3a15      	subs	r2, #21
 800576c:	f022 0203 	bic.w	r2, r2, #3
 8005770:	3204      	adds	r2, #4
 8005772:	f104 0115 	add.w	r1, r4, #21
 8005776:	428f      	cmp	r7, r1
 8005778:	bf38      	it	cc
 800577a:	2204      	movcc	r2, #4
 800577c:	9201      	str	r2, [sp, #4]
 800577e:	9a02      	ldr	r2, [sp, #8]
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	429a      	cmp	r2, r3
 8005784:	d80c      	bhi.n	80057a0 <__multiply+0x9c>
 8005786:	2e00      	cmp	r6, #0
 8005788:	dd03      	ble.n	8005792 <__multiply+0x8e>
 800578a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800578e:	2b00      	cmp	r3, #0
 8005790:	d05a      	beq.n	8005848 <__multiply+0x144>
 8005792:	6106      	str	r6, [r0, #16]
 8005794:	b005      	add	sp, #20
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	f843 2b04 	str.w	r2, [r3], #4
 800579e:	e7d8      	b.n	8005752 <__multiply+0x4e>
 80057a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80057a4:	f1ba 0f00 	cmp.w	sl, #0
 80057a8:	d023      	beq.n	80057f2 <__multiply+0xee>
 80057aa:	46a9      	mov	r9, r5
 80057ac:	f04f 0c00 	mov.w	ip, #0
 80057b0:	f104 0e14 	add.w	lr, r4, #20
 80057b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057b8:	f8d9 1000 	ldr.w	r1, [r9]
 80057bc:	fa1f fb82 	uxth.w	fp, r2
 80057c0:	b289      	uxth	r1, r1
 80057c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80057c6:	4461      	add	r1, ip
 80057c8:	f8d9 c000 	ldr.w	ip, [r9]
 80057cc:	0c12      	lsrs	r2, r2, #16
 80057ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80057d2:	fb0a c202 	mla	r2, sl, r2, ip
 80057d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057da:	b289      	uxth	r1, r1
 80057dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057e0:	4577      	cmp	r7, lr
 80057e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057e6:	f849 1b04 	str.w	r1, [r9], #4
 80057ea:	d8e3      	bhi.n	80057b4 <__multiply+0xb0>
 80057ec:	9a01      	ldr	r2, [sp, #4]
 80057ee:	f845 c002 	str.w	ip, [r5, r2]
 80057f2:	9a03      	ldr	r2, [sp, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057fa:	f1b9 0f00 	cmp.w	r9, #0
 80057fe:	d021      	beq.n	8005844 <__multiply+0x140>
 8005800:	46ae      	mov	lr, r5
 8005802:	f04f 0a00 	mov.w	sl, #0
 8005806:	6829      	ldr	r1, [r5, #0]
 8005808:	f104 0c14 	add.w	ip, r4, #20
 800580c:	f8bc b000 	ldrh.w	fp, [ip]
 8005810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005814:	b289      	uxth	r1, r1
 8005816:	fb09 220b 	mla	r2, r9, fp, r2
 800581a:	4452      	add	r2, sl
 800581c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005820:	f84e 1b04 	str.w	r1, [lr], #4
 8005824:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800582c:	f8be 1000 	ldrh.w	r1, [lr]
 8005830:	4567      	cmp	r7, ip
 8005832:	fb09 110a 	mla	r1, r9, sl, r1
 8005836:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800583a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800583e:	d8e5      	bhi.n	800580c <__multiply+0x108>
 8005840:	9a01      	ldr	r2, [sp, #4]
 8005842:	50a9      	str	r1, [r5, r2]
 8005844:	3504      	adds	r5, #4
 8005846:	e79a      	b.n	800577e <__multiply+0x7a>
 8005848:	3e01      	subs	r6, #1
 800584a:	e79c      	b.n	8005786 <__multiply+0x82>
 800584c:	080084b3 	.word	0x080084b3
 8005850:	080084c4 	.word	0x080084c4

08005854 <__pow5mult>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	4615      	mov	r5, r2
 800585a:	f012 0203 	ands.w	r2, r2, #3
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
 8005862:	d007      	beq.n	8005874 <__pow5mult+0x20>
 8005864:	4c25      	ldr	r4, [pc, #148]	; (80058fc <__pow5mult+0xa8>)
 8005866:	3a01      	subs	r2, #1
 8005868:	2300      	movs	r3, #0
 800586a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800586e:	f7ff fe55 	bl	800551c <__multadd>
 8005872:	4607      	mov	r7, r0
 8005874:	10ad      	asrs	r5, r5, #2
 8005876:	d03d      	beq.n	80058f4 <__pow5mult+0xa0>
 8005878:	69f4      	ldr	r4, [r6, #28]
 800587a:	b97c      	cbnz	r4, 800589c <__pow5mult+0x48>
 800587c:	2010      	movs	r0, #16
 800587e:	f7ff fd37 	bl	80052f0 <malloc>
 8005882:	4602      	mov	r2, r0
 8005884:	61f0      	str	r0, [r6, #28]
 8005886:	b928      	cbnz	r0, 8005894 <__pow5mult+0x40>
 8005888:	f240 11b3 	movw	r1, #435	; 0x1b3
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <__pow5mult+0xac>)
 800588e:	481d      	ldr	r0, [pc, #116]	; (8005904 <__pow5mult+0xb0>)
 8005890:	f001 fbf2 	bl	8007078 <__assert_func>
 8005894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005898:	6004      	str	r4, [r0, #0]
 800589a:	60c4      	str	r4, [r0, #12]
 800589c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80058a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058a4:	b94c      	cbnz	r4, 80058ba <__pow5mult+0x66>
 80058a6:	f240 2171 	movw	r1, #625	; 0x271
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ff14 	bl	80056d8 <__i2b>
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80058b8:	6003      	str	r3, [r0, #0]
 80058ba:	f04f 0900 	mov.w	r9, #0
 80058be:	07eb      	lsls	r3, r5, #31
 80058c0:	d50a      	bpl.n	80058d8 <__pow5mult+0x84>
 80058c2:	4639      	mov	r1, r7
 80058c4:	4622      	mov	r2, r4
 80058c6:	4630      	mov	r0, r6
 80058c8:	f7ff ff1c 	bl	8005704 <__multiply>
 80058cc:	4680      	mov	r8, r0
 80058ce:	4639      	mov	r1, r7
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff fe01 	bl	80054d8 <_Bfree>
 80058d6:	4647      	mov	r7, r8
 80058d8:	106d      	asrs	r5, r5, #1
 80058da:	d00b      	beq.n	80058f4 <__pow5mult+0xa0>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	b938      	cbnz	r0, 80058f0 <__pow5mult+0x9c>
 80058e0:	4622      	mov	r2, r4
 80058e2:	4621      	mov	r1, r4
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff ff0d 	bl	8005704 <__multiply>
 80058ea:	6020      	str	r0, [r4, #0]
 80058ec:	f8c0 9000 	str.w	r9, [r0]
 80058f0:	4604      	mov	r4, r0
 80058f2:	e7e4      	b.n	80058be <__pow5mult+0x6a>
 80058f4:	4638      	mov	r0, r7
 80058f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fa:	bf00      	nop
 80058fc:	08008610 	.word	0x08008610
 8005900:	08008444 	.word	0x08008444
 8005904:	080084c4 	.word	0x080084c4

08005908 <__lshift>:
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	460c      	mov	r4, r1
 800590e:	4607      	mov	r7, r0
 8005910:	4691      	mov	r9, r2
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	6849      	ldr	r1, [r1, #4]
 8005916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800591a:	68a3      	ldr	r3, [r4, #8]
 800591c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005920:	f108 0601 	add.w	r6, r8, #1
 8005924:	42b3      	cmp	r3, r6
 8005926:	db0b      	blt.n	8005940 <__lshift+0x38>
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff fd95 	bl	8005458 <_Balloc>
 800592e:	4605      	mov	r5, r0
 8005930:	b948      	cbnz	r0, 8005946 <__lshift+0x3e>
 8005932:	4602      	mov	r2, r0
 8005934:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <__lshift+0xd0>)
 800593a:	4828      	ldr	r0, [pc, #160]	; (80059dc <__lshift+0xd4>)
 800593c:	f001 fb9c 	bl	8007078 <__assert_func>
 8005940:	3101      	adds	r1, #1
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	e7ee      	b.n	8005924 <__lshift+0x1c>
 8005946:	2300      	movs	r3, #0
 8005948:	f100 0114 	add.w	r1, r0, #20
 800594c:	f100 0210 	add.w	r2, r0, #16
 8005950:	4618      	mov	r0, r3
 8005952:	4553      	cmp	r3, sl
 8005954:	db33      	blt.n	80059be <__lshift+0xb6>
 8005956:	6920      	ldr	r0, [r4, #16]
 8005958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800595c:	f104 0314 	add.w	r3, r4, #20
 8005960:	f019 091f 	ands.w	r9, r9, #31
 8005964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800596c:	d02b      	beq.n	80059c6 <__lshift+0xbe>
 800596e:	468a      	mov	sl, r1
 8005970:	2200      	movs	r2, #0
 8005972:	f1c9 0e20 	rsb	lr, r9, #32
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	fa00 f009 	lsl.w	r0, r0, r9
 800597c:	4310      	orrs	r0, r2
 800597e:	f84a 0b04 	str.w	r0, [sl], #4
 8005982:	f853 2b04 	ldr.w	r2, [r3], #4
 8005986:	459c      	cmp	ip, r3
 8005988:	fa22 f20e 	lsr.w	r2, r2, lr
 800598c:	d8f3      	bhi.n	8005976 <__lshift+0x6e>
 800598e:	ebac 0304 	sub.w	r3, ip, r4
 8005992:	3b15      	subs	r3, #21
 8005994:	f023 0303 	bic.w	r3, r3, #3
 8005998:	3304      	adds	r3, #4
 800599a:	f104 0015 	add.w	r0, r4, #21
 800599e:	4584      	cmp	ip, r0
 80059a0:	bf38      	it	cc
 80059a2:	2304      	movcc	r3, #4
 80059a4:	50ca      	str	r2, [r1, r3]
 80059a6:	b10a      	cbz	r2, 80059ac <__lshift+0xa4>
 80059a8:	f108 0602 	add.w	r6, r8, #2
 80059ac:	3e01      	subs	r6, #1
 80059ae:	4638      	mov	r0, r7
 80059b0:	4621      	mov	r1, r4
 80059b2:	612e      	str	r6, [r5, #16]
 80059b4:	f7ff fd90 	bl	80054d8 <_Bfree>
 80059b8:	4628      	mov	r0, r5
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059be:	f842 0f04 	str.w	r0, [r2, #4]!
 80059c2:	3301      	adds	r3, #1
 80059c4:	e7c5      	b.n	8005952 <__lshift+0x4a>
 80059c6:	3904      	subs	r1, #4
 80059c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059cc:	459c      	cmp	ip, r3
 80059ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80059d2:	d8f9      	bhi.n	80059c8 <__lshift+0xc0>
 80059d4:	e7ea      	b.n	80059ac <__lshift+0xa4>
 80059d6:	bf00      	nop
 80059d8:	080084b3 	.word	0x080084b3
 80059dc:	080084c4 	.word	0x080084c4

080059e0 <__mcmp>:
 80059e0:	4603      	mov	r3, r0
 80059e2:	690a      	ldr	r2, [r1, #16]
 80059e4:	6900      	ldr	r0, [r0, #16]
 80059e6:	b530      	push	{r4, r5, lr}
 80059e8:	1a80      	subs	r0, r0, r2
 80059ea:	d10d      	bne.n	8005a08 <__mcmp+0x28>
 80059ec:	3314      	adds	r3, #20
 80059ee:	3114      	adds	r1, #20
 80059f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a00:	4295      	cmp	r5, r2
 8005a02:	d002      	beq.n	8005a0a <__mcmp+0x2a>
 8005a04:	d304      	bcc.n	8005a10 <__mcmp+0x30>
 8005a06:	2001      	movs	r0, #1
 8005a08:	bd30      	pop	{r4, r5, pc}
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	d3f4      	bcc.n	80059f8 <__mcmp+0x18>
 8005a0e:	e7fb      	b.n	8005a08 <__mcmp+0x28>
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e7f8      	b.n	8005a08 <__mcmp+0x28>
	...

08005a18 <__mdiff>:
 8005a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4607      	mov	r7, r0
 8005a20:	4611      	mov	r1, r2
 8005a22:	4628      	mov	r0, r5
 8005a24:	4614      	mov	r4, r2
 8005a26:	f7ff ffdb 	bl	80059e0 <__mcmp>
 8005a2a:	1e06      	subs	r6, r0, #0
 8005a2c:	d111      	bne.n	8005a52 <__mdiff+0x3a>
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff fd11 	bl	8005458 <_Balloc>
 8005a36:	4602      	mov	r2, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <__mdiff+0x2e>
 8005a3a:	f240 2137 	movw	r1, #567	; 0x237
 8005a3e:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <__mdiff+0x110>)
 8005a40:	483a      	ldr	r0, [pc, #232]	; (8005b2c <__mdiff+0x114>)
 8005a42:	f001 fb19 	bl	8007078 <__assert_func>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	bfa4      	itt	ge
 8005a54:	4623      	movge	r3, r4
 8005a56:	462c      	movge	r4, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	bfa6      	itte	ge
 8005a5e:	461d      	movge	r5, r3
 8005a60:	2600      	movge	r6, #0
 8005a62:	2601      	movlt	r6, #1
 8005a64:	f7ff fcf8 	bl	8005458 <_Balloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	b918      	cbnz	r0, 8005a74 <__mdiff+0x5c>
 8005a6c:	f240 2145 	movw	r1, #581	; 0x245
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <__mdiff+0x110>)
 8005a72:	e7e5      	b.n	8005a40 <__mdiff+0x28>
 8005a74:	f102 0814 	add.w	r8, r2, #20
 8005a78:	46c2      	mov	sl, r8
 8005a7a:	f04f 0c00 	mov.w	ip, #0
 8005a7e:	6927      	ldr	r7, [r4, #16]
 8005a80:	60c6      	str	r6, [r0, #12]
 8005a82:	692e      	ldr	r6, [r5, #16]
 8005a84:	f104 0014 	add.w	r0, r4, #20
 8005a88:	f105 0914 	add.w	r9, r5, #20
 8005a8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a94:	3410      	adds	r4, #16
 8005a96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a9e:	fa1f f18b 	uxth.w	r1, fp
 8005aa2:	4461      	add	r1, ip
 8005aa4:	fa1f fc83 	uxth.w	ip, r3
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	eba1 010c 	sub.w	r1, r1, ip
 8005aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ab2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ab6:	b289      	uxth	r1, r1
 8005ab8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005abc:	454e      	cmp	r6, r9
 8005abe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ac2:	f84a 1b04 	str.w	r1, [sl], #4
 8005ac6:	d8e6      	bhi.n	8005a96 <__mdiff+0x7e>
 8005ac8:	1b73      	subs	r3, r6, r5
 8005aca:	3b15      	subs	r3, #21
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	3515      	adds	r5, #21
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	42ae      	cmp	r6, r5
 8005ad6:	bf38      	it	cc
 8005ad8:	2304      	movcc	r3, #4
 8005ada:	4418      	add	r0, r3
 8005adc:	4443      	add	r3, r8
 8005ade:	461e      	mov	r6, r3
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	4575      	cmp	r5, lr
 8005ae4:	d30e      	bcc.n	8005b04 <__mdiff+0xec>
 8005ae6:	f10e 0103 	add.w	r1, lr, #3
 8005aea:	1a09      	subs	r1, r1, r0
 8005aec:	f021 0103 	bic.w	r1, r1, #3
 8005af0:	3803      	subs	r0, #3
 8005af2:	4586      	cmp	lr, r0
 8005af4:	bf38      	it	cc
 8005af6:	2100      	movcc	r1, #0
 8005af8:	440b      	add	r3, r1
 8005afa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005afe:	b189      	cbz	r1, 8005b24 <__mdiff+0x10c>
 8005b00:	6117      	str	r7, [r2, #16]
 8005b02:	e7a3      	b.n	8005a4c <__mdiff+0x34>
 8005b04:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b08:	fa1f f188 	uxth.w	r1, r8
 8005b0c:	4461      	add	r1, ip
 8005b0e:	140c      	asrs	r4, r1, #16
 8005b10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b14:	b289      	uxth	r1, r1
 8005b16:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b1a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005b1e:	f846 1b04 	str.w	r1, [r6], #4
 8005b22:	e7de      	b.n	8005ae2 <__mdiff+0xca>
 8005b24:	3f01      	subs	r7, #1
 8005b26:	e7e8      	b.n	8005afa <__mdiff+0xe2>
 8005b28:	080084b3 	.word	0x080084b3
 8005b2c:	080084c4 	.word	0x080084c4

08005b30 <__ulp>:
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <__ulp+0x3c>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc08      	bgt.n	8005b4e <__ulp+0x1e>
 8005b3c:	425b      	negs	r3, r3
 8005b3e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005b42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005b46:	da04      	bge.n	8005b52 <__ulp+0x22>
 8005b48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b4c:	4113      	asrs	r3, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	e008      	b.n	8005b64 <__ulp+0x34>
 8005b52:	f1a2 0314 	sub.w	r3, r2, #20
 8005b56:	2b1e      	cmp	r3, #30
 8005b58:	bfd6      	itet	le
 8005b5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005b5e:	2201      	movgt	r2, #1
 8005b60:	40da      	lsrle	r2, r3
 8005b62:	2300      	movs	r3, #0
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	7ff00000 	.word	0x7ff00000

08005b70 <__b2d>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	6905      	ldr	r5, [r0, #16]
 8005b74:	f100 0714 	add.w	r7, r0, #20
 8005b78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005b7c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005b80:	1f2e      	subs	r6, r5, #4
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff fd5a 	bl	800563c <__hi0bits>
 8005b88:	f1c0 0220 	rsb	r2, r0, #32
 8005b8c:	280a      	cmp	r0, #10
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f8df c068 	ldr.w	ip, [pc, #104]	; 8005bfc <__b2d+0x8c>
 8005b94:	600a      	str	r2, [r1, #0]
 8005b96:	dc12      	bgt.n	8005bbe <__b2d+0x4e>
 8005b98:	f1c0 0e0b 	rsb	lr, r0, #11
 8005b9c:	fa24 f20e 	lsr.w	r2, r4, lr
 8005ba0:	42b7      	cmp	r7, r6
 8005ba2:	ea42 010c 	orr.w	r1, r2, ip
 8005ba6:	bf2c      	ite	cs
 8005ba8:	2200      	movcs	r2, #0
 8005baa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8005bae:	3315      	adds	r3, #21
 8005bb0:	fa04 f303 	lsl.w	r3, r4, r3
 8005bb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbe:	42b7      	cmp	r7, r6
 8005bc0:	bf2e      	itee	cs
 8005bc2:	2200      	movcs	r2, #0
 8005bc4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8005bc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8005bcc:	3b0b      	subs	r3, #11
 8005bce:	d012      	beq.n	8005bf6 <__b2d+0x86>
 8005bd0:	f1c3 0520 	rsb	r5, r3, #32
 8005bd4:	fa22 f105 	lsr.w	r1, r2, r5
 8005bd8:	409c      	lsls	r4, r3
 8005bda:	430c      	orrs	r4, r1
 8005bdc:	42be      	cmp	r6, r7
 8005bde:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8005be2:	bf94      	ite	ls
 8005be4:	2400      	movls	r4, #0
 8005be6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005bea:	409a      	lsls	r2, r3
 8005bec:	40ec      	lsrs	r4, r5
 8005bee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005bf2:	4322      	orrs	r2, r4
 8005bf4:	e7e1      	b.n	8005bba <__b2d+0x4a>
 8005bf6:	ea44 010c 	orr.w	r1, r4, ip
 8005bfa:	e7de      	b.n	8005bba <__b2d+0x4a>
 8005bfc:	3ff00000 	.word	0x3ff00000

08005c00 <__d2b>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	2101      	movs	r1, #1
 8005c04:	4617      	mov	r7, r2
 8005c06:	461c      	mov	r4, r3
 8005c08:	9e08      	ldr	r6, [sp, #32]
 8005c0a:	f7ff fc25 	bl	8005458 <_Balloc>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b930      	cbnz	r0, 8005c20 <__d2b+0x20>
 8005c12:	4602      	mov	r2, r0
 8005c14:	f240 310f 	movw	r1, #783	; 0x30f
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <__d2b+0xa4>)
 8005c1a:	4823      	ldr	r0, [pc, #140]	; (8005ca8 <__d2b+0xa8>)
 8005c1c:	f001 fa2c 	bl	8007078 <__assert_func>
 8005c20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005c24:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c28:	bb24      	cbnz	r4, 8005c74 <__d2b+0x74>
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	d026      	beq.n	8005c7e <__d2b+0x7e>
 8005c30:	4668      	mov	r0, sp
 8005c32:	9700      	str	r7, [sp, #0]
 8005c34:	f7ff fd22 	bl	800567c <__lo0bits>
 8005c38:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c3c:	b1e8      	cbz	r0, 8005c7a <__d2b+0x7a>
 8005c3e:	f1c0 0320 	rsb	r3, r0, #32
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	430b      	orrs	r3, r1
 8005c48:	40c2      	lsrs	r2, r0
 8005c4a:	616b      	str	r3, [r5, #20]
 8005c4c:	9201      	str	r2, [sp, #4]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2102      	movne	r1, #2
 8005c56:	2101      	moveq	r1, #1
 8005c58:	61ab      	str	r3, [r5, #24]
 8005c5a:	6129      	str	r1, [r5, #16]
 8005c5c:	b1bc      	cbz	r4, 8005c8e <__d2b+0x8e>
 8005c5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c62:	4404      	add	r4, r0
 8005c64:	6034      	str	r4, [r6, #0]
 8005c66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6c:	6018      	str	r0, [r3, #0]
 8005c6e:	4628      	mov	r0, r5
 8005c70:	b003      	add	sp, #12
 8005c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c78:	e7d7      	b.n	8005c2a <__d2b+0x2a>
 8005c7a:	6169      	str	r1, [r5, #20]
 8005c7c:	e7e7      	b.n	8005c4e <__d2b+0x4e>
 8005c7e:	a801      	add	r0, sp, #4
 8005c80:	f7ff fcfc 	bl	800567c <__lo0bits>
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	2101      	movs	r1, #1
 8005c88:	616b      	str	r3, [r5, #20]
 8005c8a:	3020      	adds	r0, #32
 8005c8c:	e7e5      	b.n	8005c5a <__d2b+0x5a>
 8005c8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c92:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005c96:	6030      	str	r0, [r6, #0]
 8005c98:	6918      	ldr	r0, [r3, #16]
 8005c9a:	f7ff fccf 	bl	800563c <__hi0bits>
 8005c9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ca2:	e7e2      	b.n	8005c6a <__d2b+0x6a>
 8005ca4:	080084b3 	.word	0x080084b3
 8005ca8:	080084c4 	.word	0x080084c4

08005cac <__ratio>:
 8005cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	4688      	mov	r8, r1
 8005cb2:	4669      	mov	r1, sp
 8005cb4:	4681      	mov	r9, r0
 8005cb6:	f7ff ff5b 	bl	8005b70 <__b2d>
 8005cba:	460f      	mov	r7, r1
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	a901      	add	r1, sp, #4
 8005cc4:	f7ff ff54 	bl	8005b70 <__b2d>
 8005cc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ccc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cd0:	468b      	mov	fp, r1
 8005cd2:	eba3 0c02 	sub.w	ip, r3, r2
 8005cd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bfd5      	itete	le
 8005ce4:	460a      	movle	r2, r1
 8005ce6:	462a      	movgt	r2, r5
 8005ce8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005cec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005cf0:	bfd8      	it	le
 8005cf2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005cf6:	465b      	mov	r3, fp
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7fa fd81 	bl	8000804 <__aeabi_ddiv>
 8005d02:	b003      	add	sp, #12
 8005d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d08 <__copybits>:
 8005d08:	3901      	subs	r1, #1
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	1149      	asrs	r1, r1, #5
 8005d0e:	6914      	ldr	r4, [r2, #16]
 8005d10:	3101      	adds	r1, #1
 8005d12:	f102 0314 	add.w	r3, r2, #20
 8005d16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d1e:	1f05      	subs	r5, r0, #4
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d30c      	bcc.n	8005d3e <__copybits+0x36>
 8005d24:	1aa3      	subs	r3, r4, r2
 8005d26:	3b11      	subs	r3, #17
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	3211      	adds	r2, #17
 8005d2e:	42a2      	cmp	r2, r4
 8005d30:	bf88      	it	hi
 8005d32:	2300      	movhi	r3, #0
 8005d34:	4418      	add	r0, r3
 8005d36:	2300      	movs	r3, #0
 8005d38:	4288      	cmp	r0, r1
 8005d3a:	d305      	bcc.n	8005d48 <__copybits+0x40>
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d42:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d46:	e7eb      	b.n	8005d20 <__copybits+0x18>
 8005d48:	f840 3b04 	str.w	r3, [r0], #4
 8005d4c:	e7f4      	b.n	8005d38 <__copybits+0x30>

08005d4e <__any_on>:
 8005d4e:	f100 0214 	add.w	r2, r0, #20
 8005d52:	6900      	ldr	r0, [r0, #16]
 8005d54:	114b      	asrs	r3, r1, #5
 8005d56:	4298      	cmp	r0, r3
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	db11      	blt.n	8005d80 <__any_on+0x32>
 8005d5c:	dd0a      	ble.n	8005d74 <__any_on+0x26>
 8005d5e:	f011 011f 	ands.w	r1, r1, #31
 8005d62:	d007      	beq.n	8005d74 <__any_on+0x26>
 8005d64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d68:	fa24 f001 	lsr.w	r0, r4, r1
 8005d6c:	fa00 f101 	lsl.w	r1, r0, r1
 8005d70:	428c      	cmp	r4, r1
 8005d72:	d10b      	bne.n	8005d8c <__any_on+0x3e>
 8005d74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d803      	bhi.n	8005d84 <__any_on+0x36>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	4603      	mov	r3, r0
 8005d82:	e7f7      	b.n	8005d74 <__any_on+0x26>
 8005d84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d0f5      	beq.n	8005d78 <__any_on+0x2a>
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e7f6      	b.n	8005d7e <__any_on+0x30>

08005d90 <sulp>:
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	460f      	mov	r7, r1
 8005d96:	4690      	mov	r8, r2
 8005d98:	f7ff feca 	bl	8005b30 <__ulp>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	f1b8 0f00 	cmp.w	r8, #0
 8005da4:	d011      	beq.n	8005dca <sulp+0x3a>
 8005da6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005daa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	dd0b      	ble.n	8005dca <sulp+0x3a>
 8005db2:	2400      	movs	r4, #0
 8005db4:	051b      	lsls	r3, r3, #20
 8005db6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005dba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	f7fa fbf5 	bl	80005b0 <__aeabi_dmul>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd2:	0000      	movs	r0, r0
 8005dd4:	0000      	movs	r0, r0
	...

08005dd8 <_strtod_l>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	b09f      	sub	sp, #124	; 0x7c
 8005dde:	9217      	str	r2, [sp, #92]	; 0x5c
 8005de0:	2200      	movs	r2, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	921a      	str	r2, [sp, #104]	; 0x68
 8005de6:	460d      	mov	r5, r1
 8005de8:	f04f 0800 	mov.w	r8, #0
 8005dec:	f04f 0900 	mov.w	r9, #0
 8005df0:	460a      	mov	r2, r1
 8005df2:	9219      	str	r2, [sp, #100]	; 0x64
 8005df4:	7811      	ldrb	r1, [r2, #0]
 8005df6:	292b      	cmp	r1, #43	; 0x2b
 8005df8:	d04a      	beq.n	8005e90 <_strtod_l+0xb8>
 8005dfa:	d838      	bhi.n	8005e6e <_strtod_l+0x96>
 8005dfc:	290d      	cmp	r1, #13
 8005dfe:	d832      	bhi.n	8005e66 <_strtod_l+0x8e>
 8005e00:	2908      	cmp	r1, #8
 8005e02:	d832      	bhi.n	8005e6a <_strtod_l+0x92>
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d03b      	beq.n	8005e80 <_strtod_l+0xa8>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	920e      	str	r2, [sp, #56]	; 0x38
 8005e0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005e0e:	7832      	ldrb	r2, [r6, #0]
 8005e10:	2a30      	cmp	r2, #48	; 0x30
 8005e12:	f040 80b2 	bne.w	8005f7a <_strtod_l+0x1a2>
 8005e16:	7872      	ldrb	r2, [r6, #1]
 8005e18:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005e1c:	2a58      	cmp	r2, #88	; 0x58
 8005e1e:	d16e      	bne.n	8005efe <_strtod_l+0x126>
 8005e20:	9302      	str	r3, [sp, #8]
 8005e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e24:	4620      	mov	r0, r4
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	ab1a      	add	r3, sp, #104	; 0x68
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	4a8c      	ldr	r2, [pc, #560]	; (8006060 <_strtod_l+0x288>)
 8005e2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005e30:	a919      	add	r1, sp, #100	; 0x64
 8005e32:	f001 f9bb 	bl	80071ac <__gethex>
 8005e36:	f010 070f 	ands.w	r7, r0, #15
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	d005      	beq.n	8005e4a <_strtod_l+0x72>
 8005e3e:	2f06      	cmp	r7, #6
 8005e40:	d128      	bne.n	8005e94 <_strtod_l+0xbc>
 8005e42:	2300      	movs	r3, #0
 8005e44:	3601      	adds	r6, #1
 8005e46:	9619      	str	r6, [sp, #100]	; 0x64
 8005e48:	930e      	str	r3, [sp, #56]	; 0x38
 8005e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 85a0 	bne.w	8006992 <_strtod_l+0xbba>
 8005e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e54:	b1cb      	cbz	r3, 8005e8a <_strtod_l+0xb2>
 8005e56:	4642      	mov	r2, r8
 8005e58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	b01f      	add	sp, #124	; 0x7c
 8005e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e66:	2920      	cmp	r1, #32
 8005e68:	d1ce      	bne.n	8005e08 <_strtod_l+0x30>
 8005e6a:	3201      	adds	r2, #1
 8005e6c:	e7c1      	b.n	8005df2 <_strtod_l+0x1a>
 8005e6e:	292d      	cmp	r1, #45	; 0x2d
 8005e70:	d1ca      	bne.n	8005e08 <_strtod_l+0x30>
 8005e72:	2101      	movs	r1, #1
 8005e74:	910e      	str	r1, [sp, #56]	; 0x38
 8005e76:	1c51      	adds	r1, r2, #1
 8005e78:	9119      	str	r1, [sp, #100]	; 0x64
 8005e7a:	7852      	ldrb	r2, [r2, #1]
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d1c5      	bne.n	8005e0c <_strtod_l+0x34>
 8005e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e82:	9519      	str	r5, [sp, #100]	; 0x64
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8582 	bne.w	800698e <_strtod_l+0xbb6>
 8005e8a:	4642      	mov	r2, r8
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	e7e5      	b.n	8005e5c <_strtod_l+0x84>
 8005e90:	2100      	movs	r1, #0
 8005e92:	e7ef      	b.n	8005e74 <_strtod_l+0x9c>
 8005e94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e96:	b13a      	cbz	r2, 8005ea8 <_strtod_l+0xd0>
 8005e98:	2135      	movs	r1, #53	; 0x35
 8005e9a:	a81c      	add	r0, sp, #112	; 0x70
 8005e9c:	f7ff ff34 	bl	8005d08 <__copybits>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ea4:	f7ff fb18 	bl	80054d8 <_Bfree>
 8005ea8:	3f01      	subs	r7, #1
 8005eaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005eac:	2f04      	cmp	r7, #4
 8005eae:	d806      	bhi.n	8005ebe <_strtod_l+0xe6>
 8005eb0:	e8df f007 	tbb	[pc, r7]
 8005eb4:	201d0314 	.word	0x201d0314
 8005eb8:	14          	.byte	0x14
 8005eb9:	00          	.byte	0x00
 8005eba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005ebe:	05e9      	lsls	r1, r5, #23
 8005ec0:	bf48      	it	mi
 8005ec2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eca:	0d1b      	lsrs	r3, r3, #20
 8005ecc:	051b      	lsls	r3, r3, #20
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1bb      	bne.n	8005e4a <_strtod_l+0x72>
 8005ed2:	f7fe fb15 	bl	8004500 <__errno>
 8005ed6:	2322      	movs	r3, #34	; 0x22
 8005ed8:	6003      	str	r3, [r0, #0]
 8005eda:	e7b6      	b.n	8005e4a <_strtod_l+0x72>
 8005edc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ee0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ee8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005eec:	e7e7      	b.n	8005ebe <_strtod_l+0xe6>
 8005eee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006064 <_strtod_l+0x28c>
 8005ef2:	e7e4      	b.n	8005ebe <_strtod_l+0xe6>
 8005ef4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005ef8:	f04f 38ff 	mov.w	r8, #4294967295
 8005efc:	e7df      	b.n	8005ebe <_strtod_l+0xe6>
 8005efe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	9219      	str	r2, [sp, #100]	; 0x64
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d0f9      	beq.n	8005efe <_strtod_l+0x126>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d09d      	beq.n	8005e4a <_strtod_l+0x72>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f04f 0a00 	mov.w	sl, #0
 8005f14:	220a      	movs	r2, #10
 8005f16:	46d3      	mov	fp, sl
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f1c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f22:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005f24:	7806      	ldrb	r6, [r0, #0]
 8005f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005f2a:	b2d9      	uxtb	r1, r3
 8005f2c:	2909      	cmp	r1, #9
 8005f2e:	d926      	bls.n	8005f7e <_strtod_l+0x1a6>
 8005f30:	2201      	movs	r2, #1
 8005f32:	494d      	ldr	r1, [pc, #308]	; (8006068 <_strtod_l+0x290>)
 8005f34:	f001 f847 	bl	8006fc6 <strncmp>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d030      	beq.n	8005f9e <_strtod_l+0x1c6>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	4632      	mov	r2, r6
 8005f40:	4603      	mov	r3, r0
 8005f42:	465e      	mov	r6, fp
 8005f44:	9008      	str	r0, [sp, #32]
 8005f46:	2a65      	cmp	r2, #101	; 0x65
 8005f48:	d001      	beq.n	8005f4e <_strtod_l+0x176>
 8005f4a:	2a45      	cmp	r2, #69	; 0x45
 8005f4c:	d113      	bne.n	8005f76 <_strtod_l+0x19e>
 8005f4e:	b91e      	cbnz	r6, 8005f58 <_strtod_l+0x180>
 8005f50:	9a05      	ldr	r2, [sp, #20]
 8005f52:	4302      	orrs	r2, r0
 8005f54:	d094      	beq.n	8005e80 <_strtod_l+0xa8>
 8005f56:	2600      	movs	r6, #0
 8005f58:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005f5a:	1c6a      	adds	r2, r5, #1
 8005f5c:	9219      	str	r2, [sp, #100]	; 0x64
 8005f5e:	786a      	ldrb	r2, [r5, #1]
 8005f60:	2a2b      	cmp	r2, #43	; 0x2b
 8005f62:	d074      	beq.n	800604e <_strtod_l+0x276>
 8005f64:	2a2d      	cmp	r2, #45	; 0x2d
 8005f66:	d078      	beq.n	800605a <_strtod_l+0x282>
 8005f68:	f04f 0c00 	mov.w	ip, #0
 8005f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f70:	2909      	cmp	r1, #9
 8005f72:	d97f      	bls.n	8006074 <_strtod_l+0x29c>
 8005f74:	9519      	str	r5, [sp, #100]	; 0x64
 8005f76:	2700      	movs	r7, #0
 8005f78:	e09e      	b.n	80060b8 <_strtod_l+0x2e0>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e7c8      	b.n	8005f10 <_strtod_l+0x138>
 8005f7e:	f1bb 0f08 	cmp.w	fp, #8
 8005f82:	bfd8      	it	le
 8005f84:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005f86:	f100 0001 	add.w	r0, r0, #1
 8005f8a:	bfd6      	itet	le
 8005f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f90:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005f94:	930a      	strle	r3, [sp, #40]	; 0x28
 8005f96:	f10b 0b01 	add.w	fp, fp, #1
 8005f9a:	9019      	str	r0, [sp, #100]	; 0x64
 8005f9c:	e7c1      	b.n	8005f22 <_strtod_l+0x14a>
 8005f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	9219      	str	r2, [sp, #100]	; 0x64
 8005fa4:	785a      	ldrb	r2, [r3, #1]
 8005fa6:	f1bb 0f00 	cmp.w	fp, #0
 8005faa:	d037      	beq.n	800601c <_strtod_l+0x244>
 8005fac:	465e      	mov	r6, fp
 8005fae:	9008      	str	r0, [sp, #32]
 8005fb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005fb4:	2b09      	cmp	r3, #9
 8005fb6:	d912      	bls.n	8005fde <_strtod_l+0x206>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7c4      	b.n	8005f46 <_strtod_l+0x16e>
 8005fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	9219      	str	r2, [sp, #100]	; 0x64
 8005fc4:	785a      	ldrb	r2, [r3, #1]
 8005fc6:	2a30      	cmp	r2, #48	; 0x30
 8005fc8:	d0f8      	beq.n	8005fbc <_strtod_l+0x1e4>
 8005fca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	f200 84e4 	bhi.w	800699c <_strtod_l+0xbc4>
 8005fd4:	9008      	str	r0, [sp, #32]
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	4606      	mov	r6, r0
 8005fda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fde:	3a30      	subs	r2, #48	; 0x30
 8005fe0:	f100 0301 	add.w	r3, r0, #1
 8005fe4:	d014      	beq.n	8006010 <_strtod_l+0x238>
 8005fe6:	9908      	ldr	r1, [sp, #32]
 8005fe8:	eb00 0c06 	add.w	ip, r0, r6
 8005fec:	4419      	add	r1, r3
 8005fee:	9108      	str	r1, [sp, #32]
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	210a      	movs	r1, #10
 8005ff4:	4563      	cmp	r3, ip
 8005ff6:	d113      	bne.n	8006020 <_strtod_l+0x248>
 8005ff8:	1833      	adds	r3, r6, r0
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	f106 0601 	add.w	r6, r6, #1
 8006000:	4406      	add	r6, r0
 8006002:	dc1a      	bgt.n	800603a <_strtod_l+0x262>
 8006004:	230a      	movs	r3, #10
 8006006:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006008:	fb03 2301 	mla	r3, r3, r1, r2
 800600c:	930a      	str	r3, [sp, #40]	; 0x28
 800600e:	2300      	movs	r3, #0
 8006010:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006012:	4618      	mov	r0, r3
 8006014:	1c51      	adds	r1, r2, #1
 8006016:	9119      	str	r1, [sp, #100]	; 0x64
 8006018:	7852      	ldrb	r2, [r2, #1]
 800601a:	e7c9      	b.n	8005fb0 <_strtod_l+0x1d8>
 800601c:	4658      	mov	r0, fp
 800601e:	e7d2      	b.n	8005fc6 <_strtod_l+0x1ee>
 8006020:	2b08      	cmp	r3, #8
 8006022:	f103 0301 	add.w	r3, r3, #1
 8006026:	dc03      	bgt.n	8006030 <_strtod_l+0x258>
 8006028:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800602a:	434f      	muls	r7, r1
 800602c:	970a      	str	r7, [sp, #40]	; 0x28
 800602e:	e7e1      	b.n	8005ff4 <_strtod_l+0x21c>
 8006030:	2b10      	cmp	r3, #16
 8006032:	bfd8      	it	le
 8006034:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006038:	e7dc      	b.n	8005ff4 <_strtod_l+0x21c>
 800603a:	2e10      	cmp	r6, #16
 800603c:	bfdc      	itt	le
 800603e:	230a      	movle	r3, #10
 8006040:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006044:	e7e3      	b.n	800600e <_strtod_l+0x236>
 8006046:	2300      	movs	r3, #0
 8006048:	9308      	str	r3, [sp, #32]
 800604a:	2301      	movs	r3, #1
 800604c:	e780      	b.n	8005f50 <_strtod_l+0x178>
 800604e:	f04f 0c00 	mov.w	ip, #0
 8006052:	1caa      	adds	r2, r5, #2
 8006054:	9219      	str	r2, [sp, #100]	; 0x64
 8006056:	78aa      	ldrb	r2, [r5, #2]
 8006058:	e788      	b.n	8005f6c <_strtod_l+0x194>
 800605a:	f04f 0c01 	mov.w	ip, #1
 800605e:	e7f8      	b.n	8006052 <_strtod_l+0x27a>
 8006060:	08008620 	.word	0x08008620
 8006064:	7ff00000 	.word	0x7ff00000
 8006068:	0800861c 	.word	0x0800861c
 800606c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800606e:	1c51      	adds	r1, r2, #1
 8006070:	9119      	str	r1, [sp, #100]	; 0x64
 8006072:	7852      	ldrb	r2, [r2, #1]
 8006074:	2a30      	cmp	r2, #48	; 0x30
 8006076:	d0f9      	beq.n	800606c <_strtod_l+0x294>
 8006078:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800607c:	2908      	cmp	r1, #8
 800607e:	f63f af7a 	bhi.w	8005f76 <_strtod_l+0x19e>
 8006082:	3a30      	subs	r2, #48	; 0x30
 8006084:	9209      	str	r2, [sp, #36]	; 0x24
 8006086:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006088:	920c      	str	r2, [sp, #48]	; 0x30
 800608a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800608c:	1c57      	adds	r7, r2, #1
 800608e:	9719      	str	r7, [sp, #100]	; 0x64
 8006090:	7852      	ldrb	r2, [r2, #1]
 8006092:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006096:	f1be 0f09 	cmp.w	lr, #9
 800609a:	d938      	bls.n	800610e <_strtod_l+0x336>
 800609c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800609e:	1a7f      	subs	r7, r7, r1
 80060a0:	2f08      	cmp	r7, #8
 80060a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80060a6:	dc03      	bgt.n	80060b0 <_strtod_l+0x2d8>
 80060a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060aa:	428f      	cmp	r7, r1
 80060ac:	bfa8      	it	ge
 80060ae:	460f      	movge	r7, r1
 80060b0:	f1bc 0f00 	cmp.w	ip, #0
 80060b4:	d000      	beq.n	80060b8 <_strtod_l+0x2e0>
 80060b6:	427f      	negs	r7, r7
 80060b8:	2e00      	cmp	r6, #0
 80060ba:	d14f      	bne.n	800615c <_strtod_l+0x384>
 80060bc:	9905      	ldr	r1, [sp, #20]
 80060be:	4301      	orrs	r1, r0
 80060c0:	f47f aec3 	bne.w	8005e4a <_strtod_l+0x72>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f47f aedb 	bne.w	8005e80 <_strtod_l+0xa8>
 80060ca:	2a69      	cmp	r2, #105	; 0x69
 80060cc:	d029      	beq.n	8006122 <_strtod_l+0x34a>
 80060ce:	dc26      	bgt.n	800611e <_strtod_l+0x346>
 80060d0:	2a49      	cmp	r2, #73	; 0x49
 80060d2:	d026      	beq.n	8006122 <_strtod_l+0x34a>
 80060d4:	2a4e      	cmp	r2, #78	; 0x4e
 80060d6:	f47f aed3 	bne.w	8005e80 <_strtod_l+0xa8>
 80060da:	499a      	ldr	r1, [pc, #616]	; (8006344 <_strtod_l+0x56c>)
 80060dc:	a819      	add	r0, sp, #100	; 0x64
 80060de:	f001 faa7 	bl	8007630 <__match>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f43f aecc 	beq.w	8005e80 <_strtod_l+0xa8>
 80060e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b28      	cmp	r3, #40	; 0x28
 80060ee:	d12f      	bne.n	8006150 <_strtod_l+0x378>
 80060f0:	4995      	ldr	r1, [pc, #596]	; (8006348 <_strtod_l+0x570>)
 80060f2:	aa1c      	add	r2, sp, #112	; 0x70
 80060f4:	a819      	add	r0, sp, #100	; 0x64
 80060f6:	f001 faaf 	bl	8007658 <__hexnan>
 80060fa:	2805      	cmp	r0, #5
 80060fc:	d128      	bne.n	8006150 <_strtod_l+0x378>
 80060fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006100:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006104:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006108:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800610c:	e69d      	b.n	8005e4a <_strtod_l+0x72>
 800610e:	210a      	movs	r1, #10
 8006110:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006112:	fb01 2107 	mla	r1, r1, r7, r2
 8006116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800611a:	9209      	str	r2, [sp, #36]	; 0x24
 800611c:	e7b5      	b.n	800608a <_strtod_l+0x2b2>
 800611e:	2a6e      	cmp	r2, #110	; 0x6e
 8006120:	e7d9      	b.n	80060d6 <_strtod_l+0x2fe>
 8006122:	498a      	ldr	r1, [pc, #552]	; (800634c <_strtod_l+0x574>)
 8006124:	a819      	add	r0, sp, #100	; 0x64
 8006126:	f001 fa83 	bl	8007630 <__match>
 800612a:	2800      	cmp	r0, #0
 800612c:	f43f aea8 	beq.w	8005e80 <_strtod_l+0xa8>
 8006130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006132:	4987      	ldr	r1, [pc, #540]	; (8006350 <_strtod_l+0x578>)
 8006134:	3b01      	subs	r3, #1
 8006136:	a819      	add	r0, sp, #100	; 0x64
 8006138:	9319      	str	r3, [sp, #100]	; 0x64
 800613a:	f001 fa79 	bl	8007630 <__match>
 800613e:	b910      	cbnz	r0, 8006146 <_strtod_l+0x36e>
 8006140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006142:	3301      	adds	r3, #1
 8006144:	9319      	str	r3, [sp, #100]	; 0x64
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006354 <_strtod_l+0x57c>
 800614e:	e67c      	b.n	8005e4a <_strtod_l+0x72>
 8006150:	4881      	ldr	r0, [pc, #516]	; (8006358 <_strtod_l+0x580>)
 8006152:	f000 ff8b 	bl	800706c <nan>
 8006156:	4680      	mov	r8, r0
 8006158:	4689      	mov	r9, r1
 800615a:	e676      	b.n	8005e4a <_strtod_l+0x72>
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	f1bb 0f00 	cmp.w	fp, #0
 8006162:	bf08      	it	eq
 8006164:	46b3      	moveq	fp, r6
 8006166:	1afb      	subs	r3, r7, r3
 8006168:	2e10      	cmp	r6, #16
 800616a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800616c:	4635      	mov	r5, r6
 800616e:	9309      	str	r3, [sp, #36]	; 0x24
 8006170:	bfa8      	it	ge
 8006172:	2510      	movge	r5, #16
 8006174:	f7fa f9a2 	bl	80004bc <__aeabi_ui2d>
 8006178:	2e09      	cmp	r6, #9
 800617a:	4680      	mov	r8, r0
 800617c:	4689      	mov	r9, r1
 800617e:	dd13      	ble.n	80061a8 <_strtod_l+0x3d0>
 8006180:	4b76      	ldr	r3, [pc, #472]	; (800635c <_strtod_l+0x584>)
 8006182:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800618a:	f7fa fa11 	bl	80005b0 <__aeabi_dmul>
 800618e:	4680      	mov	r8, r0
 8006190:	4650      	mov	r0, sl
 8006192:	4689      	mov	r9, r1
 8006194:	f7fa f992 	bl	80004bc <__aeabi_ui2d>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa f850 	bl	8000244 <__adddf3>
 80061a4:	4680      	mov	r8, r0
 80061a6:	4689      	mov	r9, r1
 80061a8:	2e0f      	cmp	r6, #15
 80061aa:	dc36      	bgt.n	800621a <_strtod_l+0x442>
 80061ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f43f ae4b 	beq.w	8005e4a <_strtod_l+0x72>
 80061b4:	dd22      	ble.n	80061fc <_strtod_l+0x424>
 80061b6:	2b16      	cmp	r3, #22
 80061b8:	dc09      	bgt.n	80061ce <_strtod_l+0x3f6>
 80061ba:	4968      	ldr	r1, [pc, #416]	; (800635c <_strtod_l+0x584>)
 80061bc:	4642      	mov	r2, r8
 80061be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061c2:	464b      	mov	r3, r9
 80061c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c8:	f7fa f9f2 	bl	80005b0 <__aeabi_dmul>
 80061cc:	e7c3      	b.n	8006156 <_strtod_l+0x37e>
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80061d4:	4293      	cmp	r3, r2
 80061d6:	db20      	blt.n	800621a <_strtod_l+0x442>
 80061d8:	4c60      	ldr	r4, [pc, #384]	; (800635c <_strtod_l+0x584>)
 80061da:	f1c6 060f 	rsb	r6, r6, #15
 80061de:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80061e2:	4642      	mov	r2, r8
 80061e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e8:	464b      	mov	r3, r9
 80061ea:	f7fa f9e1 	bl	80005b0 <__aeabi_dmul>
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	1b9e      	subs	r6, r3, r6
 80061f2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80061f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061fa:	e7e5      	b.n	80061c8 <_strtod_l+0x3f0>
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	3316      	adds	r3, #22
 8006200:	db0b      	blt.n	800621a <_strtod_l+0x442>
 8006202:	9b08      	ldr	r3, [sp, #32]
 8006204:	4640      	mov	r0, r8
 8006206:	1bdf      	subs	r7, r3, r7
 8006208:	4b54      	ldr	r3, [pc, #336]	; (800635c <_strtod_l+0x584>)
 800620a:	4649      	mov	r1, r9
 800620c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006214:	f7fa faf6 	bl	8000804 <__aeabi_ddiv>
 8006218:	e79d      	b.n	8006156 <_strtod_l+0x37e>
 800621a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621c:	1b75      	subs	r5, r6, r5
 800621e:	441d      	add	r5, r3
 8006220:	2d00      	cmp	r5, #0
 8006222:	dd70      	ble.n	8006306 <_strtod_l+0x52e>
 8006224:	f015 030f 	ands.w	r3, r5, #15
 8006228:	d00a      	beq.n	8006240 <_strtod_l+0x468>
 800622a:	494c      	ldr	r1, [pc, #304]	; (800635c <_strtod_l+0x584>)
 800622c:	4642      	mov	r2, r8
 800622e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006236:	464b      	mov	r3, r9
 8006238:	f7fa f9ba 	bl	80005b0 <__aeabi_dmul>
 800623c:	4680      	mov	r8, r0
 800623e:	4689      	mov	r9, r1
 8006240:	f035 050f 	bics.w	r5, r5, #15
 8006244:	d04d      	beq.n	80062e2 <_strtod_l+0x50a>
 8006246:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800624a:	dd22      	ble.n	8006292 <_strtod_l+0x4ba>
 800624c:	2600      	movs	r6, #0
 800624e:	46b3      	mov	fp, r6
 8006250:	960b      	str	r6, [sp, #44]	; 0x2c
 8006252:	9608      	str	r6, [sp, #32]
 8006254:	2322      	movs	r3, #34	; 0x22
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006354 <_strtod_l+0x57c>
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	f43f adf1 	beq.w	8005e4a <_strtod_l+0x72>
 8006268:	4620      	mov	r0, r4
 800626a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800626c:	f7ff f934 	bl	80054d8 <_Bfree>
 8006270:	4620      	mov	r0, r4
 8006272:	9908      	ldr	r1, [sp, #32]
 8006274:	f7ff f930 	bl	80054d8 <_Bfree>
 8006278:	4659      	mov	r1, fp
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff f92c 	bl	80054d8 <_Bfree>
 8006280:	4620      	mov	r0, r4
 8006282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006284:	f7ff f928 	bl	80054d8 <_Bfree>
 8006288:	4631      	mov	r1, r6
 800628a:	4620      	mov	r0, r4
 800628c:	f7ff f924 	bl	80054d8 <_Bfree>
 8006290:	e5db      	b.n	8005e4a <_strtod_l+0x72>
 8006292:	4b33      	ldr	r3, [pc, #204]	; (8006360 <_strtod_l+0x588>)
 8006294:	4640      	mov	r0, r8
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	2300      	movs	r3, #0
 800629a:	4649      	mov	r1, r9
 800629c:	469a      	mov	sl, r3
 800629e:	112d      	asrs	r5, r5, #4
 80062a0:	2d01      	cmp	r5, #1
 80062a2:	dc21      	bgt.n	80062e8 <_strtod_l+0x510>
 80062a4:	b10b      	cbz	r3, 80062aa <_strtod_l+0x4d2>
 80062a6:	4680      	mov	r8, r0
 80062a8:	4689      	mov	r9, r1
 80062aa:	492d      	ldr	r1, [pc, #180]	; (8006360 <_strtod_l+0x588>)
 80062ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80062b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80062b4:	4642      	mov	r2, r8
 80062b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ba:	464b      	mov	r3, r9
 80062bc:	f7fa f978 	bl	80005b0 <__aeabi_dmul>
 80062c0:	4b24      	ldr	r3, [pc, #144]	; (8006354 <_strtod_l+0x57c>)
 80062c2:	460a      	mov	r2, r1
 80062c4:	400b      	ands	r3, r1
 80062c6:	4927      	ldr	r1, [pc, #156]	; (8006364 <_strtod_l+0x58c>)
 80062c8:	4680      	mov	r8, r0
 80062ca:	428b      	cmp	r3, r1
 80062cc:	d8be      	bhi.n	800624c <_strtod_l+0x474>
 80062ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80062d2:	428b      	cmp	r3, r1
 80062d4:	bf86      	itte	hi
 80062d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80062da:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006368 <_strtod_l+0x590>
 80062de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80062e2:	2300      	movs	r3, #0
 80062e4:	9305      	str	r3, [sp, #20]
 80062e6:	e07b      	b.n	80063e0 <_strtod_l+0x608>
 80062e8:	07ea      	lsls	r2, r5, #31
 80062ea:	d505      	bpl.n	80062f8 <_strtod_l+0x520>
 80062ec:	9b05      	ldr	r3, [sp, #20]
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7fa f95d 	bl	80005b0 <__aeabi_dmul>
 80062f6:	2301      	movs	r3, #1
 80062f8:	9a05      	ldr	r2, [sp, #20]
 80062fa:	f10a 0a01 	add.w	sl, sl, #1
 80062fe:	3208      	adds	r2, #8
 8006300:	106d      	asrs	r5, r5, #1
 8006302:	9205      	str	r2, [sp, #20]
 8006304:	e7cc      	b.n	80062a0 <_strtod_l+0x4c8>
 8006306:	d0ec      	beq.n	80062e2 <_strtod_l+0x50a>
 8006308:	426d      	negs	r5, r5
 800630a:	f015 020f 	ands.w	r2, r5, #15
 800630e:	d00a      	beq.n	8006326 <_strtod_l+0x54e>
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <_strtod_l+0x584>)
 8006312:	4640      	mov	r0, r8
 8006314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006318:	4649      	mov	r1, r9
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f7fa fa71 	bl	8000804 <__aeabi_ddiv>
 8006322:	4680      	mov	r8, r0
 8006324:	4689      	mov	r9, r1
 8006326:	112d      	asrs	r5, r5, #4
 8006328:	d0db      	beq.n	80062e2 <_strtod_l+0x50a>
 800632a:	2d1f      	cmp	r5, #31
 800632c:	dd1e      	ble.n	800636c <_strtod_l+0x594>
 800632e:	2600      	movs	r6, #0
 8006330:	46b3      	mov	fp, r6
 8006332:	960b      	str	r6, [sp, #44]	; 0x2c
 8006334:	9608      	str	r6, [sp, #32]
 8006336:	2322      	movs	r3, #34	; 0x22
 8006338:	f04f 0800 	mov.w	r8, #0
 800633c:	f04f 0900 	mov.w	r9, #0
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	e78d      	b.n	8006260 <_strtod_l+0x488>
 8006344:	0800840b 	.word	0x0800840b
 8006348:	08008634 	.word	0x08008634
 800634c:	08008403 	.word	0x08008403
 8006350:	0800843a 	.word	0x0800843a
 8006354:	7ff00000 	.word	0x7ff00000
 8006358:	080087c5 	.word	0x080087c5
 800635c:	08008548 	.word	0x08008548
 8006360:	08008520 	.word	0x08008520
 8006364:	7ca00000 	.word	0x7ca00000
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	f015 0310 	ands.w	r3, r5, #16
 8006370:	bf18      	it	ne
 8006372:	236a      	movne	r3, #106	; 0x6a
 8006374:	4640      	mov	r0, r8
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	4649      	mov	r1, r9
 800637a:	2300      	movs	r3, #0
 800637c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006648 <_strtod_l+0x870>
 8006380:	07ea      	lsls	r2, r5, #31
 8006382:	d504      	bpl.n	800638e <_strtod_l+0x5b6>
 8006384:	e9da 2300 	ldrd	r2, r3, [sl]
 8006388:	f7fa f912 	bl	80005b0 <__aeabi_dmul>
 800638c:	2301      	movs	r3, #1
 800638e:	106d      	asrs	r5, r5, #1
 8006390:	f10a 0a08 	add.w	sl, sl, #8
 8006394:	d1f4      	bne.n	8006380 <_strtod_l+0x5a8>
 8006396:	b10b      	cbz	r3, 800639c <_strtod_l+0x5c4>
 8006398:	4680      	mov	r8, r0
 800639a:	4689      	mov	r9, r1
 800639c:	9b05      	ldr	r3, [sp, #20]
 800639e:	b1bb      	cbz	r3, 80063d0 <_strtod_l+0x5f8>
 80063a0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80063a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	4649      	mov	r1, r9
 80063ac:	dd10      	ble.n	80063d0 <_strtod_l+0x5f8>
 80063ae:	2b1f      	cmp	r3, #31
 80063b0:	f340 8128 	ble.w	8006604 <_strtod_l+0x82c>
 80063b4:	2b34      	cmp	r3, #52	; 0x34
 80063b6:	bfd8      	it	le
 80063b8:	f04f 33ff 	movle.w	r3, #4294967295
 80063bc:	f04f 0800 	mov.w	r8, #0
 80063c0:	bfcf      	iteee	gt
 80063c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80063c6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80063ca:	4093      	lslle	r3, r2
 80063cc:	ea03 0901 	andle.w	r9, r3, r1
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7fa fb52 	bl	8000a80 <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d1a6      	bne.n	800632e <_strtod_l+0x556>
 80063e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e2:	465a      	mov	r2, fp
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4620      	mov	r0, r4
 80063e8:	4633      	mov	r3, r6
 80063ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063ec:	f7ff f8dc 	bl	80055a8 <__s2b>
 80063f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f af2a 	beq.w	800624c <_strtod_l+0x474>
 80063f8:	2600      	movs	r6, #0
 80063fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fc:	9b08      	ldr	r3, [sp, #32]
 80063fe:	2a00      	cmp	r2, #0
 8006400:	eba3 0307 	sub.w	r3, r3, r7
 8006404:	bfa8      	it	ge
 8006406:	2300      	movge	r3, #0
 8006408:	46b3      	mov	fp, r6
 800640a:	9312      	str	r3, [sp, #72]	; 0x48
 800640c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006410:	9316      	str	r3, [sp, #88]	; 0x58
 8006412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006414:	4620      	mov	r0, r4
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	f7ff f81e 	bl	8005458 <_Balloc>
 800641c:	9008      	str	r0, [sp, #32]
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f af18 	beq.w	8006254 <_strtod_l+0x47c>
 8006424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006426:	300c      	adds	r0, #12
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	f103 010c 	add.w	r1, r3, #12
 800642e:	3202      	adds	r2, #2
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	f000 fe0d 	bl	8007050 <memcpy>
 8006436:	ab1c      	add	r3, sp, #112	; 0x70
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	ab1b      	add	r3, sp, #108	; 0x6c
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	4620      	mov	r0, r4
 8006444:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006448:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800644c:	f7ff fbd8 	bl	8005c00 <__d2b>
 8006450:	901a      	str	r0, [sp, #104]	; 0x68
 8006452:	2800      	cmp	r0, #0
 8006454:	f43f aefe 	beq.w	8006254 <_strtod_l+0x47c>
 8006458:	2101      	movs	r1, #1
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff f93c 	bl	80056d8 <__i2b>
 8006460:	4683      	mov	fp, r0
 8006462:	2800      	cmp	r0, #0
 8006464:	f43f aef6 	beq.w	8006254 <_strtod_l+0x47c>
 8006468:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800646a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800646c:	2f00      	cmp	r7, #0
 800646e:	bfab      	itete	ge
 8006470:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006472:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006474:	eb07 0a03 	addge.w	sl, r7, r3
 8006478:	1bdd      	sublt	r5, r3, r7
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	bfa8      	it	ge
 800647e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006480:	eba7 0703 	sub.w	r7, r7, r3
 8006484:	4417      	add	r7, r2
 8006486:	4b71      	ldr	r3, [pc, #452]	; (800664c <_strtod_l+0x874>)
 8006488:	f107 37ff 	add.w	r7, r7, #4294967295
 800648c:	bfb8      	it	lt
 800648e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006492:	429f      	cmp	r7, r3
 8006494:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006498:	f280 80c7 	bge.w	800662a <_strtod_l+0x852>
 800649c:	1bdb      	subs	r3, r3, r7
 800649e:	2b1f      	cmp	r3, #31
 80064a0:	f04f 0101 	mov.w	r1, #1
 80064a4:	eba2 0203 	sub.w	r2, r2, r3
 80064a8:	f300 80b3 	bgt.w	8006612 <_strtod_l+0x83a>
 80064ac:	fa01 f303 	lsl.w	r3, r1, r3
 80064b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80064b2:	2300      	movs	r3, #0
 80064b4:	9310      	str	r3, [sp, #64]	; 0x40
 80064b6:	eb0a 0702 	add.w	r7, sl, r2
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	45ba      	cmp	sl, r7
 80064be:	4415      	add	r5, r2
 80064c0:	441d      	add	r5, r3
 80064c2:	4653      	mov	r3, sl
 80064c4:	bfa8      	it	ge
 80064c6:	463b      	movge	r3, r7
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	bfa8      	it	ge
 80064cc:	462b      	movge	r3, r5
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bfc2      	ittt	gt
 80064d2:	1aff      	subgt	r7, r7, r3
 80064d4:	1aed      	subgt	r5, r5, r3
 80064d6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80064da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064dc:	2b00      	cmp	r3, #0
 80064de:	dd17      	ble.n	8006510 <_strtod_l+0x738>
 80064e0:	4659      	mov	r1, fp
 80064e2:	461a      	mov	r2, r3
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff f9b5 	bl	8005854 <__pow5mult>
 80064ea:	4683      	mov	fp, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f aeb1 	beq.w	8006254 <_strtod_l+0x47c>
 80064f2:	4601      	mov	r1, r0
 80064f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7ff f904 	bl	8005704 <__multiply>
 80064fc:	900a      	str	r0, [sp, #40]	; 0x28
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f aea8 	beq.w	8006254 <_strtod_l+0x47c>
 8006504:	4620      	mov	r0, r4
 8006506:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006508:	f7fe ffe6 	bl	80054d8 <_Bfree>
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	931a      	str	r3, [sp, #104]	; 0x68
 8006510:	2f00      	cmp	r7, #0
 8006512:	f300 808f 	bgt.w	8006634 <_strtod_l+0x85c>
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd08      	ble.n	800652e <_strtod_l+0x756>
 800651c:	4620      	mov	r0, r4
 800651e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006520:	9908      	ldr	r1, [sp, #32]
 8006522:	f7ff f997 	bl	8005854 <__pow5mult>
 8006526:	9008      	str	r0, [sp, #32]
 8006528:	2800      	cmp	r0, #0
 800652a:	f43f ae93 	beq.w	8006254 <_strtod_l+0x47c>
 800652e:	2d00      	cmp	r5, #0
 8006530:	dd08      	ble.n	8006544 <_strtod_l+0x76c>
 8006532:	462a      	mov	r2, r5
 8006534:	4620      	mov	r0, r4
 8006536:	9908      	ldr	r1, [sp, #32]
 8006538:	f7ff f9e6 	bl	8005908 <__lshift>
 800653c:	9008      	str	r0, [sp, #32]
 800653e:	2800      	cmp	r0, #0
 8006540:	f43f ae88 	beq.w	8006254 <_strtod_l+0x47c>
 8006544:	f1ba 0f00 	cmp.w	sl, #0
 8006548:	dd08      	ble.n	800655c <_strtod_l+0x784>
 800654a:	4659      	mov	r1, fp
 800654c:	4652      	mov	r2, sl
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff f9da 	bl	8005908 <__lshift>
 8006554:	4683      	mov	fp, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	f43f ae7c 	beq.w	8006254 <_strtod_l+0x47c>
 800655c:	4620      	mov	r0, r4
 800655e:	9a08      	ldr	r2, [sp, #32]
 8006560:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006562:	f7ff fa59 	bl	8005a18 <__mdiff>
 8006566:	4606      	mov	r6, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	f43f ae73 	beq.w	8006254 <_strtod_l+0x47c>
 800656e:	2500      	movs	r5, #0
 8006570:	68c3      	ldr	r3, [r0, #12]
 8006572:	4659      	mov	r1, fp
 8006574:	60c5      	str	r5, [r0, #12]
 8006576:	930a      	str	r3, [sp, #40]	; 0x28
 8006578:	f7ff fa32 	bl	80059e0 <__mcmp>
 800657c:	42a8      	cmp	r0, r5
 800657e:	da6b      	bge.n	8006658 <_strtod_l+0x880>
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	ea53 0308 	orrs.w	r3, r3, r8
 8006586:	f040 808f 	bne.w	80066a8 <_strtod_l+0x8d0>
 800658a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 808a 	bne.w	80066a8 <_strtod_l+0x8d0>
 8006594:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006598:	0d1b      	lsrs	r3, r3, #20
 800659a:	051b      	lsls	r3, r3, #20
 800659c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065a0:	f240 8082 	bls.w	80066a8 <_strtod_l+0x8d0>
 80065a4:	6973      	ldr	r3, [r6, #20]
 80065a6:	b913      	cbnz	r3, 80065ae <_strtod_l+0x7d6>
 80065a8:	6933      	ldr	r3, [r6, #16]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	dd7c      	ble.n	80066a8 <_strtod_l+0x8d0>
 80065ae:	4631      	mov	r1, r6
 80065b0:	2201      	movs	r2, #1
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7ff f9a8 	bl	8005908 <__lshift>
 80065b8:	4659      	mov	r1, fp
 80065ba:	4606      	mov	r6, r0
 80065bc:	f7ff fa10 	bl	80059e0 <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dd71      	ble.n	80066a8 <_strtod_l+0x8d0>
 80065c4:	9905      	ldr	r1, [sp, #20]
 80065c6:	464b      	mov	r3, r9
 80065c8:	4a21      	ldr	r2, [pc, #132]	; (8006650 <_strtod_l+0x878>)
 80065ca:	2900      	cmp	r1, #0
 80065cc:	f000 808d 	beq.w	80066ea <_strtod_l+0x912>
 80065d0:	ea02 0109 	and.w	r1, r2, r9
 80065d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80065d8:	f300 8087 	bgt.w	80066ea <_strtod_l+0x912>
 80065dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80065e0:	f77f aea9 	ble.w	8006336 <_strtod_l+0x55e>
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <_strtod_l+0x87c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7f9 ffe0 	bl	80005b0 <__aeabi_dmul>
 80065f0:	4b17      	ldr	r3, [pc, #92]	; (8006650 <_strtod_l+0x878>)
 80065f2:	4680      	mov	r8, r0
 80065f4:	400b      	ands	r3, r1
 80065f6:	4689      	mov	r9, r1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f ae35 	bne.w	8006268 <_strtod_l+0x490>
 80065fe:	2322      	movs	r3, #34	; 0x22
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	e631      	b.n	8006268 <_strtod_l+0x490>
 8006604:	f04f 32ff 	mov.w	r2, #4294967295
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	ea03 0808 	and.w	r8, r3, r8
 8006610:	e6de      	b.n	80063d0 <_strtod_l+0x5f8>
 8006612:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006616:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800661a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800661e:	37e2      	adds	r7, #226	; 0xe2
 8006620:	fa01 f307 	lsl.w	r3, r1, r7
 8006624:	9310      	str	r3, [sp, #64]	; 0x40
 8006626:	9113      	str	r1, [sp, #76]	; 0x4c
 8006628:	e745      	b.n	80064b6 <_strtod_l+0x6de>
 800662a:	2300      	movs	r3, #0
 800662c:	9310      	str	r3, [sp, #64]	; 0x40
 800662e:	2301      	movs	r3, #1
 8006630:	9313      	str	r3, [sp, #76]	; 0x4c
 8006632:	e740      	b.n	80064b6 <_strtod_l+0x6de>
 8006634:	463a      	mov	r2, r7
 8006636:	4620      	mov	r0, r4
 8006638:	991a      	ldr	r1, [sp, #104]	; 0x68
 800663a:	f7ff f965 	bl	8005908 <__lshift>
 800663e:	901a      	str	r0, [sp, #104]	; 0x68
 8006640:	2800      	cmp	r0, #0
 8006642:	f47f af68 	bne.w	8006516 <_strtod_l+0x73e>
 8006646:	e605      	b.n	8006254 <_strtod_l+0x47c>
 8006648:	08008648 	.word	0x08008648
 800664c:	fffffc02 	.word	0xfffffc02
 8006650:	7ff00000 	.word	0x7ff00000
 8006654:	39500000 	.word	0x39500000
 8006658:	46ca      	mov	sl, r9
 800665a:	d165      	bne.n	8006728 <_strtod_l+0x950>
 800665c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006662:	b352      	cbz	r2, 80066ba <_strtod_l+0x8e2>
 8006664:	4a9e      	ldr	r2, [pc, #632]	; (80068e0 <_strtod_l+0xb08>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d12a      	bne.n	80066c0 <_strtod_l+0x8e8>
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	4641      	mov	r1, r8
 800666e:	b1fb      	cbz	r3, 80066b0 <_strtod_l+0x8d8>
 8006670:	4b9c      	ldr	r3, [pc, #624]	; (80068e4 <_strtod_l+0xb0c>)
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	ea09 0303 	and.w	r3, r9, r3
 800667a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800667e:	d81a      	bhi.n	80066b6 <_strtod_l+0x8de>
 8006680:	0d1b      	lsrs	r3, r3, #20
 8006682:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	4299      	cmp	r1, r3
 800668c:	d118      	bne.n	80066c0 <_strtod_l+0x8e8>
 800668e:	4b96      	ldr	r3, [pc, #600]	; (80068e8 <_strtod_l+0xb10>)
 8006690:	459a      	cmp	sl, r3
 8006692:	d102      	bne.n	800669a <_strtod_l+0x8c2>
 8006694:	3101      	adds	r1, #1
 8006696:	f43f addd 	beq.w	8006254 <_strtod_l+0x47c>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	4b91      	ldr	r3, [pc, #580]	; (80068e4 <_strtod_l+0xb0c>)
 80066a0:	ea0a 0303 	and.w	r3, sl, r3
 80066a4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d19a      	bne.n	80065e4 <_strtod_l+0x80c>
 80066ae:	e5db      	b.n	8006268 <_strtod_l+0x490>
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	e7e9      	b.n	800668a <_strtod_l+0x8b2>
 80066b6:	4613      	mov	r3, r2
 80066b8:	e7e7      	b.n	800668a <_strtod_l+0x8b2>
 80066ba:	ea53 0308 	orrs.w	r3, r3, r8
 80066be:	d081      	beq.n	80065c4 <_strtod_l+0x7ec>
 80066c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066c2:	b1e3      	cbz	r3, 80066fe <_strtod_l+0x926>
 80066c4:	ea13 0f0a 	tst.w	r3, sl
 80066c8:	d0ee      	beq.n	80066a8 <_strtod_l+0x8d0>
 80066ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	9a05      	ldr	r2, [sp, #20]
 80066d2:	b1c3      	cbz	r3, 8006706 <_strtod_l+0x92e>
 80066d4:	f7ff fb5c 	bl	8005d90 <sulp>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066e0:	f7f9 fdb0 	bl	8000244 <__adddf3>
 80066e4:	4680      	mov	r8, r0
 80066e6:	4689      	mov	r9, r1
 80066e8:	e7de      	b.n	80066a8 <_strtod_l+0x8d0>
 80066ea:	4013      	ands	r3, r2
 80066ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80066f4:	f04f 38ff 	mov.w	r8, #4294967295
 80066f8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80066fc:	e7d4      	b.n	80066a8 <_strtod_l+0x8d0>
 80066fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006700:	ea13 0f08 	tst.w	r3, r8
 8006704:	e7e0      	b.n	80066c8 <_strtod_l+0x8f0>
 8006706:	f7ff fb43 	bl	8005d90 <sulp>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006710:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006712:	f7f9 fd95 	bl	8000240 <__aeabi_dsub>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4680      	mov	r8, r0
 800671c:	4689      	mov	r9, r1
 800671e:	f7fa f9af 	bl	8000a80 <__aeabi_dcmpeq>
 8006722:	2800      	cmp	r0, #0
 8006724:	d0c0      	beq.n	80066a8 <_strtod_l+0x8d0>
 8006726:	e606      	b.n	8006336 <_strtod_l+0x55e>
 8006728:	4659      	mov	r1, fp
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff fabe 	bl	8005cac <__ratio>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006738:	2200      	movs	r2, #0
 800673a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800673e:	f7fa f9b3 	bl	8000aa8 <__aeabi_dcmple>
 8006742:	2800      	cmp	r0, #0
 8006744:	d06f      	beq.n	8006826 <_strtod_l+0xa4e>
 8006746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d17c      	bne.n	8006846 <_strtod_l+0xa6e>
 800674c:	f1b8 0f00 	cmp.w	r8, #0
 8006750:	d159      	bne.n	8006806 <_strtod_l+0xa2e>
 8006752:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006756:	2b00      	cmp	r3, #0
 8006758:	d17b      	bne.n	8006852 <_strtod_l+0xa7a>
 800675a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800675e:	2200      	movs	r2, #0
 8006760:	4b62      	ldr	r3, [pc, #392]	; (80068ec <_strtod_l+0xb14>)
 8006762:	f7fa f997 	bl	8000a94 <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d15a      	bne.n	8006820 <_strtod_l+0xa48>
 800676a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800676e:	2200      	movs	r2, #0
 8006770:	4b5f      	ldr	r3, [pc, #380]	; (80068f0 <_strtod_l+0xb18>)
 8006772:	f7f9 ff1d 	bl	80005b0 <__aeabi_dmul>
 8006776:	4605      	mov	r5, r0
 8006778:	460f      	mov	r7, r1
 800677a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800677e:	9506      	str	r5, [sp, #24]
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006786:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800678a:	4b56      	ldr	r3, [pc, #344]	; (80068e4 <_strtod_l+0xb0c>)
 800678c:	4a55      	ldr	r2, [pc, #340]	; (80068e4 <_strtod_l+0xb0c>)
 800678e:	ea0a 0303 	and.w	r3, sl, r3
 8006792:	9313      	str	r3, [sp, #76]	; 0x4c
 8006794:	4b57      	ldr	r3, [pc, #348]	; (80068f4 <_strtod_l+0xb1c>)
 8006796:	ea0a 0202 	and.w	r2, sl, r2
 800679a:	429a      	cmp	r2, r3
 800679c:	f040 80b0 	bne.w	8006900 <_strtod_l+0xb28>
 80067a0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7ff f9c2 	bl	8005b30 <__ulp>
 80067ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067b0:	f7f9 fefe 	bl	80005b0 <__aeabi_dmul>
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	f7f9 fd44 	bl	8000244 <__adddf3>
 80067bc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80068e4 <_strtod_l+0xb0c>
 80067c0:	4a4d      	ldr	r2, [pc, #308]	; (80068f8 <_strtod_l+0xb20>)
 80067c2:	ea01 0a0a 	and.w	sl, r1, sl
 80067c6:	4592      	cmp	sl, r2
 80067c8:	4680      	mov	r8, r0
 80067ca:	d948      	bls.n	800685e <_strtod_l+0xa86>
 80067cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067ce:	4b46      	ldr	r3, [pc, #280]	; (80068e8 <_strtod_l+0xb10>)
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d103      	bne.n	80067dc <_strtod_l+0xa04>
 80067d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d6:	3301      	adds	r3, #1
 80067d8:	f43f ad3c 	beq.w	8006254 <_strtod_l+0x47c>
 80067dc:	f04f 38ff 	mov.w	r8, #4294967295
 80067e0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80068e8 <_strtod_l+0xb10>
 80067e4:	4620      	mov	r0, r4
 80067e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067e8:	f7fe fe76 	bl	80054d8 <_Bfree>
 80067ec:	4620      	mov	r0, r4
 80067ee:	9908      	ldr	r1, [sp, #32]
 80067f0:	f7fe fe72 	bl	80054d8 <_Bfree>
 80067f4:	4659      	mov	r1, fp
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7fe fe6e 	bl	80054d8 <_Bfree>
 80067fc:	4631      	mov	r1, r6
 80067fe:	4620      	mov	r0, r4
 8006800:	f7fe fe6a 	bl	80054d8 <_Bfree>
 8006804:	e605      	b.n	8006412 <_strtod_l+0x63a>
 8006806:	f1b8 0f01 	cmp.w	r8, #1
 800680a:	d103      	bne.n	8006814 <_strtod_l+0xa3c>
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	f43f ad91 	beq.w	8006336 <_strtod_l+0x55e>
 8006814:	2200      	movs	r2, #0
 8006816:	4b39      	ldr	r3, [pc, #228]	; (80068fc <_strtod_l+0xb24>)
 8006818:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800681a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800681e:	e016      	b.n	800684e <_strtod_l+0xa76>
 8006820:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006822:	4f33      	ldr	r7, [pc, #204]	; (80068f0 <_strtod_l+0xb18>)
 8006824:	e7a9      	b.n	800677a <_strtod_l+0x9a2>
 8006826:	4b32      	ldr	r3, [pc, #200]	; (80068f0 <_strtod_l+0xb18>)
 8006828:	2200      	movs	r2, #0
 800682a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800682e:	f7f9 febf 	bl	80005b0 <__aeabi_dmul>
 8006832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006834:	4605      	mov	r5, r0
 8006836:	460f      	mov	r7, r1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d09e      	beq.n	800677a <_strtod_l+0x9a2>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006844:	e79d      	b.n	8006782 <_strtod_l+0x9aa>
 8006846:	2200      	movs	r2, #0
 8006848:	4b28      	ldr	r3, [pc, #160]	; (80068ec <_strtod_l+0xb14>)
 800684a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800684e:	4f27      	ldr	r7, [pc, #156]	; (80068ec <_strtod_l+0xb14>)
 8006850:	e797      	b.n	8006782 <_strtod_l+0x9aa>
 8006852:	2200      	movs	r2, #0
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <_strtod_l+0xb24>)
 8006856:	4645      	mov	r5, r8
 8006858:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800685c:	e7f7      	b.n	800684e <_strtod_l+0xa76>
 800685e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	46ca      	mov	sl, r9
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1bc      	bne.n	80067e4 <_strtod_l+0xa0c>
 800686a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800686e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006870:	0d1b      	lsrs	r3, r3, #20
 8006872:	051b      	lsls	r3, r3, #20
 8006874:	429a      	cmp	r2, r3
 8006876:	d1b5      	bne.n	80067e4 <_strtod_l+0xa0c>
 8006878:	4628      	mov	r0, r5
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa fc5e 	bl	800113c <__aeabi_d2lz>
 8006880:	f7f9 fe68 	bl	8000554 <__aeabi_l2d>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4628      	mov	r0, r5
 800688a:	4639      	mov	r1, r7
 800688c:	f7f9 fcd8 	bl	8000240 <__aeabi_dsub>
 8006890:	460b      	mov	r3, r1
 8006892:	4602      	mov	r2, r0
 8006894:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006898:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	ea4a 0a08 	orr.w	sl, sl, r8
 80068a2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80068a6:	d06c      	beq.n	8006982 <_strtod_l+0xbaa>
 80068a8:	a309      	add	r3, pc, #36	; (adr r3, 80068d0 <_strtod_l+0xaf8>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7fa f8f1 	bl	8000a94 <__aeabi_dcmplt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f47f acd8 	bne.w	8006268 <_strtod_l+0x490>
 80068b8:	a307      	add	r3, pc, #28	; (adr r3, 80068d8 <_strtod_l+0xb00>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068c2:	f7fa f905 	bl	8000ad0 <__aeabi_dcmpgt>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d08c      	beq.n	80067e4 <_strtod_l+0xa0c>
 80068ca:	e4cd      	b.n	8006268 <_strtod_l+0x490>
 80068cc:	f3af 8000 	nop.w
 80068d0:	94a03595 	.word	0x94a03595
 80068d4:	3fdfffff 	.word	0x3fdfffff
 80068d8:	35afe535 	.word	0x35afe535
 80068dc:	3fe00000 	.word	0x3fe00000
 80068e0:	000fffff 	.word	0x000fffff
 80068e4:	7ff00000 	.word	0x7ff00000
 80068e8:	7fefffff 	.word	0x7fefffff
 80068ec:	3ff00000 	.word	0x3ff00000
 80068f0:	3fe00000 	.word	0x3fe00000
 80068f4:	7fe00000 	.word	0x7fe00000
 80068f8:	7c9fffff 	.word	0x7c9fffff
 80068fc:	bff00000 	.word	0xbff00000
 8006900:	9b05      	ldr	r3, [sp, #20]
 8006902:	b333      	cbz	r3, 8006952 <_strtod_l+0xb7a>
 8006904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006906:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800690a:	d822      	bhi.n	8006952 <_strtod_l+0xb7a>
 800690c:	a328      	add	r3, pc, #160	; (adr r3, 80069b0 <_strtod_l+0xbd8>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	4628      	mov	r0, r5
 8006914:	4639      	mov	r1, r7
 8006916:	f7fa f8c7 	bl	8000aa8 <__aeabi_dcmple>
 800691a:	b1a0      	cbz	r0, 8006946 <_strtod_l+0xb6e>
 800691c:	4639      	mov	r1, r7
 800691e:	4628      	mov	r0, r5
 8006920:	f7fa f91e 	bl	8000b60 <__aeabi_d2uiz>
 8006924:	2801      	cmp	r0, #1
 8006926:	bf38      	it	cc
 8006928:	2001      	movcc	r0, #1
 800692a:	f7f9 fdc7 	bl	80004bc <__aeabi_ui2d>
 800692e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006930:	4605      	mov	r5, r0
 8006932:	460f      	mov	r7, r1
 8006934:	bb03      	cbnz	r3, 8006978 <_strtod_l+0xba0>
 8006936:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800693a:	9014      	str	r0, [sp, #80]	; 0x50
 800693c:	9315      	str	r3, [sp, #84]	; 0x54
 800693e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006942:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800694a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	9311      	str	r3, [sp, #68]	; 0x44
 8006952:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006954:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006956:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800695a:	f7ff f8e9 	bl	8005b30 <__ulp>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	f7f9 fe23 	bl	80005b0 <__aeabi_dmul>
 800696a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800696e:	f7f9 fc69 	bl	8000244 <__adddf3>
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	e774      	b.n	8006862 <_strtod_l+0xa8a>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006980:	e7dd      	b.n	800693e <_strtod_l+0xb66>
 8006982:	a30d      	add	r3, pc, #52	; (adr r3, 80069b8 <_strtod_l+0xbe0>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7fa f884 	bl	8000a94 <__aeabi_dcmplt>
 800698c:	e79b      	b.n	80068c6 <_strtod_l+0xaee>
 800698e:	2300      	movs	r3, #0
 8006990:	930e      	str	r3, [sp, #56]	; 0x38
 8006992:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006994:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	f7ff ba5b 	b.w	8005e52 <_strtod_l+0x7a>
 800699c:	2a65      	cmp	r2, #101	; 0x65
 800699e:	f43f ab52 	beq.w	8006046 <_strtod_l+0x26e>
 80069a2:	2a45      	cmp	r2, #69	; 0x45
 80069a4:	f43f ab4f 	beq.w	8006046 <_strtod_l+0x26e>
 80069a8:	2301      	movs	r3, #1
 80069aa:	f7ff bb87 	b.w	80060bc <_strtod_l+0x2e4>
 80069ae:	bf00      	nop
 80069b0:	ffc00000 	.word	0xffc00000
 80069b4:	41dfffff 	.word	0x41dfffff
 80069b8:	94a03595 	.word	0x94a03595
 80069bc:	3fcfffff 	.word	0x3fcfffff

080069c0 <_strtod_r>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <_strtod_r+0x8>)
 80069c2:	f7ff ba09 	b.w	8005dd8 <_strtod_l>
 80069c6:	bf00      	nop
 80069c8:	20000068 	.word	0x20000068

080069cc <_strtol_l.constprop.0>:
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d2:	4686      	mov	lr, r0
 80069d4:	4690      	mov	r8, r2
 80069d6:	d001      	beq.n	80069dc <_strtol_l.constprop.0+0x10>
 80069d8:	2b24      	cmp	r3, #36	; 0x24
 80069da:	d906      	bls.n	80069ea <_strtol_l.constprop.0+0x1e>
 80069dc:	f7fd fd90 	bl	8004500 <__errno>
 80069e0:	2316      	movs	r3, #22
 80069e2:	6003      	str	r3, [r0, #0]
 80069e4:	2000      	movs	r0, #0
 80069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ea:	460d      	mov	r5, r1
 80069ec:	4835      	ldr	r0, [pc, #212]	; (8006ac4 <_strtol_l.constprop.0+0xf8>)
 80069ee:	462a      	mov	r2, r5
 80069f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069f4:	5d06      	ldrb	r6, [r0, r4]
 80069f6:	f016 0608 	ands.w	r6, r6, #8
 80069fa:	d1f8      	bne.n	80069ee <_strtol_l.constprop.0+0x22>
 80069fc:	2c2d      	cmp	r4, #45	; 0x2d
 80069fe:	d12e      	bne.n	8006a5e <_strtol_l.constprop.0+0x92>
 8006a00:	2601      	movs	r6, #1
 8006a02:	782c      	ldrb	r4, [r5, #0]
 8006a04:	1c95      	adds	r5, r2, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d057      	beq.n	8006aba <_strtol_l.constprop.0+0xee>
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d109      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006a0e:	2c30      	cmp	r4, #48	; 0x30
 8006a10:	d107      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006a12:	782a      	ldrb	r2, [r5, #0]
 8006a14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006a18:	2a58      	cmp	r2, #88	; 0x58
 8006a1a:	d149      	bne.n	8006ab0 <_strtol_l.constprop.0+0xe4>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	786c      	ldrb	r4, [r5, #1]
 8006a20:	3502      	adds	r5, #2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006a28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a2c:	fbbc f9f3 	udiv	r9, ip, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006a3a:	2f09      	cmp	r7, #9
 8006a3c:	d814      	bhi.n	8006a68 <_strtol_l.constprop.0+0x9c>
 8006a3e:	463c      	mov	r4, r7
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	dd20      	ble.n	8006a86 <_strtol_l.constprop.0+0xba>
 8006a44:	1c57      	adds	r7, r2, #1
 8006a46:	d007      	beq.n	8006a58 <_strtol_l.constprop.0+0x8c>
 8006a48:	4581      	cmp	r9, r0
 8006a4a:	d319      	bcc.n	8006a80 <_strtol_l.constprop.0+0xb4>
 8006a4c:	d101      	bne.n	8006a52 <_strtol_l.constprop.0+0x86>
 8006a4e:	45a2      	cmp	sl, r4
 8006a50:	db16      	blt.n	8006a80 <_strtol_l.constprop.0+0xb4>
 8006a52:	2201      	movs	r2, #1
 8006a54:	fb00 4003 	mla	r0, r0, r3, r4
 8006a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a5c:	e7eb      	b.n	8006a36 <_strtol_l.constprop.0+0x6a>
 8006a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8006a60:	bf04      	itt	eq
 8006a62:	782c      	ldrbeq	r4, [r5, #0]
 8006a64:	1c95      	addeq	r5, r2, #2
 8006a66:	e7ce      	b.n	8006a06 <_strtol_l.constprop.0+0x3a>
 8006a68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006a6c:	2f19      	cmp	r7, #25
 8006a6e:	d801      	bhi.n	8006a74 <_strtol_l.constprop.0+0xa8>
 8006a70:	3c37      	subs	r4, #55	; 0x37
 8006a72:	e7e5      	b.n	8006a40 <_strtol_l.constprop.0+0x74>
 8006a74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006a78:	2f19      	cmp	r7, #25
 8006a7a:	d804      	bhi.n	8006a86 <_strtol_l.constprop.0+0xba>
 8006a7c:	3c57      	subs	r4, #87	; 0x57
 8006a7e:	e7df      	b.n	8006a40 <_strtol_l.constprop.0+0x74>
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	e7e8      	b.n	8006a58 <_strtol_l.constprop.0+0x8c>
 8006a86:	1c53      	adds	r3, r2, #1
 8006a88:	d108      	bne.n	8006a9c <_strtol_l.constprop.0+0xd0>
 8006a8a:	2322      	movs	r3, #34	; 0x22
 8006a8c:	4660      	mov	r0, ip
 8006a8e:	f8ce 3000 	str.w	r3, [lr]
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	d0a6      	beq.n	80069e6 <_strtol_l.constprop.0+0x1a>
 8006a98:	1e69      	subs	r1, r5, #1
 8006a9a:	e006      	b.n	8006aaa <_strtol_l.constprop.0+0xde>
 8006a9c:	b106      	cbz	r6, 8006aa0 <_strtol_l.constprop.0+0xd4>
 8006a9e:	4240      	negs	r0, r0
 8006aa0:	f1b8 0f00 	cmp.w	r8, #0
 8006aa4:	d09f      	beq.n	80069e6 <_strtol_l.constprop.0+0x1a>
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d1f6      	bne.n	8006a98 <_strtol_l.constprop.0+0xcc>
 8006aaa:	f8c8 1000 	str.w	r1, [r8]
 8006aae:	e79a      	b.n	80069e6 <_strtol_l.constprop.0+0x1a>
 8006ab0:	2430      	movs	r4, #48	; 0x30
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1b5      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	e7b3      	b.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006aba:	2c30      	cmp	r4, #48	; 0x30
 8006abc:	d0a9      	beq.n	8006a12 <_strtol_l.constprop.0+0x46>
 8006abe:	230a      	movs	r3, #10
 8006ac0:	e7af      	b.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006ac2:	bf00      	nop
 8006ac4:	08008671 	.word	0x08008671

08006ac8 <_strtol_r>:
 8006ac8:	f7ff bf80 	b.w	80069cc <_strtol_l.constprop.0>

08006acc <__ssputs_r>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	461f      	mov	r7, r3
 8006ad2:	688e      	ldr	r6, [r1, #8]
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	42be      	cmp	r6, r7
 8006ad8:	460c      	mov	r4, r1
 8006ada:	4690      	mov	r8, r2
 8006adc:	680b      	ldr	r3, [r1, #0]
 8006ade:	d82c      	bhi.n	8006b3a <__ssputs_r+0x6e>
 8006ae0:	898a      	ldrh	r2, [r1, #12]
 8006ae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ae6:	d026      	beq.n	8006b36 <__ssputs_r+0x6a>
 8006ae8:	6965      	ldr	r5, [r4, #20]
 8006aea:	6909      	ldr	r1, [r1, #16]
 8006aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006af0:	eba3 0901 	sub.w	r9, r3, r1
 8006af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006af8:	1c7b      	adds	r3, r7, #1
 8006afa:	444b      	add	r3, r9
 8006afc:	106d      	asrs	r5, r5, #1
 8006afe:	429d      	cmp	r5, r3
 8006b00:	bf38      	it	cc
 8006b02:	461d      	movcc	r5, r3
 8006b04:	0553      	lsls	r3, r2, #21
 8006b06:	d527      	bpl.n	8006b58 <__ssputs_r+0x8c>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7fe fc19 	bl	8005340 <_malloc_r>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	b360      	cbz	r0, 8006b6c <__ssputs_r+0xa0>
 8006b12:	464a      	mov	r2, r9
 8006b14:	6921      	ldr	r1, [r4, #16]
 8006b16:	f000 fa9b 	bl	8007050 <memcpy>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	6126      	str	r6, [r4, #16]
 8006b28:	444e      	add	r6, r9
 8006b2a:	6026      	str	r6, [r4, #0]
 8006b2c:	463e      	mov	r6, r7
 8006b2e:	6165      	str	r5, [r4, #20]
 8006b30:	eba5 0509 	sub.w	r5, r5, r9
 8006b34:	60a5      	str	r5, [r4, #8]
 8006b36:	42be      	cmp	r6, r7
 8006b38:	d900      	bls.n	8006b3c <__ssputs_r+0x70>
 8006b3a:	463e      	mov	r6, r7
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4641      	mov	r1, r8
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	f000 fa26 	bl	8006f92 <memmove>
 8006b46:	2000      	movs	r0, #0
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	1b9b      	subs	r3, r3, r6
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	4433      	add	r3, r6
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	462a      	mov	r2, r5
 8006b5a:	f000 fe2a 	bl	80077b2 <_realloc_r>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d1e0      	bne.n	8006b26 <__ssputs_r+0x5a>
 8006b64:	4650      	mov	r0, sl
 8006b66:	6921      	ldr	r1, [r4, #16]
 8006b68:	f7fe fb7a 	bl	8005260 <_free_r>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	f8ca 3000 	str.w	r3, [sl]
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7c:	81a3      	strh	r3, [r4, #12]
 8006b7e:	e7e9      	b.n	8006b54 <__ssputs_r+0x88>

08006b80 <_svfiprintf_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	4698      	mov	r8, r3
 8006b86:	898b      	ldrh	r3, [r1, #12]
 8006b88:	4607      	mov	r7, r0
 8006b8a:	061b      	lsls	r3, r3, #24
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	4614      	mov	r4, r2
 8006b90:	b09d      	sub	sp, #116	; 0x74
 8006b92:	d50e      	bpl.n	8006bb2 <_svfiprintf_r+0x32>
 8006b94:	690b      	ldr	r3, [r1, #16]
 8006b96:	b963      	cbnz	r3, 8006bb2 <_svfiprintf_r+0x32>
 8006b98:	2140      	movs	r1, #64	; 0x40
 8006b9a:	f7fe fbd1 	bl	8005340 <_malloc_r>
 8006b9e:	6028      	str	r0, [r5, #0]
 8006ba0:	6128      	str	r0, [r5, #16]
 8006ba2:	b920      	cbnz	r0, 8006bae <_svfiprintf_r+0x2e>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	e0d0      	b.n	8006d50 <_svfiprintf_r+0x1d0>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	616b      	str	r3, [r5, #20]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bbc:	2330      	movs	r3, #48	; 0x30
 8006bbe:	f04f 0901 	mov.w	r9, #1
 8006bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006d68 <_svfiprintf_r+0x1e8>
 8006bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bce:	4623      	mov	r3, r4
 8006bd0:	469a      	mov	sl, r3
 8006bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd6:	b10a      	cbz	r2, 8006bdc <_svfiprintf_r+0x5c>
 8006bd8:	2a25      	cmp	r2, #37	; 0x25
 8006bda:	d1f9      	bne.n	8006bd0 <_svfiprintf_r+0x50>
 8006bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8006be0:	d00b      	beq.n	8006bfa <_svfiprintf_r+0x7a>
 8006be2:	465b      	mov	r3, fp
 8006be4:	4622      	mov	r2, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff ff6f 	bl	8006acc <__ssputs_r>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f000 80a9 	beq.w	8006d46 <_svfiprintf_r+0x1c6>
 8006bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf6:	445a      	add	r2, fp
 8006bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80a1 	beq.w	8006d46 <_svfiprintf_r+0x1c6>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0e:	f10a 0a01 	add.w	sl, sl, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	9307      	str	r3, [sp, #28]
 8006c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c1c:	4654      	mov	r4, sl
 8006c1e:	2205      	movs	r2, #5
 8006c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c24:	4850      	ldr	r0, [pc, #320]	; (8006d68 <_svfiprintf_r+0x1e8>)
 8006c26:	f7fd fc98 	bl	800455a <memchr>
 8006c2a:	9a04      	ldr	r2, [sp, #16]
 8006c2c:	b9d8      	cbnz	r0, 8006c66 <_svfiprintf_r+0xe6>
 8006c2e:	06d0      	lsls	r0, r2, #27
 8006c30:	bf44      	itt	mi
 8006c32:	2320      	movmi	r3, #32
 8006c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c38:	0711      	lsls	r1, r2, #28
 8006c3a:	bf44      	itt	mi
 8006c3c:	232b      	movmi	r3, #43	; 0x2b
 8006c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c42:	f89a 3000 	ldrb.w	r3, [sl]
 8006c46:	2b2a      	cmp	r3, #42	; 0x2a
 8006c48:	d015      	beq.n	8006c76 <_svfiprintf_r+0xf6>
 8006c4a:	4654      	mov	r4, sl
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f04f 0c0a 	mov.w	ip, #10
 8006c52:	9a07      	ldr	r2, [sp, #28]
 8006c54:	4621      	mov	r1, r4
 8006c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5a:	3b30      	subs	r3, #48	; 0x30
 8006c5c:	2b09      	cmp	r3, #9
 8006c5e:	d94d      	bls.n	8006cfc <_svfiprintf_r+0x17c>
 8006c60:	b1b0      	cbz	r0, 8006c90 <_svfiprintf_r+0x110>
 8006c62:	9207      	str	r2, [sp, #28]
 8006c64:	e014      	b.n	8006c90 <_svfiprintf_r+0x110>
 8006c66:	eba0 0308 	sub.w	r3, r0, r8
 8006c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	46a2      	mov	sl, r4
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	e7d2      	b.n	8006c1c <_svfiprintf_r+0x9c>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	9103      	str	r1, [sp, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfbb      	ittet	lt
 8006c82:	425b      	neglt	r3, r3
 8006c84:	f042 0202 	orrlt.w	r2, r2, #2
 8006c88:	9307      	strge	r3, [sp, #28]
 8006c8a:	9307      	strlt	r3, [sp, #28]
 8006c8c:	bfb8      	it	lt
 8006c8e:	9204      	strlt	r2, [sp, #16]
 8006c90:	7823      	ldrb	r3, [r4, #0]
 8006c92:	2b2e      	cmp	r3, #46	; 0x2e
 8006c94:	d10c      	bne.n	8006cb0 <_svfiprintf_r+0x130>
 8006c96:	7863      	ldrb	r3, [r4, #1]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d134      	bne.n	8006d06 <_svfiprintf_r+0x186>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	3402      	adds	r4, #2
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	9203      	str	r2, [sp, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfb8      	it	lt
 8006caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cae:	9305      	str	r3, [sp, #20]
 8006cb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006d6c <_svfiprintf_r+0x1ec>
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	7821      	ldrb	r1, [r4, #0]
 8006cba:	f7fd fc4e 	bl	800455a <memchr>
 8006cbe:	b138      	cbz	r0, 8006cd0 <_svfiprintf_r+0x150>
 8006cc0:	2240      	movs	r2, #64	; 0x40
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	eba0 000a 	sub.w	r0, r0, sl
 8006cc8:	4082      	lsls	r2, r0
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	3401      	adds	r4, #1
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd4:	2206      	movs	r2, #6
 8006cd6:	4826      	ldr	r0, [pc, #152]	; (8006d70 <_svfiprintf_r+0x1f0>)
 8006cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cdc:	f7fd fc3d 	bl	800455a <memchr>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d038      	beq.n	8006d56 <_svfiprintf_r+0x1d6>
 8006ce4:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <_svfiprintf_r+0x1f4>)
 8006ce6:	bb1b      	cbnz	r3, 8006d30 <_svfiprintf_r+0x1b0>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	3307      	adds	r3, #7
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	9303      	str	r3, [sp, #12]
 8006cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf6:	4433      	add	r3, r6
 8006cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfa:	e768      	b.n	8006bce <_svfiprintf_r+0x4e>
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	2001      	movs	r0, #1
 8006d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d04:	e7a6      	b.n	8006c54 <_svfiprintf_r+0xd4>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f04f 0c0a 	mov.w	ip, #10
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	3401      	adds	r4, #1
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	4620      	mov	r0, r4
 8006d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d18:	3a30      	subs	r2, #48	; 0x30
 8006d1a:	2a09      	cmp	r2, #9
 8006d1c:	d903      	bls.n	8006d26 <_svfiprintf_r+0x1a6>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c6      	beq.n	8006cb0 <_svfiprintf_r+0x130>
 8006d22:	9105      	str	r1, [sp, #20]
 8006d24:	e7c4      	b.n	8006cb0 <_svfiprintf_r+0x130>
 8006d26:	4604      	mov	r4, r0
 8006d28:	2301      	movs	r3, #1
 8006d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d2e:	e7f0      	b.n	8006d12 <_svfiprintf_r+0x192>
 8006d30:	ab03      	add	r3, sp, #12
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	462a      	mov	r2, r5
 8006d36:	4638      	mov	r0, r7
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <_svfiprintf_r+0x1f8>)
 8006d3a:	a904      	add	r1, sp, #16
 8006d3c:	f7fc fba8 	bl	8003490 <_printf_float>
 8006d40:	1c42      	adds	r2, r0, #1
 8006d42:	4606      	mov	r6, r0
 8006d44:	d1d6      	bne.n	8006cf4 <_svfiprintf_r+0x174>
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	065b      	lsls	r3, r3, #25
 8006d4a:	f53f af2d 	bmi.w	8006ba8 <_svfiprintf_r+0x28>
 8006d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d50:	b01d      	add	sp, #116	; 0x74
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	ab03      	add	r3, sp, #12
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	462a      	mov	r2, r5
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <_svfiprintf_r+0x1f8>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	f7fc fe35 	bl	80039d0 <_printf_i>
 8006d66:	e7eb      	b.n	8006d40 <_svfiprintf_r+0x1c0>
 8006d68:	08008771 	.word	0x08008771
 8006d6c:	08008777 	.word	0x08008777
 8006d70:	0800877b 	.word	0x0800877b
 8006d74:	08003491 	.word	0x08003491
 8006d78:	08006acd 	.word	0x08006acd

08006d7c <__sflush_r>:
 8006d7c:	898a      	ldrh	r2, [r1, #12]
 8006d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d80:	4605      	mov	r5, r0
 8006d82:	0710      	lsls	r0, r2, #28
 8006d84:	460c      	mov	r4, r1
 8006d86:	d457      	bmi.n	8006e38 <__sflush_r+0xbc>
 8006d88:	684b      	ldr	r3, [r1, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dc04      	bgt.n	8006d98 <__sflush_r+0x1c>
 8006d8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc01      	bgt.n	8006d98 <__sflush_r+0x1c>
 8006d94:	2000      	movs	r0, #0
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	d0fa      	beq.n	8006d94 <__sflush_r+0x18>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006da4:	682f      	ldr	r7, [r5, #0]
 8006da6:	6a21      	ldr	r1, [r4, #32]
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	d032      	beq.n	8006e12 <__sflush_r+0x96>
 8006dac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	075a      	lsls	r2, r3, #29
 8006db2:	d505      	bpl.n	8006dc0 <__sflush_r+0x44>
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	1ac0      	subs	r0, r0, r3
 8006db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dba:	b10b      	cbz	r3, 8006dc0 <__sflush_r+0x44>
 8006dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dbe:	1ac0      	subs	r0, r0, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	6a21      	ldr	r1, [r4, #32]
 8006dca:	47b0      	blx	r6
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	d106      	bne.n	8006de0 <__sflush_r+0x64>
 8006dd2:	6829      	ldr	r1, [r5, #0]
 8006dd4:	291d      	cmp	r1, #29
 8006dd6:	d82b      	bhi.n	8006e30 <__sflush_r+0xb4>
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <__sflush_r+0x100>)
 8006dda:	410a      	asrs	r2, r1
 8006ddc:	07d6      	lsls	r6, r2, #31
 8006dde:	d427      	bmi.n	8006e30 <__sflush_r+0xb4>
 8006de0:	2200      	movs	r2, #0
 8006de2:	6062      	str	r2, [r4, #4]
 8006de4:	6922      	ldr	r2, [r4, #16]
 8006de6:	04d9      	lsls	r1, r3, #19
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	d504      	bpl.n	8006df6 <__sflush_r+0x7a>
 8006dec:	1c42      	adds	r2, r0, #1
 8006dee:	d101      	bne.n	8006df4 <__sflush_r+0x78>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b903      	cbnz	r3, 8006df6 <__sflush_r+0x7a>
 8006df4:	6560      	str	r0, [r4, #84]	; 0x54
 8006df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df8:	602f      	str	r7, [r5, #0]
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d0ca      	beq.n	8006d94 <__sflush_r+0x18>
 8006dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e02:	4299      	cmp	r1, r3
 8006e04:	d002      	beq.n	8006e0c <__sflush_r+0x90>
 8006e06:	4628      	mov	r0, r5
 8006e08:	f7fe fa2a 	bl	8005260 <_free_r>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	6360      	str	r0, [r4, #52]	; 0x34
 8006e10:	e7c1      	b.n	8006d96 <__sflush_r+0x1a>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b0      	blx	r6
 8006e18:	1c41      	adds	r1, r0, #1
 8006e1a:	d1c8      	bne.n	8006dae <__sflush_r+0x32>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0c5      	beq.n	8006dae <__sflush_r+0x32>
 8006e22:	2b1d      	cmp	r3, #29
 8006e24:	d001      	beq.n	8006e2a <__sflush_r+0xae>
 8006e26:	2b16      	cmp	r3, #22
 8006e28:	d101      	bne.n	8006e2e <__sflush_r+0xb2>
 8006e2a:	602f      	str	r7, [r5, #0]
 8006e2c:	e7b2      	b.n	8006d94 <__sflush_r+0x18>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	e7ae      	b.n	8006d96 <__sflush_r+0x1a>
 8006e38:	690f      	ldr	r7, [r1, #16]
 8006e3a:	2f00      	cmp	r7, #0
 8006e3c:	d0aa      	beq.n	8006d94 <__sflush_r+0x18>
 8006e3e:	0793      	lsls	r3, r2, #30
 8006e40:	bf18      	it	ne
 8006e42:	2300      	movne	r3, #0
 8006e44:	680e      	ldr	r6, [r1, #0]
 8006e46:	bf08      	it	eq
 8006e48:	694b      	ldreq	r3, [r1, #20]
 8006e4a:	1bf6      	subs	r6, r6, r7
 8006e4c:	600f      	str	r7, [r1, #0]
 8006e4e:	608b      	str	r3, [r1, #8]
 8006e50:	2e00      	cmp	r6, #0
 8006e52:	dd9f      	ble.n	8006d94 <__sflush_r+0x18>
 8006e54:	4633      	mov	r3, r6
 8006e56:	463a      	mov	r2, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	6a21      	ldr	r1, [r4, #32]
 8006e5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e60:	47e0      	blx	ip
 8006e62:	2800      	cmp	r0, #0
 8006e64:	dc06      	bgt.n	8006e74 <__sflush_r+0xf8>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e790      	b.n	8006d96 <__sflush_r+0x1a>
 8006e74:	4407      	add	r7, r0
 8006e76:	1a36      	subs	r6, r6, r0
 8006e78:	e7ea      	b.n	8006e50 <__sflush_r+0xd4>
 8006e7a:	bf00      	nop
 8006e7c:	dfbffffe 	.word	0xdfbffffe

08006e80 <_fflush_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	690b      	ldr	r3, [r1, #16]
 8006e84:	4605      	mov	r5, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	b913      	cbnz	r3, 8006e90 <_fflush_r+0x10>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	b118      	cbz	r0, 8006e9a <_fflush_r+0x1a>
 8006e92:	6a03      	ldr	r3, [r0, #32]
 8006e94:	b90b      	cbnz	r3, 8006e9a <_fflush_r+0x1a>
 8006e96:	f7fd f957 	bl	8004148 <__sinit>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f3      	beq.n	8006e8a <_fflush_r+0xa>
 8006ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea4:	07d0      	lsls	r0, r2, #31
 8006ea6:	d404      	bmi.n	8006eb2 <_fflush_r+0x32>
 8006ea8:	0599      	lsls	r1, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_fflush_r+0x32>
 8006eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eae:	f7fd fb52 	bl	8004556 <__retarget_lock_acquire_recursive>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f7ff ff61 	bl	8006d7c <__sflush_r>
 8006eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	07da      	lsls	r2, r3, #31
 8006ec0:	d4e4      	bmi.n	8006e8c <_fflush_r+0xc>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	059b      	lsls	r3, r3, #22
 8006ec6:	d4e1      	bmi.n	8006e8c <_fflush_r+0xc>
 8006ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eca:	f7fd fb45 	bl	8004558 <__retarget_lock_release_recursive>
 8006ece:	e7dd      	b.n	8006e8c <_fflush_r+0xc>

08006ed0 <__swhatbuf_r>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed8:	4615      	mov	r5, r2
 8006eda:	2900      	cmp	r1, #0
 8006edc:	461e      	mov	r6, r3
 8006ede:	b096      	sub	sp, #88	; 0x58
 8006ee0:	da0c      	bge.n	8006efc <__swhatbuf_r+0x2c>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006eea:	bf0c      	ite	eq
 8006eec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ef0:	2340      	movne	r3, #64	; 0x40
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	6031      	str	r1, [r6, #0]
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	b016      	add	sp, #88	; 0x58
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	466a      	mov	r2, sp
 8006efe:	f000 f875 	bl	8006fec <_fstat_r>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	dbed      	blt.n	8006ee2 <__swhatbuf_r+0x12>
 8006f06:	9901      	ldr	r1, [sp, #4]
 8006f08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f10:	4259      	negs	r1, r3
 8006f12:	4159      	adcs	r1, r3
 8006f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f18:	e7eb      	b.n	8006ef2 <__swhatbuf_r+0x22>

08006f1a <__smakebuf_r>:
 8006f1a:	898b      	ldrh	r3, [r1, #12]
 8006f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f1e:	079d      	lsls	r5, r3, #30
 8006f20:	4606      	mov	r6, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	d507      	bpl.n	8006f36 <__smakebuf_r+0x1c>
 8006f26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	2301      	movs	r3, #1
 8006f30:	6163      	str	r3, [r4, #20]
 8006f32:	b002      	add	sp, #8
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	466a      	mov	r2, sp
 8006f38:	ab01      	add	r3, sp, #4
 8006f3a:	f7ff ffc9 	bl	8006ed0 <__swhatbuf_r>
 8006f3e:	9900      	ldr	r1, [sp, #0]
 8006f40:	4605      	mov	r5, r0
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7fe f9fc 	bl	8005340 <_malloc_r>
 8006f48:	b948      	cbnz	r0, 8006f5e <__smakebuf_r+0x44>
 8006f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4e:	059a      	lsls	r2, r3, #22
 8006f50:	d4ef      	bmi.n	8006f32 <__smakebuf_r+0x18>
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	f043 0302 	orr.w	r3, r3, #2
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	e7e3      	b.n	8006f26 <__smakebuf_r+0xc>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	6020      	str	r0, [r4, #0]
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	9b00      	ldr	r3, [sp, #0]
 8006f6a:	6120      	str	r0, [r4, #16]
 8006f6c:	6163      	str	r3, [r4, #20]
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	b15b      	cbz	r3, 8006f8a <__smakebuf_r+0x70>
 8006f72:	4630      	mov	r0, r6
 8006f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f78:	f000 f84a 	bl	8007010 <_isatty_r>
 8006f7c:	b128      	cbz	r0, 8006f8a <__smakebuf_r+0x70>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	431d      	orrs	r5, r3
 8006f8e:	81a5      	strh	r5, [r4, #12]
 8006f90:	e7cf      	b.n	8006f32 <__smakebuf_r+0x18>

08006f92 <memmove>:
 8006f92:	4288      	cmp	r0, r1
 8006f94:	b510      	push	{r4, lr}
 8006f96:	eb01 0402 	add.w	r4, r1, r2
 8006f9a:	d902      	bls.n	8006fa2 <memmove+0x10>
 8006f9c:	4284      	cmp	r4, r0
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	d807      	bhi.n	8006fb2 <memmove+0x20>
 8006fa2:	1e43      	subs	r3, r0, #1
 8006fa4:	42a1      	cmp	r1, r4
 8006fa6:	d008      	beq.n	8006fba <memmove+0x28>
 8006fa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fb0:	e7f8      	b.n	8006fa4 <memmove+0x12>
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4402      	add	r2, r0
 8006fb6:	428a      	cmp	r2, r1
 8006fb8:	d100      	bne.n	8006fbc <memmove+0x2a>
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fc4:	e7f7      	b.n	8006fb6 <memmove+0x24>

08006fc6 <strncmp>:
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	b16a      	cbz	r2, 8006fe6 <strncmp+0x20>
 8006fca:	3901      	subs	r1, #1
 8006fcc:	1884      	adds	r4, r0, r2
 8006fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d103      	bne.n	8006fe2 <strncmp+0x1c>
 8006fda:	42a0      	cmp	r0, r4
 8006fdc:	d001      	beq.n	8006fe2 <strncmp+0x1c>
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d1f5      	bne.n	8006fce <strncmp+0x8>
 8006fe2:	1ad0      	subs	r0, r2, r3
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	e7fc      	b.n	8006fe4 <strncmp+0x1e>
	...

08006fec <_fstat_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4d06      	ldr	r5, [pc, #24]	; (800700c <_fstat_r+0x20>)
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7fa fe97 	bl	8001d2c <_fstat>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d102      	bne.n	8007008 <_fstat_r+0x1c>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	b103      	cbz	r3, 8007008 <_fstat_r+0x1c>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	20000380 	.word	0x20000380

08007010 <_isatty_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	2300      	movs	r3, #0
 8007014:	4d05      	ldr	r5, [pc, #20]	; (800702c <_isatty_r+0x1c>)
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa fe95 	bl	8001d4a <_isatty>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_isatty_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_isatty_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000380 	.word	0x20000380

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	2300      	movs	r3, #0
 8007034:	4d05      	ldr	r5, [pc, #20]	; (800704c <_sbrk_r+0x1c>)
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa fe9c 	bl	8001d78 <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000380 	.word	0x20000380

08007050 <memcpy>:
 8007050:	440a      	add	r2, r1
 8007052:	4291      	cmp	r1, r2
 8007054:	f100 33ff 	add.w	r3, r0, #4294967295
 8007058:	d100      	bne.n	800705c <memcpy+0xc>
 800705a:	4770      	bx	lr
 800705c:	b510      	push	{r4, lr}
 800705e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007062:	4291      	cmp	r1, r2
 8007064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007068:	d1f9      	bne.n	800705e <memcpy+0xe>
 800706a:	bd10      	pop	{r4, pc}

0800706c <nan>:
 800706c:	2000      	movs	r0, #0
 800706e:	4901      	ldr	r1, [pc, #4]	; (8007074 <nan+0x8>)
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	7ff80000 	.word	0x7ff80000

08007078 <__assert_func>:
 8007078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800707a:	4614      	mov	r4, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <__assert_func+0x2c>)
 8007080:	4605      	mov	r5, r0
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68d8      	ldr	r0, [r3, #12]
 8007086:	b14c      	cbz	r4, 800709c <__assert_func+0x24>
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <__assert_func+0x30>)
 800708a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800708e:	9100      	str	r1, [sp, #0]
 8007090:	462b      	mov	r3, r5
 8007092:	4906      	ldr	r1, [pc, #24]	; (80070ac <__assert_func+0x34>)
 8007094:	f000 fbca 	bl	800782c <fiprintf>
 8007098:	f000 fbda 	bl	8007850 <abort>
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <__assert_func+0x38>)
 800709e:	461c      	mov	r4, r3
 80070a0:	e7f3      	b.n	800708a <__assert_func+0x12>
 80070a2:	bf00      	nop
 80070a4:	20000064 	.word	0x20000064
 80070a8:	0800878a 	.word	0x0800878a
 80070ac:	08008797 	.word	0x08008797
 80070b0:	080087c5 	.word	0x080087c5

080070b4 <_calloc_r>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	fba1 5402 	umull	r5, r4, r1, r2
 80070ba:	b934      	cbnz	r4, 80070ca <_calloc_r+0x16>
 80070bc:	4629      	mov	r1, r5
 80070be:	f7fe f93f 	bl	8005340 <_malloc_r>
 80070c2:	4606      	mov	r6, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <_calloc_r+0x1e>
 80070c6:	4630      	mov	r0, r6
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	220c      	movs	r2, #12
 80070cc:	2600      	movs	r6, #0
 80070ce:	6002      	str	r2, [r0, #0]
 80070d0:	e7f9      	b.n	80070c6 <_calloc_r+0x12>
 80070d2:	462a      	mov	r2, r5
 80070d4:	4621      	mov	r1, r4
 80070d6:	f7fd f9c1 	bl	800445c <memset>
 80070da:	e7f4      	b.n	80070c6 <_calloc_r+0x12>

080070dc <rshift>:
 80070dc:	6903      	ldr	r3, [r0, #16]
 80070de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070e6:	f100 0414 	add.w	r4, r0, #20
 80070ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070ee:	dd46      	ble.n	800717e <rshift+0xa2>
 80070f0:	f011 011f 	ands.w	r1, r1, #31
 80070f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070fc:	d10c      	bne.n	8007118 <rshift+0x3c>
 80070fe:	4629      	mov	r1, r5
 8007100:	f100 0710 	add.w	r7, r0, #16
 8007104:	42b1      	cmp	r1, r6
 8007106:	d335      	bcc.n	8007174 <rshift+0x98>
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	1eea      	subs	r2, r5, #3
 800710e:	4296      	cmp	r6, r2
 8007110:	bf38      	it	cc
 8007112:	2300      	movcc	r3, #0
 8007114:	4423      	add	r3, r4
 8007116:	e015      	b.n	8007144 <rshift+0x68>
 8007118:	46a1      	mov	r9, r4
 800711a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800711e:	f1c1 0820 	rsb	r8, r1, #32
 8007122:	40cf      	lsrs	r7, r1
 8007124:	f105 0e04 	add.w	lr, r5, #4
 8007128:	4576      	cmp	r6, lr
 800712a:	46f4      	mov	ip, lr
 800712c:	d816      	bhi.n	800715c <rshift+0x80>
 800712e:	1a9a      	subs	r2, r3, r2
 8007130:	0092      	lsls	r2, r2, #2
 8007132:	3a04      	subs	r2, #4
 8007134:	3501      	adds	r5, #1
 8007136:	42ae      	cmp	r6, r5
 8007138:	bf38      	it	cc
 800713a:	2200      	movcc	r2, #0
 800713c:	18a3      	adds	r3, r4, r2
 800713e:	50a7      	str	r7, [r4, r2]
 8007140:	b107      	cbz	r7, 8007144 <rshift+0x68>
 8007142:	3304      	adds	r3, #4
 8007144:	42a3      	cmp	r3, r4
 8007146:	eba3 0204 	sub.w	r2, r3, r4
 800714a:	bf08      	it	eq
 800714c:	2300      	moveq	r3, #0
 800714e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007152:	6102      	str	r2, [r0, #16]
 8007154:	bf08      	it	eq
 8007156:	6143      	streq	r3, [r0, #20]
 8007158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800715c:	f8dc c000 	ldr.w	ip, [ip]
 8007160:	fa0c fc08 	lsl.w	ip, ip, r8
 8007164:	ea4c 0707 	orr.w	r7, ip, r7
 8007168:	f849 7b04 	str.w	r7, [r9], #4
 800716c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007170:	40cf      	lsrs	r7, r1
 8007172:	e7d9      	b.n	8007128 <rshift+0x4c>
 8007174:	f851 cb04 	ldr.w	ip, [r1], #4
 8007178:	f847 cf04 	str.w	ip, [r7, #4]!
 800717c:	e7c2      	b.n	8007104 <rshift+0x28>
 800717e:	4623      	mov	r3, r4
 8007180:	e7e0      	b.n	8007144 <rshift+0x68>

08007182 <__hexdig_fun>:
 8007182:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007186:	2b09      	cmp	r3, #9
 8007188:	d802      	bhi.n	8007190 <__hexdig_fun+0xe>
 800718a:	3820      	subs	r0, #32
 800718c:	b2c0      	uxtb	r0, r0
 800718e:	4770      	bx	lr
 8007190:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007194:	2b05      	cmp	r3, #5
 8007196:	d801      	bhi.n	800719c <__hexdig_fun+0x1a>
 8007198:	3847      	subs	r0, #71	; 0x47
 800719a:	e7f7      	b.n	800718c <__hexdig_fun+0xa>
 800719c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	d801      	bhi.n	80071a8 <__hexdig_fun+0x26>
 80071a4:	3827      	subs	r0, #39	; 0x27
 80071a6:	e7f1      	b.n	800718c <__hexdig_fun+0xa>
 80071a8:	2000      	movs	r0, #0
 80071aa:	4770      	bx	lr

080071ac <__gethex>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	4681      	mov	r9, r0
 80071b2:	468a      	mov	sl, r1
 80071b4:	4617      	mov	r7, r2
 80071b6:	680a      	ldr	r2, [r1, #0]
 80071b8:	b085      	sub	sp, #20
 80071ba:	f102 0b02 	add.w	fp, r2, #2
 80071be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071c6:	9302      	str	r3, [sp, #8]
 80071c8:	32fe      	adds	r2, #254	; 0xfe
 80071ca:	eb02 030b 	add.w	r3, r2, fp
 80071ce:	46d8      	mov	r8, fp
 80071d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	2830      	cmp	r0, #48	; 0x30
 80071d8:	d0f7      	beq.n	80071ca <__gethex+0x1e>
 80071da:	f7ff ffd2 	bl	8007182 <__hexdig_fun>
 80071de:	4604      	mov	r4, r0
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d138      	bne.n	8007256 <__gethex+0xaa>
 80071e4:	2201      	movs	r2, #1
 80071e6:	4640      	mov	r0, r8
 80071e8:	49a7      	ldr	r1, [pc, #668]	; (8007488 <__gethex+0x2dc>)
 80071ea:	f7ff feec 	bl	8006fc6 <strncmp>
 80071ee:	4606      	mov	r6, r0
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d169      	bne.n	80072c8 <__gethex+0x11c>
 80071f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80071f8:	465d      	mov	r5, fp
 80071fa:	f7ff ffc2 	bl	8007182 <__hexdig_fun>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d064      	beq.n	80072cc <__gethex+0x120>
 8007202:	465a      	mov	r2, fp
 8007204:	7810      	ldrb	r0, [r2, #0]
 8007206:	4690      	mov	r8, r2
 8007208:	2830      	cmp	r0, #48	; 0x30
 800720a:	f102 0201 	add.w	r2, r2, #1
 800720e:	d0f9      	beq.n	8007204 <__gethex+0x58>
 8007210:	f7ff ffb7 	bl	8007182 <__hexdig_fun>
 8007214:	2301      	movs	r3, #1
 8007216:	fab0 f480 	clz	r4, r0
 800721a:	465e      	mov	r6, fp
 800721c:	0964      	lsrs	r4, r4, #5
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	4642      	mov	r2, r8
 8007222:	4615      	mov	r5, r2
 8007224:	7828      	ldrb	r0, [r5, #0]
 8007226:	3201      	adds	r2, #1
 8007228:	f7ff ffab 	bl	8007182 <__hexdig_fun>
 800722c:	2800      	cmp	r0, #0
 800722e:	d1f8      	bne.n	8007222 <__gethex+0x76>
 8007230:	2201      	movs	r2, #1
 8007232:	4628      	mov	r0, r5
 8007234:	4994      	ldr	r1, [pc, #592]	; (8007488 <__gethex+0x2dc>)
 8007236:	f7ff fec6 	bl	8006fc6 <strncmp>
 800723a:	b978      	cbnz	r0, 800725c <__gethex+0xb0>
 800723c:	b946      	cbnz	r6, 8007250 <__gethex+0xa4>
 800723e:	1c6e      	adds	r6, r5, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4615      	mov	r5, r2
 8007244:	7828      	ldrb	r0, [r5, #0]
 8007246:	3201      	adds	r2, #1
 8007248:	f7ff ff9b 	bl	8007182 <__hexdig_fun>
 800724c:	2800      	cmp	r0, #0
 800724e:	d1f8      	bne.n	8007242 <__gethex+0x96>
 8007250:	1b73      	subs	r3, r6, r5
 8007252:	009e      	lsls	r6, r3, #2
 8007254:	e004      	b.n	8007260 <__gethex+0xb4>
 8007256:	2400      	movs	r4, #0
 8007258:	4626      	mov	r6, r4
 800725a:	e7e1      	b.n	8007220 <__gethex+0x74>
 800725c:	2e00      	cmp	r6, #0
 800725e:	d1f7      	bne.n	8007250 <__gethex+0xa4>
 8007260:	782b      	ldrb	r3, [r5, #0]
 8007262:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007266:	2b50      	cmp	r3, #80	; 0x50
 8007268:	d13d      	bne.n	80072e6 <__gethex+0x13a>
 800726a:	786b      	ldrb	r3, [r5, #1]
 800726c:	2b2b      	cmp	r3, #43	; 0x2b
 800726e:	d02f      	beq.n	80072d0 <__gethex+0x124>
 8007270:	2b2d      	cmp	r3, #45	; 0x2d
 8007272:	d031      	beq.n	80072d8 <__gethex+0x12c>
 8007274:	f04f 0b00 	mov.w	fp, #0
 8007278:	1c69      	adds	r1, r5, #1
 800727a:	7808      	ldrb	r0, [r1, #0]
 800727c:	f7ff ff81 	bl	8007182 <__hexdig_fun>
 8007280:	1e42      	subs	r2, r0, #1
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	2a18      	cmp	r2, #24
 8007286:	d82e      	bhi.n	80072e6 <__gethex+0x13a>
 8007288:	f1a0 0210 	sub.w	r2, r0, #16
 800728c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007290:	f7ff ff77 	bl	8007182 <__hexdig_fun>
 8007294:	f100 3cff 	add.w	ip, r0, #4294967295
 8007298:	fa5f fc8c 	uxtb.w	ip, ip
 800729c:	f1bc 0f18 	cmp.w	ip, #24
 80072a0:	d91d      	bls.n	80072de <__gethex+0x132>
 80072a2:	f1bb 0f00 	cmp.w	fp, #0
 80072a6:	d000      	beq.n	80072aa <__gethex+0xfe>
 80072a8:	4252      	negs	r2, r2
 80072aa:	4416      	add	r6, r2
 80072ac:	f8ca 1000 	str.w	r1, [sl]
 80072b0:	b1dc      	cbz	r4, 80072ea <__gethex+0x13e>
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	f04f 0800 	movne.w	r8, #0
 80072bc:	f04f 0806 	moveq.w	r8, #6
 80072c0:	4640      	mov	r0, r8
 80072c2:	b005      	add	sp, #20
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	4645      	mov	r5, r8
 80072ca:	4626      	mov	r6, r4
 80072cc:	2401      	movs	r4, #1
 80072ce:	e7c7      	b.n	8007260 <__gethex+0xb4>
 80072d0:	f04f 0b00 	mov.w	fp, #0
 80072d4:	1ca9      	adds	r1, r5, #2
 80072d6:	e7d0      	b.n	800727a <__gethex+0xce>
 80072d8:	f04f 0b01 	mov.w	fp, #1
 80072dc:	e7fa      	b.n	80072d4 <__gethex+0x128>
 80072de:	230a      	movs	r3, #10
 80072e0:	fb03 0002 	mla	r0, r3, r2, r0
 80072e4:	e7d0      	b.n	8007288 <__gethex+0xdc>
 80072e6:	4629      	mov	r1, r5
 80072e8:	e7e0      	b.n	80072ac <__gethex+0x100>
 80072ea:	4621      	mov	r1, r4
 80072ec:	eba5 0308 	sub.w	r3, r5, r8
 80072f0:	3b01      	subs	r3, #1
 80072f2:	2b07      	cmp	r3, #7
 80072f4:	dc0a      	bgt.n	800730c <__gethex+0x160>
 80072f6:	4648      	mov	r0, r9
 80072f8:	f7fe f8ae 	bl	8005458 <_Balloc>
 80072fc:	4604      	mov	r4, r0
 80072fe:	b940      	cbnz	r0, 8007312 <__gethex+0x166>
 8007300:	4602      	mov	r2, r0
 8007302:	21e4      	movs	r1, #228	; 0xe4
 8007304:	4b61      	ldr	r3, [pc, #388]	; (800748c <__gethex+0x2e0>)
 8007306:	4862      	ldr	r0, [pc, #392]	; (8007490 <__gethex+0x2e4>)
 8007308:	f7ff feb6 	bl	8007078 <__assert_func>
 800730c:	3101      	adds	r1, #1
 800730e:	105b      	asrs	r3, r3, #1
 8007310:	e7ef      	b.n	80072f2 <__gethex+0x146>
 8007312:	2300      	movs	r3, #0
 8007314:	469b      	mov	fp, r3
 8007316:	f100 0a14 	add.w	sl, r0, #20
 800731a:	f8cd a004 	str.w	sl, [sp, #4]
 800731e:	45a8      	cmp	r8, r5
 8007320:	d344      	bcc.n	80073ac <__gethex+0x200>
 8007322:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007326:	4658      	mov	r0, fp
 8007328:	f848 bb04 	str.w	fp, [r8], #4
 800732c:	eba8 080a 	sub.w	r8, r8, sl
 8007330:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007334:	6122      	str	r2, [r4, #16]
 8007336:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800733a:	f7fe f97f 	bl	800563c <__hi0bits>
 800733e:	683d      	ldr	r5, [r7, #0]
 8007340:	eba8 0800 	sub.w	r8, r8, r0
 8007344:	45a8      	cmp	r8, r5
 8007346:	dd59      	ble.n	80073fc <__gethex+0x250>
 8007348:	eba8 0805 	sub.w	r8, r8, r5
 800734c:	4641      	mov	r1, r8
 800734e:	4620      	mov	r0, r4
 8007350:	f7fe fcfd 	bl	8005d4e <__any_on>
 8007354:	4683      	mov	fp, r0
 8007356:	b1b8      	cbz	r0, 8007388 <__gethex+0x1dc>
 8007358:	f04f 0b01 	mov.w	fp, #1
 800735c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007360:	1159      	asrs	r1, r3, #5
 8007362:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007366:	f003 021f 	and.w	r2, r3, #31
 800736a:	fa0b f202 	lsl.w	r2, fp, r2
 800736e:	420a      	tst	r2, r1
 8007370:	d00a      	beq.n	8007388 <__gethex+0x1dc>
 8007372:	455b      	cmp	r3, fp
 8007374:	dd06      	ble.n	8007384 <__gethex+0x1d8>
 8007376:	4620      	mov	r0, r4
 8007378:	f1a8 0102 	sub.w	r1, r8, #2
 800737c:	f7fe fce7 	bl	8005d4e <__any_on>
 8007380:	2800      	cmp	r0, #0
 8007382:	d138      	bne.n	80073f6 <__gethex+0x24a>
 8007384:	f04f 0b02 	mov.w	fp, #2
 8007388:	4641      	mov	r1, r8
 800738a:	4620      	mov	r0, r4
 800738c:	f7ff fea6 	bl	80070dc <rshift>
 8007390:	4446      	add	r6, r8
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	42b3      	cmp	r3, r6
 8007396:	da41      	bge.n	800741c <__gethex+0x270>
 8007398:	4621      	mov	r1, r4
 800739a:	4648      	mov	r0, r9
 800739c:	f7fe f89c 	bl	80054d8 <_Bfree>
 80073a0:	2300      	movs	r3, #0
 80073a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e789      	b.n	80072c0 <__gethex+0x114>
 80073ac:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80073b0:	2a2e      	cmp	r2, #46	; 0x2e
 80073b2:	d014      	beq.n	80073de <__gethex+0x232>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d106      	bne.n	80073c6 <__gethex+0x21a>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f843 bb04 	str.w	fp, [r3], #4
 80073be:	f04f 0b00 	mov.w	fp, #0
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	465b      	mov	r3, fp
 80073c6:	7828      	ldrb	r0, [r5, #0]
 80073c8:	9303      	str	r3, [sp, #12]
 80073ca:	f7ff feda 	bl	8007182 <__hexdig_fun>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	f000 000f 	and.w	r0, r0, #15
 80073d4:	4098      	lsls	r0, r3
 80073d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80073da:	3304      	adds	r3, #4
 80073dc:	e79f      	b.n	800731e <__gethex+0x172>
 80073de:	45a8      	cmp	r8, r5
 80073e0:	d8e8      	bhi.n	80073b4 <__gethex+0x208>
 80073e2:	2201      	movs	r2, #1
 80073e4:	4628      	mov	r0, r5
 80073e6:	4928      	ldr	r1, [pc, #160]	; (8007488 <__gethex+0x2dc>)
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	f7ff fdec 	bl	8006fc6 <strncmp>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d1df      	bne.n	80073b4 <__gethex+0x208>
 80073f4:	e793      	b.n	800731e <__gethex+0x172>
 80073f6:	f04f 0b03 	mov.w	fp, #3
 80073fa:	e7c5      	b.n	8007388 <__gethex+0x1dc>
 80073fc:	da0b      	bge.n	8007416 <__gethex+0x26a>
 80073fe:	eba5 0808 	sub.w	r8, r5, r8
 8007402:	4621      	mov	r1, r4
 8007404:	4642      	mov	r2, r8
 8007406:	4648      	mov	r0, r9
 8007408:	f7fe fa7e 	bl	8005908 <__lshift>
 800740c:	4604      	mov	r4, r0
 800740e:	eba6 0608 	sub.w	r6, r6, r8
 8007412:	f100 0a14 	add.w	sl, r0, #20
 8007416:	f04f 0b00 	mov.w	fp, #0
 800741a:	e7ba      	b.n	8007392 <__gethex+0x1e6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	42b3      	cmp	r3, r6
 8007420:	dd74      	ble.n	800750c <__gethex+0x360>
 8007422:	1b9e      	subs	r6, r3, r6
 8007424:	42b5      	cmp	r5, r6
 8007426:	dc35      	bgt.n	8007494 <__gethex+0x2e8>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d023      	beq.n	8007476 <__gethex+0x2ca>
 800742e:	2b03      	cmp	r3, #3
 8007430:	d025      	beq.n	800747e <__gethex+0x2d2>
 8007432:	2b01      	cmp	r3, #1
 8007434:	d115      	bne.n	8007462 <__gethex+0x2b6>
 8007436:	42b5      	cmp	r5, r6
 8007438:	d113      	bne.n	8007462 <__gethex+0x2b6>
 800743a:	2d01      	cmp	r5, #1
 800743c:	d10b      	bne.n	8007456 <__gethex+0x2aa>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	9a02      	ldr	r2, [sp, #8]
 8007442:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	2301      	movs	r3, #1
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	f8ca 3000 	str.w	r3, [sl]
 8007450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007452:	601c      	str	r4, [r3, #0]
 8007454:	e734      	b.n	80072c0 <__gethex+0x114>
 8007456:	4620      	mov	r0, r4
 8007458:	1e69      	subs	r1, r5, #1
 800745a:	f7fe fc78 	bl	8005d4e <__any_on>
 800745e:	2800      	cmp	r0, #0
 8007460:	d1ed      	bne.n	800743e <__gethex+0x292>
 8007462:	4621      	mov	r1, r4
 8007464:	4648      	mov	r0, r9
 8007466:	f7fe f837 	bl	80054d8 <_Bfree>
 800746a:	2300      	movs	r3, #0
 800746c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800746e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e724      	b.n	80072c0 <__gethex+0x114>
 8007476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f2      	bne.n	8007462 <__gethex+0x2b6>
 800747c:	e7df      	b.n	800743e <__gethex+0x292>
 800747e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1dc      	bne.n	800743e <__gethex+0x292>
 8007484:	e7ed      	b.n	8007462 <__gethex+0x2b6>
 8007486:	bf00      	nop
 8007488:	0800861c 	.word	0x0800861c
 800748c:	080084b3 	.word	0x080084b3
 8007490:	080087c6 	.word	0x080087c6
 8007494:	f106 38ff 	add.w	r8, r6, #4294967295
 8007498:	f1bb 0f00 	cmp.w	fp, #0
 800749c:	d133      	bne.n	8007506 <__gethex+0x35a>
 800749e:	f1b8 0f00 	cmp.w	r8, #0
 80074a2:	d004      	beq.n	80074ae <__gethex+0x302>
 80074a4:	4641      	mov	r1, r8
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7fe fc51 	bl	8005d4e <__any_on>
 80074ac:	4683      	mov	fp, r0
 80074ae:	2301      	movs	r3, #1
 80074b0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80074b4:	f008 081f 	and.w	r8, r8, #31
 80074b8:	fa03 f308 	lsl.w	r3, r3, r8
 80074bc:	f04f 0802 	mov.w	r8, #2
 80074c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80074c4:	4631      	mov	r1, r6
 80074c6:	4213      	tst	r3, r2
 80074c8:	4620      	mov	r0, r4
 80074ca:	bf18      	it	ne
 80074cc:	f04b 0b02 	orrne.w	fp, fp, #2
 80074d0:	1bad      	subs	r5, r5, r6
 80074d2:	f7ff fe03 	bl	80070dc <rshift>
 80074d6:	687e      	ldr	r6, [r7, #4]
 80074d8:	f1bb 0f00 	cmp.w	fp, #0
 80074dc:	d04a      	beq.n	8007574 <__gethex+0x3c8>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d016      	beq.n	8007512 <__gethex+0x366>
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d018      	beq.n	800751a <__gethex+0x36e>
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d109      	bne.n	8007500 <__gethex+0x354>
 80074ec:	f01b 0f02 	tst.w	fp, #2
 80074f0:	d006      	beq.n	8007500 <__gethex+0x354>
 80074f2:	f8da 3000 	ldr.w	r3, [sl]
 80074f6:	ea4b 0b03 	orr.w	fp, fp, r3
 80074fa:	f01b 0f01 	tst.w	fp, #1
 80074fe:	d10f      	bne.n	8007520 <__gethex+0x374>
 8007500:	f048 0810 	orr.w	r8, r8, #16
 8007504:	e036      	b.n	8007574 <__gethex+0x3c8>
 8007506:	f04f 0b01 	mov.w	fp, #1
 800750a:	e7d0      	b.n	80074ae <__gethex+0x302>
 800750c:	f04f 0801 	mov.w	r8, #1
 8007510:	e7e2      	b.n	80074d8 <__gethex+0x32c>
 8007512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007514:	f1c3 0301 	rsb	r3, r3, #1
 8007518:	930f      	str	r3, [sp, #60]	; 0x3c
 800751a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0ef      	beq.n	8007500 <__gethex+0x354>
 8007520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007524:	f104 0214 	add.w	r2, r4, #20
 8007528:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	2300      	movs	r3, #0
 8007530:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007534:	4694      	mov	ip, r2
 8007536:	f852 1b04 	ldr.w	r1, [r2], #4
 800753a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800753e:	d01e      	beq.n	800757e <__gethex+0x3d2>
 8007540:	3101      	adds	r1, #1
 8007542:	f8cc 1000 	str.w	r1, [ip]
 8007546:	f1b8 0f02 	cmp.w	r8, #2
 800754a:	f104 0214 	add.w	r2, r4, #20
 800754e:	d13d      	bne.n	80075cc <__gethex+0x420>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	3b01      	subs	r3, #1
 8007554:	42ab      	cmp	r3, r5
 8007556:	d10b      	bne.n	8007570 <__gethex+0x3c4>
 8007558:	2301      	movs	r3, #1
 800755a:	1169      	asrs	r1, r5, #5
 800755c:	f005 051f 	and.w	r5, r5, #31
 8007560:	fa03 f505 	lsl.w	r5, r3, r5
 8007564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007568:	421d      	tst	r5, r3
 800756a:	bf18      	it	ne
 800756c:	f04f 0801 	movne.w	r8, #1
 8007570:	f048 0820 	orr.w	r8, r8, #32
 8007574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007576:	601c      	str	r4, [r3, #0]
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	601e      	str	r6, [r3, #0]
 800757c:	e6a0      	b.n	80072c0 <__gethex+0x114>
 800757e:	4290      	cmp	r0, r2
 8007580:	f842 3c04 	str.w	r3, [r2, #-4]
 8007584:	d8d6      	bhi.n	8007534 <__gethex+0x388>
 8007586:	68a2      	ldr	r2, [r4, #8]
 8007588:	4593      	cmp	fp, r2
 800758a:	db17      	blt.n	80075bc <__gethex+0x410>
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4648      	mov	r0, r9
 8007590:	3101      	adds	r1, #1
 8007592:	f7fd ff61 	bl	8005458 <_Balloc>
 8007596:	4682      	mov	sl, r0
 8007598:	b918      	cbnz	r0, 80075a2 <__gethex+0x3f6>
 800759a:	4602      	mov	r2, r0
 800759c:	2184      	movs	r1, #132	; 0x84
 800759e:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <__gethex+0x45c>)
 80075a0:	e6b1      	b.n	8007306 <__gethex+0x15a>
 80075a2:	6922      	ldr	r2, [r4, #16]
 80075a4:	f104 010c 	add.w	r1, r4, #12
 80075a8:	3202      	adds	r2, #2
 80075aa:	0092      	lsls	r2, r2, #2
 80075ac:	300c      	adds	r0, #12
 80075ae:	f7ff fd4f 	bl	8007050 <memcpy>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4648      	mov	r0, r9
 80075b6:	f7fd ff8f 	bl	80054d8 <_Bfree>
 80075ba:	4654      	mov	r4, sl
 80075bc:	6922      	ldr	r2, [r4, #16]
 80075be:	1c51      	adds	r1, r2, #1
 80075c0:	6121      	str	r1, [r4, #16]
 80075c2:	2101      	movs	r1, #1
 80075c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80075c8:	6151      	str	r1, [r2, #20]
 80075ca:	e7bc      	b.n	8007546 <__gethex+0x39a>
 80075cc:	6921      	ldr	r1, [r4, #16]
 80075ce:	4559      	cmp	r1, fp
 80075d0:	dd0b      	ble.n	80075ea <__gethex+0x43e>
 80075d2:	2101      	movs	r1, #1
 80075d4:	4620      	mov	r0, r4
 80075d6:	f7ff fd81 	bl	80070dc <rshift>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3601      	adds	r6, #1
 80075de:	42b3      	cmp	r3, r6
 80075e0:	f6ff aeda 	blt.w	8007398 <__gethex+0x1ec>
 80075e4:	f04f 0801 	mov.w	r8, #1
 80075e8:	e7c2      	b.n	8007570 <__gethex+0x3c4>
 80075ea:	f015 051f 	ands.w	r5, r5, #31
 80075ee:	d0f9      	beq.n	80075e4 <__gethex+0x438>
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	f1c5 0520 	rsb	r5, r5, #32
 80075f6:	441a      	add	r2, r3
 80075f8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80075fc:	f7fe f81e 	bl	800563c <__hi0bits>
 8007600:	42a8      	cmp	r0, r5
 8007602:	dbe6      	blt.n	80075d2 <__gethex+0x426>
 8007604:	e7ee      	b.n	80075e4 <__gethex+0x438>
 8007606:	bf00      	nop
 8007608:	080084b3 	.word	0x080084b3

0800760c <L_shift>:
 800760c:	f1c2 0208 	rsb	r2, r2, #8
 8007610:	0092      	lsls	r2, r2, #2
 8007612:	b570      	push	{r4, r5, r6, lr}
 8007614:	f1c2 0620 	rsb	r6, r2, #32
 8007618:	6843      	ldr	r3, [r0, #4]
 800761a:	6804      	ldr	r4, [r0, #0]
 800761c:	fa03 f506 	lsl.w	r5, r3, r6
 8007620:	432c      	orrs	r4, r5
 8007622:	40d3      	lsrs	r3, r2
 8007624:	6004      	str	r4, [r0, #0]
 8007626:	f840 3f04 	str.w	r3, [r0, #4]!
 800762a:	4288      	cmp	r0, r1
 800762c:	d3f4      	bcc.n	8007618 <L_shift+0xc>
 800762e:	bd70      	pop	{r4, r5, r6, pc}

08007630 <__match>:
 8007630:	b530      	push	{r4, r5, lr}
 8007632:	6803      	ldr	r3, [r0, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800763a:	b914      	cbnz	r4, 8007642 <__match+0x12>
 800763c:	6003      	str	r3, [r0, #0]
 800763e:	2001      	movs	r0, #1
 8007640:	bd30      	pop	{r4, r5, pc}
 8007642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800764a:	2d19      	cmp	r5, #25
 800764c:	bf98      	it	ls
 800764e:	3220      	addls	r2, #32
 8007650:	42a2      	cmp	r2, r4
 8007652:	d0f0      	beq.n	8007636 <__match+0x6>
 8007654:	2000      	movs	r0, #0
 8007656:	e7f3      	b.n	8007640 <__match+0x10>

08007658 <__hexnan>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	2500      	movs	r5, #0
 800765e:	680b      	ldr	r3, [r1, #0]
 8007660:	4682      	mov	sl, r0
 8007662:	115e      	asrs	r6, r3, #5
 8007664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007668:	f013 031f 	ands.w	r3, r3, #31
 800766c:	bf18      	it	ne
 800766e:	3604      	addne	r6, #4
 8007670:	1f37      	subs	r7, r6, #4
 8007672:	4690      	mov	r8, r2
 8007674:	46b9      	mov	r9, r7
 8007676:	463c      	mov	r4, r7
 8007678:	46ab      	mov	fp, r5
 800767a:	b087      	sub	sp, #28
 800767c:	6801      	ldr	r1, [r0, #0]
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	f846 5c04 	str.w	r5, [r6, #-4]
 8007684:	9502      	str	r5, [sp, #8]
 8007686:	784a      	ldrb	r2, [r1, #1]
 8007688:	1c4b      	adds	r3, r1, #1
 800768a:	9303      	str	r3, [sp, #12]
 800768c:	b342      	cbz	r2, 80076e0 <__hexnan+0x88>
 800768e:	4610      	mov	r0, r2
 8007690:	9105      	str	r1, [sp, #20]
 8007692:	9204      	str	r2, [sp, #16]
 8007694:	f7ff fd75 	bl	8007182 <__hexdig_fun>
 8007698:	2800      	cmp	r0, #0
 800769a:	d14f      	bne.n	800773c <__hexnan+0xe4>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	9905      	ldr	r1, [sp, #20]
 80076a0:	2a20      	cmp	r2, #32
 80076a2:	d818      	bhi.n	80076d6 <__hexnan+0x7e>
 80076a4:	9b02      	ldr	r3, [sp, #8]
 80076a6:	459b      	cmp	fp, r3
 80076a8:	dd13      	ble.n	80076d2 <__hexnan+0x7a>
 80076aa:	454c      	cmp	r4, r9
 80076ac:	d206      	bcs.n	80076bc <__hexnan+0x64>
 80076ae:	2d07      	cmp	r5, #7
 80076b0:	dc04      	bgt.n	80076bc <__hexnan+0x64>
 80076b2:	462a      	mov	r2, r5
 80076b4:	4649      	mov	r1, r9
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff ffa8 	bl	800760c <L_shift>
 80076bc:	4544      	cmp	r4, r8
 80076be:	d950      	bls.n	8007762 <__hexnan+0x10a>
 80076c0:	2300      	movs	r3, #0
 80076c2:	f1a4 0904 	sub.w	r9, r4, #4
 80076c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80076ca:	461d      	mov	r5, r3
 80076cc:	464c      	mov	r4, r9
 80076ce:	f8cd b008 	str.w	fp, [sp, #8]
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	e7d7      	b.n	8007686 <__hexnan+0x2e>
 80076d6:	2a29      	cmp	r2, #41	; 0x29
 80076d8:	d155      	bne.n	8007786 <__hexnan+0x12e>
 80076da:	3102      	adds	r1, #2
 80076dc:	f8ca 1000 	str.w	r1, [sl]
 80076e0:	f1bb 0f00 	cmp.w	fp, #0
 80076e4:	d04f      	beq.n	8007786 <__hexnan+0x12e>
 80076e6:	454c      	cmp	r4, r9
 80076e8:	d206      	bcs.n	80076f8 <__hexnan+0xa0>
 80076ea:	2d07      	cmp	r5, #7
 80076ec:	dc04      	bgt.n	80076f8 <__hexnan+0xa0>
 80076ee:	462a      	mov	r2, r5
 80076f0:	4649      	mov	r1, r9
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7ff ff8a 	bl	800760c <L_shift>
 80076f8:	4544      	cmp	r4, r8
 80076fa:	d934      	bls.n	8007766 <__hexnan+0x10e>
 80076fc:	4623      	mov	r3, r4
 80076fe:	f1a8 0204 	sub.w	r2, r8, #4
 8007702:	f853 1b04 	ldr.w	r1, [r3], #4
 8007706:	429f      	cmp	r7, r3
 8007708:	f842 1f04 	str.w	r1, [r2, #4]!
 800770c:	d2f9      	bcs.n	8007702 <__hexnan+0xaa>
 800770e:	1b3b      	subs	r3, r7, r4
 8007710:	f023 0303 	bic.w	r3, r3, #3
 8007714:	3304      	adds	r3, #4
 8007716:	3e03      	subs	r6, #3
 8007718:	3401      	adds	r4, #1
 800771a:	42a6      	cmp	r6, r4
 800771c:	bf38      	it	cc
 800771e:	2304      	movcc	r3, #4
 8007720:	2200      	movs	r2, #0
 8007722:	4443      	add	r3, r8
 8007724:	f843 2b04 	str.w	r2, [r3], #4
 8007728:	429f      	cmp	r7, r3
 800772a:	d2fb      	bcs.n	8007724 <__hexnan+0xcc>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	b91b      	cbnz	r3, 8007738 <__hexnan+0xe0>
 8007730:	4547      	cmp	r7, r8
 8007732:	d126      	bne.n	8007782 <__hexnan+0x12a>
 8007734:	2301      	movs	r3, #1
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	2005      	movs	r0, #5
 800773a:	e025      	b.n	8007788 <__hexnan+0x130>
 800773c:	3501      	adds	r5, #1
 800773e:	2d08      	cmp	r5, #8
 8007740:	f10b 0b01 	add.w	fp, fp, #1
 8007744:	dd06      	ble.n	8007754 <__hexnan+0xfc>
 8007746:	4544      	cmp	r4, r8
 8007748:	d9c3      	bls.n	80076d2 <__hexnan+0x7a>
 800774a:	2300      	movs	r3, #0
 800774c:	2501      	movs	r5, #1
 800774e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007752:	3c04      	subs	r4, #4
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	f000 000f 	and.w	r0, r0, #15
 800775a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800775e:	6020      	str	r0, [r4, #0]
 8007760:	e7b7      	b.n	80076d2 <__hexnan+0x7a>
 8007762:	2508      	movs	r5, #8
 8007764:	e7b5      	b.n	80076d2 <__hexnan+0x7a>
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0df      	beq.n	800772c <__hexnan+0xd4>
 800776c:	f04f 32ff 	mov.w	r2, #4294967295
 8007770:	f1c3 0320 	rsb	r3, r3, #32
 8007774:	40da      	lsrs	r2, r3
 8007776:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800777a:	4013      	ands	r3, r2
 800777c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007780:	e7d4      	b.n	800772c <__hexnan+0xd4>
 8007782:	3f04      	subs	r7, #4
 8007784:	e7d2      	b.n	800772c <__hexnan+0xd4>
 8007786:	2004      	movs	r0, #4
 8007788:	b007      	add	sp, #28
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800778e <__ascii_mbtowc>:
 800778e:	b082      	sub	sp, #8
 8007790:	b901      	cbnz	r1, 8007794 <__ascii_mbtowc+0x6>
 8007792:	a901      	add	r1, sp, #4
 8007794:	b142      	cbz	r2, 80077a8 <__ascii_mbtowc+0x1a>
 8007796:	b14b      	cbz	r3, 80077ac <__ascii_mbtowc+0x1e>
 8007798:	7813      	ldrb	r3, [r2, #0]
 800779a:	600b      	str	r3, [r1, #0]
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	1e10      	subs	r0, r2, #0
 80077a0:	bf18      	it	ne
 80077a2:	2001      	movne	r0, #1
 80077a4:	b002      	add	sp, #8
 80077a6:	4770      	bx	lr
 80077a8:	4610      	mov	r0, r2
 80077aa:	e7fb      	b.n	80077a4 <__ascii_mbtowc+0x16>
 80077ac:	f06f 0001 	mvn.w	r0, #1
 80077b0:	e7f8      	b.n	80077a4 <__ascii_mbtowc+0x16>

080077b2 <_realloc_r>:
 80077b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	4680      	mov	r8, r0
 80077b8:	4614      	mov	r4, r2
 80077ba:	460e      	mov	r6, r1
 80077bc:	b921      	cbnz	r1, 80077c8 <_realloc_r+0x16>
 80077be:	4611      	mov	r1, r2
 80077c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c4:	f7fd bdbc 	b.w	8005340 <_malloc_r>
 80077c8:	b92a      	cbnz	r2, 80077d6 <_realloc_r+0x24>
 80077ca:	f7fd fd49 	bl	8005260 <_free_r>
 80077ce:	4625      	mov	r5, r4
 80077d0:	4628      	mov	r0, r5
 80077d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d6:	f000 f842 	bl	800785e <_malloc_usable_size_r>
 80077da:	4284      	cmp	r4, r0
 80077dc:	4607      	mov	r7, r0
 80077de:	d802      	bhi.n	80077e6 <_realloc_r+0x34>
 80077e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077e4:	d812      	bhi.n	800780c <_realloc_r+0x5a>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4640      	mov	r0, r8
 80077ea:	f7fd fda9 	bl	8005340 <_malloc_r>
 80077ee:	4605      	mov	r5, r0
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d0ed      	beq.n	80077d0 <_realloc_r+0x1e>
 80077f4:	42bc      	cmp	r4, r7
 80077f6:	4622      	mov	r2, r4
 80077f8:	4631      	mov	r1, r6
 80077fa:	bf28      	it	cs
 80077fc:	463a      	movcs	r2, r7
 80077fe:	f7ff fc27 	bl	8007050 <memcpy>
 8007802:	4631      	mov	r1, r6
 8007804:	4640      	mov	r0, r8
 8007806:	f7fd fd2b 	bl	8005260 <_free_r>
 800780a:	e7e1      	b.n	80077d0 <_realloc_r+0x1e>
 800780c:	4635      	mov	r5, r6
 800780e:	e7df      	b.n	80077d0 <_realloc_r+0x1e>

08007810 <__ascii_wctomb>:
 8007810:	4603      	mov	r3, r0
 8007812:	4608      	mov	r0, r1
 8007814:	b141      	cbz	r1, 8007828 <__ascii_wctomb+0x18>
 8007816:	2aff      	cmp	r2, #255	; 0xff
 8007818:	d904      	bls.n	8007824 <__ascii_wctomb+0x14>
 800781a:	228a      	movs	r2, #138	; 0x8a
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	4770      	bx	lr
 8007824:	2001      	movs	r0, #1
 8007826:	700a      	strb	r2, [r1, #0]
 8007828:	4770      	bx	lr
	...

0800782c <fiprintf>:
 800782c:	b40e      	push	{r1, r2, r3}
 800782e:	b503      	push	{r0, r1, lr}
 8007830:	4601      	mov	r1, r0
 8007832:	ab03      	add	r3, sp, #12
 8007834:	4805      	ldr	r0, [pc, #20]	; (800784c <fiprintf+0x20>)
 8007836:	f853 2b04 	ldr.w	r2, [r3], #4
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	f000 f83d 	bl	80078bc <_vfiprintf_r>
 8007842:	b002      	add	sp, #8
 8007844:	f85d eb04 	ldr.w	lr, [sp], #4
 8007848:	b003      	add	sp, #12
 800784a:	4770      	bx	lr
 800784c:	20000064 	.word	0x20000064

08007850 <abort>:
 8007850:	2006      	movs	r0, #6
 8007852:	b508      	push	{r3, lr}
 8007854:	f000 f974 	bl	8007b40 <raise>
 8007858:	2001      	movs	r0, #1
 800785a:	f7fa fa19 	bl	8001c90 <_exit>

0800785e <_malloc_usable_size_r>:
 800785e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007862:	1f18      	subs	r0, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	bfbc      	itt	lt
 8007868:	580b      	ldrlt	r3, [r1, r0]
 800786a:	18c0      	addlt	r0, r0, r3
 800786c:	4770      	bx	lr

0800786e <__sfputc_r>:
 800786e:	6893      	ldr	r3, [r2, #8]
 8007870:	b410      	push	{r4}
 8007872:	3b01      	subs	r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	6093      	str	r3, [r2, #8]
 8007878:	da07      	bge.n	800788a <__sfputc_r+0x1c>
 800787a:	6994      	ldr	r4, [r2, #24]
 800787c:	42a3      	cmp	r3, r4
 800787e:	db01      	blt.n	8007884 <__sfputc_r+0x16>
 8007880:	290a      	cmp	r1, #10
 8007882:	d102      	bne.n	800788a <__sfputc_r+0x1c>
 8007884:	bc10      	pop	{r4}
 8007886:	f7fc bd54 	b.w	8004332 <__swbuf_r>
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	1c58      	adds	r0, r3, #1
 800788e:	6010      	str	r0, [r2, #0]
 8007890:	7019      	strb	r1, [r3, #0]
 8007892:	4608      	mov	r0, r1
 8007894:	bc10      	pop	{r4}
 8007896:	4770      	bx	lr

08007898 <__sfputs_r>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	4614      	mov	r4, r2
 80078a0:	18d5      	adds	r5, r2, r3
 80078a2:	42ac      	cmp	r4, r5
 80078a4:	d101      	bne.n	80078aa <__sfputs_r+0x12>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e007      	b.n	80078ba <__sfputs_r+0x22>
 80078aa:	463a      	mov	r2, r7
 80078ac:	4630      	mov	r0, r6
 80078ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b2:	f7ff ffdc 	bl	800786e <__sfputc_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d1f3      	bne.n	80078a2 <__sfputs_r+0xa>
 80078ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078bc <_vfiprintf_r>:
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	460d      	mov	r5, r1
 80078c2:	4614      	mov	r4, r2
 80078c4:	4698      	mov	r8, r3
 80078c6:	4606      	mov	r6, r0
 80078c8:	b09d      	sub	sp, #116	; 0x74
 80078ca:	b118      	cbz	r0, 80078d4 <_vfiprintf_r+0x18>
 80078cc:	6a03      	ldr	r3, [r0, #32]
 80078ce:	b90b      	cbnz	r3, 80078d4 <_vfiprintf_r+0x18>
 80078d0:	f7fc fc3a 	bl	8004148 <__sinit>
 80078d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_vfiprintf_r+0x2a>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	059a      	lsls	r2, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_vfiprintf_r+0x2a>
 80078e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e2:	f7fc fe38 	bl	8004556 <__retarget_lock_acquire_recursive>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	071b      	lsls	r3, r3, #28
 80078ea:	d501      	bpl.n	80078f0 <_vfiprintf_r+0x34>
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	b99b      	cbnz	r3, 8007918 <_vfiprintf_r+0x5c>
 80078f0:	4629      	mov	r1, r5
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7fc fd5a 	bl	80043ac <__swsetup_r>
 80078f8:	b170      	cbz	r0, 8007918 <_vfiprintf_r+0x5c>
 80078fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fc:	07dc      	lsls	r4, r3, #31
 80078fe:	d504      	bpl.n	800790a <_vfiprintf_r+0x4e>
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	b01d      	add	sp, #116	; 0x74
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	0598      	lsls	r0, r3, #22
 800790e:	d4f7      	bmi.n	8007900 <_vfiprintf_r+0x44>
 8007910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007912:	f7fc fe21 	bl	8004558 <__retarget_lock_release_recursive>
 8007916:	e7f3      	b.n	8007900 <_vfiprintf_r+0x44>
 8007918:	2300      	movs	r3, #0
 800791a:	9309      	str	r3, [sp, #36]	; 0x24
 800791c:	2320      	movs	r3, #32
 800791e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007922:	2330      	movs	r3, #48	; 0x30
 8007924:	f04f 0901 	mov.w	r9, #1
 8007928:	f8cd 800c 	str.w	r8, [sp, #12]
 800792c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007adc <_vfiprintf_r+0x220>
 8007930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007934:	4623      	mov	r3, r4
 8007936:	469a      	mov	sl, r3
 8007938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800793c:	b10a      	cbz	r2, 8007942 <_vfiprintf_r+0x86>
 800793e:	2a25      	cmp	r2, #37	; 0x25
 8007940:	d1f9      	bne.n	8007936 <_vfiprintf_r+0x7a>
 8007942:	ebba 0b04 	subs.w	fp, sl, r4
 8007946:	d00b      	beq.n	8007960 <_vfiprintf_r+0xa4>
 8007948:	465b      	mov	r3, fp
 800794a:	4622      	mov	r2, r4
 800794c:	4629      	mov	r1, r5
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ffa2 	bl	8007898 <__sfputs_r>
 8007954:	3001      	adds	r0, #1
 8007956:	f000 80a9 	beq.w	8007aac <_vfiprintf_r+0x1f0>
 800795a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800795c:	445a      	add	r2, fp
 800795e:	9209      	str	r2, [sp, #36]	; 0x24
 8007960:	f89a 3000 	ldrb.w	r3, [sl]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a1 	beq.w	8007aac <_vfiprintf_r+0x1f0>
 800796a:	2300      	movs	r3, #0
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007974:	f10a 0a01 	add.w	sl, sl, #1
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007980:	931a      	str	r3, [sp, #104]	; 0x68
 8007982:	4654      	mov	r4, sl
 8007984:	2205      	movs	r2, #5
 8007986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798a:	4854      	ldr	r0, [pc, #336]	; (8007adc <_vfiprintf_r+0x220>)
 800798c:	f7fc fde5 	bl	800455a <memchr>
 8007990:	9a04      	ldr	r2, [sp, #16]
 8007992:	b9d8      	cbnz	r0, 80079cc <_vfiprintf_r+0x110>
 8007994:	06d1      	lsls	r1, r2, #27
 8007996:	bf44      	itt	mi
 8007998:	2320      	movmi	r3, #32
 800799a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800799e:	0713      	lsls	r3, r2, #28
 80079a0:	bf44      	itt	mi
 80079a2:	232b      	movmi	r3, #43	; 0x2b
 80079a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a8:	f89a 3000 	ldrb.w	r3, [sl]
 80079ac:	2b2a      	cmp	r3, #42	; 0x2a
 80079ae:	d015      	beq.n	80079dc <_vfiprintf_r+0x120>
 80079b0:	4654      	mov	r4, sl
 80079b2:	2000      	movs	r0, #0
 80079b4:	f04f 0c0a 	mov.w	ip, #10
 80079b8:	9a07      	ldr	r2, [sp, #28]
 80079ba:	4621      	mov	r1, r4
 80079bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c0:	3b30      	subs	r3, #48	; 0x30
 80079c2:	2b09      	cmp	r3, #9
 80079c4:	d94d      	bls.n	8007a62 <_vfiprintf_r+0x1a6>
 80079c6:	b1b0      	cbz	r0, 80079f6 <_vfiprintf_r+0x13a>
 80079c8:	9207      	str	r2, [sp, #28]
 80079ca:	e014      	b.n	80079f6 <_vfiprintf_r+0x13a>
 80079cc:	eba0 0308 	sub.w	r3, r0, r8
 80079d0:	fa09 f303 	lsl.w	r3, r9, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	46a2      	mov	sl, r4
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	e7d2      	b.n	8007982 <_vfiprintf_r+0xc6>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	1d19      	adds	r1, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfbb      	ittet	lt
 80079e8:	425b      	neglt	r3, r3
 80079ea:	f042 0202 	orrlt.w	r2, r2, #2
 80079ee:	9307      	strge	r3, [sp, #28]
 80079f0:	9307      	strlt	r3, [sp, #28]
 80079f2:	bfb8      	it	lt
 80079f4:	9204      	strlt	r2, [sp, #16]
 80079f6:	7823      	ldrb	r3, [r4, #0]
 80079f8:	2b2e      	cmp	r3, #46	; 0x2e
 80079fa:	d10c      	bne.n	8007a16 <_vfiprintf_r+0x15a>
 80079fc:	7863      	ldrb	r3, [r4, #1]
 80079fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007a00:	d134      	bne.n	8007a6c <_vfiprintf_r+0x1b0>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	3402      	adds	r4, #2
 8007a06:	1d1a      	adds	r2, r3, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	9203      	str	r2, [sp, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfb8      	it	lt
 8007a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ae0 <_vfiprintf_r+0x224>
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	7821      	ldrb	r1, [r4, #0]
 8007a20:	f7fc fd9b 	bl	800455a <memchr>
 8007a24:	b138      	cbz	r0, 8007a36 <_vfiprintf_r+0x17a>
 8007a26:	2240      	movs	r2, #64	; 0x40
 8007a28:	9b04      	ldr	r3, [sp, #16]
 8007a2a:	eba0 000a 	sub.w	r0, r0, sl
 8007a2e:	4082      	lsls	r2, r0
 8007a30:	4313      	orrs	r3, r2
 8007a32:	3401      	adds	r4, #1
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	4829      	ldr	r0, [pc, #164]	; (8007ae4 <_vfiprintf_r+0x228>)
 8007a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a42:	f7fc fd8a 	bl	800455a <memchr>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d03f      	beq.n	8007aca <_vfiprintf_r+0x20e>
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <_vfiprintf_r+0x22c>)
 8007a4c:	bb1b      	cbnz	r3, 8007a96 <_vfiprintf_r+0x1da>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	3308      	adds	r3, #8
 8007a58:	9303      	str	r3, [sp, #12]
 8007a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5c:	443b      	add	r3, r7
 8007a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a60:	e768      	b.n	8007934 <_vfiprintf_r+0x78>
 8007a62:	460c      	mov	r4, r1
 8007a64:	2001      	movs	r0, #1
 8007a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a6a:	e7a6      	b.n	80079ba <_vfiprintf_r+0xfe>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f04f 0c0a 	mov.w	ip, #10
 8007a72:	4619      	mov	r1, r3
 8007a74:	3401      	adds	r4, #1
 8007a76:	9305      	str	r3, [sp, #20]
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a7e:	3a30      	subs	r2, #48	; 0x30
 8007a80:	2a09      	cmp	r2, #9
 8007a82:	d903      	bls.n	8007a8c <_vfiprintf_r+0x1d0>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0c6      	beq.n	8007a16 <_vfiprintf_r+0x15a>
 8007a88:	9105      	str	r1, [sp, #20]
 8007a8a:	e7c4      	b.n	8007a16 <_vfiprintf_r+0x15a>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	2301      	movs	r3, #1
 8007a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a94:	e7f0      	b.n	8007a78 <_vfiprintf_r+0x1bc>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <_vfiprintf_r+0x230>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	f7fb fcf5 	bl	8003490 <_printf_float>
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	1c78      	adds	r0, r7, #1
 8007aaa:	d1d6      	bne.n	8007a5a <_vfiprintf_r+0x19e>
 8007aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aae:	07d9      	lsls	r1, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_vfiprintf_r+0x202>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_vfiprintf_r+0x202>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aba:	f7fc fd4d 	bl	8004558 <__retarget_lock_release_recursive>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	065b      	lsls	r3, r3, #25
 8007ac2:	f53f af1d 	bmi.w	8007900 <_vfiprintf_r+0x44>
 8007ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac8:	e71c      	b.n	8007904 <_vfiprintf_r+0x48>
 8007aca:	ab03      	add	r3, sp, #12
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <_vfiprintf_r+0x230>)
 8007ad4:	a904      	add	r1, sp, #16
 8007ad6:	f7fb ff7b 	bl	80039d0 <_printf_i>
 8007ada:	e7e4      	b.n	8007aa6 <_vfiprintf_r+0x1ea>
 8007adc:	08008771 	.word	0x08008771
 8007ae0:	08008777 	.word	0x08008777
 8007ae4:	0800877b 	.word	0x0800877b
 8007ae8:	08003491 	.word	0x08003491
 8007aec:	08007899 	.word	0x08007899

08007af0 <_raise_r>:
 8007af0:	291f      	cmp	r1, #31
 8007af2:	b538      	push	{r3, r4, r5, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	d904      	bls.n	8007b04 <_raise_r+0x14>
 8007afa:	2316      	movs	r3, #22
 8007afc:	6003      	str	r3, [r0, #0]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007b06:	b112      	cbz	r2, 8007b0e <_raise_r+0x1e>
 8007b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b0c:	b94b      	cbnz	r3, 8007b22 <_raise_r+0x32>
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 f830 	bl	8007b74 <_getpid_r>
 8007b14:	462a      	mov	r2, r5
 8007b16:	4601      	mov	r1, r0
 8007b18:	4620      	mov	r0, r4
 8007b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b1e:	f000 b817 	b.w	8007b50 <_kill_r>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d00a      	beq.n	8007b3c <_raise_r+0x4c>
 8007b26:	1c59      	adds	r1, r3, #1
 8007b28:	d103      	bne.n	8007b32 <_raise_r+0x42>
 8007b2a:	2316      	movs	r3, #22
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	2001      	movs	r0, #1
 8007b30:	e7e7      	b.n	8007b02 <_raise_r+0x12>
 8007b32:	2400      	movs	r4, #0
 8007b34:	4628      	mov	r0, r5
 8007b36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b3a:	4798      	blx	r3
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e7e0      	b.n	8007b02 <_raise_r+0x12>

08007b40 <raise>:
 8007b40:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <raise+0xc>)
 8007b42:	4601      	mov	r1, r0
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f7ff bfd3 	b.w	8007af0 <_raise_r>
 8007b4a:	bf00      	nop
 8007b4c:	20000064 	.word	0x20000064

08007b50 <_kill_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	2300      	movs	r3, #0
 8007b54:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_kill_r+0x20>)
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f7fa f887 	bl	8001c70 <_kill>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	d102      	bne.n	8007b6c <_kill_r+0x1c>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	b103      	cbz	r3, 8007b6c <_kill_r+0x1c>
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000380 	.word	0x20000380

08007b74 <_getpid_r>:
 8007b74:	f7fa b875 	b.w	8001c62 <_getpid>

08007b78 <_init>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr

08007b84 <_fini>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr
