
RCD_04_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008404  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  080085f0  080085f0  000185f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d8  080092d8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080092d8  080092d8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092d8  080092d8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080092e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d4  080094b4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080094b4  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb9f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002223  00000000  00000000  0002cddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7c  00000000  00000000  0002fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adb4  00000000  00000000  0003080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc7e  00000000  00000000  0004b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad09  00000000  00000000  0005b23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d78  00000000  00000000  000f5f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000facc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080085d4 	.word	0x080085d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080085d4 	.word	0x080085d4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fca3 	bl	8000a94 <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff fa19 	bl	80005b0 <__aeabi_dmul>
 800117e:	f7ff fcef 	bl	8000b60 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f99a 	bl	80004bc <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff fa10 	bl	80005b0 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7ff f852 	bl	8000240 <__aeabi_dsub>
 800119c:	f7ff fce0 	bl	8000b60 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a68      	ldr	r2, [pc, #416]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b66      	ldr	r3, [pc, #408]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b63      	ldr	r3, [pc, #396]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a62      	ldr	r2, [pc, #392]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <MX_GPIO_Init+0x1d4>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <MX_GPIO_Init+0x1d4>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a5c      	ldr	r2, [pc, #368]	; (8001380 <MX_GPIO_Init+0x1d4>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <MX_GPIO_Init+0x1d4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCL_Pin|SDA_Pin|HEART_BLUE_Pin|TRIP_GREEN1_Pin
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001226:	4857      	ldr	r0, [pc, #348]	; (8001384 <MX_GPIO_Init+0x1d8>)
 8001228:	f001 fc6d 	bl	8002b06 <HAL_GPIO_WritePin>
                          |TRIP_BLUE1_Pin|ERROR_RED_Pin|ERROR_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin|CALIBRATION_GREEN_Pin|CALIBRATION_BLUE_Pin|TEST_IN_Pin
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8001232:	4855      	ldr	r0, [pc, #340]	; (8001388 <MX_GPIO_Init+0x1dc>)
 8001234:	f001 fc67 	bl	8002b06 <HAL_GPIO_WritePin>
                          |HEART_RED_Pin|HEART_GREEN_Pin|ERROR_BLUE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TSET_IN_RED_Pin
 8001238:	2201      	movs	r2, #1
 800123a:	f64f 4104 	movw	r1, #64516	; 0xfc04
 800123e:	4853      	ldr	r0, [pc, #332]	; (800138c <MX_GPIO_Init+0x1e0>)
 8001240:	f001 fc61 	bl	8002b06 <HAL_GPIO_WritePin>
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin|TRIP_RED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8001244:	2304      	movs	r3, #4
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001248:	2311      	movs	r3, #17
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	484a      	ldr	r0, [pc, #296]	; (8001384 <MX_GPIO_Init+0x1d8>)
 800125c:	f001 faa8 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDA_Pin;
 8001260:	2308      	movs	r3, #8
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4843      	ldr	r0, [pc, #268]	; (8001384 <MX_GPIO_Init+0x1d8>)
 8001278:	f001 fa9a 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CALIBRATION_RED_Pin|CALIBRATION_GREEN_Pin|CALIBRATION_BLUE_Pin|HEART_RED_Pin
 800127c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 8001280:	613b      	str	r3, [r7, #16]
                          |HEART_GREEN_Pin|ERROR_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	483c      	ldr	r0, [pc, #240]	; (8001388 <MX_GPIO_Init+0x1dc>)
 8001296:	f001 fa8b 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_IN_Pin;
 800129a:	2310      	movs	r3, #16
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_IN_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4619      	mov	r1, r3
 80012b0:	4835      	ldr	r0, [pc, #212]	; (8001388 <MX_GPIO_Init+0x1dc>)
 80012b2:	f001 fa7d 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = HEART_BLUE_Pin|TRIP_GREEN1_Pin|TRIP_BLUE1_Pin|ERROR_RED_Pin
 80012b6:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 80012ba:	613b      	str	r3, [r7, #16]
                          |ERROR_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	482d      	ldr	r0, [pc, #180]	; (8001384 <MX_GPIO_Init+0x1d8>)
 80012d0:	f001 fa6e 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TSET_IN_RED_Pin
 80012d4:	f64f 4304 	movw	r3, #64516	; 0xfc04
 80012d8:	613b      	str	r3, [r7, #16]
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin|TRIP_RED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	4827      	ldr	r0, [pc, #156]	; (800138c <MX_GPIO_Init+0x1e0>)
 80012ee:	f001 fa5f 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_GPIO_Init+0x1e4>)
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	481f      	ldr	r0, [pc, #124]	; (8001384 <MX_GPIO_Init+0x1d8>)
 8001308:	f001 fa52 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ERROR_INPUT_Pin|TRIP_OUT2_Pin;
 800130c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_GPIO_Init+0x1d8>)
 8001322:	f001 fa45 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_OUT1_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_GPIO_Init+0x1e4>)
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIP_OUT1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <MX_GPIO_Init+0x1e8>)
 800133a:	f001 fa39 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Calibrate_KEY_Pin;
 800133e:	2308      	movs	r3, #8
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Calibrate_KEY_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <MX_GPIO_Init+0x1e0>)
 8001352:	f001 fa2d 	bl	80027b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2008      	movs	r0, #8
 800135c:	f001 f9f1 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001360:	2008      	movs	r0, #8
 8001362:	f001 fa0a 	bl	800277a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2028      	movs	r0, #40	; 0x28
 800136c:	f001 f9e9 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001370:	2028      	movs	r0, #40	; 0x28
 8001372:	f001 fa02 	bl	800277a <HAL_NVIC_EnableIRQ>

}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40011000 	.word	0x40011000
 8001388:	40010800 	.word	0x40010800
 800138c:	40010c00 	.word	0x40010c00
 8001390:	10310000 	.word	0x10310000
 8001394:	40011400 	.word	0x40011400

08001398 <PY_usDelayTest>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
__IO float usDelayBase;
void PY_usDelayTest(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
  __IO uint32_t firstms, secondms;
  __IO uint32_t counter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]

  firstms = HAL_GetTick()+1;
 80013a2:	f001 f8ed 	bl	8002580 <HAL_GetTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
  secondms = firstms+1;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]

  while(uwTick!=firstms) ;
 80013b2:	bf00      	nop
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <PY_usDelayTest+0x5c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d1fa      	bne.n	80013b4 <PY_usDelayTest+0x1c>

  while(uwTick!=secondms) counter++;
 80013be:	e002      	b.n	80013c6 <PY_usDelayTest+0x2e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <PY_usDelayTest+0x5c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1f7      	bne.n	80013c0 <PY_usDelayTest+0x28>

  usDelayBase = ((float)counter)/1000;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcea 	bl	8000dac <__aeabi_ui2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	4907      	ldr	r1, [pc, #28]	; (80013f8 <PY_usDelayTest+0x60>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fdf1 	bl	8000fc4 <__aeabi_fdiv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <PY_usDelayTest+0x64>)
 80013e8:	601a      	str	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002e8 	.word	0x200002e8
 80013f8:	447a0000 	.word	0x447a0000
 80013fc:	200001f0 	.word	0x200001f0

08001400 <PY_Delay_us_t>:

void PY_Delay_us_t(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  __IO uint32_t delayReg;
  __IO uint32_t usNum = (uint32_t)(Delay*usDelayBase);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fccf 	bl	8000dac <__aeabi_ui2f>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <PY_Delay_us_t+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fd20 	bl	8000e5c <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe6c 	bl	80010fc <__aeabi_f2uiz>
 8001424:	4603      	mov	r3, r0
 8001426:	60bb      	str	r3, [r7, #8]

  delayReg = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  while(delayReg!=usNum) delayReg++;
 800142c:	e002      	b.n	8001434 <PY_Delay_us_t+0x34>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3301      	adds	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	d1f8      	bne.n	800142e <PY_Delay_us_t+0x2e>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001f0 	.word	0x200001f0

0800144c <PY_usDelayOptimize>:

void PY_usDelayOptimize(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
  __IO uint32_t firstms, secondms;
  __IO float coe = 1.0;
 8001452:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001456:	607b      	str	r3, [r7, #4]

  firstms = HAL_GetTick();
 8001458:	f001 f892 	bl	8002580 <HAL_GetTick>
 800145c:	4603      	mov	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
  PY_Delay_us_t(1000000) ;
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <PY_usDelayOptimize+0x5c>)
 8001462:	f7ff ffcd 	bl	8001400 <PY_Delay_us_t>
  secondms = HAL_GetTick();
 8001466:	f001 f88b 	bl	8002580 <HAL_GetTick>
 800146a:	4603      	mov	r3, r0
 800146c:	60bb      	str	r3, [r7, #8]

  coe = ((float)1000)/(secondms-firstms);
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc99 	bl	8000dac <__aeabi_ui2f>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <PY_usDelayOptimize+0x60>)
 8001480:	f7ff fda0 	bl	8000fc4 <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	607b      	str	r3, [r7, #4]
  usDelayBase = coe*usDelayBase;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <PY_usDelayOptimize+0x64>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fce3 	bl	8000e5c <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <PY_usDelayOptimize+0x64>)
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	000f4240 	.word	0x000f4240
 80014ac:	447a0000 	.word	0x447a0000
 80014b0:	200001f0 	.word	0x200001f0

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  unsigned char high_time = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f001 f807 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f8a1 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f7ff fe71 	bl	80011ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014ca:	f000 fe37 	bl	800213c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80014ce:	f000 fd67 	bl	8001fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d2:	f000 fdb5 	bl	8002040 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80014d6:	f000 fb6d 	bl	8001bb4 <OLED_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PY_usDelayTest();
 80014da:	f7ff ff5d 	bl	8001398 <PY_usDelayTest>
  PY_usDelayOptimize();
 80014de:	f7ff ffb5 	bl	800144c <PY_usDelayOptimize>

  OnOffLedLight(1,2,0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2102      	movs	r1, #2
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fed6 	bl	8002298 <OnOffLedLight>
  OnOffLedLight(2,2,0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2102      	movs	r1, #2
 80014f0:	2002      	movs	r0, #2
 80014f2:	f000 fed1 	bl	8002298 <OnOffLedLight>
  OnOffLedLight(3,2,0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2102      	movs	r1, #2
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 fecc 	bl	8002298 <OnOffLedLight>
  OnOffLedLight(4,2,0);
 8001500:	2200      	movs	r2, #0
 8001502:	2102      	movs	r1, #2
 8001504:	2004      	movs	r0, #4
 8001506:	f000 fec7 	bl	8002298 <OnOffLedLight>
  OnOffLedLight(5,2,0);
 800150a:	2200      	movs	r2, #0
 800150c:	2102      	movs	r1, #2
 800150e:	2005      	movs	r0, #5
 8001510:	f000 fec2 	bl	8002298 <OnOffLedLight>
  OnOffLedLight(6,2,0);
 8001514:	2200      	movs	r2, #0
 8001516:	2102      	movs	r1, #2
 8001518:	2006      	movs	r0, #6
 800151a:	f000 febd 	bl	8002298 <OnOffLedLight>

	OLED_Init();
 800151e:	f000 fb49 	bl	8001bb4 <OLED_Init>
	OLED_Clear();
 8001522:	f000 fa6b 	bl	80019fc <OLED_Clear>
	OLED_ShowString(0,0,"Current ",16);
 8001526:	2310      	movs	r3, #16
 8001528:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <main+0x120>)
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f000 fb11 	bl	8001b54 <OLED_ShowString>
	OLED_ShowString(0,2,"        XX.XXMA",12);
 8001532:	230c      	movs	r3, #12
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <main+0x124>)
 8001536:	2102      	movs	r1, #2
 8001538:	2000      	movs	r0, #0
 800153a:	f000 fb0b 	bl	8001b54 <OLED_ShowString>

	HAL_TIM_Base_Start(&htim2);
 800153e:	4827      	ldr	r0, [pc, #156]	; (80015dc <main+0x128>)
 8001540:	f001 ff94 	bl	800346c <HAL_TIM_Base_Start>
  printf("init success\r\n");
 8001544:	4826      	ldr	r0, [pc, #152]	; (80015e0 <main+0x12c>)
 8001546:	f003 fbb7 	bl	8004cb8 <puts>


  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOB, Calibrate_KEY_Pin) == 0)
 800154a:	2108      	movs	r1, #8
 800154c:	4825      	ldr	r0, [pc, #148]	; (80015e4 <main+0x130>)
 800154e:	f001 fac3 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f8      	bne.n	800154a <main+0x96>
	  {
		  HAL_msDelay(50);
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f000 f8db 	bl	8001714 <HAL_msDelay>
		  while(HAL_GPIO_ReadPin(GPIOB, Calibrate_KEY_Pin) == 0);
 800155e:	bf00      	nop
 8001560:	2108      	movs	r1, #8
 8001562:	4820      	ldr	r0, [pc, #128]	; (80015e4 <main+0x130>)
 8001564:	f001 fab8 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f8      	beq.n	8001560 <main+0xac>
		  test_in();
 800156e:	f000 f8eb 	bl	8001748 <test_in>

		  HAL_msDelay(3000);
 8001572:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001576:	f000 f8cd 	bl	8001714 <HAL_msDelay>

		  if(Flag == 3)
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <main+0x134>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d10a      	bne.n	8001598 <main+0xe4>
		  {
			  OnOffLedLight(6,1,0); //Calibrate red
 8001582:	2200      	movs	r2, #0
 8001584:	2101      	movs	r1, #1
 8001586:	2006      	movs	r0, #6
 8001588:	f000 fe86 	bl	8002298 <OnOffLedLight>
			  OnOffLedLight(6,2,1); //Calibrate green
 800158c:	2201      	movs	r2, #1
 800158e:	2102      	movs	r1, #2
 8001590:	2006      	movs	r0, #6
 8001592:	f000 fe81 	bl	8002298 <OnOffLedLight>
 8001596:	e007      	b.n	80015a8 <main+0xf4>
		  }
		  else
		  {
			  Flag = 0;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <main+0x134>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
			  OnOffLedLight(6,2,0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	2006      	movs	r0, #6
 80015a4:	f000 fe78 	bl	8002298 <OnOffLedLight>
		  }

		  printf("capture_start1: %ld\r\ncapture_start2: %ld\r\n",capture_start1,capture_start2);
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <main+0x138>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <main+0x13c>)
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <main+0x140>)
 80015b4:	f003 fb1a 	bl	8004bec <iprintf>
		  printf("capture_end: %ld\r\n",capture_end1);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <main+0x144>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <main+0x148>)
 80015c0:	f003 fb14 	bl	8004bec <iprintf>
//		  printf("capture_time1: %ld\r\ncapture_time2: %ld\r\n",capture_time1,capture_time2);
		  printf("pwm_time: %d\r\n",Counter);
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <main+0x14c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <main+0x150>)
 80015cc:	f003 fb0e 	bl	8004bec <iprintf>
	  if(HAL_GPIO_ReadPin(GPIOB, Calibrate_KEY_Pin) == 0)
 80015d0:	e7bb      	b.n	800154a <main+0x96>
 80015d2:	bf00      	nop
 80015d4:	080085f0 	.word	0x080085f0
 80015d8:	080085fc 	.word	0x080085fc
 80015dc:	20000258 	.word	0x20000258
 80015e0:	0800860c 	.word	0x0800860c
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	20000208 	.word	0x20000208
 80015ec:	200001fc 	.word	0x200001fc
 80015f0:	20000200 	.word	0x20000200
 80015f4:	0800861c 	.word	0x0800861c
 80015f8:	20000204 	.word	0x20000204
 80015fc:	08008648 	.word	0x08008648
 8001600:	200001f4 	.word	0x200001f4
 8001604:	0800865c 	.word	0x0800865c

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b090      	sub	sp, #64	; 0x40
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	2228      	movs	r2, #40	; 0x28
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fc4e 	bl	8004eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163c:	2302      	movs	r3, #2
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001646:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f001 faab 	bl	8002bac <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800165c:	f000 fb12 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001664:	2302      	movs	r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fd18 	bl	80030b0 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001686:	f000 fafd 	bl	8001c84 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_usDelay>:

/* USER CODE BEGIN 4 */
void HAL_usDelay(uint32_t udelay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_usDelay+0x7c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 80016a2:	f000 ff6d 	bl	8002580 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

  delays =udelay * 72;
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d915      	bls.n	80016e8 <HAL_usDelay+0x54>
  {
    while(HAL_GetTick() == tickn);
 80016bc:	bf00      	nop
 80016be:	f000 ff5f 	bl	8002580 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d0f9      	beq.n	80016be <HAL_usDelay+0x2a>
    wait = 72000 + startval - delays;
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80016d4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80016d8:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL);
 80016da:	bf00      	nop
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_usDelay+0x7c>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3fa      	bcc.n	80016dc <HAL_usDelay+0x48>
  else
  {
    wait = startval - delays;
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
  }
}
 80016e6:	e00f      	b.n	8001708 <HAL_usDelay+0x74>
    wait = startval - delays;
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
 80016f0:	bf00      	nop
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_usDelay+0x7c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d205      	bcs.n	8001708 <HAL_usDelay+0x74>
 80016fc:	f000 ff40 	bl	8002580 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4293      	cmp	r3, r2
 8001706:	d0f4      	beq.n	80016f2 <HAL_usDelay+0x5e>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_msDelay>:


void HAL_msDelay(uint32_t udelay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	81fb      	strh	r3, [r7, #14]
	for(i = 0;i < udelay;i++)
 8001720:	2300      	movs	r3, #0
 8001722:	81fb      	strh	r3, [r7, #14]
 8001724:	e006      	b.n	8001734 <HAL_msDelay+0x20>
	{
		HAL_usDelay(1000);
 8001726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172a:	f7ff ffb3 	bl	8001694 <HAL_usDelay>
	for(i = 0;i < udelay;i++)
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	3301      	adds	r3, #1
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f4      	bhi.n	8001726 <HAL_msDelay+0x12>
	}
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <test_in>:


void test_in()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TEST_IN_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <test_in+0x3c>)
 8001752:	f001 f9d8 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_msDelay(375);
 8001756:	f240 1077 	movw	r0, #375	; 0x177
 800175a:	f7ff ffdb 	bl	8001714 <HAL_msDelay>
	HAL_GPIO_WritePin(GPIOA, TEST_IN_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2110      	movs	r1, #16
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <test_in+0x3c>)
 8001764:	f001 f9cf 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_msDelay(200);
 8001768:	20c8      	movs	r0, #200	; 0xc8
 800176a:	f7ff ffd3 	bl	8001714 <HAL_msDelay>
	HAL_GPIO_WritePin(GPIOA, TEST_IN_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2110      	movs	r1, #16
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <test_in+0x3c>)
 8001774:	f001 f9c7 	bl	8002b06 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(CALIBRATION_RED_GPIO_Port, CALIBRATION_RED_Pin);
 8001778:	2102      	movs	r1, #2
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <test_in+0x3c>)
 800177c:	f001 f9db 	bl	8002b36 <HAL_GPIO_TogglePin>
//	OnOffLedLight(6,1,1);

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010800 	.word	0x40010800

08001788 <my_SDA_IN>:


void my_SDA_IN(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct= {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SDA_Pin;
 800179a:	2308      	movs	r3, #8
 800179c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4619      	mov	r1, r3
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <my_SDA_IN+0x34>)
 80017b0:	f000 fffe 	bl	80027b0 <HAL_GPIO_Init>
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010800 	.word	0x40010800

080017c0 <my_SDA_OUT>:
void my_SDA_OUT(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = SDA_Pin;
 80017c6:	2308      	movs	r3, #8
 80017c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	463b      	mov	r3, r7
 80017d8:	4619      	mov	r1, r3
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <my_SDA_OUT+0x28>)
 80017dc:	f000 ffe8 	bl	80027b0 <HAL_GPIO_Init>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010800 	.word	0x40010800

080017ec <IIC_Start>:
//	SDA_H;
//	SCL_H;
}

void IIC_Start(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	SDA_OUT();
 80017f0:	f7ff ffe6 	bl	80017c0 <my_SDA_OUT>
	SDA_H;
 80017f4:	2201      	movs	r2, #1
 80017f6:	2108      	movs	r1, #8
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <IIC_Start+0x40>)
 80017fa:	f001 f984 	bl	8002b06 <HAL_GPIO_WritePin>
	SCL_H;
 80017fe:	2201      	movs	r2, #1
 8001800:	2104      	movs	r1, #4
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <IIC_Start+0x40>)
 8001804:	f001 f97f 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_usDelay(5);
 8001808:	2005      	movs	r0, #5
 800180a:	f7ff ff43 	bl	8001694 <HAL_usDelay>
 	SDA_L;
 800180e:	2200      	movs	r2, #0
 8001810:	2108      	movs	r1, #8
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <IIC_Start+0x40>)
 8001814:	f001 f977 	bl	8002b06 <HAL_GPIO_WritePin>
 	HAL_usDelay(5);
 8001818:	2005      	movs	r0, #5
 800181a:	f7ff ff3b 	bl	8001694 <HAL_usDelay>
	SCL_L;
 800181e:	2200      	movs	r2, #0
 8001820:	2104      	movs	r1, #4
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <IIC_Start+0x40>)
 8001824:	f001 f96f 	bl	8002b06 <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40011000 	.word	0x40011000

08001830 <IIC_Stop>:

void IIC_Stop(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	SDA_OUT();
 8001834:	f7ff ffc4 	bl	80017c0 <my_SDA_OUT>
	SCL_L;
 8001838:	2200      	movs	r2, #0
 800183a:	2104      	movs	r1, #4
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <IIC_Stop+0x40>)
 800183e:	f001 f962 	bl	8002b06 <HAL_GPIO_WritePin>
	SDA_L;
 8001842:	2200      	movs	r2, #0
 8001844:	2108      	movs	r1, #8
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <IIC_Stop+0x40>)
 8001848:	f001 f95d 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_usDelay(4);
 800184c:	2004      	movs	r0, #4
 800184e:	f7ff ff21 	bl	8001694 <HAL_usDelay>
	SCL_H;
 8001852:	2201      	movs	r2, #1
 8001854:	2104      	movs	r1, #4
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <IIC_Stop+0x40>)
 8001858:	f001 f955 	bl	8002b06 <HAL_GPIO_WritePin>
	SDA_H;
 800185c:	2201      	movs	r2, #1
 800185e:	2108      	movs	r1, #8
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <IIC_Stop+0x40>)
 8001862:	f001 f950 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_usDelay(4);
 8001866:	2004      	movs	r0, #4
 8001868:	f7ff ff14 	bl	8001694 <HAL_usDelay>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40011000 	.word	0x40011000

08001874 <IIC_Wait_Ack>:

uint8_t IIC_Wait_Ack(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 800187a:	2300      	movs	r3, #0
 800187c:	71fb      	strb	r3, [r7, #7]
	SDA_IN();
 800187e:	f7ff ff83 	bl	8001788 <my_SDA_IN>
	SDA_H;HAL_usDelay(1);
 8001882:	2201      	movs	r2, #1
 8001884:	2108      	movs	r1, #8
 8001886:	4815      	ldr	r0, [pc, #84]	; (80018dc <IIC_Wait_Ack+0x68>)
 8001888:	f001 f93d 	bl	8002b06 <HAL_GPIO_WritePin>
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff ff01 	bl	8001694 <HAL_usDelay>
	SCL_H;HAL_usDelay(1);
 8001892:	2201      	movs	r2, #1
 8001894:	2104      	movs	r1, #4
 8001896:	4811      	ldr	r0, [pc, #68]	; (80018dc <IIC_Wait_Ack+0x68>)
 8001898:	f001 f935 	bl	8002b06 <HAL_GPIO_WritePin>
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fef9 	bl	8001694 <HAL_usDelay>
	while(SDA_read)
 80018a2:	e009      	b.n	80018b8 <IIC_Wait_Ack+0x44>
	{
		ucErrTime++;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	3301      	adds	r3, #1
 80018a8:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2bfa      	cmp	r3, #250	; 0xfa
 80018ae:	d903      	bls.n	80018b8 <IIC_Wait_Ack+0x44>
		{
			IIC_Stop();
 80018b0:	f7ff ffbe 	bl	8001830 <IIC_Stop>
			return 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00c      	b.n	80018d2 <IIC_Wait_Ack+0x5e>
	while(SDA_read)
 80018b8:	2108      	movs	r1, #8
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <IIC_Wait_Ack+0x68>)
 80018bc:	f001 f90c 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ee      	bne.n	80018a4 <IIC_Wait_Ack+0x30>
		}
	}
	SCL_L;
 80018c6:	2200      	movs	r2, #0
 80018c8:	2104      	movs	r1, #4
 80018ca:	4804      	ldr	r0, [pc, #16]	; (80018dc <IIC_Wait_Ack+0x68>)
 80018cc:	f001 f91b 	bl	8002b06 <HAL_GPIO_WritePin>
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40011000 	.word	0x40011000

080018e0 <IIC_Send_Byte>:
	HAL_usDelay(2);
	SCL_L;
}

void IIC_Send_Byte(uint8_t txd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
	SDA_OUT();
 80018ea:	f7ff ff69 	bl	80017c0 <my_SDA_OUT>
    SCL_L;
 80018ee:	2200      	movs	r2, #0
 80018f0:	2104      	movs	r1, #4
 80018f2:	481b      	ldr	r0, [pc, #108]	; (8001960 <IIC_Send_Byte+0x80>)
 80018f4:	f001 f907 	bl	8002b06 <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e027      	b.n	800194e <IIC_Send_Byte+0x6e>
    {
		if((txd&0x80)>>7)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	da05      	bge.n	8001912 <IIC_Send_Byte+0x32>
			SDA_H;
 8001906:	2201      	movs	r2, #1
 8001908:	2108      	movs	r1, #8
 800190a:	4815      	ldr	r0, [pc, #84]	; (8001960 <IIC_Send_Byte+0x80>)
 800190c:	f001 f8fb 	bl	8002b06 <HAL_GPIO_WritePin>
 8001910:	e004      	b.n	800191c <IIC_Send_Byte+0x3c>
		else
			SDA_L;
 8001912:	2200      	movs	r2, #0
 8001914:	2108      	movs	r1, #8
 8001916:	4812      	ldr	r0, [pc, #72]	; (8001960 <IIC_Send_Byte+0x80>)
 8001918:	f001 f8f5 	bl	8002b06 <HAL_GPIO_WritePin>
		txd<<=1;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]
		HAL_usDelay(2);
 8001922:	2002      	movs	r0, #2
 8001924:	f7ff feb6 	bl	8001694 <HAL_usDelay>
		SCL_H;
 8001928:	2201      	movs	r2, #1
 800192a:	2104      	movs	r1, #4
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <IIC_Send_Byte+0x80>)
 800192e:	f001 f8ea 	bl	8002b06 <HAL_GPIO_WritePin>
		HAL_usDelay(2);
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff feae 	bl	8001694 <HAL_usDelay>
		SCL_L;
 8001938:	2200      	movs	r2, #0
 800193a:	2104      	movs	r1, #4
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <IIC_Send_Byte+0x80>)
 800193e:	f001 f8e2 	bl	8002b06 <HAL_GPIO_WritePin>
		HAL_usDelay(2);
 8001942:	2002      	movs	r0, #2
 8001944:	f7ff fea6 	bl	8001694 <HAL_usDelay>
    for(t=0;t<8;t++)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3301      	adds	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d9d4      	bls.n	80018fe <IIC_Send_Byte+0x1e>
    }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40011000 	.word	0x40011000

08001964 <OLED_WR_Byte>:
        IIC_Ack();
    return receive;
}

void OLED_WR_Byte(uint8_t dat,uint8_t mode)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]
	IIC_Start();
 8001974:	f7ff ff3a 	bl	80017ec <IIC_Start>
	IIC_Send_Byte(0x78);
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f7ff ffb1 	bl	80018e0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800197e:	f7ff ff79 	bl	8001874 <IIC_Wait_Ack>
	if(mode)
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <OLED_WR_Byte+0x2c>
		IIC_Send_Byte(0x40);
 8001988:	2040      	movs	r0, #64	; 0x40
 800198a:	f7ff ffa9 	bl	80018e0 <IIC_Send_Byte>
 800198e:	e002      	b.n	8001996 <OLED_WR_Byte+0x32>
	else
		IIC_Send_Byte(0x00);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff ffa5 	bl	80018e0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8001996:	f7ff ff6d 	bl	8001874 <IIC_Wait_Ack>
	IIC_Send_Byte(dat);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff9f 	bl	80018e0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 80019a2:	f7ff ff67 	bl	8001874 <IIC_Wait_Ack>
	IIC_Stop();
 80019a6:	f7ff ff43 	bl	8001830 <IIC_Stop>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <OLED_Set_Pos>:
				OLED_WR_Byte(fill_Data,1);
			}
	}
}
void OLED_Set_Pos(unsigned char x, unsigned char y)
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	460a      	mov	r2, r1
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	4613      	mov	r3, r2
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	3b50      	subs	r3, #80	; 0x50
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ffca 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffc0 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ffb8 	bl	8001964 <OLED_WR_Byte>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}

void OLED_Clear(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	e01f      	b.n	8001a48 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0+i,OLED_CMD);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	3b50      	subs	r3, #80	; 0x50
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ffa7 	bl	8001964 <OLED_WR_Byte>
		OLED_WR_Byte(0x00,OLED_CMD);
 8001a16:	2100      	movs	r1, #0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ffa3 	bl	8001964 <OLED_WR_Byte>
		OLED_WR_Byte(0x10,OLED_CMD);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2010      	movs	r0, #16
 8001a22:	f7ff ff9f 	bl	8001964 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA);
 8001a26:	2300      	movs	r3, #0
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	e006      	b.n	8001a3a <OLED_Clear+0x3e>
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ff98 	bl	8001964 <OLED_WR_Byte>
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	daf4      	bge.n	8001a2c <OLED_Clear+0x30>
	for(i=0;i<8;i++)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	3301      	adds	r3, #1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9dc      	bls.n	8001a08 <OLED_Clear+0xc>
	}
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <OLED_ShowChar>:
		for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA);
	}
}

void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	717b      	strb	r3, [r7, #5]
 8001a72:	4613      	mov	r3, r2
 8001a74:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73bb      	strb	r3, [r7, #14]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';
 8001a7e:	797b      	ldrb	r3, [r7, #5]
 8001a80:	3b20      	subs	r3, #32
 8001a82:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da04      	bge.n	8001a96 <OLED_ShowChar+0x3e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	3302      	adds	r3, #2
 8001a94:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8001a96:	793b      	ldrb	r3, [r7, #4]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d135      	bne.n	8001b08 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);
 8001a9c:	79ba      	ldrb	r2, [r7, #6]
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff85 	bl	80019b2 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e00c      	b.n	8001ac8 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	011a      	lsls	r2, r3, #4
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <OLED_ShowChar+0xf4>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff51 	bl	8001964 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	d9ef      	bls.n	8001aae <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff6a 	bl	80019b2 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e00d      	b.n	8001b00 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	011a      	lsls	r2, r3, #4
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	4413      	add	r3, r2
 8001aec:	3308      	adds	r3, #8
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <OLED_ShowChar+0xf4>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d9ee      	bls.n	8001ae4 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);

			}
}
 8001b06:	e01c      	b.n	8001b42 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8001b08:	79ba      	ldrb	r2, [r7, #6]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff4f 	bl	80019b2 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e010      	b.n	8001b3c <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 8001b1a:	7bba      	ldrb	r2, [r7, #14]
 8001b1c:	7bf9      	ldrb	r1, [r7, #15]
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <OLED_ShowChar+0xf8>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff17 	bl	8001964 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d9eb      	bls.n	8001b1a <OLED_ShowChar+0xc2>
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08008894 	.word	0x08008894
 8001b50:	0800866c 	.word	0x0800866c

08001b54 <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
	}
}

void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	603a      	str	r2, [r7, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	460b      	mov	r3, r1
 8001b64:	71bb      	strb	r3, [r7, #6]
 8001b66:	4613      	mov	r3, r2
 8001b68:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001b6e:	e016      	b.n	8001b9e <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	797b      	ldrb	r3, [r7, #5]
 8001b7a:	79b9      	ldrb	r1, [r7, #6]
 8001b7c:	79f8      	ldrb	r0, [r7, #7]
 8001b7e:	f7ff ff6b 	bl	8001a58 <OLED_ShowChar>
			x+=8;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	3308      	adds	r3, #8
 8001b86:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b78      	cmp	r3, #120	; 0x78
 8001b8c:	d904      	bls.n	8001b98 <OLED_ShowString+0x44>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	3302      	adds	r3, #2
 8001b96:	71bb      	strb	r3, [r7, #6]
			j++;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e2      	bne.n	8001b70 <OLED_ShowString+0x1c>
	}
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <OLED_Init>:
	    }
	}
}

void OLED_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    PY_Delay_us_t(200000);
 8001bb8:	4831      	ldr	r0, [pc, #196]	; (8001c80 <OLED_Init+0xcc>)
 8001bba:	f7ff fc21 	bl	8001400 <PY_Delay_us_t>
    OLED_WR_Byte(0xAE,OLED_CMD);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	20ae      	movs	r0, #174	; 0xae
 8001bc2:	f7ff fecf 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//---set low column address
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2040      	movs	r0, #64	; 0x40
 8001bca:	f7ff fecb 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//---set high column address
 8001bce:	2100      	movs	r1, #0
 8001bd0:	20b0      	movs	r0, #176	; 0xb0
 8001bd2:	f7ff fec7 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xC8,OLED_CMD);//-not offset
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	20c8      	movs	r0, #200	; 0xc8
 8001bda:	f7ff fec3 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2081      	movs	r0, #129	; 0x81
 8001be2:	f7ff febf 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xff,OLED_CMD);
 8001be6:	2100      	movs	r1, #0
 8001be8:	20ff      	movs	r0, #255	; 0xff
 8001bea:	f7ff febb 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xa1,OLED_CMD);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	20a1      	movs	r0, #161	; 0xa1
 8001bf2:	f7ff feb7 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xa6,OLED_CMD);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	20a6      	movs	r0, #166	; 0xa6
 8001bfa:	f7ff feb3 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xa8,OLED_CMD);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	20a8      	movs	r0, #168	; 0xa8
 8001c02:	f7ff feaf 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD);
 8001c06:	2100      	movs	r1, #0
 8001c08:	201f      	movs	r0, #31
 8001c0a:	f7ff feab 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xd3,OLED_CMD);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	20d3      	movs	r0, #211	; 0xd3
 8001c12:	f7ff fea7 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 8001c16:	2100      	movs	r1, #0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fea3 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xd5,OLED_CMD);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	20d5      	movs	r0, #213	; 0xd5
 8001c22:	f7ff fe9f 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);
 8001c26:	2100      	movs	r1, #0
 8001c28:	20f0      	movs	r0, #240	; 0xf0
 8001c2a:	f7ff fe9b 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xd9,OLED_CMD);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	20d9      	movs	r0, #217	; 0xd9
 8001c32:	f7ff fe97 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x22,OLED_CMD);
 8001c36:	2100      	movs	r1, #0
 8001c38:	2022      	movs	r0, #34	; 0x22
 8001c3a:	f7ff fe93 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xda,OLED_CMD);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	20da      	movs	r0, #218	; 0xda
 8001c42:	f7ff fe8f 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);
 8001c46:	2100      	movs	r1, #0
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f7ff fe8b 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xdb,OLED_CMD);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	20db      	movs	r0, #219	; 0xdb
 8001c52:	f7ff fe87 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x49,OLED_CMD);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2049      	movs	r0, #73	; 0x49
 8001c5a:	f7ff fe83 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0x8d,OLED_CMD);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	208d      	movs	r0, #141	; 0x8d
 8001c62:	f7ff fe7f 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);
 8001c66:	2100      	movs	r1, #0
 8001c68:	2014      	movs	r0, #20
 8001c6a:	f7ff fe7b 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xaf,OLED_CMD);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	20af      	movs	r0, #175	; 0xaf
 8001c72:	f7ff fe77 	bl	8001964 <OLED_WR_Byte>
	OLED_Clear();
 8001c76:	f7ff fec1 	bl	80019fc <OLED_Clear>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00030d40 	.word	0x00030d40

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_MspInit+0x5c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x5c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f000 fc0f 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if (HAL_GPIO_ReadPin(TRIP_OUT1_GPIO_Port,TRIP_OUT1_Pin) == 1)
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <EXTI2_IRQHandler+0x48>)
 8001d4c:	f000 fec4 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <EXTI2_IRQHandler+0x24>
	{
//		HAL_TIM_Base_Stop(&htim2);
//		 __HAL_TIM_SET_COUNTER(&htim2,0);
		HAL_TIM_Base_Start(&htim2);
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <EXTI2_IRQHandler+0x4c>)
 8001d58:	f001 fb88 	bl	800346c <HAL_TIM_Base_Start>
		capture_start1 =  __HAL_TIM_GET_COUNTER(&htim2);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <EXTI2_IRQHandler+0x4c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <EXTI2_IRQHandler+0x50>)
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <EXTI2_IRQHandler+0x3c>

	}

	else
	{
		HAL_TIM_Base_Stop(&htim2);
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <EXTI2_IRQHandler+0x4c>)
 8001d6a:	f001 fbd7 	bl	800351c <HAL_TIM_Base_Stop>
		capture_end1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <EXTI2_IRQHandler+0x4c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <EXTI2_IRQHandler+0x54>)
 8001d76:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <EXTI2_IRQHandler+0x4c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIP_OUT1_Pin);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f000 fef1 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	20000258 	.word	0x20000258
 8001d94:	200001fc 	.word	0x200001fc
 8001d98:	20000204 	.word	0x20000204

08001d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GPIO_ReadPin(PWM_INT_GPIO_Port,PWM_INT_Pin) == 1)
 8001da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da4:	4815      	ldr	r0, [pc, #84]	; (8001dfc <EXTI15_10_IRQHandler+0x60>)
 8001da6:	f000 fe97 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d110      	bne.n	8001dd2 <EXTI15_10_IRQHandler+0x36>
	{
		HAL_TIM_Base_Start(&htim1);
 8001db0:	4813      	ldr	r0, [pc, #76]	; (8001e00 <EXTI15_10_IRQHandler+0x64>)
 8001db2:	f001 fb5b 	bl	800346c <HAL_TIM_Base_Start>

		if (HAL_GPIO_ReadPin(TRIP_OUT2_GPIO_Port,TRIP_OUT2_Pin) == 1)
 8001db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dba:	4810      	ldr	r0, [pc, #64]	; (8001dfc <EXTI15_10_IRQHandler+0x60>)
 8001dbc:	f000 fe8c 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d114      	bne.n	8001df0 <EXTI15_10_IRQHandler+0x54>
		{
			capture_start2 =  __HAL_TIM_GET_COUNTER(&htim2);
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <EXTI15_10_IRQHandler+0x68>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <EXTI15_10_IRQHandler+0x6c>)
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e00e      	b.n	8001df0 <EXTI15_10_IRQHandler+0x54>

	}

	else
	{
		HAL_TIM_Base_Stop(&htim1);
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <EXTI15_10_IRQHandler+0x64>)
 8001dd4:	f001 fba2 	bl	800351c <HAL_TIM_Base_Stop>
		Counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <EXTI15_10_IRQHandler+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <EXTI15_10_IRQHandler+0x70>)
 8001de0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <EXTI15_10_IRQHandler+0x64>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_Flag = 1;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <EXTI15_10_IRQHandler+0x74>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWM_INT_Pin);
 8001df0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001df4:	f000 feb8 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
//		TIM_ClearITPendingBit(TIM3, TIM_FLAG_Update);
//	}
//
//}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	20000210 	.word	0x20000210
 8001e04:	20000258 	.word	0x20000258
 8001e08:	20000200 	.word	0x20000200
 8001e0c:	200001f4 	.word	0x200001f4
 8001e10:	200001f8 	.word	0x200001f8

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_kill>:

int _kill(int pid, int sig)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2c:	f003 f896 	bl	8004f5c <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2216      	movs	r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_exit>:

void _exit (int status)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffe7 	bl	8001e22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e54:	e7fe      	b.n	8001e54 <_exit+0x12>

08001e56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e00a      	b.n	8001e7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e68:	f3af 8000 	nop.w
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	b2ca      	uxtb	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dbf0      	blt.n	8001e68 <_read+0x12>
  }

  return len;
 8001e86:	687b      	ldr	r3, [r7, #4]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e009      	b.n	8001eb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f9bc 	bl	8002228 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dbf1      	blt.n	8001ea2 <_write+0x12>
  }
  return len;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_close>:

int _close(int file)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <_isatty>:

int _isatty(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f003 f800 	bl	8004f5c <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000c000 	.word	0x2000c000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	2000020c 	.word	0x2000020c
 8001f90:	20000438 	.word	0x20000438

08001f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <MX_TIM1_Init+0x9c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fc4:	2247      	movs	r2, #71	; 0x47
 8001fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe8:	4813      	ldr	r0, [pc, #76]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fea:	f001 f9ef 	bl	80033cc <HAL_TIM_Base_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ff4:	f7ff fe46 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_TIM1_Init+0x98>)
 8002006:	f001 faaf 	bl	8003568 <HAL_TIM_ConfigClockSource>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002010:	f7ff fe38 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_TIM1_Init+0x98>)
 8002022:	f001 fc79 	bl	8003918 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800202c:	f7ff fe2a 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000210 	.word	0x20000210
 800203c:	40012c00 	.word	0x40012c00

08002040 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <MX_TIM2_Init+0x98>)
 800205e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_TIM2_Init+0x98>)
 8002066:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800206a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <MX_TIM2_Init+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <MX_TIM2_Init+0x98>)
 8002074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002078:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_TIM2_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM2_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_TIM2_Init+0x98>)
 8002088:	f001 f9a0 	bl	80033cc <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002092:	f7ff fdf7 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM2_Init+0x98>)
 80020a4:	f001 fa60 	bl	8003568 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020ae:	f7ff fde9 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM2_Init+0x98>)
 80020c0:	f001 fc2a 	bl	8003918 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ca:	f7ff fddb 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000258 	.word	0x20000258

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_TIM_Base_MspInit+0x58>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002106:	e010      	b.n	800212a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d10b      	bne.n	800212a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000

0800213c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <MX_USART1_UART_Init+0x50>)
 8002144:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_USART1_UART_Init+0x4c>)
 8002174:	f001 fc3c 	bl	80039f0 <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800217e:	f7ff fd81 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002a0 	.word	0x200002a0
 800218c:	40013800 	.word	0x40013800

08002190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_UART_MspInit+0x8c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d131      	bne.n	8002214 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_UART_MspInit+0x90>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	4619      	mov	r1, r3
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <HAL_UART_MspInit+0x94>)
 80021f6:	f000 fadb 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_UART_MspInit+0x94>)
 8002210:	f000 face 	bl	80027b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002214:	bf00      	nop
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013800 	.word	0x40013800
 8002220:	40021000 	.word	0x40021000
 8002224:	40010800 	.word	0x40010800

08002228 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8002230:	1d39      	adds	r1, r7, #4
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	2201      	movs	r2, #1
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <__io_putchar+0x20>)
 800223a:	f001 fc29 	bl	8003a90 <HAL_UART_Transmit>
	return ch;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200002a0 	.word	0x200002a0

0800224c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7ff fea2 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002252:	490c      	ldr	r1, [pc, #48]	; (8002284 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002268:	4c09      	ldr	r4, [pc, #36]	; (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f002 fe77 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227a:	f7ff f91b 	bl	80014b4 <main>
  bx lr
 800227e:	4770      	bx	lr
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002288:	080092e0 	.word	0x080092e0
  ldr r2, =_sbss
 800228c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002290:	20000438 	.word	0x20000438

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <OnOffLedLight>:
 */
#include "led.h"


void OnOffLedLight(unsigned char signal,unsigned char color,unsigned char state)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	460b      	mov	r3, r1
 80022a4:	71bb      	strb	r3, [r7, #6]
 80022a6:	4613      	mov	r3, r2
 80022a8:	717b      	strb	r3, [r7, #5]
	switch(signal){
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	f200 80f7 	bhi.w	80024a2 <OnOffLedLight+0x20a>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <OnOffLedLight+0x24>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	08002327 	.word	0x08002327
 80022c0:	080023c7 	.word	0x080023c7
 80022c4:	08002379 	.word	0x08002379
 80022c8:	080022d5 	.word	0x080022d5
 80022cc:	08002413 	.word	0x08002413
 80022d0:	0800245b 	.word	0x0800245b
	    case ERROR_LED :
	    	if(color == Green)
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d110      	bne.n	80022fc <OnOffLedLight+0x64>
	    	{
	    		if(state)
 80022da:	797b      	ldrb	r3, [r7, #5]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <OnOffLedLight+0x56>
	    		 HAL_GPIO_WritePin(GPIOC, ERROR_GREEN_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	4877      	ldr	r0, [pc, #476]	; (80024c4 <OnOffLedLight+0x22c>)
 80022e8:	f000 fc0d 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_SET);
	    	}
	       break; /* 可选的 */
 80022ec:	e0db      	b.n	80024a6 <OnOffLedLight+0x20e>
				 HAL_GPIO_WritePin(GPIOC, ERROR_GREEN_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f4:	4873      	ldr	r0, [pc, #460]	; (80024c4 <OnOffLedLight+0x22c>)
 80022f6:	f000 fc06 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 80022fa:	e0d4      	b.n	80024a6 <OnOffLedLight+0x20e>
	    	else if(color == Red)
 80022fc:	79bb      	ldrb	r3, [r7, #6]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	f040 80d1 	bne.w	80024a6 <OnOffLedLight+0x20e>
	    		if(state)
 8002304:	797b      	ldrb	r3, [r7, #5]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <OnOffLedLight+0x80>
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002310:	486c      	ldr	r0, [pc, #432]	; (80024c4 <OnOffLedLight+0x22c>)
 8002312:	f000 fbf8 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8002316:	e0c6      	b.n	80024a6 <OnOffLedLight+0x20e>
	    			HAL_GPIO_WritePin(GPIOC, ERROR_RED_Pin, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800231e:	4869      	ldr	r0, [pc, #420]	; (80024c4 <OnOffLedLight+0x22c>)
 8002320:	f000 fbf1 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8002324:	e0bf      	b.n	80024a6 <OnOffLedLight+0x20e>
	    case TEST_IN_LED :
	    	if(color == Green)
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d110      	bne.n	800234e <OnOffLedLight+0xb6>
	    	{
	    		if(state)
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <OnOffLedLight+0xa8>
	    			HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002338:	4863      	ldr	r0, [pc, #396]	; (80024c8 <OnOffLedLight+0x230>)
 800233a:	f000 fbe4 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_SET);
	    	}
	       break; /* 可选的 */
 800233e:	e0b4      	b.n	80024aa <OnOffLedLight+0x212>
	    			HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002346:	4860      	ldr	r0, [pc, #384]	; (80024c8 <OnOffLedLight+0x230>)
 8002348:	f000 fbdd 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 800234c:	e0ad      	b.n	80024aa <OnOffLedLight+0x212>
	    	else if(color == Red)
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 80aa 	bne.w	80024aa <OnOffLedLight+0x212>
	    		if(state)
 8002356:	797b      	ldrb	r3, [r7, #5]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <OnOffLedLight+0xd2>
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002362:	4859      	ldr	r0, [pc, #356]	; (80024c8 <OnOffLedLight+0x230>)
 8002364:	f000 fbcf 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8002368:	e09f      	b.n	80024aa <OnOffLedLight+0x212>
	    			HAL_GPIO_WritePin(GPIOB, TSET_IN_RED_Pin, GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002370:	4855      	ldr	r0, [pc, #340]	; (80024c8 <OnOffLedLight+0x230>)
 8002372:	f000 fbc8 	bl	8002b06 <HAL_GPIO_WritePin>
	       break; /* 可选的 */
 8002376:	e098      	b.n	80024aa <OnOffLedLight+0x212>
	    case TripLed2_LED :
	    	if(color == Green)
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d10e      	bne.n	800239c <OnOffLedLight+0x104>
			{
	    		if(state)
 800237e:	797b      	ldrb	r3, [r7, #5]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <OnOffLedLight+0xf8>
	    			HAL_GPIO_WritePin(GPIOC, TRIP_GREEN1_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	484e      	ldr	r0, [pc, #312]	; (80024c4 <OnOffLedLight+0x22c>)
 800238a:	f000 fbbc 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 800238e:	e08e      	b.n	80024ae <OnOffLedLight+0x216>
	    			HAL_GPIO_WritePin(GPIOC, TRIP_GREEN1_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	484b      	ldr	r0, [pc, #300]	; (80024c4 <OnOffLedLight+0x22c>)
 8002396:	f000 fbb6 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800239a:	e088      	b.n	80024ae <OnOffLedLight+0x216>
			else if(color == Red)
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	f040 8085 	bne.w	80024ae <OnOffLedLight+0x216>
	    		if(state)
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <OnOffLedLight+0x120>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b0:	4845      	ldr	r0, [pc, #276]	; (80024c8 <OnOffLedLight+0x230>)
 80023b2:	f000 fba8 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80023b6:	e07a      	b.n	80024ae <OnOffLedLight+0x216>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED1_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023be:	4842      	ldr	r0, [pc, #264]	; (80024c8 <OnOffLedLight+0x230>)
 80023c0:	f000 fba1 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80023c4:	e073      	b.n	80024ae <OnOffLedLight+0x216>
	    case TripLed1_LED :
	    	if(color == Green)
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d110      	bne.n	80023ee <OnOffLedLight+0x156>
			{
	    		if(state)
 80023cc:	797b      	ldrb	r3, [r7, #5]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <OnOffLedLight+0x148>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d8:	483b      	ldr	r0, [pc, #236]	; (80024c8 <OnOffLedLight+0x230>)
 80023da:	f000 fb94 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 80023de:	e068      	b.n	80024b2 <OnOffLedLight+0x21a>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e6:	4838      	ldr	r0, [pc, #224]	; (80024c8 <OnOffLedLight+0x230>)
 80023e8:	f000 fb8d 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80023ec:	e061      	b.n	80024b2 <OnOffLedLight+0x21a>
			else if(color == Red)
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d15e      	bne.n	80024b2 <OnOffLedLight+0x21a>
	    		if(state)
 80023f4:	797b      	ldrb	r3, [r7, #5]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <OnOffLedLight+0x16e>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2104      	movs	r1, #4
 80023fe:	4832      	ldr	r0, [pc, #200]	; (80024c8 <OnOffLedLight+0x230>)
 8002400:	f000 fb81 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002404:	e055      	b.n	80024b2 <OnOffLedLight+0x21a>
	    			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	2104      	movs	r1, #4
 800240a:	482f      	ldr	r0, [pc, #188]	; (80024c8 <OnOffLedLight+0x230>)
 800240c:	f000 fb7b 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002410:	e04f      	b.n	80024b2 <OnOffLedLight+0x21a>
	    case PWM_LED :
	    	if(color == Green)
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d10e      	bne.n	8002436 <OnOffLedLight+0x19e>
			{
	    		if(state)
 8002418:	797b      	ldrb	r3, [r7, #5]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <OnOffLedLight+0x192>
	    			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	482a      	ldr	r0, [pc, #168]	; (80024cc <OnOffLedLight+0x234>)
 8002424:	f000 fb6f 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 8002428:	e045      	b.n	80024b6 <OnOffLedLight+0x21e>
	    			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	4827      	ldr	r0, [pc, #156]	; (80024cc <OnOffLedLight+0x234>)
 8002430:	f000 fb69 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002434:	e03f      	b.n	80024b6 <OnOffLedLight+0x21e>
			else if(color == Red)
 8002436:	79bb      	ldrb	r3, [r7, #6]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d13c      	bne.n	80024b6 <OnOffLedLight+0x21e>
	    		if(state)
 800243c:	797b      	ldrb	r3, [r7, #5]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <OnOffLedLight+0x1b6>
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	4821      	ldr	r0, [pc, #132]	; (80024cc <OnOffLedLight+0x234>)
 8002448:	f000 fb5d 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800244c:	e033      	b.n	80024b6 <OnOffLedLight+0x21e>
	    			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	481e      	ldr	r0, [pc, #120]	; (80024cc <OnOffLedLight+0x234>)
 8002454:	f000 fb57 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002458:	e02d      	b.n	80024b6 <OnOffLedLight+0x21e>
	    case CALIBRATE_LED :
	    	if(color == Green)
 800245a:	79bb      	ldrb	r3, [r7, #6]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10e      	bne.n	800247e <OnOffLedLight+0x1e6>
			{
	    		if(state)
 8002460:	797b      	ldrb	r3, [r7, #5]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <OnOffLedLight+0x1da>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_GREEN_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2104      	movs	r1, #4
 800246a:	4818      	ldr	r0, [pc, #96]	; (80024cc <OnOffLedLight+0x234>)
 800246c:	f000 fb4b 	bl	8002b06 <HAL_GPIO_WritePin>
	    		if(state)
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_RESET);
	    		else
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_SET);
			}
		   break; /* 可选的 */
 8002470:	e023      	b.n	80024ba <OnOffLedLight+0x222>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_GREEN_Pin, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	2104      	movs	r1, #4
 8002476:	4815      	ldr	r0, [pc, #84]	; (80024cc <OnOffLedLight+0x234>)
 8002478:	f000 fb45 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 800247c:	e01d      	b.n	80024ba <OnOffLedLight+0x222>
			else if(color == Red)
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d11a      	bne.n	80024ba <OnOffLedLight+0x222>
	    		if(state)
 8002484:	797b      	ldrb	r3, [r7, #5]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <OnOffLedLight+0x1fe>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2102      	movs	r1, #2
 800248e:	480f      	ldr	r0, [pc, #60]	; (80024cc <OnOffLedLight+0x234>)
 8002490:	f000 fb39 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 8002494:	e011      	b.n	80024ba <OnOffLedLight+0x222>
	    			HAL_GPIO_WritePin(GPIOA, CALIBRATION_RED_Pin, GPIO_PIN_SET);
 8002496:	2201      	movs	r2, #1
 8002498:	2102      	movs	r1, #2
 800249a:	480c      	ldr	r0, [pc, #48]	; (80024cc <OnOffLedLight+0x234>)
 800249c:	f000 fb33 	bl	8002b06 <HAL_GPIO_WritePin>
		   break; /* 可选的 */
 80024a0:	e00b      	b.n	80024ba <OnOffLedLight+0x222>
	    /* 您可以有任意数量的 case 语句 */
	    default : /* 可选的 */
	    	break;
 80024a2:	bf00      	nop
 80024a4:	e00a      	b.n	80024bc <OnOffLedLight+0x224>
	       break; /* 可选的 */
 80024a6:	bf00      	nop
 80024a8:	e008      	b.n	80024bc <OnOffLedLight+0x224>
	       break; /* 可选的 */
 80024aa:	bf00      	nop
 80024ac:	e006      	b.n	80024bc <OnOffLedLight+0x224>
		   break; /* 可选的 */
 80024ae:	bf00      	nop
 80024b0:	e004      	b.n	80024bc <OnOffLedLight+0x224>
		   break; /* 可选的 */
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <OnOffLedLight+0x224>
		   break; /* 可选的 */
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <OnOffLedLight+0x224>
		   break; /* 可选的 */
 80024ba:	bf00      	nop
	}
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40010800 	.word	0x40010800

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_Init+0x28>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_Init+0x28>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f923 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fbd0 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f93b 	bl	8002796 <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 f903 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000000 	.word	0x20000000
 8002554:	20000008 	.word	0x20000008
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_IncTick+0x20>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000008 	.word	0x20000008
 800257c:	200002e8 	.word	0x200002e8

08002580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	200002e8 	.word	0x200002e8

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <__NVIC_EnableIRQ+0x34>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff90 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff2d 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff42 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff35 	bl	80025f8 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e179      	b.n	8002ab8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c4:	2201      	movs	r2, #1
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8168 	bne.w	8002ab2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a96      	ldr	r2, [pc, #600]	; (8002a40 <HAL_GPIO_Init+0x290>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d05e      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027ec:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x290>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d875      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027f2:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_GPIO_Init+0x294>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d058      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027f8:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x294>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d86f      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027fe:	4a92      	ldr	r2, [pc, #584]	; (8002a48 <HAL_GPIO_Init+0x298>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d052      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002804:	4a90      	ldr	r2, [pc, #576]	; (8002a48 <HAL_GPIO_Init+0x298>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d869      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800280a:	4a90      	ldr	r2, [pc, #576]	; (8002a4c <HAL_GPIO_Init+0x29c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04c      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002810:	4a8e      	ldr	r2, [pc, #568]	; (8002a4c <HAL_GPIO_Init+0x29c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d863      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002816:	4a8e      	ldr	r2, [pc, #568]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d046      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 800281c:	4a8c      	ldr	r2, [pc, #560]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d85d      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d82a      	bhi.n	800287c <HAL_GPIO_Init+0xcc>
 8002826:	2b12      	cmp	r3, #18
 8002828:	d859      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_GPIO_Init+0x80>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028ab 	.word	0x080028ab
 8002834:	08002885 	.word	0x08002885
 8002838:	08002897 	.word	0x08002897
 800283c:	080028d9 	.word	0x080028d9
 8002840:	080028df 	.word	0x080028df
 8002844:	080028df 	.word	0x080028df
 8002848:	080028df 	.word	0x080028df
 800284c:	080028df 	.word	0x080028df
 8002850:	080028df 	.word	0x080028df
 8002854:	080028df 	.word	0x080028df
 8002858:	080028df 	.word	0x080028df
 800285c:	080028df 	.word	0x080028df
 8002860:	080028df 	.word	0x080028df
 8002864:	080028df 	.word	0x080028df
 8002868:	080028df 	.word	0x080028df
 800286c:	080028df 	.word	0x080028df
 8002870:	080028df 	.word	0x080028df
 8002874:	0800288d 	.word	0x0800288d
 8002878:	080028a1 	.word	0x080028a1
 800287c:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002882:	e02c      	b.n	80028de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e029      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e024      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	3308      	adds	r3, #8
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e01f      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	330c      	adds	r3, #12
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e01a      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028b2:	2304      	movs	r3, #4
 80028b4:	623b      	str	r3, [r7, #32]
          break;
 80028b6:	e013      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c0:	2308      	movs	r3, #8
 80028c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	611a      	str	r2, [r3, #16]
          break;
 80028ca:	e009      	b.n	80028e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	615a      	str	r2, [r3, #20]
          break;
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          break;
 80028de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d801      	bhi.n	80028ea <HAL_GPIO_Init+0x13a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <HAL_GPIO_Init+0x13e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d802      	bhi.n	80028fc <HAL_GPIO_Init+0x14c>
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x152>
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3b08      	subs	r3, #8
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	210f      	movs	r1, #15
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80c1 	beq.w	8002ab2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002948:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3c      	ldr	r2, [pc, #240]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d01f      	beq.n	80029b4 <HAL_GPIO_Init+0x204>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <HAL_GPIO_Init+0x2b4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d019      	beq.n	80029b0 <HAL_GPIO_Init+0x200>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_GPIO_Init+0x1fc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a39      	ldr	r2, [pc, #228]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00d      	beq.n	80029a8 <HAL_GPIO_Init+0x1f8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_GPIO_Init+0x2c0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <HAL_GPIO_Init+0x1f4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a37      	ldr	r2, [pc, #220]	; (8002a74 <HAL_GPIO_Init+0x2c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_GPIO_Init+0x1f0>
 800299c:	2305      	movs	r3, #5
 800299e:	e00a      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a0:	2306      	movs	r3, #6
 80029a2:	e008      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e006      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a8:	2303      	movs	r3, #3
 80029aa:	e004      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029b4:	2300      	movs	r3, #0
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4093      	lsls	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029c6:	4925      	ldr	r1, [pc, #148]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4924      	ldr	r1, [pc, #144]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4920      	ldr	r1, [pc, #128]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	491a      	ldr	r1, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4916      	ldr	r1, [pc, #88]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d025      	beq.n	8002a7c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e025      	b.n	8002a8a <HAL_GPIO_Init+0x2da>
 8002a3e:	bf00      	nop
 8002a40:	10320000 	.word	0x10320000
 8002a44:	10310000 	.word	0x10310000
 8002a48:	10220000 	.word	0x10220000
 8002a4c:	10210000 	.word	0x10210000
 8002a50:	10120000 	.word	0x10120000
 8002a54:	10110000 	.word	0x10110000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40010800 	.word	0x40010800
 8002a64:	40010c00 	.word	0x40010c00
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	40011800 	.word	0x40011800
 8002a74:	40011c00 	.word	0x40011c00
 8002a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f ae7e 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	372c      	adds	r7, #44	; 0x2c
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	807b      	strh	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b16:	787b      	ldrb	r3, [r7, #1]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1c:	887a      	ldrh	r2, [r7, #2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b22:	e003      	b.n	8002b2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	611a      	str	r2, [r3, #16]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f806 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e272      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
 8002be4:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e24c      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x76>
 8002c14:	4b80      	ldr	r3, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fc7a 	bl	8002580 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fc76 	bl	8002580 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e200      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe4>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fc66 	bl	8002580 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fc62 	bl	8002580 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1ec      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x10c>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c0      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff fc1b 	bl	8002580 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff fc17 	bl	8002580 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a1      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fbfa 	bl	8002580 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff fbf6 	bl	8002580 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e180      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03a      	beq.n	8002e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7ff fbda 	bl	8002580 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7ff fbd6 	bl	8002580 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e160      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f000 face 	bl	8003390 <RCC_Delay>
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fbc0 	bl	8002580 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7ff fbbc 	bl	8002580 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e146      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	42420000 	.word	0x42420000
 8002e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e9      	bne.n	8002e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a6 	beq.w	8002f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b8b      	ldr	r3, [pc, #556]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a87      	ldr	r2, [pc, #540]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <HAL_RCC_OscConfig+0x4c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b7f      	ldr	r3, [pc, #508]	; (8003074 <HAL_RCC_OscConfig+0x4c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x4c8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7ff fb7d 	bl	8002580 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7ff fb79 	bl	8002580 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e103      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b75      	ldr	r3, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x4c8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e02d      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a69      	ldr	r2, [pc, #420]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x356>
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a60      	ldr	r2, [pc, #384]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a5d      	ldr	r2, [pc, #372]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002f02:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a5a      	ldr	r2, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fb2d 	bl	8002580 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7ff fb29 	bl	8002580 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0b1      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x37e>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7ff fb17 	bl	8002580 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7ff fb13 	bl	8002580 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e09b      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8087 	beq.w	80030a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d061      	beq.n	8003064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d146      	bne.n	8003036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7ff fae7 	bl	8002580 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7ff fae3 	bl	8002580 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e06d      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4921      	ldr	r1, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a19      	ldr	r1, [r3, #32]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	430b      	orrs	r3, r1
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7ff fab7 	bl	8002580 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff fab3 	bl	8002580 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e03d      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x46a>
 8003034:	e035      	b.n	80030a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff faa0 	bl	8002580 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff fa9c 	bl	8002580 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e026      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x498>
 8003062:	e01e      	b.n	80030a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e019      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
 8003078:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x500>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d0      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d910      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	4965      	ldr	r1, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003116:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d040      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e073      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06b      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4936      	ldr	r1, [pc, #216]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a0:	f7ff f9ee 	bl	8002580 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7ff f9ea 	bl	8002580 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e053      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d210      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4922      	ldr	r1, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1cc>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f94c 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	08008e84 	.word	0x08008e84
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x30>
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x36>
 80032b2:	e027      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	613b      	str	r3, [r7, #16]
      break;
 80032b8:	e027      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032c4:	5cd3      	ldrb	r3, [r2, r3]
 80032c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d010      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_GetSysClockFreq+0x94>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0c5b      	lsrs	r3, r3, #17
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_RCC_GetSysClockFreq+0x98>)
 80032e6:	fb03 f202 	mul.w	r2, r3, r2
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e004      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	613b      	str	r3, [r7, #16]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetSysClockFreq+0x98>)
 8003306:	613b      	str	r3, [r7, #16]
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	693b      	ldr	r3, [r7, #16]
}
 800330c:	4618      	mov	r0, r3
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	007a1200 	.word	0x007a1200
 8003320:	08008e9c 	.word	0x08008e9c
 8003324:	08008eac 	.word	0x08008eac
 8003328:	003d0900 	.word	0x003d0900

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <HAL_RCC_GetHCLKFreq+0x10>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff2 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	08008e94 	.word	0x08008e94

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffde 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0adb      	lsrs	r3, r3, #11
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	08008e94 	.word	0x08008e94

08003390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <RCC_Delay+0x34>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <RCC_Delay+0x38>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a5b      	lsrs	r3, r3, #9
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ac:	bf00      	nop
  }
  while (Delay --);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	60fa      	str	r2, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <RCC_Delay+0x1c>
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	20000000 	.word	0x20000000
 80033c8:	10624dd3 	.word	0x10624dd3

080033cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e041      	b.n	8003462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fe72 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 f974 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e03c      	b.n	80034fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_TIM_Base_Start+0x9c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_TIM_Base_Start+0x5c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_TIM_Base_Start+0xa0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_TIM_Base_Start+0x5c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_Base_Start+0x5c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIM_Base_Start+0xa4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_Base_Start+0x5c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIM_Base_Start+0xa8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start+0x5c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_TIM_Base_Start+0xac>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40013400 	.word	0x40013400
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00

0800351c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	f241 1311 	movw	r3, #4369	; 0x1111
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <HAL_TIM_Base_Stop+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	f240 4344 	movw	r3, #1092	; 0x444
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_TIM_Base_Stop+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIM_ConfigClockSource+0x1c>
 8003580:	2302      	movs	r3, #2
 8003582:	e0b4      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x186>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035bc:	d03e      	beq.n	800363c <HAL_TIM_ConfigClockSource+0xd4>
 80035be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c2:	f200 8087 	bhi.w	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	f000 8086 	beq.w	80036da <HAL_TIM_ConfigClockSource+0x172>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	d87f      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b70      	cmp	r3, #112	; 0x70
 80035d6:	d01a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0xa6>
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d87b      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b60      	cmp	r3, #96	; 0x60
 80035de:	d050      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x11a>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d877      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035e4:	2b50      	cmp	r3, #80	; 0x50
 80035e6:	d03c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0xfa>
 80035e8:	2b50      	cmp	r3, #80	; 0x50
 80035ea:	d873      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d058      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x13a>
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d86f      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b30      	cmp	r3, #48	; 0x30
 80035f6:	d064      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x15a>
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d86b      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d060      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d867      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d05c      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003608:	2b10      	cmp	r3, #16
 800360a:	d05a      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x15a>
 800360c:	e062      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800361e:	f000 f95c 	bl	80038da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	609a      	str	r2, [r3, #8]
      break;
 800363a:	e04f      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800364c:	f000 f945 	bl	80038da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365e:	609a      	str	r2, [r3, #8]
      break;
 8003660:	e03c      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	461a      	mov	r2, r3
 8003670:	f000 f8bc 	bl	80037ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2150      	movs	r1, #80	; 0x50
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f913 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003680:	e02c      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368e:	461a      	mov	r2, r3
 8003690:	f000 f8da 	bl	8003848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2160      	movs	r1, #96	; 0x60
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f903 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e01c      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 f89c 	bl	80037ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f8f3 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f000 f8ea 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80036d2:	e003      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e000      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <TIM_Base_SetConfig+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <TIM_Base_SetConfig+0xe8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <TIM_Base_SetConfig+0xec>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <TIM_Base_SetConfig+0xf0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <TIM_Base_SetConfig+0xe0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <TIM_Base_SetConfig+0x82>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a21      	ldr	r2, [pc, #132]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00f      	beq.n	800377a <TIM_Base_SetConfig+0x82>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x82>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <TIM_Base_SetConfig+0xe8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x82>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <TIM_Base_SetConfig+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x82>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <TIM_Base_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <TIM_Base_SetConfig+0xe0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0xc8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	615a      	str	r2, [r3, #20]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00

080037ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 030a 	bic.w	r3, r3, #10
 8003828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0210 	bic.w	r2, r3, #16
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	031b      	lsls	r3, r3, #12
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003884:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f043 0307 	orr.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	021a      	lsls	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4313      	orrs	r3, r2
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	609a      	str	r2, [r3, #8]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800392c:	2302      	movs	r3, #2
 800392e:	e050      	b.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00e      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40013400 	.word	0x40013400
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40000800 	.word	0x40000800
 80039ec:	40000c00 	.word	0x40000c00

080039f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e042      	b.n	8003a88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fbba 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f91d 	bl	8003c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d16d      	bne.n	8003b8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_Transmit+0x2c>
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e066      	b.n	8003b8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fe fd57 	bl	8002580 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x6c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b04:	e02a      	b.n	8003b5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f840 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e036      	b.n	8003b8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cf      	bne.n	8003b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f810 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e006      	b.n	8003b8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b090      	sub	sp, #64	; 0x40
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba6:	e050      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d04c      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb6:	f7fe fce3 	bl	8002580 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d241      	bcs.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003be6:	637a      	str	r2, [r7, #52]	; 0x34
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e5      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	613b      	str	r3, [r7, #16]
   return(result);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1a:	623a      	str	r2, [r7, #32]
 8003c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	69f9      	ldr	r1, [r7, #28]
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e5      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e00f      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d09f      	beq.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3740      	adds	r7, #64	; 0x40
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cae:	f023 030c 	bic.w	r3, r3, #12
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <UART_SetConfig+0x114>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7ff fb44 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	e002      	b.n	8003cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7ff fb2c 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009a      	lsls	r2, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <UART_SetConfig+0x118>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	0119      	lsls	r1, r3, #4
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <UART_SetConfig+0x118>)
 8003d22:	fba3 0302 	umull	r0, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d40:	4419      	add	r1, r3
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009a      	lsls	r2, r3, #2
 8003d4c:	441a      	add	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <UART_SetConfig+0x118>)
 8003d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2064      	movs	r0, #100	; 0x64
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	; 0x32
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <UART_SetConfig+0x118>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40013800 	.word	0x40013800
 8003d8c:	51eb851f 	.word	0x51eb851f

08003d90 <__cvt>:
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d96:	461f      	mov	r7, r3
 8003d98:	bfbb      	ittet	lt
 8003d9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	461f      	movlt	r7, r3
 8003da0:	2300      	movge	r3, #0
 8003da2:	232d      	movlt	r3, #45	; 0x2d
 8003da4:	b088      	sub	sp, #32
 8003da6:	4614      	mov	r4, r2
 8003da8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003daa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dac:	7013      	strb	r3, [r2, #0]
 8003dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003db0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003db4:	f023 0820 	bic.w	r8, r3, #32
 8003db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dbc:	d005      	beq.n	8003dca <__cvt+0x3a>
 8003dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dc2:	d100      	bne.n	8003dc6 <__cvt+0x36>
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e000      	b.n	8003dcc <__cvt+0x3c>
 8003dca:	2303      	movs	r3, #3
 8003dcc:	aa07      	add	r2, sp, #28
 8003dce:	9204      	str	r2, [sp, #16]
 8003dd0:	aa06      	add	r2, sp, #24
 8003dd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dd6:	e9cd 3500 	strd	r3, r5, [sp]
 8003dda:	4622      	mov	r2, r4
 8003ddc:	463b      	mov	r3, r7
 8003dde:	f001 f987 	bl	80050f0 <_dtoa_r>
 8003de2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de6:	4606      	mov	r6, r0
 8003de8:	d102      	bne.n	8003df0 <__cvt+0x60>
 8003dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003dec:	07db      	lsls	r3, r3, #31
 8003dee:	d522      	bpl.n	8003e36 <__cvt+0xa6>
 8003df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df4:	eb06 0905 	add.w	r9, r6, r5
 8003df8:	d110      	bne.n	8003e1c <__cvt+0x8c>
 8003dfa:	7833      	ldrb	r3, [r6, #0]
 8003dfc:	2b30      	cmp	r3, #48	; 0x30
 8003dfe:	d10a      	bne.n	8003e16 <__cvt+0x86>
 8003e00:	2200      	movs	r2, #0
 8003e02:	2300      	movs	r3, #0
 8003e04:	4620      	mov	r0, r4
 8003e06:	4639      	mov	r1, r7
 8003e08:	f7fc fe3a 	bl	8000a80 <__aeabi_dcmpeq>
 8003e0c:	b918      	cbnz	r0, 8003e16 <__cvt+0x86>
 8003e0e:	f1c5 0501 	rsb	r5, r5, #1
 8003e12:	f8ca 5000 	str.w	r5, [sl]
 8003e16:	f8da 3000 	ldr.w	r3, [sl]
 8003e1a:	4499      	add	r9, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4620      	mov	r0, r4
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fe2c 	bl	8000a80 <__aeabi_dcmpeq>
 8003e28:	b108      	cbz	r0, 8003e2e <__cvt+0x9e>
 8003e2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e2e:	2230      	movs	r2, #48	; 0x30
 8003e30:	9b07      	ldr	r3, [sp, #28]
 8003e32:	454b      	cmp	r3, r9
 8003e34:	d307      	bcc.n	8003e46 <__cvt+0xb6>
 8003e36:	4630      	mov	r0, r6
 8003e38:	9b07      	ldr	r3, [sp, #28]
 8003e3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e3c:	1b9b      	subs	r3, r3, r6
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	b008      	add	sp, #32
 8003e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	9107      	str	r1, [sp, #28]
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e7f0      	b.n	8003e30 <__cvt+0xa0>

08003e4e <__exponent>:
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e52:	2900      	cmp	r1, #0
 8003e54:	f803 2b02 	strb.w	r2, [r3], #2
 8003e58:	bfb6      	itet	lt
 8003e5a:	222d      	movlt	r2, #45	; 0x2d
 8003e5c:	222b      	movge	r2, #43	; 0x2b
 8003e5e:	4249      	neglt	r1, r1
 8003e60:	2909      	cmp	r1, #9
 8003e62:	7042      	strb	r2, [r0, #1]
 8003e64:	dd2a      	ble.n	8003ebc <__exponent+0x6e>
 8003e66:	f10d 0207 	add.w	r2, sp, #7
 8003e6a:	4617      	mov	r7, r2
 8003e6c:	260a      	movs	r6, #10
 8003e6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e72:	4694      	mov	ip, r2
 8003e74:	fb06 1415 	mls	r4, r6, r5, r1
 8003e78:	3430      	adds	r4, #48	; 0x30
 8003e7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e7e:	460c      	mov	r4, r1
 8003e80:	2c63      	cmp	r4, #99	; 0x63
 8003e82:	4629      	mov	r1, r5
 8003e84:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e88:	dcf1      	bgt.n	8003e6e <__exponent+0x20>
 8003e8a:	3130      	adds	r1, #48	; 0x30
 8003e8c:	f1ac 0402 	sub.w	r4, ip, #2
 8003e90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e94:	4622      	mov	r2, r4
 8003e96:	1c41      	adds	r1, r0, #1
 8003e98:	42ba      	cmp	r2, r7
 8003e9a:	d30a      	bcc.n	8003eb2 <__exponent+0x64>
 8003e9c:	f10d 0209 	add.w	r2, sp, #9
 8003ea0:	eba2 020c 	sub.w	r2, r2, ip
 8003ea4:	42bc      	cmp	r4, r7
 8003ea6:	bf88      	it	hi
 8003ea8:	2200      	movhi	r2, #0
 8003eaa:	4413      	add	r3, r2
 8003eac:	1a18      	subs	r0, r3, r0
 8003eae:	b003      	add	sp, #12
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003eb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003eba:	e7ed      	b.n	8003e98 <__exponent+0x4a>
 8003ebc:	2330      	movs	r3, #48	; 0x30
 8003ebe:	3130      	adds	r1, #48	; 0x30
 8003ec0:	7083      	strb	r3, [r0, #2]
 8003ec2:	70c1      	strb	r1, [r0, #3]
 8003ec4:	1d03      	adds	r3, r0, #4
 8003ec6:	e7f1      	b.n	8003eac <__exponent+0x5e>

08003ec8 <_printf_float>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	b091      	sub	sp, #68	; 0x44
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	4605      	mov	r5, r0
 8003eda:	f000 fff5 	bl	8004ec8 <_localeconv_r>
 8003ede:	6803      	ldr	r3, [r0, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee4:	f7fc f9a0 	bl	8000228 <strlen>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	930e      	str	r3, [sp, #56]	; 0x38
 8003eec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef0:	900a      	str	r0, [sp, #40]	; 0x28
 8003ef2:	3307      	adds	r3, #7
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f00:	f8d4 b000 	ldr.w	fp, [r4]
 8003f04:	f8c8 2000 	str.w	r2, [r8]
 8003f08:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4643      	mov	r3, r8
 8003f10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f14:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	4650      	mov	r0, sl
 8003f20:	4b9c      	ldr	r3, [pc, #624]	; (8004194 <_printf_float+0x2cc>)
 8003f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f24:	f7fc fdde 	bl	8000ae4 <__aeabi_dcmpun>
 8003f28:	bb70      	cbnz	r0, 8003f88 <_printf_float+0xc0>
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	4650      	mov	r0, sl
 8003f30:	4b98      	ldr	r3, [pc, #608]	; (8004194 <_printf_float+0x2cc>)
 8003f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f34:	f7fc fdb8 	bl	8000aa8 <__aeabi_dcmple>
 8003f38:	bb30      	cbnz	r0, 8003f88 <_printf_float+0xc0>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4650      	mov	r0, sl
 8003f40:	4641      	mov	r1, r8
 8003f42:	f7fc fda7 	bl	8000a94 <__aeabi_dcmplt>
 8003f46:	b110      	cbz	r0, 8003f4e <_printf_float+0x86>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	4a92      	ldr	r2, [pc, #584]	; (8004198 <_printf_float+0x2d0>)
 8003f50:	4b92      	ldr	r3, [pc, #584]	; (800419c <_printf_float+0x2d4>)
 8003f52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f56:	bf94      	ite	ls
 8003f58:	4690      	movls	r8, r2
 8003f5a:	4698      	movhi	r8, r3
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f04f 0a00 	mov.w	sl, #0
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	f02b 0304 	bic.w	r3, fp, #4
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	4633      	mov	r3, r6
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	9700      	str	r7, [sp, #0]
 8003f72:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f74:	f000 f9d6 	bl	8004324 <_printf_common>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	f040 8090 	bne.w	800409e <_printf_float+0x1d6>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b011      	add	sp, #68	; 0x44
 8003f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4643      	mov	r3, r8
 8003f8c:	4650      	mov	r0, sl
 8003f8e:	4641      	mov	r1, r8
 8003f90:	f7fc fda8 	bl	8000ae4 <__aeabi_dcmpun>
 8003f94:	b148      	cbz	r0, 8003faa <_printf_float+0xe2>
 8003f96:	f1b8 0f00 	cmp.w	r8, #0
 8003f9a:	bfb8      	it	lt
 8003f9c:	232d      	movlt	r3, #45	; 0x2d
 8003f9e:	4a80      	ldr	r2, [pc, #512]	; (80041a0 <_printf_float+0x2d8>)
 8003fa0:	bfb8      	it	lt
 8003fa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <_printf_float+0x2dc>)
 8003fa8:	e7d3      	b.n	8003f52 <_printf_float+0x8a>
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	d142      	bne.n	800403a <_printf_float+0x172>
 8003fb4:	2306      	movs	r3, #6
 8003fb6:	6063      	str	r3, [r4, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	9206      	str	r2, [sp, #24]
 8003fbc:	aa0e      	add	r2, sp, #56	; 0x38
 8003fbe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fc2:	aa0d      	add	r2, sp, #52	; 0x34
 8003fc4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003fc8:	9203      	str	r2, [sp, #12]
 8003fca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003fce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4643      	mov	r3, r8
 8003fde:	910b      	str	r1, [sp, #44]	; 0x2c
 8003fe0:	f7ff fed6 	bl	8003d90 <__cvt>
 8003fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	2947      	cmp	r1, #71	; 0x47
 8003fea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fec:	d108      	bne.n	8004000 <_printf_float+0x138>
 8003fee:	1cc8      	adds	r0, r1, #3
 8003ff0:	db02      	blt.n	8003ff8 <_printf_float+0x130>
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	dd40      	ble.n	800407a <_printf_float+0x1b2>
 8003ff8:	f1a9 0902 	sub.w	r9, r9, #2
 8003ffc:	fa5f f989 	uxtb.w	r9, r9
 8004000:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004004:	d81f      	bhi.n	8004046 <_printf_float+0x17e>
 8004006:	464a      	mov	r2, r9
 8004008:	3901      	subs	r1, #1
 800400a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800400e:	910d      	str	r1, [sp, #52]	; 0x34
 8004010:	f7ff ff1d 	bl	8003e4e <__exponent>
 8004014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004016:	4682      	mov	sl, r0
 8004018:	1813      	adds	r3, r2, r0
 800401a:	2a01      	cmp	r2, #1
 800401c:	6123      	str	r3, [r4, #16]
 800401e:	dc02      	bgt.n	8004026 <_printf_float+0x15e>
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	07d2      	lsls	r2, r2, #31
 8004024:	d501      	bpl.n	800402a <_printf_float+0x162>
 8004026:	3301      	adds	r3, #1
 8004028:	6123      	str	r3, [r4, #16]
 800402a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800402e:	2b00      	cmp	r3, #0
 8004030:	d09b      	beq.n	8003f6a <_printf_float+0xa2>
 8004032:	232d      	movs	r3, #45	; 0x2d
 8004034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004038:	e797      	b.n	8003f6a <_printf_float+0xa2>
 800403a:	2947      	cmp	r1, #71	; 0x47
 800403c:	d1bc      	bne.n	8003fb8 <_printf_float+0xf0>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ba      	bne.n	8003fb8 <_printf_float+0xf0>
 8004042:	2301      	movs	r3, #1
 8004044:	e7b7      	b.n	8003fb6 <_printf_float+0xee>
 8004046:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800404a:	d118      	bne.n	800407e <_printf_float+0x1b6>
 800404c:	2900      	cmp	r1, #0
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	dd0b      	ble.n	800406a <_printf_float+0x1a2>
 8004052:	6121      	str	r1, [r4, #16]
 8004054:	b913      	cbnz	r3, 800405c <_printf_float+0x194>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d502      	bpl.n	8004062 <_printf_float+0x19a>
 800405c:	3301      	adds	r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	f04f 0a00 	mov.w	sl, #0
 8004066:	65a1      	str	r1, [r4, #88]	; 0x58
 8004068:	e7df      	b.n	800402a <_printf_float+0x162>
 800406a:	b913      	cbnz	r3, 8004072 <_printf_float+0x1aa>
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	07d2      	lsls	r2, r2, #31
 8004070:	d501      	bpl.n	8004076 <_printf_float+0x1ae>
 8004072:	3302      	adds	r3, #2
 8004074:	e7f4      	b.n	8004060 <_printf_float+0x198>
 8004076:	2301      	movs	r3, #1
 8004078:	e7f2      	b.n	8004060 <_printf_float+0x198>
 800407a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800407e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004080:	4299      	cmp	r1, r3
 8004082:	db05      	blt.n	8004090 <_printf_float+0x1c8>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	6121      	str	r1, [r4, #16]
 8004088:	07d8      	lsls	r0, r3, #31
 800408a:	d5ea      	bpl.n	8004062 <_printf_float+0x19a>
 800408c:	1c4b      	adds	r3, r1, #1
 800408e:	e7e7      	b.n	8004060 <_printf_float+0x198>
 8004090:	2900      	cmp	r1, #0
 8004092:	bfcc      	ite	gt
 8004094:	2201      	movgt	r2, #1
 8004096:	f1c1 0202 	rsble	r2, r1, #2
 800409a:	4413      	add	r3, r2
 800409c:	e7e0      	b.n	8004060 <_printf_float+0x198>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	055a      	lsls	r2, r3, #21
 80040a2:	d407      	bmi.n	80040b4 <_printf_float+0x1ec>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	4642      	mov	r2, r8
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	d12b      	bne.n	800410a <_printf_float+0x242>
 80040b2:	e764      	b.n	8003f7e <_printf_float+0xb6>
 80040b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040b8:	f240 80dd 	bls.w	8004276 <_printf_float+0x3ae>
 80040bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f7fc fcdc 	bl	8000a80 <__aeabi_dcmpeq>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d033      	beq.n	8004134 <_printf_float+0x26c>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4631      	mov	r1, r6
 80040d0:	4628      	mov	r0, r5
 80040d2:	4a35      	ldr	r2, [pc, #212]	; (80041a8 <_printf_float+0x2e0>)
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af51 	beq.w	8003f7e <_printf_float+0xb6>
 80040dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db02      	blt.n	80040ea <_printf_float+0x222>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07d8      	lsls	r0, r3, #31
 80040e8:	d50f      	bpl.n	800410a <_printf_float+0x242>
 80040ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af42 	beq.w	8003f7e <_printf_float+0xb6>
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	f104 091a 	add.w	r9, r4, #26
 8004102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004104:	3b01      	subs	r3, #1
 8004106:	4543      	cmp	r3, r8
 8004108:	dc09      	bgt.n	800411e <_printf_float+0x256>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	079b      	lsls	r3, r3, #30
 800410e:	f100 8104 	bmi.w	800431a <_printf_float+0x452>
 8004112:	68e0      	ldr	r0, [r4, #12]
 8004114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004116:	4298      	cmp	r0, r3
 8004118:	bfb8      	it	lt
 800411a:	4618      	movlt	r0, r3
 800411c:	e731      	b.n	8003f82 <_printf_float+0xba>
 800411e:	2301      	movs	r3, #1
 8004120:	464a      	mov	r2, r9
 8004122:	4631      	mov	r1, r6
 8004124:	4628      	mov	r0, r5
 8004126:	47b8      	blx	r7
 8004128:	3001      	adds	r0, #1
 800412a:	f43f af28 	beq.w	8003f7e <_printf_float+0xb6>
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	e7e6      	b.n	8004102 <_printf_float+0x23a>
 8004134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	dc38      	bgt.n	80041ac <_printf_float+0x2e4>
 800413a:	2301      	movs	r3, #1
 800413c:	4631      	mov	r1, r6
 800413e:	4628      	mov	r0, r5
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <_printf_float+0x2e0>)
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f af1a 	beq.w	8003f7e <_printf_float+0xb6>
 800414a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800414e:	4313      	orrs	r3, r2
 8004150:	d102      	bne.n	8004158 <_printf_float+0x290>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	d5d8      	bpl.n	800410a <_printf_float+0x242>
 8004158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	f43f af0b 	beq.w	8003f7e <_printf_float+0xb6>
 8004168:	f04f 0900 	mov.w	r9, #0
 800416c:	f104 0a1a 	add.w	sl, r4, #26
 8004170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004172:	425b      	negs	r3, r3
 8004174:	454b      	cmp	r3, r9
 8004176:	dc01      	bgt.n	800417c <_printf_float+0x2b4>
 8004178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800417a:	e794      	b.n	80040a6 <_printf_float+0x1de>
 800417c:	2301      	movs	r3, #1
 800417e:	4652      	mov	r2, sl
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f aef9 	beq.w	8003f7e <_printf_float+0xb6>
 800418c:	f109 0901 	add.w	r9, r9, #1
 8004190:	e7ee      	b.n	8004170 <_printf_float+0x2a8>
 8004192:	bf00      	nop
 8004194:	7fefffff 	.word	0x7fefffff
 8004198:	08008eae 	.word	0x08008eae
 800419c:	08008eb2 	.word	0x08008eb2
 80041a0:	08008eb6 	.word	0x08008eb6
 80041a4:	08008eba 	.word	0x08008eba
 80041a8:	08008ebe 	.word	0x08008ebe
 80041ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bfa8      	it	ge
 80041b4:	461a      	movge	r2, r3
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	4691      	mov	r9, r2
 80041ba:	dc37      	bgt.n	800422c <_printf_float+0x364>
 80041bc:	f04f 0b00 	mov.w	fp, #0
 80041c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041c4:	f104 021a 	add.w	r2, r4, #26
 80041c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041cc:	ebaa 0309 	sub.w	r3, sl, r9
 80041d0:	455b      	cmp	r3, fp
 80041d2:	dc33      	bgt.n	800423c <_printf_float+0x374>
 80041d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041d8:	429a      	cmp	r2, r3
 80041da:	db3b      	blt.n	8004254 <_printf_float+0x38c>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	07da      	lsls	r2, r3, #31
 80041e0:	d438      	bmi.n	8004254 <_printf_float+0x38c>
 80041e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80041e6:	eba2 0903 	sub.w	r9, r2, r3
 80041ea:	eba2 020a 	sub.w	r2, r2, sl
 80041ee:	4591      	cmp	r9, r2
 80041f0:	bfa8      	it	ge
 80041f2:	4691      	movge	r9, r2
 80041f4:	f1b9 0f00 	cmp.w	r9, #0
 80041f8:	dc34      	bgt.n	8004264 <_printf_float+0x39c>
 80041fa:	f04f 0800 	mov.w	r8, #0
 80041fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004202:	f104 0a1a 	add.w	sl, r4, #26
 8004206:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	eba3 0309 	sub.w	r3, r3, r9
 8004210:	4543      	cmp	r3, r8
 8004212:	f77f af7a 	ble.w	800410a <_printf_float+0x242>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	47b8      	blx	r7
 8004220:	3001      	adds	r0, #1
 8004222:	f43f aeac 	beq.w	8003f7e <_printf_float+0xb6>
 8004226:	f108 0801 	add.w	r8, r8, #1
 800422a:	e7ec      	b.n	8004206 <_printf_float+0x33e>
 800422c:	4613      	mov	r3, r2
 800422e:	4631      	mov	r1, r6
 8004230:	4642      	mov	r2, r8
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	d1c0      	bne.n	80041bc <_printf_float+0x2f4>
 800423a:	e6a0      	b.n	8003f7e <_printf_float+0xb6>
 800423c:	2301      	movs	r3, #1
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	920b      	str	r2, [sp, #44]	; 0x2c
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f ae99 	beq.w	8003f7e <_printf_float+0xb6>
 800424c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800424e:	f10b 0b01 	add.w	fp, fp, #1
 8004252:	e7b9      	b.n	80041c8 <_printf_float+0x300>
 8004254:	4631      	mov	r1, r6
 8004256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	d1bf      	bne.n	80041e2 <_printf_float+0x31a>
 8004262:	e68c      	b.n	8003f7e <_printf_float+0xb6>
 8004264:	464b      	mov	r3, r9
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	eb08 020a 	add.w	r2, r8, sl
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d1c2      	bne.n	80041fa <_printf_float+0x332>
 8004274:	e683      	b.n	8003f7e <_printf_float+0xb6>
 8004276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004278:	2a01      	cmp	r2, #1
 800427a:	dc01      	bgt.n	8004280 <_printf_float+0x3b8>
 800427c:	07db      	lsls	r3, r3, #31
 800427e:	d539      	bpl.n	80042f4 <_printf_float+0x42c>
 8004280:	2301      	movs	r3, #1
 8004282:	4642      	mov	r2, r8
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f ae77 	beq.w	8003f7e <_printf_float+0xb6>
 8004290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f ae6f 	beq.w	8003f7e <_printf_float+0xb6>
 80042a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042a4:	2200      	movs	r2, #0
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80042ac:	f7fc fbe8 	bl	8000a80 <__aeabi_dcmpeq>
 80042b0:	b9d8      	cbnz	r0, 80042ea <_printf_float+0x422>
 80042b2:	f109 33ff 	add.w	r3, r9, #4294967295
 80042b6:	f108 0201 	add.w	r2, r8, #1
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	d10e      	bne.n	80042e2 <_printf_float+0x41a>
 80042c4:	e65b      	b.n	8003f7e <_printf_float+0xb6>
 80042c6:	2301      	movs	r3, #1
 80042c8:	464a      	mov	r2, r9
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	f43f ae54 	beq.w	8003f7e <_printf_float+0xb6>
 80042d6:	f108 0801 	add.w	r8, r8, #1
 80042da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042dc:	3b01      	subs	r3, #1
 80042de:	4543      	cmp	r3, r8
 80042e0:	dcf1      	bgt.n	80042c6 <_printf_float+0x3fe>
 80042e2:	4653      	mov	r3, sl
 80042e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042e8:	e6de      	b.n	80040a8 <_printf_float+0x1e0>
 80042ea:	f04f 0800 	mov.w	r8, #0
 80042ee:	f104 091a 	add.w	r9, r4, #26
 80042f2:	e7f2      	b.n	80042da <_printf_float+0x412>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4642      	mov	r2, r8
 80042f8:	e7df      	b.n	80042ba <_printf_float+0x3f2>
 80042fa:	2301      	movs	r3, #1
 80042fc:	464a      	mov	r2, r9
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	47b8      	blx	r7
 8004304:	3001      	adds	r0, #1
 8004306:	f43f ae3a 	beq.w	8003f7e <_printf_float+0xb6>
 800430a:	f108 0801 	add.w	r8, r8, #1
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	4543      	cmp	r3, r8
 8004316:	dcf0      	bgt.n	80042fa <_printf_float+0x432>
 8004318:	e6fb      	b.n	8004112 <_printf_float+0x24a>
 800431a:	f04f 0800 	mov.w	r8, #0
 800431e:	f104 0919 	add.w	r9, r4, #25
 8004322:	e7f4      	b.n	800430e <_printf_float+0x446>

08004324 <_printf_common>:
 8004324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004328:	4616      	mov	r6, r2
 800432a:	4699      	mov	r9, r3
 800432c:	688a      	ldr	r2, [r1, #8]
 800432e:	690b      	ldr	r3, [r1, #16]
 8004330:	4607      	mov	r7, r0
 8004332:	4293      	cmp	r3, r2
 8004334:	bfb8      	it	lt
 8004336:	4613      	movlt	r3, r2
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800433e:	460c      	mov	r4, r1
 8004340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004344:	b10a      	cbz	r2, 800434a <_printf_common+0x26>
 8004346:	3301      	adds	r3, #1
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	0699      	lsls	r1, r3, #26
 800434e:	bf42      	ittt	mi
 8004350:	6833      	ldrmi	r3, [r6, #0]
 8004352:	3302      	addmi	r3, #2
 8004354:	6033      	strmi	r3, [r6, #0]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d106      	bne.n	800436c <_printf_common+0x48>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	6832      	ldr	r2, [r6, #0]
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	42ab      	cmp	r3, r5
 800436a:	dc2b      	bgt.n	80043c4 <_printf_common+0xa0>
 800436c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004370:	1e13      	subs	r3, r2, #0
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	bf18      	it	ne
 8004376:	2301      	movne	r3, #1
 8004378:	0692      	lsls	r2, r2, #26
 800437a:	d430      	bmi.n	80043de <_printf_common+0xba>
 800437c:	4649      	mov	r1, r9
 800437e:	4638      	mov	r0, r7
 8004380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d023      	beq.n	80043d2 <_printf_common+0xae>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	f003 0306 	and.w	r3, r3, #6
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf14      	ite	ne
 8004396:	2500      	movne	r5, #0
 8004398:	6833      	ldreq	r3, [r6, #0]
 800439a:	f04f 0600 	mov.w	r6, #0
 800439e:	bf08      	it	eq
 80043a0:	68e5      	ldreq	r5, [r4, #12]
 80043a2:	f104 041a 	add.w	r4, r4, #26
 80043a6:	bf08      	it	eq
 80043a8:	1aed      	subeq	r5, r5, r3
 80043aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043ae:	bf08      	it	eq
 80043b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bfc4      	itt	gt
 80043b8:	1a9b      	subgt	r3, r3, r2
 80043ba:	18ed      	addgt	r5, r5, r3
 80043bc:	42b5      	cmp	r5, r6
 80043be:	d11a      	bne.n	80043f6 <_printf_common+0xd2>
 80043c0:	2000      	movs	r0, #0
 80043c2:	e008      	b.n	80043d6 <_printf_common+0xb2>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4652      	mov	r2, sl
 80043c8:	4649      	mov	r1, r9
 80043ca:	4638      	mov	r0, r7
 80043cc:	47c0      	blx	r8
 80043ce:	3001      	adds	r0, #1
 80043d0:	d103      	bne.n	80043da <_printf_common+0xb6>
 80043d2:	f04f 30ff 	mov.w	r0, #4294967295
 80043d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043da:	3501      	adds	r5, #1
 80043dc:	e7c1      	b.n	8004362 <_printf_common+0x3e>
 80043de:	2030      	movs	r0, #48	; 0x30
 80043e0:	18e1      	adds	r1, r4, r3
 80043e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ec:	4422      	add	r2, r4
 80043ee:	3302      	adds	r3, #2
 80043f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f4:	e7c2      	b.n	800437c <_printf_common+0x58>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4622      	mov	r2, r4
 80043fa:	4649      	mov	r1, r9
 80043fc:	4638      	mov	r0, r7
 80043fe:	47c0      	blx	r8
 8004400:	3001      	adds	r0, #1
 8004402:	d0e6      	beq.n	80043d2 <_printf_common+0xae>
 8004404:	3601      	adds	r6, #1
 8004406:	e7d9      	b.n	80043bc <_printf_common+0x98>

08004408 <_printf_i>:
 8004408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	7e0f      	ldrb	r7, [r1, #24]
 800440e:	4691      	mov	r9, r2
 8004410:	2f78      	cmp	r7, #120	; 0x78
 8004412:	4680      	mov	r8, r0
 8004414:	460c      	mov	r4, r1
 8004416:	469a      	mov	sl, r3
 8004418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800441a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441e:	d807      	bhi.n	8004430 <_printf_i+0x28>
 8004420:	2f62      	cmp	r7, #98	; 0x62
 8004422:	d80a      	bhi.n	800443a <_printf_i+0x32>
 8004424:	2f00      	cmp	r7, #0
 8004426:	f000 80d5 	beq.w	80045d4 <_printf_i+0x1cc>
 800442a:	2f58      	cmp	r7, #88	; 0x58
 800442c:	f000 80c1 	beq.w	80045b2 <_printf_i+0x1aa>
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004438:	e03a      	b.n	80044b0 <_printf_i+0xa8>
 800443a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443e:	2b15      	cmp	r3, #21
 8004440:	d8f6      	bhi.n	8004430 <_printf_i+0x28>
 8004442:	a101      	add	r1, pc, #4	; (adr r1, 8004448 <_printf_i+0x40>)
 8004444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044b5 	.word	0x080044b5
 8004450:	08004431 	.word	0x08004431
 8004454:	08004431 	.word	0x08004431
 8004458:	08004431 	.word	0x08004431
 800445c:	08004431 	.word	0x08004431
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004431 	.word	0x08004431
 8004468:	08004431 	.word	0x08004431
 800446c:	08004431 	.word	0x08004431
 8004470:	08004431 	.word	0x08004431
 8004474:	080045bb 	.word	0x080045bb
 8004478:	080044e1 	.word	0x080044e1
 800447c:	08004575 	.word	0x08004575
 8004480:	08004431 	.word	0x08004431
 8004484:	08004431 	.word	0x08004431
 8004488:	080045dd 	.word	0x080045dd
 800448c:	08004431 	.word	0x08004431
 8004490:	080044e1 	.word	0x080044e1
 8004494:	08004431 	.word	0x08004431
 8004498:	08004431 	.word	0x08004431
 800449c:	0800457d 	.word	0x0800457d
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0a0      	b.n	80045f6 <_printf_i+0x1ee>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	0607      	lsls	r7, r0, #24
 80044ba:	f103 0104 	add.w	r1, r3, #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0xbe>
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	e003      	b.n	80044ce <_printf_i+0xc6>
 80044c6:	0646      	lsls	r6, r0, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0xba>
 80044ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	da03      	bge.n	80044da <_printf_i+0xd2>
 80044d2:	232d      	movs	r3, #45	; 0x2d
 80044d4:	4276      	negs	r6, r6
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	230a      	movs	r3, #10
 80044dc:	4859      	ldr	r0, [pc, #356]	; (8004644 <_printf_i+0x23c>)
 80044de:	e012      	b.n	8004506 <_printf_i+0xfe>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0605      	lsls	r5, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xe8>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xee>
 80044f0:	0641      	lsls	r1, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe4>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	2f6f      	cmp	r7, #111	; 0x6f
 80044f8:	bf0c      	ite	eq
 80044fa:	2308      	moveq	r3, #8
 80044fc:	230a      	movne	r3, #10
 80044fe:	4851      	ldr	r0, [pc, #324]	; (8004644 <_printf_i+0x23c>)
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	2d00      	cmp	r5, #0
 800450a:	bfa8      	it	ge
 800450c:	6821      	ldrge	r1, [r4, #0]
 800450e:	60a5      	str	r5, [r4, #8]
 8004510:	bfa4      	itt	ge
 8004512:	f021 0104 	bicge.w	r1, r1, #4
 8004516:	6021      	strge	r1, [r4, #0]
 8004518:	b90e      	cbnz	r6, 800451e <_printf_i+0x116>
 800451a:	2d00      	cmp	r5, #0
 800451c:	d04b      	beq.n	80045b6 <_printf_i+0x1ae>
 800451e:	4615      	mov	r5, r2
 8004520:	fbb6 f1f3 	udiv	r1, r6, r3
 8004524:	fb03 6711 	mls	r7, r3, r1, r6
 8004528:	5dc7      	ldrb	r7, [r0, r7]
 800452a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452e:	4637      	mov	r7, r6
 8004530:	42bb      	cmp	r3, r7
 8004532:	460e      	mov	r6, r1
 8004534:	d9f4      	bls.n	8004520 <_printf_i+0x118>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d10b      	bne.n	8004552 <_printf_i+0x14a>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	07de      	lsls	r6, r3, #31
 800453e:	d508      	bpl.n	8004552 <_printf_i+0x14a>
 8004540:	6923      	ldr	r3, [r4, #16]
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	4299      	cmp	r1, r3
 8004546:	bfde      	ittt	le
 8004548:	2330      	movle	r3, #48	; 0x30
 800454a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004552:	1b52      	subs	r2, r2, r5
 8004554:	6122      	str	r2, [r4, #16]
 8004556:	464b      	mov	r3, r9
 8004558:	4621      	mov	r1, r4
 800455a:	4640      	mov	r0, r8
 800455c:	f8cd a000 	str.w	sl, [sp]
 8004560:	aa03      	add	r2, sp, #12
 8004562:	f7ff fedf 	bl	8004324 <_printf_common>
 8004566:	3001      	adds	r0, #1
 8004568:	d14a      	bne.n	8004600 <_printf_i+0x1f8>
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	b004      	add	sp, #16
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	2778      	movs	r7, #120	; 0x78
 800457e:	4832      	ldr	r0, [pc, #200]	; (8004648 <_printf_i+0x240>)
 8004580:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	6829      	ldr	r1, [r5, #0]
 8004588:	061f      	lsls	r7, r3, #24
 800458a:	f851 6b04 	ldr.w	r6, [r1], #4
 800458e:	d402      	bmi.n	8004596 <_printf_i+0x18e>
 8004590:	065f      	lsls	r7, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2b6      	uxthmi	r6, r6
 8004596:	07df      	lsls	r7, r3, #31
 8004598:	bf48      	it	mi
 800459a:	f043 0320 	orrmi.w	r3, r3, #32
 800459e:	6029      	str	r1, [r5, #0]
 80045a0:	bf48      	it	mi
 80045a2:	6023      	strmi	r3, [r4, #0]
 80045a4:	b91e      	cbnz	r6, 80045ae <_printf_i+0x1a6>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f023 0320 	bic.w	r3, r3, #32
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	2310      	movs	r3, #16
 80045b0:	e7a6      	b.n	8004500 <_printf_i+0xf8>
 80045b2:	4824      	ldr	r0, [pc, #144]	; (8004644 <_printf_i+0x23c>)
 80045b4:	e7e4      	b.n	8004580 <_printf_i+0x178>
 80045b6:	4615      	mov	r5, r2
 80045b8:	e7bd      	b.n	8004536 <_printf_i+0x12e>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	6826      	ldr	r6, [r4, #0]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6961      	ldr	r1, [r4, #20]
 80045c2:	6028      	str	r0, [r5, #0]
 80045c4:	0635      	lsls	r5, r6, #24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0x1c6>
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <_printf_i+0x1cc>
 80045ce:	0670      	lsls	r0, r6, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0x1c2>
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	4615      	mov	r5, r2
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	e7bc      	b.n	8004556 <_printf_i+0x14e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	602a      	str	r2, [r5, #0]
 80045e4:	681d      	ldr	r5, [r3, #0]
 80045e6:	6862      	ldr	r2, [r4, #4]
 80045e8:	4628      	mov	r0, r5
 80045ea:	f000 fce4 	bl	8004fb6 <memchr>
 80045ee:	b108      	cbz	r0, 80045f4 <_printf_i+0x1ec>
 80045f0:	1b40      	subs	r0, r0, r5
 80045f2:	6060      	str	r0, [r4, #4]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fe:	e7aa      	b.n	8004556 <_printf_i+0x14e>
 8004600:	462a      	mov	r2, r5
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	47d0      	blx	sl
 800460a:	3001      	adds	r0, #1
 800460c:	d0ad      	beq.n	800456a <_printf_i+0x162>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	079b      	lsls	r3, r3, #30
 8004612:	d413      	bmi.n	800463c <_printf_i+0x234>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e7a6      	b.n	800456e <_printf_i+0x166>
 8004620:	2301      	movs	r3, #1
 8004622:	4632      	mov	r2, r6
 8004624:	4649      	mov	r1, r9
 8004626:	4640      	mov	r0, r8
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d09d      	beq.n	800456a <_printf_i+0x162>
 800462e:	3501      	adds	r5, #1
 8004630:	68e3      	ldr	r3, [r4, #12]
 8004632:	9903      	ldr	r1, [sp, #12]
 8004634:	1a5b      	subs	r3, r3, r1
 8004636:	42ab      	cmp	r3, r5
 8004638:	dcf2      	bgt.n	8004620 <_printf_i+0x218>
 800463a:	e7eb      	b.n	8004614 <_printf_i+0x20c>
 800463c:	2500      	movs	r5, #0
 800463e:	f104 0619 	add.w	r6, r4, #25
 8004642:	e7f5      	b.n	8004630 <_printf_i+0x228>
 8004644:	08008ec0 	.word	0x08008ec0
 8004648:	08008ed1 	.word	0x08008ed1

0800464c <_scanf_float>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	b087      	sub	sp, #28
 8004652:	9303      	str	r3, [sp, #12]
 8004654:	688b      	ldr	r3, [r1, #8]
 8004656:	4617      	mov	r7, r2
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800465e:	bf85      	ittet	hi
 8004660:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004664:	195b      	addhi	r3, r3, r5
 8004666:	2300      	movls	r3, #0
 8004668:	9302      	strhi	r3, [sp, #8]
 800466a:	bf88      	it	hi
 800466c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004670:	468b      	mov	fp, r1
 8004672:	f04f 0500 	mov.w	r5, #0
 8004676:	bf8c      	ite	hi
 8004678:	608b      	strhi	r3, [r1, #8]
 800467a:	9302      	strls	r3, [sp, #8]
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	4680      	mov	r8, r0
 8004680:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004684:	f84b 3b1c 	str.w	r3, [fp], #28
 8004688:	460c      	mov	r4, r1
 800468a:	465e      	mov	r6, fp
 800468c:	46aa      	mov	sl, r5
 800468e:	46a9      	mov	r9, r5
 8004690:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004694:	9501      	str	r5, [sp, #4]
 8004696:	68a2      	ldr	r2, [r4, #8]
 8004698:	b152      	cbz	r2, 80046b0 <_scanf_float+0x64>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b4e      	cmp	r3, #78	; 0x4e
 80046a0:	d864      	bhi.n	800476c <_scanf_float+0x120>
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d83c      	bhi.n	8004720 <_scanf_float+0xd4>
 80046a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80046aa:	b2c8      	uxtb	r0, r1
 80046ac:	280e      	cmp	r0, #14
 80046ae:	d93a      	bls.n	8004726 <_scanf_float+0xda>
 80046b0:	f1b9 0f00 	cmp.w	r9, #0
 80046b4:	d003      	beq.n	80046be <_scanf_float+0x72>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046c2:	f1ba 0f01 	cmp.w	sl, #1
 80046c6:	f200 8113 	bhi.w	80048f0 <_scanf_float+0x2a4>
 80046ca:	455e      	cmp	r6, fp
 80046cc:	f200 8105 	bhi.w	80048da <_scanf_float+0x28e>
 80046d0:	2501      	movs	r5, #1
 80046d2:	4628      	mov	r0, r5
 80046d4:	b007      	add	sp, #28
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80046de:	2a0d      	cmp	r2, #13
 80046e0:	d8e6      	bhi.n	80046b0 <_scanf_float+0x64>
 80046e2:	a101      	add	r1, pc, #4	; (adr r1, 80046e8 <_scanf_float+0x9c>)
 80046e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80046e8:	08004827 	.word	0x08004827
 80046ec:	080046b1 	.word	0x080046b1
 80046f0:	080046b1 	.word	0x080046b1
 80046f4:	080046b1 	.word	0x080046b1
 80046f8:	08004887 	.word	0x08004887
 80046fc:	0800485f 	.word	0x0800485f
 8004700:	080046b1 	.word	0x080046b1
 8004704:	080046b1 	.word	0x080046b1
 8004708:	08004835 	.word	0x08004835
 800470c:	080046b1 	.word	0x080046b1
 8004710:	080046b1 	.word	0x080046b1
 8004714:	080046b1 	.word	0x080046b1
 8004718:	080046b1 	.word	0x080046b1
 800471c:	080047ed 	.word	0x080047ed
 8004720:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004724:	e7db      	b.n	80046de <_scanf_float+0x92>
 8004726:	290e      	cmp	r1, #14
 8004728:	d8c2      	bhi.n	80046b0 <_scanf_float+0x64>
 800472a:	a001      	add	r0, pc, #4	; (adr r0, 8004730 <_scanf_float+0xe4>)
 800472c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004730:	080047df 	.word	0x080047df
 8004734:	080046b1 	.word	0x080046b1
 8004738:	080047df 	.word	0x080047df
 800473c:	08004873 	.word	0x08004873
 8004740:	080046b1 	.word	0x080046b1
 8004744:	0800478d 	.word	0x0800478d
 8004748:	080047c9 	.word	0x080047c9
 800474c:	080047c9 	.word	0x080047c9
 8004750:	080047c9 	.word	0x080047c9
 8004754:	080047c9 	.word	0x080047c9
 8004758:	080047c9 	.word	0x080047c9
 800475c:	080047c9 	.word	0x080047c9
 8004760:	080047c9 	.word	0x080047c9
 8004764:	080047c9 	.word	0x080047c9
 8004768:	080047c9 	.word	0x080047c9
 800476c:	2b6e      	cmp	r3, #110	; 0x6e
 800476e:	d809      	bhi.n	8004784 <_scanf_float+0x138>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d8b2      	bhi.n	80046da <_scanf_float+0x8e>
 8004774:	2b54      	cmp	r3, #84	; 0x54
 8004776:	d077      	beq.n	8004868 <_scanf_float+0x21c>
 8004778:	2b59      	cmp	r3, #89	; 0x59
 800477a:	d199      	bne.n	80046b0 <_scanf_float+0x64>
 800477c:	2d07      	cmp	r5, #7
 800477e:	d197      	bne.n	80046b0 <_scanf_float+0x64>
 8004780:	2508      	movs	r5, #8
 8004782:	e029      	b.n	80047d8 <_scanf_float+0x18c>
 8004784:	2b74      	cmp	r3, #116	; 0x74
 8004786:	d06f      	beq.n	8004868 <_scanf_float+0x21c>
 8004788:	2b79      	cmp	r3, #121	; 0x79
 800478a:	e7f6      	b.n	800477a <_scanf_float+0x12e>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	05c8      	lsls	r0, r1, #23
 8004790:	d51a      	bpl.n	80047c8 <_scanf_float+0x17c>
 8004792:	9b02      	ldr	r3, [sp, #8]
 8004794:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004798:	6021      	str	r1, [r4, #0]
 800479a:	f109 0901 	add.w	r9, r9, #1
 800479e:	b11b      	cbz	r3, 80047a8 <_scanf_float+0x15c>
 80047a0:	3b01      	subs	r3, #1
 80047a2:	3201      	adds	r2, #1
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	60a2      	str	r2, [r4, #8]
 80047a8:	68a3      	ldr	r3, [r4, #8]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	60a3      	str	r3, [r4, #8]
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	3301      	adds	r3, #1
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	f340 8084 	ble.w	80048c8 <_scanf_float+0x27c>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	3301      	adds	r3, #1
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	e766      	b.n	8004696 <_scanf_float+0x4a>
 80047c8:	eb1a 0f05 	cmn.w	sl, r5
 80047cc:	f47f af70 	bne.w	80046b0 <_scanf_float+0x64>
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	f806 3b01 	strb.w	r3, [r6], #1
 80047dc:	e7e4      	b.n	80047a8 <_scanf_float+0x15c>
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	0610      	lsls	r0, r2, #24
 80047e2:	f57f af65 	bpl.w	80046b0 <_scanf_float+0x64>
 80047e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ea:	e7f4      	b.n	80047d6 <_scanf_float+0x18a>
 80047ec:	f1ba 0f00 	cmp.w	sl, #0
 80047f0:	d10e      	bne.n	8004810 <_scanf_float+0x1c4>
 80047f2:	f1b9 0f00 	cmp.w	r9, #0
 80047f6:	d10e      	bne.n	8004816 <_scanf_float+0x1ca>
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80047fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004802:	d108      	bne.n	8004816 <_scanf_float+0x1ca>
 8004804:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004808:	f04f 0a01 	mov.w	sl, #1
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	e7e3      	b.n	80047d8 <_scanf_float+0x18c>
 8004810:	f1ba 0f02 	cmp.w	sl, #2
 8004814:	d055      	beq.n	80048c2 <_scanf_float+0x276>
 8004816:	2d01      	cmp	r5, #1
 8004818:	d002      	beq.n	8004820 <_scanf_float+0x1d4>
 800481a:	2d04      	cmp	r5, #4
 800481c:	f47f af48 	bne.w	80046b0 <_scanf_float+0x64>
 8004820:	3501      	adds	r5, #1
 8004822:	b2ed      	uxtb	r5, r5
 8004824:	e7d8      	b.n	80047d8 <_scanf_float+0x18c>
 8004826:	f1ba 0f01 	cmp.w	sl, #1
 800482a:	f47f af41 	bne.w	80046b0 <_scanf_float+0x64>
 800482e:	f04f 0a02 	mov.w	sl, #2
 8004832:	e7d1      	b.n	80047d8 <_scanf_float+0x18c>
 8004834:	b97d      	cbnz	r5, 8004856 <_scanf_float+0x20a>
 8004836:	f1b9 0f00 	cmp.w	r9, #0
 800483a:	f47f af3c 	bne.w	80046b6 <_scanf_float+0x6a>
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004844:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004848:	f47f af39 	bne.w	80046be <_scanf_float+0x72>
 800484c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004850:	2501      	movs	r5, #1
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	e7c0      	b.n	80047d8 <_scanf_float+0x18c>
 8004856:	2d03      	cmp	r5, #3
 8004858:	d0e2      	beq.n	8004820 <_scanf_float+0x1d4>
 800485a:	2d05      	cmp	r5, #5
 800485c:	e7de      	b.n	800481c <_scanf_float+0x1d0>
 800485e:	2d02      	cmp	r5, #2
 8004860:	f47f af26 	bne.w	80046b0 <_scanf_float+0x64>
 8004864:	2503      	movs	r5, #3
 8004866:	e7b7      	b.n	80047d8 <_scanf_float+0x18c>
 8004868:	2d06      	cmp	r5, #6
 800486a:	f47f af21 	bne.w	80046b0 <_scanf_float+0x64>
 800486e:	2507      	movs	r5, #7
 8004870:	e7b2      	b.n	80047d8 <_scanf_float+0x18c>
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	0591      	lsls	r1, r2, #22
 8004876:	f57f af1b 	bpl.w	80046b0 <_scanf_float+0x64>
 800487a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800487e:	6022      	str	r2, [r4, #0]
 8004880:	f8cd 9004 	str.w	r9, [sp, #4]
 8004884:	e7a8      	b.n	80047d8 <_scanf_float+0x18c>
 8004886:	6822      	ldr	r2, [r4, #0]
 8004888:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800488c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004890:	d006      	beq.n	80048a0 <_scanf_float+0x254>
 8004892:	0550      	lsls	r0, r2, #21
 8004894:	f57f af0c 	bpl.w	80046b0 <_scanf_float+0x64>
 8004898:	f1b9 0f00 	cmp.w	r9, #0
 800489c:	f43f af0f 	beq.w	80046be <_scanf_float+0x72>
 80048a0:	0591      	lsls	r1, r2, #22
 80048a2:	bf58      	it	pl
 80048a4:	9901      	ldrpl	r1, [sp, #4]
 80048a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048aa:	bf58      	it	pl
 80048ac:	eba9 0101 	subpl.w	r1, r9, r1
 80048b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80048b4:	f04f 0900 	mov.w	r9, #0
 80048b8:	bf58      	it	pl
 80048ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048be:	6022      	str	r2, [r4, #0]
 80048c0:	e78a      	b.n	80047d8 <_scanf_float+0x18c>
 80048c2:	f04f 0a03 	mov.w	sl, #3
 80048c6:	e787      	b.n	80047d8 <_scanf_float+0x18c>
 80048c8:	4639      	mov	r1, r7
 80048ca:	4640      	mov	r0, r8
 80048cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048d0:	4798      	blx	r3
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f43f aedf 	beq.w	8004696 <_scanf_float+0x4a>
 80048d8:	e6ea      	b.n	80046b0 <_scanf_float+0x64>
 80048da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048de:	463a      	mov	r2, r7
 80048e0:	4640      	mov	r0, r8
 80048e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048e6:	4798      	blx	r3
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	e6ec      	b.n	80046ca <_scanf_float+0x7e>
 80048f0:	1e6b      	subs	r3, r5, #1
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d825      	bhi.n	8004942 <_scanf_float+0x2f6>
 80048f6:	2d02      	cmp	r5, #2
 80048f8:	d836      	bhi.n	8004968 <_scanf_float+0x31c>
 80048fa:	455e      	cmp	r6, fp
 80048fc:	f67f aee8 	bls.w	80046d0 <_scanf_float+0x84>
 8004900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004904:	463a      	mov	r2, r7
 8004906:	4640      	mov	r0, r8
 8004908:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800490c:	4798      	blx	r3
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	3b01      	subs	r3, #1
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	e7f1      	b.n	80048fa <_scanf_float+0x2ae>
 8004916:	9802      	ldr	r0, [sp, #8]
 8004918:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800491c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004920:	463a      	mov	r2, r7
 8004922:	9002      	str	r0, [sp, #8]
 8004924:	4640      	mov	r0, r8
 8004926:	4798      	blx	r3
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	3b01      	subs	r3, #1
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004932:	fa5f fa8a 	uxtb.w	sl, sl
 8004936:	f1ba 0f02 	cmp.w	sl, #2
 800493a:	d1ec      	bne.n	8004916 <_scanf_float+0x2ca>
 800493c:	3d03      	subs	r5, #3
 800493e:	b2ed      	uxtb	r5, r5
 8004940:	1b76      	subs	r6, r6, r5
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	05da      	lsls	r2, r3, #23
 8004946:	d52f      	bpl.n	80049a8 <_scanf_float+0x35c>
 8004948:	055b      	lsls	r3, r3, #21
 800494a:	d510      	bpl.n	800496e <_scanf_float+0x322>
 800494c:	455e      	cmp	r6, fp
 800494e:	f67f aebf 	bls.w	80046d0 <_scanf_float+0x84>
 8004952:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004956:	463a      	mov	r2, r7
 8004958:	4640      	mov	r0, r8
 800495a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800495e:	4798      	blx	r3
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	3b01      	subs	r3, #1
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	e7f1      	b.n	800494c <_scanf_float+0x300>
 8004968:	46aa      	mov	sl, r5
 800496a:	9602      	str	r6, [sp, #8]
 800496c:	e7df      	b.n	800492e <_scanf_float+0x2e2>
 800496e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	2965      	cmp	r1, #101	; 0x65
 8004976:	f103 33ff 	add.w	r3, r3, #4294967295
 800497a:	f106 35ff 	add.w	r5, r6, #4294967295
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	d00c      	beq.n	800499c <_scanf_float+0x350>
 8004982:	2945      	cmp	r1, #69	; 0x45
 8004984:	d00a      	beq.n	800499c <_scanf_float+0x350>
 8004986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800498a:	463a      	mov	r2, r7
 800498c:	4640      	mov	r0, r8
 800498e:	4798      	blx	r3
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004996:	3b01      	subs	r3, #1
 8004998:	1eb5      	subs	r5, r6, #2
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	463a      	mov	r2, r7
 800499e:	4640      	mov	r0, r8
 80049a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a4:	4798      	blx	r3
 80049a6:	462e      	mov	r6, r5
 80049a8:	6825      	ldr	r5, [r4, #0]
 80049aa:	f015 0510 	ands.w	r5, r5, #16
 80049ae:	d155      	bne.n	8004a5c <_scanf_float+0x410>
 80049b0:	7035      	strb	r5, [r6, #0]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d11d      	bne.n	80049fa <_scanf_float+0x3ae>
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	454b      	cmp	r3, r9
 80049c2:	eba3 0209 	sub.w	r2, r3, r9
 80049c6:	d125      	bne.n	8004a14 <_scanf_float+0x3c8>
 80049c8:	2200      	movs	r2, #0
 80049ca:	4659      	mov	r1, fp
 80049cc:	4640      	mov	r0, r8
 80049ce:	f002 fd23 	bl	8007418 <_strtod_r>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	f8d4 c000 	ldr.w	ip, [r4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f01c 0f02 	tst.w	ip, #2
 80049de:	4606      	mov	r6, r0
 80049e0:	460f      	mov	r7, r1
 80049e2:	f103 0204 	add.w	r2, r3, #4
 80049e6:	d020      	beq.n	8004a2a <_scanf_float+0x3de>
 80049e8:	9903      	ldr	r1, [sp, #12]
 80049ea:	600a      	str	r2, [r1, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	e9c3 6700 	strd	r6, r7, [r3]
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60e3      	str	r3, [r4, #12]
 80049f8:	e66b      	b.n	80046d2 <_scanf_float+0x86>
 80049fa:	9b04      	ldr	r3, [sp, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0e3      	beq.n	80049c8 <_scanf_float+0x37c>
 8004a00:	9905      	ldr	r1, [sp, #20]
 8004a02:	230a      	movs	r3, #10
 8004a04:	462a      	mov	r2, r5
 8004a06:	4640      	mov	r0, r8
 8004a08:	3101      	adds	r1, #1
 8004a0a:	f002 fd89 	bl	8007520 <_strtol_r>
 8004a0e:	9b04      	ldr	r3, [sp, #16]
 8004a10:	9e05      	ldr	r6, [sp, #20]
 8004a12:	1ac2      	subs	r2, r0, r3
 8004a14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004a18:	429e      	cmp	r6, r3
 8004a1a:	bf28      	it	cs
 8004a1c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004a20:	4630      	mov	r0, r6
 8004a22:	490f      	ldr	r1, [pc, #60]	; (8004a60 <_scanf_float+0x414>)
 8004a24:	f000 f950 	bl	8004cc8 <siprintf>
 8004a28:	e7ce      	b.n	80049c8 <_scanf_float+0x37c>
 8004a2a:	f01c 0f04 	tst.w	ip, #4
 8004a2e:	d1db      	bne.n	80049e8 <_scanf_float+0x39c>
 8004a30:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004a34:	f8cc 2000 	str.w	r2, [ip]
 8004a38:	f8d3 8000 	ldr.w	r8, [r3]
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	f7fc f850 	bl	8000ae4 <__aeabi_dcmpun>
 8004a44:	b128      	cbz	r0, 8004a52 <_scanf_float+0x406>
 8004a46:	4807      	ldr	r0, [pc, #28]	; (8004a64 <_scanf_float+0x418>)
 8004a48:	f000 fac4 	bl	8004fd4 <nanf>
 8004a4c:	f8c8 0000 	str.w	r0, [r8]
 8004a50:	e7cf      	b.n	80049f2 <_scanf_float+0x3a6>
 8004a52:	4630      	mov	r0, r6
 8004a54:	4639      	mov	r1, r7
 8004a56:	f7fc f8a3 	bl	8000ba0 <__aeabi_d2f>
 8004a5a:	e7f7      	b.n	8004a4c <_scanf_float+0x400>
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	e638      	b.n	80046d2 <_scanf_float+0x86>
 8004a60:	08008ee2 	.word	0x08008ee2
 8004a64:	08009275 	.word	0x08009275

08004a68 <std>:
 8004a68:	2300      	movs	r3, #0
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a76:	6083      	str	r3, [r0, #8]
 8004a78:	8181      	strh	r1, [r0, #12]
 8004a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a7c:	81c2      	strh	r2, [r0, #14]
 8004a7e:	6183      	str	r3, [r0, #24]
 8004a80:	4619      	mov	r1, r3
 8004a82:	2208      	movs	r2, #8
 8004a84:	305c      	adds	r0, #92	; 0x5c
 8004a86:	f000 fa17 	bl	8004eb8 <memset>
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <std+0x58>)
 8004a8c:	6224      	str	r4, [r4, #32]
 8004a8e:	6263      	str	r3, [r4, #36]	; 0x24
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <std+0x5c>)
 8004a92:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <std+0x60>)
 8004a96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <std+0x64>)
 8004a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <std+0x68>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d006      	beq.n	8004ab0 <std+0x48>
 8004aa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004aa6:	4294      	cmp	r4, r2
 8004aa8:	d002      	beq.n	8004ab0 <std+0x48>
 8004aaa:	33d0      	adds	r3, #208	; 0xd0
 8004aac:	429c      	cmp	r4, r3
 8004aae:	d105      	bne.n	8004abc <std+0x54>
 8004ab0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab8:	f000 ba7a 	b.w	8004fb0 <__retarget_lock_init_recursive>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	bf00      	nop
 8004ac0:	08004d09 	.word	0x08004d09
 8004ac4:	08004d2b 	.word	0x08004d2b
 8004ac8:	08004d63 	.word	0x08004d63
 8004acc:	08004d87 	.word	0x08004d87
 8004ad0:	200002ec 	.word	0x200002ec

08004ad4 <stdio_exit_handler>:
 8004ad4:	4a02      	ldr	r2, [pc, #8]	; (8004ae0 <stdio_exit_handler+0xc>)
 8004ad6:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <stdio_exit_handler+0x10>)
 8004ad8:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <stdio_exit_handler+0x14>)
 8004ada:	f000 b869 	b.w	8004bb0 <_fwalk_sglue>
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	08007b5d 	.word	0x08007b5d
 8004ae8:	20000018 	.word	0x20000018

08004aec <cleanup_stdio>:
 8004aec:	6841      	ldr	r1, [r0, #4]
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <cleanup_stdio+0x34>)
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4299      	cmp	r1, r3
 8004af4:	4604      	mov	r4, r0
 8004af6:	d001      	beq.n	8004afc <cleanup_stdio+0x10>
 8004af8:	f003 f830 	bl	8007b5c <_fflush_r>
 8004afc:	68a1      	ldr	r1, [r4, #8]
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <cleanup_stdio+0x38>)
 8004b00:	4299      	cmp	r1, r3
 8004b02:	d002      	beq.n	8004b0a <cleanup_stdio+0x1e>
 8004b04:	4620      	mov	r0, r4
 8004b06:	f003 f829 	bl	8007b5c <_fflush_r>
 8004b0a:	68e1      	ldr	r1, [r4, #12]
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <cleanup_stdio+0x3c>)
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d004      	beq.n	8004b1c <cleanup_stdio+0x30>
 8004b12:	4620      	mov	r0, r4
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	f003 b820 	b.w	8007b5c <_fflush_r>
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	200002ec 	.word	0x200002ec
 8004b24:	20000354 	.word	0x20000354
 8004b28:	200003bc 	.word	0x200003bc

08004b2c <global_stdio_init.part.0>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <global_stdio_init.part.0+0x30>)
 8004b30:	4c0b      	ldr	r4, [pc, #44]	; (8004b60 <global_stdio_init.part.0+0x34>)
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <global_stdio_init.part.0+0x38>)
 8004b34:	4620      	mov	r0, r4
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	2104      	movs	r1, #4
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f7ff ff94 	bl	8004a68 <std>
 8004b40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b44:	2201      	movs	r2, #1
 8004b46:	2109      	movs	r1, #9
 8004b48:	f7ff ff8e 	bl	8004a68 <std>
 8004b4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b50:	2202      	movs	r2, #2
 8004b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b56:	2112      	movs	r1, #18
 8004b58:	f7ff bf86 	b.w	8004a68 <std>
 8004b5c:	20000424 	.word	0x20000424
 8004b60:	200002ec 	.word	0x200002ec
 8004b64:	08004ad5 	.word	0x08004ad5

08004b68 <__sfp_lock_acquire>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__sfp_lock_acquire+0x8>)
 8004b6a:	f000 ba22 	b.w	8004fb2 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	2000042d 	.word	0x2000042d

08004b74 <__sfp_lock_release>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__sfp_lock_release+0x8>)
 8004b76:	f000 ba1d 	b.w	8004fb4 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	2000042d 	.word	0x2000042d

08004b80 <__sinit>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	f7ff fff0 	bl	8004b68 <__sfp_lock_acquire>
 8004b88:	6a23      	ldr	r3, [r4, #32]
 8004b8a:	b11b      	cbz	r3, 8004b94 <__sinit+0x14>
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b90:	f7ff bff0 	b.w	8004b74 <__sfp_lock_release>
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <__sinit+0x28>)
 8004b96:	6223      	str	r3, [r4, #32]
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <__sinit+0x2c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f5      	bne.n	8004b8c <__sinit+0xc>
 8004ba0:	f7ff ffc4 	bl	8004b2c <global_stdio_init.part.0>
 8004ba4:	e7f2      	b.n	8004b8c <__sinit+0xc>
 8004ba6:	bf00      	nop
 8004ba8:	08004aed 	.word	0x08004aed
 8004bac:	20000424 	.word	0x20000424

08004bb0 <_fwalk_sglue>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	2600      	movs	r6, #0
 8004bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bc4:	d505      	bpl.n	8004bd2 <_fwalk_sglue+0x22>
 8004bc6:	6824      	ldr	r4, [r4, #0]
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	d1f7      	bne.n	8004bbc <_fwalk_sglue+0xc>
 8004bcc:	4630      	mov	r0, r6
 8004bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd2:	89ab      	ldrh	r3, [r5, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d907      	bls.n	8004be8 <_fwalk_sglue+0x38>
 8004bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	d003      	beq.n	8004be8 <_fwalk_sglue+0x38>
 8004be0:	4629      	mov	r1, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	4306      	orrs	r6, r0
 8004be8:	3568      	adds	r5, #104	; 0x68
 8004bea:	e7e9      	b.n	8004bc0 <_fwalk_sglue+0x10>

08004bec <iprintf>:
 8004bec:	b40f      	push	{r0, r1, r2, r3}
 8004bee:	b507      	push	{r0, r1, r2, lr}
 8004bf0:	4906      	ldr	r1, [pc, #24]	; (8004c0c <iprintf+0x20>)
 8004bf2:	ab04      	add	r3, sp, #16
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfa:	6881      	ldr	r1, [r0, #8]
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	f002 fe11 	bl	8007824 <_vfiprintf_r>
 8004c02:	b003      	add	sp, #12
 8004c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c08:	b004      	add	sp, #16
 8004c0a:	4770      	bx	lr
 8004c0c:	20000064 	.word	0x20000064

08004c10 <_puts_r>:
 8004c10:	6a03      	ldr	r3, [r0, #32]
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	4605      	mov	r5, r0
 8004c16:	460e      	mov	r6, r1
 8004c18:	6884      	ldr	r4, [r0, #8]
 8004c1a:	b90b      	cbnz	r3, 8004c20 <_puts_r+0x10>
 8004c1c:	f7ff ffb0 	bl	8004b80 <__sinit>
 8004c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c22:	07db      	lsls	r3, r3, #31
 8004c24:	d405      	bmi.n	8004c32 <_puts_r+0x22>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	0598      	lsls	r0, r3, #22
 8004c2a:	d402      	bmi.n	8004c32 <_puts_r+0x22>
 8004c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c2e:	f000 f9c0 	bl	8004fb2 <__retarget_lock_acquire_recursive>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	0719      	lsls	r1, r3, #28
 8004c36:	d513      	bpl.n	8004c60 <_puts_r+0x50>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	b18b      	cbz	r3, 8004c60 <_puts_r+0x50>
 8004c3c:	3e01      	subs	r6, #1
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	b9e9      	cbnz	r1, 8004c86 <_puts_r+0x76>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da2e      	bge.n	8004cac <_puts_r+0x9c>
 8004c4e:	4622      	mov	r2, r4
 8004c50:	210a      	movs	r1, #10
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 f89b 	bl	8004d8e <__swbuf_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d007      	beq.n	8004c6c <_puts_r+0x5c>
 8004c5c:	250a      	movs	r5, #10
 8004c5e:	e007      	b.n	8004c70 <_puts_r+0x60>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f8d0 	bl	8004e08 <__swsetup_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d0e7      	beq.n	8004c3c <_puts_r+0x2c>
 8004c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c72:	07da      	lsls	r2, r3, #31
 8004c74:	d405      	bmi.n	8004c82 <_puts_r+0x72>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	d402      	bmi.n	8004c82 <_puts_r+0x72>
 8004c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7e:	f000 f999 	bl	8004fb4 <__retarget_lock_release_recursive>
 8004c82:	4628      	mov	r0, r5
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da04      	bge.n	8004c94 <_puts_r+0x84>
 8004c8a:	69a2      	ldr	r2, [r4, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	dc06      	bgt.n	8004c9e <_puts_r+0x8e>
 8004c90:	290a      	cmp	r1, #10
 8004c92:	d004      	beq.n	8004c9e <_puts_r+0x8e>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	7019      	strb	r1, [r3, #0]
 8004c9c:	e7cf      	b.n	8004c3e <_puts_r+0x2e>
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f874 	bl	8004d8e <__swbuf_r>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1c9      	bne.n	8004c3e <_puts_r+0x2e>
 8004caa:	e7df      	b.n	8004c6c <_puts_r+0x5c>
 8004cac:	250a      	movs	r5, #10
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	6022      	str	r2, [r4, #0]
 8004cb4:	701d      	strb	r5, [r3, #0]
 8004cb6:	e7db      	b.n	8004c70 <_puts_r+0x60>

08004cb8 <puts>:
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <puts+0xc>)
 8004cba:	4601      	mov	r1, r0
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f7ff bfa7 	b.w	8004c10 <_puts_r>
 8004cc2:	bf00      	nop
 8004cc4:	20000064 	.word	0x20000064

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cce:	b500      	push	{lr}
 8004cd0:	b09c      	sub	sp, #112	; 0x70
 8004cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	9006      	str	r0, [sp, #24]
 8004cd8:	9107      	str	r1, [sp, #28]
 8004cda:	9104      	str	r1, [sp, #16]
 8004cdc:	4808      	ldr	r0, [pc, #32]	; (8004d00 <siprintf+0x38>)
 8004cde:	4909      	ldr	r1, [pc, #36]	; (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	a902      	add	r1, sp, #8
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	f002 fc74 	bl	80075d8 <_svfiprintf_r>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	; 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	20000064 	.word	0x20000064
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <__sread>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	f000 f900 	bl	8004f14 <_read_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	bfab      	itete	ge
 8004d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d1c:	181b      	addge	r3, r3, r0
 8004d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d22:	bfac      	ite	ge
 8004d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d26:	81a3      	strhlt	r3, [r4, #12]
 8004d28:	bd10      	pop	{r4, pc}

08004d2a <__swrite>:
 8004d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2e:	461f      	mov	r7, r3
 8004d30:	898b      	ldrh	r3, [r1, #12]
 8004d32:	4605      	mov	r5, r0
 8004d34:	05db      	lsls	r3, r3, #23
 8004d36:	460c      	mov	r4, r1
 8004d38:	4616      	mov	r6, r2
 8004d3a:	d505      	bpl.n	8004d48 <__swrite+0x1e>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	f000 f8d4 	bl	8004ef0 <_lseek_r>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	4628      	mov	r0, r5
 8004d54:	463b      	mov	r3, r7
 8004d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	f000 b8eb 	b.w	8004f38 <_write_r>

08004d62 <__sseek>:
 8004d62:	b510      	push	{r4, lr}
 8004d64:	460c      	mov	r4, r1
 8004d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6a:	f000 f8c1 	bl	8004ef0 <_lseek_r>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	bf15      	itete	ne
 8004d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d7e:	81a3      	strheq	r3, [r4, #12]
 8004d80:	bf18      	it	ne
 8004d82:	81a3      	strhne	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__sclose>:
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 b8a1 	b.w	8004ed0 <_close_r>

08004d8e <__swbuf_r>:
 8004d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d90:	460e      	mov	r6, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	4605      	mov	r5, r0
 8004d96:	b118      	cbz	r0, 8004da0 <__swbuf_r+0x12>
 8004d98:	6a03      	ldr	r3, [r0, #32]
 8004d9a:	b90b      	cbnz	r3, 8004da0 <__swbuf_r+0x12>
 8004d9c:	f7ff fef0 	bl	8004b80 <__sinit>
 8004da0:	69a3      	ldr	r3, [r4, #24]
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	071a      	lsls	r2, r3, #28
 8004da8:	d525      	bpl.n	8004df6 <__swbuf_r+0x68>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	b31b      	cbz	r3, 8004df6 <__swbuf_r+0x68>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	6922      	ldr	r2, [r4, #16]
 8004db2:	b2f6      	uxtb	r6, r6
 8004db4:	1a98      	subs	r0, r3, r2
 8004db6:	6963      	ldr	r3, [r4, #20]
 8004db8:	4637      	mov	r7, r6
 8004dba:	4283      	cmp	r3, r0
 8004dbc:	dc04      	bgt.n	8004dc8 <__swbuf_r+0x3a>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f002 fecb 	bl	8007b5c <_fflush_r>
 8004dc6:	b9e0      	cbnz	r0, 8004e02 <__swbuf_r+0x74>
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	6022      	str	r2, [r4, #0]
 8004dd4:	701e      	strb	r6, [r3, #0]
 8004dd6:	6962      	ldr	r2, [r4, #20]
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d004      	beq.n	8004de8 <__swbuf_r+0x5a>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	07db      	lsls	r3, r3, #31
 8004de2:	d506      	bpl.n	8004df2 <__swbuf_r+0x64>
 8004de4:	2e0a      	cmp	r6, #10
 8004de6:	d104      	bne.n	8004df2 <__swbuf_r+0x64>
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f002 feb6 	bl	8007b5c <_fflush_r>
 8004df0:	b938      	cbnz	r0, 8004e02 <__swbuf_r+0x74>
 8004df2:	4638      	mov	r0, r7
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df6:	4621      	mov	r1, r4
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 f805 	bl	8004e08 <__swsetup_r>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d0d5      	beq.n	8004dae <__swbuf_r+0x20>
 8004e02:	f04f 37ff 	mov.w	r7, #4294967295
 8004e06:	e7f4      	b.n	8004df2 <__swbuf_r+0x64>

08004e08 <__swsetup_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <__swsetup_r+0xac>)
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	460c      	mov	r4, r1
 8004e12:	b118      	cbz	r0, 8004e1c <__swsetup_r+0x14>
 8004e14:	6a03      	ldr	r3, [r0, #32]
 8004e16:	b90b      	cbnz	r3, 8004e1c <__swsetup_r+0x14>
 8004e18:	f7ff feb2 	bl	8004b80 <__sinit>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e22:	0718      	lsls	r0, r3, #28
 8004e24:	d422      	bmi.n	8004e6c <__swsetup_r+0x64>
 8004e26:	06d9      	lsls	r1, r3, #27
 8004e28:	d407      	bmi.n	8004e3a <__swsetup_r+0x32>
 8004e2a:	2309      	movs	r3, #9
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	e034      	b.n	8004ea4 <__swsetup_r+0x9c>
 8004e3a:	0758      	lsls	r0, r3, #29
 8004e3c:	d512      	bpl.n	8004e64 <__swsetup_r+0x5c>
 8004e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e40:	b141      	cbz	r1, 8004e54 <__swsetup_r+0x4c>
 8004e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d002      	beq.n	8004e50 <__swsetup_r+0x48>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 ff34 	bl	8005cb8 <_free_r>
 8004e50:	2300      	movs	r3, #0
 8004e52:	6363      	str	r3, [r4, #52]	; 0x34
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	6023      	str	r3, [r4, #0]
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f043 0308 	orr.w	r3, r3, #8
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	b94b      	cbnz	r3, 8004e84 <__swsetup_r+0x7c>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7a:	d003      	beq.n	8004e84 <__swsetup_r+0x7c>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f002 feb9 	bl	8007bf6 <__smakebuf_r>
 8004e84:	89a0      	ldrh	r0, [r4, #12]
 8004e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e8a:	f010 0301 	ands.w	r3, r0, #1
 8004e8e:	d00a      	beq.n	8004ea6 <__swsetup_r+0x9e>
 8004e90:	2300      	movs	r3, #0
 8004e92:	60a3      	str	r3, [r4, #8]
 8004e94:	6963      	ldr	r3, [r4, #20]
 8004e96:	425b      	negs	r3, r3
 8004e98:	61a3      	str	r3, [r4, #24]
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	b943      	cbnz	r3, 8004eb0 <__swsetup_r+0xa8>
 8004e9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ea2:	d1c4      	bne.n	8004e2e <__swsetup_r+0x26>
 8004ea4:	bd38      	pop	{r3, r4, r5, pc}
 8004ea6:	0781      	lsls	r1, r0, #30
 8004ea8:	bf58      	it	pl
 8004eaa:	6963      	ldrpl	r3, [r4, #20]
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	e7f4      	b.n	8004e9a <__swsetup_r+0x92>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7f7      	b.n	8004ea4 <__swsetup_r+0x9c>
 8004eb4:	20000064 	.word	0x20000064

08004eb8 <memset>:
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4402      	add	r2, r0
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d100      	bne.n	8004ec2 <memset+0xa>
 8004ec0:	4770      	bx	lr
 8004ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec6:	e7f9      	b.n	8004ebc <memset+0x4>

08004ec8 <_localeconv_r>:
 8004ec8:	4800      	ldr	r0, [pc, #0]	; (8004ecc <_localeconv_r+0x4>)
 8004eca:	4770      	bx	lr
 8004ecc:	20000158 	.word	0x20000158

08004ed0 <_close_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4d05      	ldr	r5, [pc, #20]	; (8004eec <_close_r+0x1c>)
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc fff4 	bl	8001ec8 <_close>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_close_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_close_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000428 	.word	0x20000428

08004ef0 <_lseek_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4d05      	ldr	r5, [pc, #20]	; (8004f10 <_lseek_r+0x20>)
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f7fd f806 	bl	8001f10 <_lseek>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_lseek_r+0x1e>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_lseek_r+0x1e>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	20000428 	.word	0x20000428

08004f14 <_read_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4d05      	ldr	r5, [pc, #20]	; (8004f34 <_read_r+0x20>)
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fc ff97 	bl	8001e56 <_read>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_read_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_read_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	20000428 	.word	0x20000428

08004f38 <_write_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	2200      	movs	r2, #0
 8004f42:	4d05      	ldr	r5, [pc, #20]	; (8004f58 <_write_r+0x20>)
 8004f44:	602a      	str	r2, [r5, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7fc ffa2 	bl	8001e90 <_write>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_write_r+0x1e>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_write_r+0x1e>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000428 	.word	0x20000428

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000064 	.word	0x20000064

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	4d0c      	ldr	r5, [pc, #48]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6e:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	f003 fb2c 	bl	80085d4 <_init>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4d0a      	ldr	r5, [pc, #40]	; (8004fa8 <__libc_init_array+0x40>)
 8004f80:	4c0a      	ldr	r4, [pc, #40]	; (8004fac <__libc_init_array+0x44>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	080092d8 	.word	0x080092d8
 8004fa4:	080092d8 	.word	0x080092d8
 8004fa8:	080092d8 	.word	0x080092d8
 8004fac:	080092dc 	.word	0x080092dc

08004fb0 <__retarget_lock_init_recursive>:
 8004fb0:	4770      	bx	lr

08004fb2 <__retarget_lock_acquire_recursive>:
 8004fb2:	4770      	bx	lr

08004fb4 <__retarget_lock_release_recursive>:
 8004fb4:	4770      	bx	lr

08004fb6 <memchr>:
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	b2c9      	uxtb	r1, r1
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	d101      	bne.n	8004fc8 <memchr+0x12>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e003      	b.n	8004fd0 <memchr+0x1a>
 8004fc8:	7804      	ldrb	r4, [r0, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	428c      	cmp	r4, r1
 8004fce:	d1f6      	bne.n	8004fbe <memchr+0x8>
 8004fd0:	bd10      	pop	{r4, pc}
	...

08004fd4 <nanf>:
 8004fd4:	4800      	ldr	r0, [pc, #0]	; (8004fd8 <nanf+0x4>)
 8004fd6:	4770      	bx	lr
 8004fd8:	7fc00000 	.word	0x7fc00000

08004fdc <quorem>:
 8004fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	6903      	ldr	r3, [r0, #16]
 8004fe2:	690c      	ldr	r4, [r1, #16]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	db7f      	blt.n	80050ea <quorem+0x10e>
 8004fea:	3c01      	subs	r4, #1
 8004fec:	f100 0514 	add.w	r5, r0, #20
 8004ff0:	f101 0814 	add.w	r8, r1, #20
 8004ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005002:	3301      	adds	r3, #1
 8005004:	429a      	cmp	r2, r3
 8005006:	fbb2 f6f3 	udiv	r6, r2, r3
 800500a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800500e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005012:	d331      	bcc.n	8005078 <quorem+0x9c>
 8005014:	f04f 0e00 	mov.w	lr, #0
 8005018:	4640      	mov	r0, r8
 800501a:	46ac      	mov	ip, r5
 800501c:	46f2      	mov	sl, lr
 800501e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005022:	b293      	uxth	r3, r2
 8005024:	fb06 e303 	mla	r3, r6, r3, lr
 8005028:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800502c:	0c1a      	lsrs	r2, r3, #16
 800502e:	b29b      	uxth	r3, r3
 8005030:	fb06 220e 	mla	r2, r6, lr, r2
 8005034:	ebaa 0303 	sub.w	r3, sl, r3
 8005038:	f8dc a000 	ldr.w	sl, [ip]
 800503c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005040:	fa1f fa8a 	uxth.w	sl, sl
 8005044:	4453      	add	r3, sl
 8005046:	f8dc a000 	ldr.w	sl, [ip]
 800504a:	b292      	uxth	r2, r2
 800504c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005054:	b29b      	uxth	r3, r3
 8005056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800505a:	4581      	cmp	r9, r0
 800505c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005060:	f84c 3b04 	str.w	r3, [ip], #4
 8005064:	d2db      	bcs.n	800501e <quorem+0x42>
 8005066:	f855 300b 	ldr.w	r3, [r5, fp]
 800506a:	b92b      	cbnz	r3, 8005078 <quorem+0x9c>
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	3b04      	subs	r3, #4
 8005070:	429d      	cmp	r5, r3
 8005072:	461a      	mov	r2, r3
 8005074:	d32d      	bcc.n	80050d2 <quorem+0xf6>
 8005076:	613c      	str	r4, [r7, #16]
 8005078:	4638      	mov	r0, r7
 800507a:	f001 f9dd 	bl	8006438 <__mcmp>
 800507e:	2800      	cmp	r0, #0
 8005080:	db23      	blt.n	80050ca <quorem+0xee>
 8005082:	4629      	mov	r1, r5
 8005084:	2000      	movs	r0, #0
 8005086:	3601      	adds	r6, #1
 8005088:	f858 2b04 	ldr.w	r2, [r8], #4
 800508c:	f8d1 c000 	ldr.w	ip, [r1]
 8005090:	b293      	uxth	r3, r2
 8005092:	1ac3      	subs	r3, r0, r3
 8005094:	0c12      	lsrs	r2, r2, #16
 8005096:	fa1f f08c 	uxth.w	r0, ip
 800509a:	4403      	add	r3, r0
 800509c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050aa:	45c1      	cmp	r9, r8
 80050ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050b0:	f841 3b04 	str.w	r3, [r1], #4
 80050b4:	d2e8      	bcs.n	8005088 <quorem+0xac>
 80050b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050be:	b922      	cbnz	r2, 80050ca <quorem+0xee>
 80050c0:	3b04      	subs	r3, #4
 80050c2:	429d      	cmp	r5, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	d30a      	bcc.n	80050de <quorem+0x102>
 80050c8:	613c      	str	r4, [r7, #16]
 80050ca:	4630      	mov	r0, r6
 80050cc:	b003      	add	sp, #12
 80050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d1cd      	bne.n	8005076 <quorem+0x9a>
 80050da:	3c01      	subs	r4, #1
 80050dc:	e7c8      	b.n	8005070 <quorem+0x94>
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	3b04      	subs	r3, #4
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d1f0      	bne.n	80050c8 <quorem+0xec>
 80050e6:	3c01      	subs	r4, #1
 80050e8:	e7eb      	b.n	80050c2 <quorem+0xe6>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e7ee      	b.n	80050cc <quorem+0xf0>
	...

080050f0 <_dtoa_r>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	4616      	mov	r6, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	69c4      	ldr	r4, [r0, #28]
 80050fa:	b099      	sub	sp, #100	; 0x64
 80050fc:	4605      	mov	r5, r0
 80050fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005102:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005106:	b974      	cbnz	r4, 8005126 <_dtoa_r+0x36>
 8005108:	2010      	movs	r0, #16
 800510a:	f000 fe1d 	bl	8005d48 <malloc>
 800510e:	4602      	mov	r2, r0
 8005110:	61e8      	str	r0, [r5, #28]
 8005112:	b920      	cbnz	r0, 800511e <_dtoa_r+0x2e>
 8005114:	21ef      	movs	r1, #239	; 0xef
 8005116:	4bac      	ldr	r3, [pc, #688]	; (80053c8 <_dtoa_r+0x2d8>)
 8005118:	48ac      	ldr	r0, [pc, #688]	; (80053cc <_dtoa_r+0x2dc>)
 800511a:	f002 fe1b 	bl	8007d54 <__assert_func>
 800511e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005122:	6004      	str	r4, [r0, #0]
 8005124:	60c4      	str	r4, [r0, #12]
 8005126:	69eb      	ldr	r3, [r5, #28]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	b151      	cbz	r1, 8005142 <_dtoa_r+0x52>
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	2301      	movs	r3, #1
 8005130:	4093      	lsls	r3, r2
 8005132:	604a      	str	r2, [r1, #4]
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fefa 	bl	8005f30 <_Bfree>
 800513c:	2200      	movs	r2, #0
 800513e:	69eb      	ldr	r3, [r5, #28]
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	1e3b      	subs	r3, r7, #0
 8005144:	bfaf      	iteee	ge
 8005146:	2300      	movge	r3, #0
 8005148:	2201      	movlt	r2, #1
 800514a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800514e:	9305      	strlt	r3, [sp, #20]
 8005150:	bfa8      	it	ge
 8005152:	f8c8 3000 	strge.w	r3, [r8]
 8005156:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800515a:	4b9d      	ldr	r3, [pc, #628]	; (80053d0 <_dtoa_r+0x2e0>)
 800515c:	bfb8      	it	lt
 800515e:	f8c8 2000 	strlt.w	r2, [r8]
 8005162:	ea33 0309 	bics.w	r3, r3, r9
 8005166:	d119      	bne.n	800519c <_dtoa_r+0xac>
 8005168:	f242 730f 	movw	r3, #9999	; 0x270f
 800516c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005174:	4333      	orrs	r3, r6
 8005176:	f000 8589 	beq.w	8005c8c <_dtoa_r+0xb9c>
 800517a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800517c:	b953      	cbnz	r3, 8005194 <_dtoa_r+0xa4>
 800517e:	4b95      	ldr	r3, [pc, #596]	; (80053d4 <_dtoa_r+0x2e4>)
 8005180:	e023      	b.n	80051ca <_dtoa_r+0xda>
 8005182:	4b95      	ldr	r3, [pc, #596]	; (80053d8 <_dtoa_r+0x2e8>)
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	3308      	adds	r3, #8
 8005188:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	9803      	ldr	r0, [sp, #12]
 800518e:	b019      	add	sp, #100	; 0x64
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <_dtoa_r+0x2e4>)
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	3303      	adds	r3, #3
 800519a:	e7f5      	b.n	8005188 <_dtoa_r+0x98>
 800519c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	f7fb fc68 	bl	8000a80 <__aeabi_dcmpeq>
 80051b0:	4680      	mov	r8, r0
 80051b2:	b160      	cbz	r0, 80051ce <_dtoa_r+0xde>
 80051b4:	2301      	movs	r3, #1
 80051b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8562 	beq.w	8005c86 <_dtoa_r+0xb96>
 80051c2:	4b86      	ldr	r3, [pc, #536]	; (80053dc <_dtoa_r+0x2ec>)
 80051c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	9303      	str	r3, [sp, #12]
 80051cc:	e7de      	b.n	800518c <_dtoa_r+0x9c>
 80051ce:	ab16      	add	r3, sp, #88	; 0x58
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	ab17      	add	r3, sp, #92	; 0x5c
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4628      	mov	r0, r5
 80051d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051dc:	f001 fa3c 	bl	8006658 <__d2b>
 80051e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80051e4:	4682      	mov	sl, r0
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	d07e      	beq.n	80052e8 <_dtoa_r+0x1f8>
 80051ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80051f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80051fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005200:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005204:	4619      	mov	r1, r3
 8005206:	2200      	movs	r2, #0
 8005208:	4b75      	ldr	r3, [pc, #468]	; (80053e0 <_dtoa_r+0x2f0>)
 800520a:	f7fb f819 	bl	8000240 <__aeabi_dsub>
 800520e:	a368      	add	r3, pc, #416	; (adr r3, 80053b0 <_dtoa_r+0x2c0>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb f9cc 	bl	80005b0 <__aeabi_dmul>
 8005218:	a367      	add	r3, pc, #412	; (adr r3, 80053b8 <_dtoa_r+0x2c8>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f811 	bl	8000244 <__adddf3>
 8005222:	4606      	mov	r6, r0
 8005224:	4620      	mov	r0, r4
 8005226:	460f      	mov	r7, r1
 8005228:	f7fb f958 	bl	80004dc <__aeabi_i2d>
 800522c:	a364      	add	r3, pc, #400	; (adr r3, 80053c0 <_dtoa_r+0x2d0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f9bd 	bl	80005b0 <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb f801 	bl	8000244 <__adddf3>
 8005242:	4606      	mov	r6, r0
 8005244:	460f      	mov	r7, r1
 8005246:	f7fb fc63 	bl	8000b10 <__aeabi_d2iz>
 800524a:	2200      	movs	r2, #0
 800524c:	4683      	mov	fp, r0
 800524e:	2300      	movs	r3, #0
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fc1e 	bl	8000a94 <__aeabi_dcmplt>
 8005258:	b148      	cbz	r0, 800526e <_dtoa_r+0x17e>
 800525a:	4658      	mov	r0, fp
 800525c:	f7fb f93e 	bl	80004dc <__aeabi_i2d>
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	f7fb fc0c 	bl	8000a80 <__aeabi_dcmpeq>
 8005268:	b908      	cbnz	r0, 800526e <_dtoa_r+0x17e>
 800526a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800526e:	f1bb 0f16 	cmp.w	fp, #22
 8005272:	d857      	bhi.n	8005324 <_dtoa_r+0x234>
 8005274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005278:	4b5a      	ldr	r3, [pc, #360]	; (80053e4 <_dtoa_r+0x2f4>)
 800527a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fb fc07 	bl	8000a94 <__aeabi_dcmplt>
 8005286:	2800      	cmp	r0, #0
 8005288:	d04e      	beq.n	8005328 <_dtoa_r+0x238>
 800528a:	2300      	movs	r3, #0
 800528c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005290:	930f      	str	r3, [sp, #60]	; 0x3c
 8005292:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005294:	1b1b      	subs	r3, r3, r4
 8005296:	1e5a      	subs	r2, r3, #1
 8005298:	bf46      	itte	mi
 800529a:	f1c3 0901 	rsbmi	r9, r3, #1
 800529e:	2300      	movmi	r3, #0
 80052a0:	f04f 0900 	movpl.w	r9, #0
 80052a4:	9209      	str	r2, [sp, #36]	; 0x24
 80052a6:	bf48      	it	mi
 80052a8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052aa:	f1bb 0f00 	cmp.w	fp, #0
 80052ae:	db3d      	blt.n	800532c <_dtoa_r+0x23c>
 80052b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80052b6:	445b      	add	r3, fp
 80052b8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ba:	2300      	movs	r3, #0
 80052bc:	930a      	str	r3, [sp, #40]	; 0x28
 80052be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d867      	bhi.n	8005394 <_dtoa_r+0x2a4>
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	bfc4      	itt	gt
 80052c8:	3b04      	subgt	r3, #4
 80052ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80052cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ce:	bfc8      	it	gt
 80052d0:	2400      	movgt	r4, #0
 80052d2:	f1a3 0302 	sub.w	r3, r3, #2
 80052d6:	bfd8      	it	le
 80052d8:	2401      	movle	r4, #1
 80052da:	2b03      	cmp	r3, #3
 80052dc:	f200 8086 	bhi.w	80053ec <_dtoa_r+0x2fc>
 80052e0:	e8df f003 	tbb	[pc, r3]
 80052e4:	5637392c 	.word	0x5637392c
 80052e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80052ec:	441c      	add	r4, r3
 80052ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	bfc1      	itttt	gt
 80052f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052fa:	fa09 f903 	lslgt.w	r9, r9, r3
 80052fe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005302:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005306:	bfd6      	itet	le
 8005308:	f1c3 0320 	rsble	r3, r3, #32
 800530c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005310:	fa06 f003 	lslle.w	r0, r6, r3
 8005314:	f7fb f8d2 	bl	80004bc <__aeabi_ui2d>
 8005318:	2201      	movs	r2, #1
 800531a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800531e:	3c01      	subs	r4, #1
 8005320:	9213      	str	r2, [sp, #76]	; 0x4c
 8005322:	e76f      	b.n	8005204 <_dtoa_r+0x114>
 8005324:	2301      	movs	r3, #1
 8005326:	e7b3      	b.n	8005290 <_dtoa_r+0x1a0>
 8005328:	900f      	str	r0, [sp, #60]	; 0x3c
 800532a:	e7b2      	b.n	8005292 <_dtoa_r+0x1a2>
 800532c:	f1cb 0300 	rsb	r3, fp, #0
 8005330:	930a      	str	r3, [sp, #40]	; 0x28
 8005332:	2300      	movs	r3, #0
 8005334:	eba9 090b 	sub.w	r9, r9, fp
 8005338:	930e      	str	r3, [sp, #56]	; 0x38
 800533a:	e7c0      	b.n	80052be <_dtoa_r+0x1ce>
 800533c:	2300      	movs	r3, #0
 800533e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005342:	2b00      	cmp	r3, #0
 8005344:	dc55      	bgt.n	80053f2 <_dtoa_r+0x302>
 8005346:	2301      	movs	r3, #1
 8005348:	461a      	mov	r2, r3
 800534a:	9306      	str	r3, [sp, #24]
 800534c:	9308      	str	r3, [sp, #32]
 800534e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005350:	e00b      	b.n	800536a <_dtoa_r+0x27a>
 8005352:	2301      	movs	r3, #1
 8005354:	e7f3      	b.n	800533e <_dtoa_r+0x24e>
 8005356:	2300      	movs	r3, #0
 8005358:	930b      	str	r3, [sp, #44]	; 0x2c
 800535a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800535c:	445b      	add	r3, fp
 800535e:	9306      	str	r3, [sp, #24]
 8005360:	3301      	adds	r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	9308      	str	r3, [sp, #32]
 8005366:	bfb8      	it	lt
 8005368:	2301      	movlt	r3, #1
 800536a:	2100      	movs	r1, #0
 800536c:	2204      	movs	r2, #4
 800536e:	69e8      	ldr	r0, [r5, #28]
 8005370:	f102 0614 	add.w	r6, r2, #20
 8005374:	429e      	cmp	r6, r3
 8005376:	d940      	bls.n	80053fa <_dtoa_r+0x30a>
 8005378:	6041      	str	r1, [r0, #4]
 800537a:	4628      	mov	r0, r5
 800537c:	f000 fd98 	bl	8005eb0 <_Balloc>
 8005380:	9003      	str	r0, [sp, #12]
 8005382:	2800      	cmp	r0, #0
 8005384:	d13c      	bne.n	8005400 <_dtoa_r+0x310>
 8005386:	4602      	mov	r2, r0
 8005388:	f240 11af 	movw	r1, #431	; 0x1af
 800538c:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <_dtoa_r+0x2f8>)
 800538e:	e6c3      	b.n	8005118 <_dtoa_r+0x28>
 8005390:	2301      	movs	r3, #1
 8005392:	e7e1      	b.n	8005358 <_dtoa_r+0x268>
 8005394:	2401      	movs	r4, #1
 8005396:	2300      	movs	r3, #0
 8005398:	940b      	str	r4, [sp, #44]	; 0x2c
 800539a:	9322      	str	r3, [sp, #136]	; 0x88
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	2200      	movs	r2, #0
 80053a2:	9306      	str	r3, [sp, #24]
 80053a4:	9308      	str	r3, [sp, #32]
 80053a6:	2312      	movs	r3, #18
 80053a8:	e7d1      	b.n	800534e <_dtoa_r+0x25e>
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w
 80053b0:	636f4361 	.word	0x636f4361
 80053b4:	3fd287a7 	.word	0x3fd287a7
 80053b8:	8b60c8b3 	.word	0x8b60c8b3
 80053bc:	3fc68a28 	.word	0x3fc68a28
 80053c0:	509f79fb 	.word	0x509f79fb
 80053c4:	3fd34413 	.word	0x3fd34413
 80053c8:	08008ef4 	.word	0x08008ef4
 80053cc:	08008f0b 	.word	0x08008f0b
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	08008ef0 	.word	0x08008ef0
 80053d8:	08008ee7 	.word	0x08008ee7
 80053dc:	08008ebf 	.word	0x08008ebf
 80053e0:	3ff80000 	.word	0x3ff80000
 80053e4:	08008ff8 	.word	0x08008ff8
 80053e8:	08008f63 	.word	0x08008f63
 80053ec:	2301      	movs	r3, #1
 80053ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f0:	e7d4      	b.n	800539c <_dtoa_r+0x2ac>
 80053f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f4:	9306      	str	r3, [sp, #24]
 80053f6:	9308      	str	r3, [sp, #32]
 80053f8:	e7b7      	b.n	800536a <_dtoa_r+0x27a>
 80053fa:	3101      	adds	r1, #1
 80053fc:	0052      	lsls	r2, r2, #1
 80053fe:	e7b7      	b.n	8005370 <_dtoa_r+0x280>
 8005400:	69eb      	ldr	r3, [r5, #28]
 8005402:	9a03      	ldr	r2, [sp, #12]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	9b08      	ldr	r3, [sp, #32]
 8005408:	2b0e      	cmp	r3, #14
 800540a:	f200 80a8 	bhi.w	800555e <_dtoa_r+0x46e>
 800540e:	2c00      	cmp	r4, #0
 8005410:	f000 80a5 	beq.w	800555e <_dtoa_r+0x46e>
 8005414:	f1bb 0f00 	cmp.w	fp, #0
 8005418:	dd34      	ble.n	8005484 <_dtoa_r+0x394>
 800541a:	4b9a      	ldr	r3, [pc, #616]	; (8005684 <_dtoa_r+0x594>)
 800541c:	f00b 020f 	and.w	r2, fp, #15
 8005420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005424:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800542c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005430:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005434:	d016      	beq.n	8005464 <_dtoa_r+0x374>
 8005436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800543a:	4b93      	ldr	r3, [pc, #588]	; (8005688 <_dtoa_r+0x598>)
 800543c:	2703      	movs	r7, #3
 800543e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005442:	f7fb f9df 	bl	8000804 <__aeabi_ddiv>
 8005446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800544a:	f004 040f 	and.w	r4, r4, #15
 800544e:	4e8e      	ldr	r6, [pc, #568]	; (8005688 <_dtoa_r+0x598>)
 8005450:	b954      	cbnz	r4, 8005468 <_dtoa_r+0x378>
 8005452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800545a:	f7fb f9d3 	bl	8000804 <__aeabi_ddiv>
 800545e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005462:	e029      	b.n	80054b8 <_dtoa_r+0x3c8>
 8005464:	2702      	movs	r7, #2
 8005466:	e7f2      	b.n	800544e <_dtoa_r+0x35e>
 8005468:	07e1      	lsls	r1, r4, #31
 800546a:	d508      	bpl.n	800547e <_dtoa_r+0x38e>
 800546c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005474:	f7fb f89c 	bl	80005b0 <__aeabi_dmul>
 8005478:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800547c:	3701      	adds	r7, #1
 800547e:	1064      	asrs	r4, r4, #1
 8005480:	3608      	adds	r6, #8
 8005482:	e7e5      	b.n	8005450 <_dtoa_r+0x360>
 8005484:	f000 80a5 	beq.w	80055d2 <_dtoa_r+0x4e2>
 8005488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800548c:	f1cb 0400 	rsb	r4, fp, #0
 8005490:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <_dtoa_r+0x594>)
 8005492:	f004 020f 	and.w	r2, r4, #15
 8005496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f887 	bl	80005b0 <__aeabi_dmul>
 80054a2:	2702      	movs	r7, #2
 80054a4:	2300      	movs	r3, #0
 80054a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054aa:	4e77      	ldr	r6, [pc, #476]	; (8005688 <_dtoa_r+0x598>)
 80054ac:	1124      	asrs	r4, r4, #4
 80054ae:	2c00      	cmp	r4, #0
 80054b0:	f040 8084 	bne.w	80055bc <_dtoa_r+0x4cc>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1d2      	bne.n	800545e <_dtoa_r+0x36e>
 80054b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8087 	beq.w	80055d6 <_dtoa_r+0x4e6>
 80054c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054cc:	2200      	movs	r2, #0
 80054ce:	4b6f      	ldr	r3, [pc, #444]	; (800568c <_dtoa_r+0x59c>)
 80054d0:	f7fb fae0 	bl	8000a94 <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d07e      	beq.n	80055d6 <_dtoa_r+0x4e6>
 80054d8:	9b08      	ldr	r3, [sp, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d07b      	beq.n	80055d6 <_dtoa_r+0x4e6>
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dd38      	ble.n	8005556 <_dtoa_r+0x466>
 80054e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054e8:	2200      	movs	r2, #0
 80054ea:	4b69      	ldr	r3, [pc, #420]	; (8005690 <_dtoa_r+0x5a0>)
 80054ec:	f7fb f860 	bl	80005b0 <__aeabi_dmul>
 80054f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054f4:	9c06      	ldr	r4, [sp, #24]
 80054f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80054fa:	3701      	adds	r7, #1
 80054fc:	4638      	mov	r0, r7
 80054fe:	f7fa ffed 	bl	80004dc <__aeabi_i2d>
 8005502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005506:	f7fb f853 	bl	80005b0 <__aeabi_dmul>
 800550a:	2200      	movs	r2, #0
 800550c:	4b61      	ldr	r3, [pc, #388]	; (8005694 <_dtoa_r+0x5a4>)
 800550e:	f7fa fe99 	bl	8000244 <__adddf3>
 8005512:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800551a:	9611      	str	r6, [sp, #68]	; 0x44
 800551c:	2c00      	cmp	r4, #0
 800551e:	d15d      	bne.n	80055dc <_dtoa_r+0x4ec>
 8005520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005524:	2200      	movs	r2, #0
 8005526:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <_dtoa_r+0x5a8>)
 8005528:	f7fa fe8a 	bl	8000240 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005534:	4633      	mov	r3, r6
 8005536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005538:	f7fb faca 	bl	8000ad0 <__aeabi_dcmpgt>
 800553c:	2800      	cmp	r0, #0
 800553e:	f040 8295 	bne.w	8005a6c <_dtoa_r+0x97c>
 8005542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005546:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005548:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800554c:	f7fb faa2 	bl	8000a94 <__aeabi_dcmplt>
 8005550:	2800      	cmp	r0, #0
 8005552:	f040 8289 	bne.w	8005a68 <_dtoa_r+0x978>
 8005556:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800555a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800555e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005560:	2b00      	cmp	r3, #0
 8005562:	f2c0 8151 	blt.w	8005808 <_dtoa_r+0x718>
 8005566:	f1bb 0f0e 	cmp.w	fp, #14
 800556a:	f300 814d 	bgt.w	8005808 <_dtoa_r+0x718>
 800556e:	4b45      	ldr	r3, [pc, #276]	; (8005684 <_dtoa_r+0x594>)
 8005570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005574:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005578:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800557c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800557e:	2b00      	cmp	r3, #0
 8005580:	f280 80da 	bge.w	8005738 <_dtoa_r+0x648>
 8005584:	9b08      	ldr	r3, [sp, #32]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f300 80d6 	bgt.w	8005738 <_dtoa_r+0x648>
 800558c:	f040 826b 	bne.w	8005a66 <_dtoa_r+0x976>
 8005590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005594:	2200      	movs	r2, #0
 8005596:	4b40      	ldr	r3, [pc, #256]	; (8005698 <_dtoa_r+0x5a8>)
 8005598:	f7fb f80a 	bl	80005b0 <__aeabi_dmul>
 800559c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a0:	f7fb fa8c 	bl	8000abc <__aeabi_dcmpge>
 80055a4:	9c08      	ldr	r4, [sp, #32]
 80055a6:	4626      	mov	r6, r4
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f040 8241 	bne.w	8005a30 <_dtoa_r+0x940>
 80055ae:	2331      	movs	r3, #49	; 0x31
 80055b0:	9f03      	ldr	r7, [sp, #12]
 80055b2:	f10b 0b01 	add.w	fp, fp, #1
 80055b6:	f807 3b01 	strb.w	r3, [r7], #1
 80055ba:	e23d      	b.n	8005a38 <_dtoa_r+0x948>
 80055bc:	07e2      	lsls	r2, r4, #31
 80055be:	d505      	bpl.n	80055cc <_dtoa_r+0x4dc>
 80055c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055c4:	f7fa fff4 	bl	80005b0 <__aeabi_dmul>
 80055c8:	2301      	movs	r3, #1
 80055ca:	3701      	adds	r7, #1
 80055cc:	1064      	asrs	r4, r4, #1
 80055ce:	3608      	adds	r6, #8
 80055d0:	e76d      	b.n	80054ae <_dtoa_r+0x3be>
 80055d2:	2702      	movs	r7, #2
 80055d4:	e770      	b.n	80054b8 <_dtoa_r+0x3c8>
 80055d6:	46d8      	mov	r8, fp
 80055d8:	9c08      	ldr	r4, [sp, #32]
 80055da:	e78f      	b.n	80054fc <_dtoa_r+0x40c>
 80055dc:	9903      	ldr	r1, [sp, #12]
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <_dtoa_r+0x594>)
 80055e0:	4421      	add	r1, r4
 80055e2:	9112      	str	r1, [sp, #72]	; 0x48
 80055e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80055ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d054      	beq.n	80056a0 <_dtoa_r+0x5b0>
 80055f6:	2000      	movs	r0, #0
 80055f8:	4928      	ldr	r1, [pc, #160]	; (800569c <_dtoa_r+0x5ac>)
 80055fa:	f7fb f903 	bl	8000804 <__aeabi_ddiv>
 80055fe:	463b      	mov	r3, r7
 8005600:	4632      	mov	r2, r6
 8005602:	f7fa fe1d 	bl	8000240 <__aeabi_dsub>
 8005606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800560a:	9f03      	ldr	r7, [sp, #12]
 800560c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005610:	f7fb fa7e 	bl	8000b10 <__aeabi_d2iz>
 8005614:	4604      	mov	r4, r0
 8005616:	f7fa ff61 	bl	80004dc <__aeabi_i2d>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005622:	f7fa fe0d 	bl	8000240 <__aeabi_dsub>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	3430      	adds	r4, #48	; 0x30
 800562c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005634:	f807 4b01 	strb.w	r4, [r7], #1
 8005638:	f7fb fa2c 	bl	8000a94 <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	d173      	bne.n	8005728 <_dtoa_r+0x638>
 8005640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005644:	2000      	movs	r0, #0
 8005646:	4911      	ldr	r1, [pc, #68]	; (800568c <_dtoa_r+0x59c>)
 8005648:	f7fa fdfa 	bl	8000240 <__aeabi_dsub>
 800564c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005650:	f7fb fa20 	bl	8000a94 <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	f040 80b6 	bne.w	80057c6 <_dtoa_r+0x6d6>
 800565a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800565c:	429f      	cmp	r7, r3
 800565e:	f43f af7a 	beq.w	8005556 <_dtoa_r+0x466>
 8005662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005666:	2200      	movs	r2, #0
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <_dtoa_r+0x5a0>)
 800566a:	f7fa ffa1 	bl	80005b0 <__aeabi_dmul>
 800566e:	2200      	movs	r2, #0
 8005670:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <_dtoa_r+0x5a0>)
 800567a:	f7fa ff99 	bl	80005b0 <__aeabi_dmul>
 800567e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005682:	e7c3      	b.n	800560c <_dtoa_r+0x51c>
 8005684:	08008ff8 	.word	0x08008ff8
 8005688:	08008fd0 	.word	0x08008fd0
 800568c:	3ff00000 	.word	0x3ff00000
 8005690:	40240000 	.word	0x40240000
 8005694:	401c0000 	.word	0x401c0000
 8005698:	40140000 	.word	0x40140000
 800569c:	3fe00000 	.word	0x3fe00000
 80056a0:	4630      	mov	r0, r6
 80056a2:	4639      	mov	r1, r7
 80056a4:	f7fa ff84 	bl	80005b0 <__aeabi_dmul>
 80056a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056ae:	9c03      	ldr	r4, [sp, #12]
 80056b0:	9314      	str	r3, [sp, #80]	; 0x50
 80056b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b6:	f7fb fa2b 	bl	8000b10 <__aeabi_d2iz>
 80056ba:	9015      	str	r0, [sp, #84]	; 0x54
 80056bc:	f7fa ff0e 	bl	80004dc <__aeabi_i2d>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c8:	f7fa fdba 	bl	8000240 <__aeabi_dsub>
 80056cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056ce:	4606      	mov	r6, r0
 80056d0:	3330      	adds	r3, #48	; 0x30
 80056d2:	f804 3b01 	strb.w	r3, [r4], #1
 80056d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056d8:	460f      	mov	r7, r1
 80056da:	429c      	cmp	r4, r3
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	d124      	bne.n	800572c <_dtoa_r+0x63c>
 80056e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056e6:	4baf      	ldr	r3, [pc, #700]	; (80059a4 <_dtoa_r+0x8b4>)
 80056e8:	f7fa fdac 	bl	8000244 <__adddf3>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fb f9ec 	bl	8000ad0 <__aeabi_dcmpgt>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d163      	bne.n	80057c4 <_dtoa_r+0x6d4>
 80056fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005700:	2000      	movs	r0, #0
 8005702:	49a8      	ldr	r1, [pc, #672]	; (80059a4 <_dtoa_r+0x8b4>)
 8005704:	f7fa fd9c 	bl	8000240 <__aeabi_dsub>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fb f9c0 	bl	8000a94 <__aeabi_dcmplt>
 8005714:	2800      	cmp	r0, #0
 8005716:	f43f af1e 	beq.w	8005556 <_dtoa_r+0x466>
 800571a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800571c:	1e7b      	subs	r3, r7, #1
 800571e:	9314      	str	r3, [sp, #80]	; 0x50
 8005720:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d0f8      	beq.n	800571a <_dtoa_r+0x62a>
 8005728:	46c3      	mov	fp, r8
 800572a:	e03b      	b.n	80057a4 <_dtoa_r+0x6b4>
 800572c:	4b9e      	ldr	r3, [pc, #632]	; (80059a8 <_dtoa_r+0x8b8>)
 800572e:	f7fa ff3f 	bl	80005b0 <__aeabi_dmul>
 8005732:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005736:	e7bc      	b.n	80056b2 <_dtoa_r+0x5c2>
 8005738:	9f03      	ldr	r7, [sp, #12]
 800573a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800573e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fb f85d 	bl	8000804 <__aeabi_ddiv>
 800574a:	f7fb f9e1 	bl	8000b10 <__aeabi_d2iz>
 800574e:	4604      	mov	r4, r0
 8005750:	f7fa fec4 	bl	80004dc <__aeabi_i2d>
 8005754:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005758:	f7fa ff2a 	bl	80005b0 <__aeabi_dmul>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fa fd6c 	bl	8000240 <__aeabi_dsub>
 8005768:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800576c:	f807 6b01 	strb.w	r6, [r7], #1
 8005770:	9e03      	ldr	r6, [sp, #12]
 8005772:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005776:	1bbe      	subs	r6, r7, r6
 8005778:	45b4      	cmp	ip, r6
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	d136      	bne.n	80057ee <_dtoa_r+0x6fe>
 8005780:	f7fa fd60 	bl	8000244 <__adddf3>
 8005784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005788:	4680      	mov	r8, r0
 800578a:	4689      	mov	r9, r1
 800578c:	f7fb f9a0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005790:	bb58      	cbnz	r0, 80057ea <_dtoa_r+0x6fa>
 8005792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f7fb f971 	bl	8000a80 <__aeabi_dcmpeq>
 800579e:	b108      	cbz	r0, 80057a4 <_dtoa_r+0x6b4>
 80057a0:	07e3      	lsls	r3, r4, #31
 80057a2:	d422      	bmi.n	80057ea <_dtoa_r+0x6fa>
 80057a4:	4651      	mov	r1, sl
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fbc2 	bl	8005f30 <_Bfree>
 80057ac:	2300      	movs	r3, #0
 80057ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057b0:	703b      	strb	r3, [r7, #0]
 80057b2:	f10b 0301 	add.w	r3, fp, #1
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f43f ace6 	beq.w	800518c <_dtoa_r+0x9c>
 80057c0:	601f      	str	r7, [r3, #0]
 80057c2:	e4e3      	b.n	800518c <_dtoa_r+0x9c>
 80057c4:	4627      	mov	r7, r4
 80057c6:	463b      	mov	r3, r7
 80057c8:	461f      	mov	r7, r3
 80057ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ce:	2a39      	cmp	r2, #57	; 0x39
 80057d0:	d107      	bne.n	80057e2 <_dtoa_r+0x6f2>
 80057d2:	9a03      	ldr	r2, [sp, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1f7      	bne.n	80057c8 <_dtoa_r+0x6d8>
 80057d8:	2230      	movs	r2, #48	; 0x30
 80057da:	9903      	ldr	r1, [sp, #12]
 80057dc:	f108 0801 	add.w	r8, r8, #1
 80057e0:	700a      	strb	r2, [r1, #0]
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	3201      	adds	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e79e      	b.n	8005728 <_dtoa_r+0x638>
 80057ea:	46d8      	mov	r8, fp
 80057ec:	e7eb      	b.n	80057c6 <_dtoa_r+0x6d6>
 80057ee:	2200      	movs	r2, #0
 80057f0:	4b6d      	ldr	r3, [pc, #436]	; (80059a8 <_dtoa_r+0x8b8>)
 80057f2:	f7fa fedd 	bl	80005b0 <__aeabi_dmul>
 80057f6:	2200      	movs	r2, #0
 80057f8:	2300      	movs	r3, #0
 80057fa:	4680      	mov	r8, r0
 80057fc:	4689      	mov	r9, r1
 80057fe:	f7fb f93f 	bl	8000a80 <__aeabi_dcmpeq>
 8005802:	2800      	cmp	r0, #0
 8005804:	d09b      	beq.n	800573e <_dtoa_r+0x64e>
 8005806:	e7cd      	b.n	80057a4 <_dtoa_r+0x6b4>
 8005808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800580a:	2a00      	cmp	r2, #0
 800580c:	f000 80c4 	beq.w	8005998 <_dtoa_r+0x8a8>
 8005810:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005812:	2a01      	cmp	r2, #1
 8005814:	f300 80a8 	bgt.w	8005968 <_dtoa_r+0x878>
 8005818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800581a:	2a00      	cmp	r2, #0
 800581c:	f000 80a0 	beq.w	8005960 <_dtoa_r+0x870>
 8005820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005824:	464f      	mov	r7, r9
 8005826:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582a:	2101      	movs	r1, #1
 800582c:	441a      	add	r2, r3
 800582e:	4628      	mov	r0, r5
 8005830:	4499      	add	r9, r3
 8005832:	9209      	str	r2, [sp, #36]	; 0x24
 8005834:	f000 fc7c 	bl	8006130 <__i2b>
 8005838:	4606      	mov	r6, r0
 800583a:	b15f      	cbz	r7, 8005854 <_dtoa_r+0x764>
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	dd08      	ble.n	8005854 <_dtoa_r+0x764>
 8005842:	42bb      	cmp	r3, r7
 8005844:	bfa8      	it	ge
 8005846:	463b      	movge	r3, r7
 8005848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584a:	eba9 0903 	sub.w	r9, r9, r3
 800584e:	1aff      	subs	r7, r7, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	9309      	str	r3, [sp, #36]	; 0x24
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	b1f3      	cbz	r3, 8005896 <_dtoa_r+0x7a6>
 8005858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80a0 	beq.w	80059a0 <_dtoa_r+0x8b0>
 8005860:	2c00      	cmp	r4, #0
 8005862:	dd10      	ble.n	8005886 <_dtoa_r+0x796>
 8005864:	4631      	mov	r1, r6
 8005866:	4622      	mov	r2, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f000 fd1f 	bl	80062ac <__pow5mult>
 800586e:	4652      	mov	r2, sl
 8005870:	4601      	mov	r1, r0
 8005872:	4606      	mov	r6, r0
 8005874:	4628      	mov	r0, r5
 8005876:	f000 fc71 	bl	800615c <__multiply>
 800587a:	4680      	mov	r8, r0
 800587c:	4651      	mov	r1, sl
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fb56 	bl	8005f30 <_Bfree>
 8005884:	46c2      	mov	sl, r8
 8005886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005888:	1b1a      	subs	r2, r3, r4
 800588a:	d004      	beq.n	8005896 <_dtoa_r+0x7a6>
 800588c:	4651      	mov	r1, sl
 800588e:	4628      	mov	r0, r5
 8005890:	f000 fd0c 	bl	80062ac <__pow5mult>
 8005894:	4682      	mov	sl, r0
 8005896:	2101      	movs	r1, #1
 8005898:	4628      	mov	r0, r5
 800589a:	f000 fc49 	bl	8006130 <__i2b>
 800589e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a0:	4604      	mov	r4, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f340 8082 	ble.w	80059ac <_dtoa_r+0x8bc>
 80058a8:	461a      	mov	r2, r3
 80058aa:	4601      	mov	r1, r0
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 fcfd 	bl	80062ac <__pow5mult>
 80058b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b4:	4604      	mov	r4, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	dd7b      	ble.n	80059b2 <_dtoa_r+0x8c2>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058c4:	6918      	ldr	r0, [r3, #16]
 80058c6:	f000 fbe5 	bl	8006094 <__hi0bits>
 80058ca:	f1c0 0020 	rsb	r0, r0, #32
 80058ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d0:	4418      	add	r0, r3
 80058d2:	f010 001f 	ands.w	r0, r0, #31
 80058d6:	f000 8092 	beq.w	80059fe <_dtoa_r+0x90e>
 80058da:	f1c0 0320 	rsb	r3, r0, #32
 80058de:	2b04      	cmp	r3, #4
 80058e0:	f340 8085 	ble.w	80059ee <_dtoa_r+0x8fe>
 80058e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e6:	f1c0 001c 	rsb	r0, r0, #28
 80058ea:	4403      	add	r3, r0
 80058ec:	4481      	add	r9, r0
 80058ee:	4407      	add	r7, r0
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	dd05      	ble.n	8005904 <_dtoa_r+0x814>
 80058f8:	4651      	mov	r1, sl
 80058fa:	464a      	mov	r2, r9
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fd2f 	bl	8006360 <__lshift>
 8005902:	4682      	mov	sl, r0
 8005904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	dd05      	ble.n	8005916 <_dtoa_r+0x826>
 800590a:	4621      	mov	r1, r4
 800590c:	461a      	mov	r2, r3
 800590e:	4628      	mov	r0, r5
 8005910:	f000 fd26 	bl	8006360 <__lshift>
 8005914:	4604      	mov	r4, r0
 8005916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d072      	beq.n	8005a02 <_dtoa_r+0x912>
 800591c:	4621      	mov	r1, r4
 800591e:	4650      	mov	r0, sl
 8005920:	f000 fd8a 	bl	8006438 <__mcmp>
 8005924:	2800      	cmp	r0, #0
 8005926:	da6c      	bge.n	8005a02 <_dtoa_r+0x912>
 8005928:	2300      	movs	r3, #0
 800592a:	4651      	mov	r1, sl
 800592c:	220a      	movs	r2, #10
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fb20 	bl	8005f74 <__multadd>
 8005934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005936:	4682      	mov	sl, r0
 8005938:	f10b 3bff 	add.w	fp, fp, #4294967295
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 81ac 	beq.w	8005c9a <_dtoa_r+0xbaa>
 8005942:	2300      	movs	r3, #0
 8005944:	4631      	mov	r1, r6
 8005946:	220a      	movs	r2, #10
 8005948:	4628      	mov	r0, r5
 800594a:	f000 fb13 	bl	8005f74 <__multadd>
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	4606      	mov	r6, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f300 8093 	bgt.w	8005a7e <_dtoa_r+0x98e>
 8005958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800595a:	2b02      	cmp	r3, #2
 800595c:	dc59      	bgt.n	8005a12 <_dtoa_r+0x922>
 800595e:	e08e      	b.n	8005a7e <_dtoa_r+0x98e>
 8005960:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005962:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005966:	e75d      	b.n	8005824 <_dtoa_r+0x734>
 8005968:	9b08      	ldr	r3, [sp, #32]
 800596a:	1e5c      	subs	r4, r3, #1
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	42a3      	cmp	r3, r4
 8005970:	bfbf      	itttt	lt
 8005972:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005974:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005976:	1ae3      	sublt	r3, r4, r3
 8005978:	18d2      	addlt	r2, r2, r3
 800597a:	bfa8      	it	ge
 800597c:	1b1c      	subge	r4, r3, r4
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	bfbe      	ittt	lt
 8005982:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005984:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005986:	2400      	movlt	r4, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfb5      	itete	lt
 800598c:	eba9 0703 	sublt.w	r7, r9, r3
 8005990:	464f      	movge	r7, r9
 8005992:	2300      	movlt	r3, #0
 8005994:	9b08      	ldrge	r3, [sp, #32]
 8005996:	e747      	b.n	8005828 <_dtoa_r+0x738>
 8005998:	464f      	mov	r7, r9
 800599a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800599c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800599e:	e74c      	b.n	800583a <_dtoa_r+0x74a>
 80059a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059a2:	e773      	b.n	800588c <_dtoa_r+0x79c>
 80059a4:	3fe00000 	.word	0x3fe00000
 80059a8:	40240000 	.word	0x40240000
 80059ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	dc18      	bgt.n	80059e4 <_dtoa_r+0x8f4>
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	b9b3      	cbnz	r3, 80059e4 <_dtoa_r+0x8f4>
 80059b6:	9b05      	ldr	r3, [sp, #20]
 80059b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059bc:	b993      	cbnz	r3, 80059e4 <_dtoa_r+0x8f4>
 80059be:	9b05      	ldr	r3, [sp, #20]
 80059c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	0d1b      	lsrs	r3, r3, #20
 80059c6:	051b      	lsls	r3, r3, #20
 80059c8:	b17b      	cbz	r3, 80059ea <_dtoa_r+0x8fa>
 80059ca:	f04f 0801 	mov.w	r8, #1
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	f109 0901 	add.w	r9, r9, #1
 80059d4:	3301      	adds	r3, #1
 80059d6:	9309      	str	r3, [sp, #36]	; 0x24
 80059d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f47f af6f 	bne.w	80058be <_dtoa_r+0x7ce>
 80059e0:	2001      	movs	r0, #1
 80059e2:	e774      	b.n	80058ce <_dtoa_r+0x7de>
 80059e4:	f04f 0800 	mov.w	r8, #0
 80059e8:	e7f6      	b.n	80059d8 <_dtoa_r+0x8e8>
 80059ea:	4698      	mov	r8, r3
 80059ec:	e7f4      	b.n	80059d8 <_dtoa_r+0x8e8>
 80059ee:	d080      	beq.n	80058f2 <_dtoa_r+0x802>
 80059f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f2:	331c      	adds	r3, #28
 80059f4:	441a      	add	r2, r3
 80059f6:	4499      	add	r9, r3
 80059f8:	441f      	add	r7, r3
 80059fa:	9209      	str	r2, [sp, #36]	; 0x24
 80059fc:	e779      	b.n	80058f2 <_dtoa_r+0x802>
 80059fe:	4603      	mov	r3, r0
 8005a00:	e7f6      	b.n	80059f0 <_dtoa_r+0x900>
 8005a02:	9b08      	ldr	r3, [sp, #32]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dc34      	bgt.n	8005a72 <_dtoa_r+0x982>
 8005a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	dd31      	ble.n	8005a72 <_dtoa_r+0x982>
 8005a0e:	9b08      	ldr	r3, [sp, #32]
 8005a10:	9306      	str	r3, [sp, #24]
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	b963      	cbnz	r3, 8005a30 <_dtoa_r+0x940>
 8005a16:	4621      	mov	r1, r4
 8005a18:	2205      	movs	r2, #5
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 faaa 	bl	8005f74 <__multadd>
 8005a20:	4601      	mov	r1, r0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4650      	mov	r0, sl
 8005a26:	f000 fd07 	bl	8006438 <__mcmp>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	f73f adbf 	bgt.w	80055ae <_dtoa_r+0x4be>
 8005a30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a32:	9f03      	ldr	r7, [sp, #12]
 8005a34:	ea6f 0b03 	mvn.w	fp, r3
 8005a38:	f04f 0800 	mov.w	r8, #0
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fa76 	bl	8005f30 <_Bfree>
 8005a44:	2e00      	cmp	r6, #0
 8005a46:	f43f aead 	beq.w	80057a4 <_dtoa_r+0x6b4>
 8005a4a:	f1b8 0f00 	cmp.w	r8, #0
 8005a4e:	d005      	beq.n	8005a5c <_dtoa_r+0x96c>
 8005a50:	45b0      	cmp	r8, r6
 8005a52:	d003      	beq.n	8005a5c <_dtoa_r+0x96c>
 8005a54:	4641      	mov	r1, r8
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fa6a 	bl	8005f30 <_Bfree>
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 fa66 	bl	8005f30 <_Bfree>
 8005a64:	e69e      	b.n	80057a4 <_dtoa_r+0x6b4>
 8005a66:	2400      	movs	r4, #0
 8005a68:	4626      	mov	r6, r4
 8005a6a:	e7e1      	b.n	8005a30 <_dtoa_r+0x940>
 8005a6c:	46c3      	mov	fp, r8
 8005a6e:	4626      	mov	r6, r4
 8005a70:	e59d      	b.n	80055ae <_dtoa_r+0x4be>
 8005a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80c8 	beq.w	8005c0a <_dtoa_r+0xb1a>
 8005a7a:	9b08      	ldr	r3, [sp, #32]
 8005a7c:	9306      	str	r3, [sp, #24]
 8005a7e:	2f00      	cmp	r7, #0
 8005a80:	dd05      	ble.n	8005a8e <_dtoa_r+0x99e>
 8005a82:	4631      	mov	r1, r6
 8005a84:	463a      	mov	r2, r7
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fc6a 	bl	8006360 <__lshift>
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	f1b8 0f00 	cmp.w	r8, #0
 8005a92:	d05b      	beq.n	8005b4c <_dtoa_r+0xa5c>
 8005a94:	4628      	mov	r0, r5
 8005a96:	6871      	ldr	r1, [r6, #4]
 8005a98:	f000 fa0a 	bl	8005eb0 <_Balloc>
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	b928      	cbnz	r0, 8005aac <_dtoa_r+0x9bc>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005aa6:	4b81      	ldr	r3, [pc, #516]	; (8005cac <_dtoa_r+0xbbc>)
 8005aa8:	f7ff bb36 	b.w	8005118 <_dtoa_r+0x28>
 8005aac:	6932      	ldr	r2, [r6, #16]
 8005aae:	f106 010c 	add.w	r1, r6, #12
 8005ab2:	3202      	adds	r2, #2
 8005ab4:	0092      	lsls	r2, r2, #2
 8005ab6:	300c      	adds	r0, #12
 8005ab8:	f002 f938 	bl	8007d2c <memcpy>
 8005abc:	2201      	movs	r2, #1
 8005abe:	4639      	mov	r1, r7
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fc4d 	bl	8006360 <__lshift>
 8005ac6:	46b0      	mov	r8, r6
 8005ac8:	4606      	mov	r6, r0
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	9a03      	ldr	r2, [sp, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	9308      	str	r3, [sp, #32]
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae0:	9b08      	ldr	r3, [sp, #32]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	f7ff fa77 	bl	8004fdc <quorem>
 8005aee:	4641      	mov	r1, r8
 8005af0:	9006      	str	r0, [sp, #24]
 8005af2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005af6:	4650      	mov	r0, sl
 8005af8:	f000 fc9e 	bl	8006438 <__mcmp>
 8005afc:	4632      	mov	r2, r6
 8005afe:	9009      	str	r0, [sp, #36]	; 0x24
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fcb4 	bl	8006470 <__mdiff>
 8005b08:	68c2      	ldr	r2, [r0, #12]
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	bb02      	cbnz	r2, 8005b50 <_dtoa_r+0xa60>
 8005b0e:	4601      	mov	r1, r0
 8005b10:	4650      	mov	r0, sl
 8005b12:	f000 fc91 	bl	8006438 <__mcmp>
 8005b16:	4602      	mov	r2, r0
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	920c      	str	r2, [sp, #48]	; 0x30
 8005b1e:	f000 fa07 	bl	8005f30 <_Bfree>
 8005b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b26:	9f08      	ldr	r7, [sp, #32]
 8005b28:	ea43 0102 	orr.w	r1, r3, r2
 8005b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2e:	4319      	orrs	r1, r3
 8005b30:	d110      	bne.n	8005b54 <_dtoa_r+0xa64>
 8005b32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b36:	d029      	beq.n	8005b8c <_dtoa_r+0xa9c>
 8005b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd02      	ble.n	8005b44 <_dtoa_r+0xa54>
 8005b3e:	9b06      	ldr	r3, [sp, #24]
 8005b40:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	f883 9000 	strb.w	r9, [r3]
 8005b4a:	e777      	b.n	8005a3c <_dtoa_r+0x94c>
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	e7ba      	b.n	8005ac6 <_dtoa_r+0x9d6>
 8005b50:	2201      	movs	r2, #1
 8005b52:	e7e1      	b.n	8005b18 <_dtoa_r+0xa28>
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	db04      	blt.n	8005b64 <_dtoa_r+0xa74>
 8005b5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b60:	430b      	orrs	r3, r1
 8005b62:	d120      	bne.n	8005ba6 <_dtoa_r+0xab6>
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	dded      	ble.n	8005b44 <_dtoa_r+0xa54>
 8005b68:	4651      	mov	r1, sl
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 fbf7 	bl	8006360 <__lshift>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4682      	mov	sl, r0
 8005b76:	f000 fc5f 	bl	8006438 <__mcmp>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	dc03      	bgt.n	8005b86 <_dtoa_r+0xa96>
 8005b7e:	d1e1      	bne.n	8005b44 <_dtoa_r+0xa54>
 8005b80:	f019 0f01 	tst.w	r9, #1
 8005b84:	d0de      	beq.n	8005b44 <_dtoa_r+0xa54>
 8005b86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b8a:	d1d8      	bne.n	8005b3e <_dtoa_r+0xa4e>
 8005b8c:	2339      	movs	r3, #57	; 0x39
 8005b8e:	9a04      	ldr	r2, [sp, #16]
 8005b90:	7013      	strb	r3, [r2, #0]
 8005b92:	463b      	mov	r3, r7
 8005b94:	461f      	mov	r7, r3
 8005b96:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	2a39      	cmp	r2, #57	; 0x39
 8005b9e:	d06b      	beq.n	8005c78 <_dtoa_r+0xb88>
 8005ba0:	3201      	adds	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e74a      	b.n	8005a3c <_dtoa_r+0x94c>
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	dd07      	ble.n	8005bba <_dtoa_r+0xaca>
 8005baa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bae:	d0ed      	beq.n	8005b8c <_dtoa_r+0xa9c>
 8005bb0:	9a04      	ldr	r2, [sp, #16]
 8005bb2:	f109 0301 	add.w	r3, r9, #1
 8005bb6:	7013      	strb	r3, [r2, #0]
 8005bb8:	e740      	b.n	8005a3c <_dtoa_r+0x94c>
 8005bba:	9b08      	ldr	r3, [sp, #32]
 8005bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bbe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d042      	beq.n	8005c4c <_dtoa_r+0xb5c>
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	2300      	movs	r3, #0
 8005bca:	220a      	movs	r2, #10
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f9d1 	bl	8005f74 <__multadd>
 8005bd2:	45b0      	cmp	r8, r6
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	f04f 020a 	mov.w	r2, #10
 8005bde:	4641      	mov	r1, r8
 8005be0:	4628      	mov	r0, r5
 8005be2:	d107      	bne.n	8005bf4 <_dtoa_r+0xb04>
 8005be4:	f000 f9c6 	bl	8005f74 <__multadd>
 8005be8:	4680      	mov	r8, r0
 8005bea:	4606      	mov	r6, r0
 8005bec:	9b08      	ldr	r3, [sp, #32]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	9308      	str	r3, [sp, #32]
 8005bf2:	e775      	b.n	8005ae0 <_dtoa_r+0x9f0>
 8005bf4:	f000 f9be 	bl	8005f74 <__multadd>
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4680      	mov	r8, r0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	220a      	movs	r2, #10
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 f9b7 	bl	8005f74 <__multadd>
 8005c06:	4606      	mov	r6, r0
 8005c08:	e7f0      	b.n	8005bec <_dtoa_r+0xafc>
 8005c0a:	9b08      	ldr	r3, [sp, #32]
 8005c0c:	9306      	str	r3, [sp, #24]
 8005c0e:	9f03      	ldr	r7, [sp, #12]
 8005c10:	4621      	mov	r1, r4
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7ff f9e2 	bl	8004fdc <quorem>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c1e:	f807 9b01 	strb.w	r9, [r7], #1
 8005c22:	1afa      	subs	r2, r7, r3
 8005c24:	9b06      	ldr	r3, [sp, #24]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	dd07      	ble.n	8005c3a <_dtoa_r+0xb4a>
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	220a      	movs	r2, #10
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 f99f 	bl	8005f74 <__multadd>
 8005c36:	4682      	mov	sl, r0
 8005c38:	e7ea      	b.n	8005c10 <_dtoa_r+0xb20>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	f04f 0800 	mov.w	r8, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bfcc      	ite	gt
 8005c44:	461f      	movgt	r7, r3
 8005c46:	2701      	movle	r7, #1
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	441f      	add	r7, r3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 fb85 	bl	8006360 <__lshift>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4682      	mov	sl, r0
 8005c5a:	f000 fbed 	bl	8006438 <__mcmp>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	dc97      	bgt.n	8005b92 <_dtoa_r+0xaa2>
 8005c62:	d102      	bne.n	8005c6a <_dtoa_r+0xb7a>
 8005c64:	f019 0f01 	tst.w	r9, #1
 8005c68:	d193      	bne.n	8005b92 <_dtoa_r+0xaa2>
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	461f      	mov	r7, r3
 8005c6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c72:	2a30      	cmp	r2, #48	; 0x30
 8005c74:	d0fa      	beq.n	8005c6c <_dtoa_r+0xb7c>
 8005c76:	e6e1      	b.n	8005a3c <_dtoa_r+0x94c>
 8005c78:	9a03      	ldr	r2, [sp, #12]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d18a      	bne.n	8005b94 <_dtoa_r+0xaa4>
 8005c7e:	2331      	movs	r3, #49	; 0x31
 8005c80:	f10b 0b01 	add.w	fp, fp, #1
 8005c84:	e797      	b.n	8005bb6 <_dtoa_r+0xac6>
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <_dtoa_r+0xbc0>)
 8005c88:	f7ff ba9f 	b.w	80051ca <_dtoa_r+0xda>
 8005c8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f47f aa77 	bne.w	8005182 <_dtoa_r+0x92>
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <_dtoa_r+0xbc4>)
 8005c96:	f7ff ba98 	b.w	80051ca <_dtoa_r+0xda>
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dcb6      	bgt.n	8005c0e <_dtoa_r+0xb1e>
 8005ca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f73f aeb5 	bgt.w	8005a12 <_dtoa_r+0x922>
 8005ca8:	e7b1      	b.n	8005c0e <_dtoa_r+0xb1e>
 8005caa:	bf00      	nop
 8005cac:	08008f63 	.word	0x08008f63
 8005cb0:	08008ebe 	.word	0x08008ebe
 8005cb4:	08008ee7 	.word	0x08008ee7

08005cb8 <_free_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4605      	mov	r5, r0
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d040      	beq.n	8005d42 <_free_r+0x8a>
 8005cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc4:	1f0c      	subs	r4, r1, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfb8      	it	lt
 8005cca:	18e4      	addlt	r4, r4, r3
 8005ccc:	f000 f8e4 	bl	8005e98 <__malloc_lock>
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <_free_r+0x8c>)
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	b933      	cbnz	r3, 8005ce4 <_free_r+0x2c>
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	6014      	str	r4, [r2, #0]
 8005cda:	4628      	mov	r0, r5
 8005cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce0:	f000 b8e0 	b.w	8005ea4 <__malloc_unlock>
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	d908      	bls.n	8005cfa <_free_r+0x42>
 8005ce8:	6820      	ldr	r0, [r4, #0]
 8005cea:	1821      	adds	r1, r4, r0
 8005cec:	428b      	cmp	r3, r1
 8005cee:	bf01      	itttt	eq
 8005cf0:	6819      	ldreq	r1, [r3, #0]
 8005cf2:	685b      	ldreq	r3, [r3, #4]
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	e7ed      	b.n	8005cd6 <_free_r+0x1e>
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	b10b      	cbz	r3, 8005d04 <_free_r+0x4c>
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	d9fa      	bls.n	8005cfa <_free_r+0x42>
 8005d04:	6811      	ldr	r1, [r2, #0]
 8005d06:	1850      	adds	r0, r2, r1
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d10b      	bne.n	8005d24 <_free_r+0x6c>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	4401      	add	r1, r0
 8005d10:	1850      	adds	r0, r2, r1
 8005d12:	4283      	cmp	r3, r0
 8005d14:	6011      	str	r1, [r2, #0]
 8005d16:	d1e0      	bne.n	8005cda <_free_r+0x22>
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4408      	add	r0, r1
 8005d1e:	6010      	str	r0, [r2, #0]
 8005d20:	6053      	str	r3, [r2, #4]
 8005d22:	e7da      	b.n	8005cda <_free_r+0x22>
 8005d24:	d902      	bls.n	8005d2c <_free_r+0x74>
 8005d26:	230c      	movs	r3, #12
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	e7d6      	b.n	8005cda <_free_r+0x22>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	1821      	adds	r1, r4, r0
 8005d30:	428b      	cmp	r3, r1
 8005d32:	bf01      	itttt	eq
 8005d34:	6819      	ldreq	r1, [r3, #0]
 8005d36:	685b      	ldreq	r3, [r3, #4]
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6063      	str	r3, [r4, #4]
 8005d3e:	6054      	str	r4, [r2, #4]
 8005d40:	e7cb      	b.n	8005cda <_free_r+0x22>
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000430 	.word	0x20000430

08005d48 <malloc>:
 8005d48:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <malloc+0xc>)
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	f000 b823 	b.w	8005d98 <_malloc_r>
 8005d52:	bf00      	nop
 8005d54:	20000064 	.word	0x20000064

08005d58 <sbrk_aligned>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4e0e      	ldr	r6, [pc, #56]	; (8005d94 <sbrk_aligned+0x3c>)
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	6831      	ldr	r1, [r6, #0]
 8005d60:	4605      	mov	r5, r0
 8005d62:	b911      	cbnz	r1, 8005d6a <sbrk_aligned+0x12>
 8005d64:	f001 ffd2 	bl	8007d0c <_sbrk_r>
 8005d68:	6030      	str	r0, [r6, #0]
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f001 ffcd 	bl	8007d0c <_sbrk_r>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d00a      	beq.n	8005d8c <sbrk_aligned+0x34>
 8005d76:	1cc4      	adds	r4, r0, #3
 8005d78:	f024 0403 	bic.w	r4, r4, #3
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	d007      	beq.n	8005d90 <sbrk_aligned+0x38>
 8005d80:	1a21      	subs	r1, r4, r0
 8005d82:	4628      	mov	r0, r5
 8005d84:	f001 ffc2 	bl	8007d0c <_sbrk_r>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d101      	bne.n	8005d90 <sbrk_aligned+0x38>
 8005d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d90:	4620      	mov	r0, r4
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	20000434 	.word	0x20000434

08005d98 <_malloc_r>:
 8005d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	1ccd      	adds	r5, r1, #3
 8005d9e:	f025 0503 	bic.w	r5, r5, #3
 8005da2:	3508      	adds	r5, #8
 8005da4:	2d0c      	cmp	r5, #12
 8005da6:	bf38      	it	cc
 8005da8:	250c      	movcc	r5, #12
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	4607      	mov	r7, r0
 8005dae:	db01      	blt.n	8005db4 <_malloc_r+0x1c>
 8005db0:	42a9      	cmp	r1, r5
 8005db2:	d905      	bls.n	8005dc0 <_malloc_r+0x28>
 8005db4:	230c      	movs	r3, #12
 8005db6:	2600      	movs	r6, #0
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e94 <_malloc_r+0xfc>
 8005dc4:	f000 f868 	bl	8005e98 <__malloc_lock>
 8005dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dcc:	461c      	mov	r4, r3
 8005dce:	bb5c      	cbnz	r4, 8005e28 <_malloc_r+0x90>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff ffc0 	bl	8005d58 <sbrk_aligned>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	4604      	mov	r4, r0
 8005ddc:	d155      	bne.n	8005e8a <_malloc_r+0xf2>
 8005dde:	f8d8 4000 	ldr.w	r4, [r8]
 8005de2:	4626      	mov	r6, r4
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	d145      	bne.n	8005e74 <_malloc_r+0xdc>
 8005de8:	2c00      	cmp	r4, #0
 8005dea:	d048      	beq.n	8005e7e <_malloc_r+0xe6>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	4631      	mov	r1, r6
 8005df0:	4638      	mov	r0, r7
 8005df2:	eb04 0903 	add.w	r9, r4, r3
 8005df6:	f001 ff89 	bl	8007d0c <_sbrk_r>
 8005dfa:	4581      	cmp	r9, r0
 8005dfc:	d13f      	bne.n	8005e7e <_malloc_r+0xe6>
 8005dfe:	6821      	ldr	r1, [r4, #0]
 8005e00:	4638      	mov	r0, r7
 8005e02:	1a6d      	subs	r5, r5, r1
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7ff ffa7 	bl	8005d58 <sbrk_aligned>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d037      	beq.n	8005e7e <_malloc_r+0xe6>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	442b      	add	r3, r5
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	f8d8 3000 	ldr.w	r3, [r8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d038      	beq.n	8005e8e <_malloc_r+0xf6>
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	42a2      	cmp	r2, r4
 8005e20:	d12b      	bne.n	8005e7a <_malloc_r+0xe2>
 8005e22:	2200      	movs	r2, #0
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	e00f      	b.n	8005e48 <_malloc_r+0xb0>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	1b52      	subs	r2, r2, r5
 8005e2c:	d41f      	bmi.n	8005e6e <_malloc_r+0xd6>
 8005e2e:	2a0b      	cmp	r2, #11
 8005e30:	d917      	bls.n	8005e62 <_malloc_r+0xca>
 8005e32:	1961      	adds	r1, r4, r5
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	6025      	str	r5, [r4, #0]
 8005e38:	bf18      	it	ne
 8005e3a:	6059      	strne	r1, [r3, #4]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	bf08      	it	eq
 8005e40:	f8c8 1000 	streq.w	r1, [r8]
 8005e44:	5162      	str	r2, [r4, r5]
 8005e46:	604b      	str	r3, [r1, #4]
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f104 060b 	add.w	r6, r4, #11
 8005e4e:	f000 f829 	bl	8005ea4 <__malloc_unlock>
 8005e52:	f026 0607 	bic.w	r6, r6, #7
 8005e56:	1d23      	adds	r3, r4, #4
 8005e58:	1af2      	subs	r2, r6, r3
 8005e5a:	d0ae      	beq.n	8005dba <_malloc_r+0x22>
 8005e5c:	1b9b      	subs	r3, r3, r6
 8005e5e:	50a3      	str	r3, [r4, r2]
 8005e60:	e7ab      	b.n	8005dba <_malloc_r+0x22>
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	6862      	ldr	r2, [r4, #4]
 8005e66:	d1dd      	bne.n	8005e24 <_malloc_r+0x8c>
 8005e68:	f8c8 2000 	str.w	r2, [r8]
 8005e6c:	e7ec      	b.n	8005e48 <_malloc_r+0xb0>
 8005e6e:	4623      	mov	r3, r4
 8005e70:	6864      	ldr	r4, [r4, #4]
 8005e72:	e7ac      	b.n	8005dce <_malloc_r+0x36>
 8005e74:	4634      	mov	r4, r6
 8005e76:	6876      	ldr	r6, [r6, #4]
 8005e78:	e7b4      	b.n	8005de4 <_malloc_r+0x4c>
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	e7cc      	b.n	8005e18 <_malloc_r+0x80>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	4638      	mov	r0, r7
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	f000 f80e 	bl	8005ea4 <__malloc_unlock>
 8005e88:	e797      	b.n	8005dba <_malloc_r+0x22>
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	e7dc      	b.n	8005e48 <_malloc_r+0xb0>
 8005e8e:	605b      	str	r3, [r3, #4]
 8005e90:	deff      	udf	#255	; 0xff
 8005e92:	bf00      	nop
 8005e94:	20000430 	.word	0x20000430

08005e98 <__malloc_lock>:
 8005e98:	4801      	ldr	r0, [pc, #4]	; (8005ea0 <__malloc_lock+0x8>)
 8005e9a:	f7ff b88a 	b.w	8004fb2 <__retarget_lock_acquire_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	2000042c 	.word	0x2000042c

08005ea4 <__malloc_unlock>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__malloc_unlock+0x8>)
 8005ea6:	f7ff b885 	b.w	8004fb4 <__retarget_lock_release_recursive>
 8005eaa:	bf00      	nop
 8005eac:	2000042c 	.word	0x2000042c

08005eb0 <_Balloc>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	69c6      	ldr	r6, [r0, #28]
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	b976      	cbnz	r6, 8005ed8 <_Balloc+0x28>
 8005eba:	2010      	movs	r0, #16
 8005ebc:	f7ff ff44 	bl	8005d48 <malloc>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	61e0      	str	r0, [r4, #28]
 8005ec4:	b920      	cbnz	r0, 8005ed0 <_Balloc+0x20>
 8005ec6:	216b      	movs	r1, #107	; 0x6b
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <_Balloc+0x78>)
 8005eca:	4818      	ldr	r0, [pc, #96]	; (8005f2c <_Balloc+0x7c>)
 8005ecc:	f001 ff42 	bl	8007d54 <__assert_func>
 8005ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ed4:	6006      	str	r6, [r0, #0]
 8005ed6:	60c6      	str	r6, [r0, #12]
 8005ed8:	69e6      	ldr	r6, [r4, #28]
 8005eda:	68f3      	ldr	r3, [r6, #12]
 8005edc:	b183      	cbz	r3, 8005f00 <_Balloc+0x50>
 8005ede:	69e3      	ldr	r3, [r4, #28]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ee6:	b9b8      	cbnz	r0, 8005f18 <_Balloc+0x68>
 8005ee8:	2101      	movs	r1, #1
 8005eea:	fa01 f605 	lsl.w	r6, r1, r5
 8005eee:	1d72      	adds	r2, r6, #5
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	f001 ff4c 	bl	8007d90 <_calloc_r>
 8005ef8:	b160      	cbz	r0, 8005f14 <_Balloc+0x64>
 8005efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005efe:	e00e      	b.n	8005f1e <_Balloc+0x6e>
 8005f00:	2221      	movs	r2, #33	; 0x21
 8005f02:	2104      	movs	r1, #4
 8005f04:	4620      	mov	r0, r4
 8005f06:	f001 ff43 	bl	8007d90 <_calloc_r>
 8005f0a:	69e3      	ldr	r3, [r4, #28]
 8005f0c:	60f0      	str	r0, [r6, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e4      	bne.n	8005ede <_Balloc+0x2e>
 8005f14:	2000      	movs	r0, #0
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	6802      	ldr	r2, [r0, #0]
 8005f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f24:	e7f7      	b.n	8005f16 <_Balloc+0x66>
 8005f26:	bf00      	nop
 8005f28:	08008ef4 	.word	0x08008ef4
 8005f2c:	08008f74 	.word	0x08008f74

08005f30 <_Bfree>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	69c6      	ldr	r6, [r0, #28]
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b976      	cbnz	r6, 8005f58 <_Bfree+0x28>
 8005f3a:	2010      	movs	r0, #16
 8005f3c:	f7ff ff04 	bl	8005d48 <malloc>
 8005f40:	4602      	mov	r2, r0
 8005f42:	61e8      	str	r0, [r5, #28]
 8005f44:	b920      	cbnz	r0, 8005f50 <_Bfree+0x20>
 8005f46:	218f      	movs	r1, #143	; 0x8f
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <_Bfree+0x3c>)
 8005f4a:	4809      	ldr	r0, [pc, #36]	; (8005f70 <_Bfree+0x40>)
 8005f4c:	f001 ff02 	bl	8007d54 <__assert_func>
 8005f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f54:	6006      	str	r6, [r0, #0]
 8005f56:	60c6      	str	r6, [r0, #12]
 8005f58:	b13c      	cbz	r4, 8005f6a <_Bfree+0x3a>
 8005f5a:	69eb      	ldr	r3, [r5, #28]
 8005f5c:	6862      	ldr	r2, [r4, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f64:	6021      	str	r1, [r4, #0]
 8005f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	08008ef4 	.word	0x08008ef4
 8005f70:	08008f74 	.word	0x08008f74

08005f74 <__multadd>:
 8005f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	4607      	mov	r7, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	461e      	mov	r6, r3
 8005f7e:	2000      	movs	r0, #0
 8005f80:	690d      	ldr	r5, [r1, #16]
 8005f82:	f101 0c14 	add.w	ip, r1, #20
 8005f86:	f8dc 3000 	ldr.w	r3, [ip]
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	b299      	uxth	r1, r3
 8005f8e:	fb02 6101 	mla	r1, r2, r1, r6
 8005f92:	0c1e      	lsrs	r6, r3, #16
 8005f94:	0c0b      	lsrs	r3, r1, #16
 8005f96:	fb02 3306 	mla	r3, r2, r6, r3
 8005f9a:	b289      	uxth	r1, r1
 8005f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fa0:	4285      	cmp	r5, r0
 8005fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fa6:	f84c 1b04 	str.w	r1, [ip], #4
 8005faa:	dcec      	bgt.n	8005f86 <__multadd+0x12>
 8005fac:	b30e      	cbz	r6, 8005ff2 <__multadd+0x7e>
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	42ab      	cmp	r3, r5
 8005fb2:	dc19      	bgt.n	8005fe8 <__multadd+0x74>
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	3101      	adds	r1, #1
 8005fba:	f7ff ff79 	bl	8005eb0 <_Balloc>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	b928      	cbnz	r0, 8005fce <__multadd+0x5a>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	21ba      	movs	r1, #186	; 0xba
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <__multadd+0x84>)
 8005fc8:	480c      	ldr	r0, [pc, #48]	; (8005ffc <__multadd+0x88>)
 8005fca:	f001 fec3 	bl	8007d54 <__assert_func>
 8005fce:	6922      	ldr	r2, [r4, #16]
 8005fd0:	f104 010c 	add.w	r1, r4, #12
 8005fd4:	3202      	adds	r2, #2
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	300c      	adds	r0, #12
 8005fda:	f001 fea7 	bl	8007d2c <memcpy>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ffa5 	bl	8005f30 <_Bfree>
 8005fe6:	4644      	mov	r4, r8
 8005fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fec:	3501      	adds	r5, #1
 8005fee:	615e      	str	r6, [r3, #20]
 8005ff0:	6125      	str	r5, [r4, #16]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	08008f63 	.word	0x08008f63
 8005ffc:	08008f74 	.word	0x08008f74

08006000 <__s2b>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4615      	mov	r5, r2
 8006006:	2209      	movs	r2, #9
 8006008:	461f      	mov	r7, r3
 800600a:	3308      	adds	r3, #8
 800600c:	460c      	mov	r4, r1
 800600e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006012:	4606      	mov	r6, r0
 8006014:	2201      	movs	r2, #1
 8006016:	2100      	movs	r1, #0
 8006018:	429a      	cmp	r2, r3
 800601a:	db09      	blt.n	8006030 <__s2b+0x30>
 800601c:	4630      	mov	r0, r6
 800601e:	f7ff ff47 	bl	8005eb0 <_Balloc>
 8006022:	b940      	cbnz	r0, 8006036 <__s2b+0x36>
 8006024:	4602      	mov	r2, r0
 8006026:	21d3      	movs	r1, #211	; 0xd3
 8006028:	4b18      	ldr	r3, [pc, #96]	; (800608c <__s2b+0x8c>)
 800602a:	4819      	ldr	r0, [pc, #100]	; (8006090 <__s2b+0x90>)
 800602c:	f001 fe92 	bl	8007d54 <__assert_func>
 8006030:	0052      	lsls	r2, r2, #1
 8006032:	3101      	adds	r1, #1
 8006034:	e7f0      	b.n	8006018 <__s2b+0x18>
 8006036:	9b08      	ldr	r3, [sp, #32]
 8006038:	2d09      	cmp	r5, #9
 800603a:	6143      	str	r3, [r0, #20]
 800603c:	f04f 0301 	mov.w	r3, #1
 8006040:	6103      	str	r3, [r0, #16]
 8006042:	dd16      	ble.n	8006072 <__s2b+0x72>
 8006044:	f104 0909 	add.w	r9, r4, #9
 8006048:	46c8      	mov	r8, r9
 800604a:	442c      	add	r4, r5
 800604c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006050:	4601      	mov	r1, r0
 8006052:	220a      	movs	r2, #10
 8006054:	4630      	mov	r0, r6
 8006056:	3b30      	subs	r3, #48	; 0x30
 8006058:	f7ff ff8c 	bl	8005f74 <__multadd>
 800605c:	45a0      	cmp	r8, r4
 800605e:	d1f5      	bne.n	800604c <__s2b+0x4c>
 8006060:	f1a5 0408 	sub.w	r4, r5, #8
 8006064:	444c      	add	r4, r9
 8006066:	1b2d      	subs	r5, r5, r4
 8006068:	1963      	adds	r3, r4, r5
 800606a:	42bb      	cmp	r3, r7
 800606c:	db04      	blt.n	8006078 <__s2b+0x78>
 800606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006072:	2509      	movs	r5, #9
 8006074:	340a      	adds	r4, #10
 8006076:	e7f6      	b.n	8006066 <__s2b+0x66>
 8006078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800607c:	4601      	mov	r1, r0
 800607e:	220a      	movs	r2, #10
 8006080:	4630      	mov	r0, r6
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	f7ff ff76 	bl	8005f74 <__multadd>
 8006088:	e7ee      	b.n	8006068 <__s2b+0x68>
 800608a:	bf00      	nop
 800608c:	08008f63 	.word	0x08008f63
 8006090:	08008f74 	.word	0x08008f74

08006094 <__hi0bits>:
 8006094:	0c02      	lsrs	r2, r0, #16
 8006096:	0412      	lsls	r2, r2, #16
 8006098:	4603      	mov	r3, r0
 800609a:	b9ca      	cbnz	r2, 80060d0 <__hi0bits+0x3c>
 800609c:	0403      	lsls	r3, r0, #16
 800609e:	2010      	movs	r0, #16
 80060a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060a4:	bf04      	itt	eq
 80060a6:	021b      	lsleq	r3, r3, #8
 80060a8:	3008      	addeq	r0, #8
 80060aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060ae:	bf04      	itt	eq
 80060b0:	011b      	lsleq	r3, r3, #4
 80060b2:	3004      	addeq	r0, #4
 80060b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060b8:	bf04      	itt	eq
 80060ba:	009b      	lsleq	r3, r3, #2
 80060bc:	3002      	addeq	r0, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	db05      	blt.n	80060ce <__hi0bits+0x3a>
 80060c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80060c6:	f100 0001 	add.w	r0, r0, #1
 80060ca:	bf08      	it	eq
 80060cc:	2020      	moveq	r0, #32
 80060ce:	4770      	bx	lr
 80060d0:	2000      	movs	r0, #0
 80060d2:	e7e5      	b.n	80060a0 <__hi0bits+0xc>

080060d4 <__lo0bits>:
 80060d4:	6803      	ldr	r3, [r0, #0]
 80060d6:	4602      	mov	r2, r0
 80060d8:	f013 0007 	ands.w	r0, r3, #7
 80060dc:	d00b      	beq.n	80060f6 <__lo0bits+0x22>
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	d421      	bmi.n	8006126 <__lo0bits+0x52>
 80060e2:	0798      	lsls	r0, r3, #30
 80060e4:	bf49      	itett	mi
 80060e6:	085b      	lsrmi	r3, r3, #1
 80060e8:	089b      	lsrpl	r3, r3, #2
 80060ea:	2001      	movmi	r0, #1
 80060ec:	6013      	strmi	r3, [r2, #0]
 80060ee:	bf5c      	itt	pl
 80060f0:	2002      	movpl	r0, #2
 80060f2:	6013      	strpl	r3, [r2, #0]
 80060f4:	4770      	bx	lr
 80060f6:	b299      	uxth	r1, r3
 80060f8:	b909      	cbnz	r1, 80060fe <__lo0bits+0x2a>
 80060fa:	2010      	movs	r0, #16
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	b2d9      	uxtb	r1, r3
 8006100:	b909      	cbnz	r1, 8006106 <__lo0bits+0x32>
 8006102:	3008      	adds	r0, #8
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	0719      	lsls	r1, r3, #28
 8006108:	bf04      	itt	eq
 800610a:	091b      	lsreq	r3, r3, #4
 800610c:	3004      	addeq	r0, #4
 800610e:	0799      	lsls	r1, r3, #30
 8006110:	bf04      	itt	eq
 8006112:	089b      	lsreq	r3, r3, #2
 8006114:	3002      	addeq	r0, #2
 8006116:	07d9      	lsls	r1, r3, #31
 8006118:	d403      	bmi.n	8006122 <__lo0bits+0x4e>
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	f100 0001 	add.w	r0, r0, #1
 8006120:	d003      	beq.n	800612a <__lo0bits+0x56>
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4770      	bx	lr
 8006126:	2000      	movs	r0, #0
 8006128:	4770      	bx	lr
 800612a:	2020      	movs	r0, #32
 800612c:	4770      	bx	lr
	...

08006130 <__i2b>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	2101      	movs	r1, #1
 8006136:	f7ff febb 	bl	8005eb0 <_Balloc>
 800613a:	4602      	mov	r2, r0
 800613c:	b928      	cbnz	r0, 800614a <__i2b+0x1a>
 800613e:	f240 1145 	movw	r1, #325	; 0x145
 8006142:	4b04      	ldr	r3, [pc, #16]	; (8006154 <__i2b+0x24>)
 8006144:	4804      	ldr	r0, [pc, #16]	; (8006158 <__i2b+0x28>)
 8006146:	f001 fe05 	bl	8007d54 <__assert_func>
 800614a:	2301      	movs	r3, #1
 800614c:	6144      	str	r4, [r0, #20]
 800614e:	6103      	str	r3, [r0, #16]
 8006150:	bd10      	pop	{r4, pc}
 8006152:	bf00      	nop
 8006154:	08008f63 	.word	0x08008f63
 8006158:	08008f74 	.word	0x08008f74

0800615c <__multiply>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4691      	mov	r9, r2
 8006162:	690a      	ldr	r2, [r1, #16]
 8006164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006168:	460c      	mov	r4, r1
 800616a:	429a      	cmp	r2, r3
 800616c:	bfbe      	ittt	lt
 800616e:	460b      	movlt	r3, r1
 8006170:	464c      	movlt	r4, r9
 8006172:	4699      	movlt	r9, r3
 8006174:	6927      	ldr	r7, [r4, #16]
 8006176:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	6861      	ldr	r1, [r4, #4]
 800617e:	eb07 060a 	add.w	r6, r7, sl
 8006182:	42b3      	cmp	r3, r6
 8006184:	b085      	sub	sp, #20
 8006186:	bfb8      	it	lt
 8006188:	3101      	addlt	r1, #1
 800618a:	f7ff fe91 	bl	8005eb0 <_Balloc>
 800618e:	b930      	cbnz	r0, 800619e <__multiply+0x42>
 8006190:	4602      	mov	r2, r0
 8006192:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006196:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <__multiply+0x148>)
 8006198:	4843      	ldr	r0, [pc, #268]	; (80062a8 <__multiply+0x14c>)
 800619a:	f001 fddb 	bl	8007d54 <__assert_func>
 800619e:	f100 0514 	add.w	r5, r0, #20
 80061a2:	462b      	mov	r3, r5
 80061a4:	2200      	movs	r2, #0
 80061a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061aa:	4543      	cmp	r3, r8
 80061ac:	d321      	bcc.n	80061f2 <__multiply+0x96>
 80061ae:	f104 0314 	add.w	r3, r4, #20
 80061b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061b6:	f109 0314 	add.w	r3, r9, #20
 80061ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061be:	9202      	str	r2, [sp, #8]
 80061c0:	1b3a      	subs	r2, r7, r4
 80061c2:	3a15      	subs	r2, #21
 80061c4:	f022 0203 	bic.w	r2, r2, #3
 80061c8:	3204      	adds	r2, #4
 80061ca:	f104 0115 	add.w	r1, r4, #21
 80061ce:	428f      	cmp	r7, r1
 80061d0:	bf38      	it	cc
 80061d2:	2204      	movcc	r2, #4
 80061d4:	9201      	str	r2, [sp, #4]
 80061d6:	9a02      	ldr	r2, [sp, #8]
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d80c      	bhi.n	80061f8 <__multiply+0x9c>
 80061de:	2e00      	cmp	r6, #0
 80061e0:	dd03      	ble.n	80061ea <__multiply+0x8e>
 80061e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d05a      	beq.n	80062a0 <__multiply+0x144>
 80061ea:	6106      	str	r6, [r0, #16]
 80061ec:	b005      	add	sp, #20
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	f843 2b04 	str.w	r2, [r3], #4
 80061f6:	e7d8      	b.n	80061aa <__multiply+0x4e>
 80061f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80061fc:	f1ba 0f00 	cmp.w	sl, #0
 8006200:	d023      	beq.n	800624a <__multiply+0xee>
 8006202:	46a9      	mov	r9, r5
 8006204:	f04f 0c00 	mov.w	ip, #0
 8006208:	f104 0e14 	add.w	lr, r4, #20
 800620c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006210:	f8d9 1000 	ldr.w	r1, [r9]
 8006214:	fa1f fb82 	uxth.w	fp, r2
 8006218:	b289      	uxth	r1, r1
 800621a:	fb0a 110b 	mla	r1, sl, fp, r1
 800621e:	4461      	add	r1, ip
 8006220:	f8d9 c000 	ldr.w	ip, [r9]
 8006224:	0c12      	lsrs	r2, r2, #16
 8006226:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800622a:	fb0a c202 	mla	r2, sl, r2, ip
 800622e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006232:	b289      	uxth	r1, r1
 8006234:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006238:	4577      	cmp	r7, lr
 800623a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800623e:	f849 1b04 	str.w	r1, [r9], #4
 8006242:	d8e3      	bhi.n	800620c <__multiply+0xb0>
 8006244:	9a01      	ldr	r2, [sp, #4]
 8006246:	f845 c002 	str.w	ip, [r5, r2]
 800624a:	9a03      	ldr	r2, [sp, #12]
 800624c:	3304      	adds	r3, #4
 800624e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006252:	f1b9 0f00 	cmp.w	r9, #0
 8006256:	d021      	beq.n	800629c <__multiply+0x140>
 8006258:	46ae      	mov	lr, r5
 800625a:	f04f 0a00 	mov.w	sl, #0
 800625e:	6829      	ldr	r1, [r5, #0]
 8006260:	f104 0c14 	add.w	ip, r4, #20
 8006264:	f8bc b000 	ldrh.w	fp, [ip]
 8006268:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800626c:	b289      	uxth	r1, r1
 800626e:	fb09 220b 	mla	r2, r9, fp, r2
 8006272:	4452      	add	r2, sl
 8006274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006278:	f84e 1b04 	str.w	r1, [lr], #4
 800627c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006284:	f8be 1000 	ldrh.w	r1, [lr]
 8006288:	4567      	cmp	r7, ip
 800628a:	fb09 110a 	mla	r1, r9, sl, r1
 800628e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006292:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006296:	d8e5      	bhi.n	8006264 <__multiply+0x108>
 8006298:	9a01      	ldr	r2, [sp, #4]
 800629a:	50a9      	str	r1, [r5, r2]
 800629c:	3504      	adds	r5, #4
 800629e:	e79a      	b.n	80061d6 <__multiply+0x7a>
 80062a0:	3e01      	subs	r6, #1
 80062a2:	e79c      	b.n	80061de <__multiply+0x82>
 80062a4:	08008f63 	.word	0x08008f63
 80062a8:	08008f74 	.word	0x08008f74

080062ac <__pow5mult>:
 80062ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b0:	4615      	mov	r5, r2
 80062b2:	f012 0203 	ands.w	r2, r2, #3
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	d007      	beq.n	80062cc <__pow5mult+0x20>
 80062bc:	4c25      	ldr	r4, [pc, #148]	; (8006354 <__pow5mult+0xa8>)
 80062be:	3a01      	subs	r2, #1
 80062c0:	2300      	movs	r3, #0
 80062c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062c6:	f7ff fe55 	bl	8005f74 <__multadd>
 80062ca:	4607      	mov	r7, r0
 80062cc:	10ad      	asrs	r5, r5, #2
 80062ce:	d03d      	beq.n	800634c <__pow5mult+0xa0>
 80062d0:	69f4      	ldr	r4, [r6, #28]
 80062d2:	b97c      	cbnz	r4, 80062f4 <__pow5mult+0x48>
 80062d4:	2010      	movs	r0, #16
 80062d6:	f7ff fd37 	bl	8005d48 <malloc>
 80062da:	4602      	mov	r2, r0
 80062dc:	61f0      	str	r0, [r6, #28]
 80062de:	b928      	cbnz	r0, 80062ec <__pow5mult+0x40>
 80062e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062e4:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <__pow5mult+0xac>)
 80062e6:	481d      	ldr	r0, [pc, #116]	; (800635c <__pow5mult+0xb0>)
 80062e8:	f001 fd34 	bl	8007d54 <__assert_func>
 80062ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062f0:	6004      	str	r4, [r0, #0]
 80062f2:	60c4      	str	r4, [r0, #12]
 80062f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062fc:	b94c      	cbnz	r4, 8006312 <__pow5mult+0x66>
 80062fe:	f240 2171 	movw	r1, #625	; 0x271
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff ff14 	bl	8006130 <__i2b>
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006310:	6003      	str	r3, [r0, #0]
 8006312:	f04f 0900 	mov.w	r9, #0
 8006316:	07eb      	lsls	r3, r5, #31
 8006318:	d50a      	bpl.n	8006330 <__pow5mult+0x84>
 800631a:	4639      	mov	r1, r7
 800631c:	4622      	mov	r2, r4
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ff1c 	bl	800615c <__multiply>
 8006324:	4680      	mov	r8, r0
 8006326:	4639      	mov	r1, r7
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fe01 	bl	8005f30 <_Bfree>
 800632e:	4647      	mov	r7, r8
 8006330:	106d      	asrs	r5, r5, #1
 8006332:	d00b      	beq.n	800634c <__pow5mult+0xa0>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	b938      	cbnz	r0, 8006348 <__pow5mult+0x9c>
 8006338:	4622      	mov	r2, r4
 800633a:	4621      	mov	r1, r4
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff ff0d 	bl	800615c <__multiply>
 8006342:	6020      	str	r0, [r4, #0]
 8006344:	f8c0 9000 	str.w	r9, [r0]
 8006348:	4604      	mov	r4, r0
 800634a:	e7e4      	b.n	8006316 <__pow5mult+0x6a>
 800634c:	4638      	mov	r0, r7
 800634e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006352:	bf00      	nop
 8006354:	080090c0 	.word	0x080090c0
 8006358:	08008ef4 	.word	0x08008ef4
 800635c:	08008f74 	.word	0x08008f74

08006360 <__lshift>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	4607      	mov	r7, r0
 8006368:	4691      	mov	r9, r2
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6849      	ldr	r1, [r1, #4]
 800636e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006378:	f108 0601 	add.w	r6, r8, #1
 800637c:	42b3      	cmp	r3, r6
 800637e:	db0b      	blt.n	8006398 <__lshift+0x38>
 8006380:	4638      	mov	r0, r7
 8006382:	f7ff fd95 	bl	8005eb0 <_Balloc>
 8006386:	4605      	mov	r5, r0
 8006388:	b948      	cbnz	r0, 800639e <__lshift+0x3e>
 800638a:	4602      	mov	r2, r0
 800638c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006390:	4b27      	ldr	r3, [pc, #156]	; (8006430 <__lshift+0xd0>)
 8006392:	4828      	ldr	r0, [pc, #160]	; (8006434 <__lshift+0xd4>)
 8006394:	f001 fcde 	bl	8007d54 <__assert_func>
 8006398:	3101      	adds	r1, #1
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	e7ee      	b.n	800637c <__lshift+0x1c>
 800639e:	2300      	movs	r3, #0
 80063a0:	f100 0114 	add.w	r1, r0, #20
 80063a4:	f100 0210 	add.w	r2, r0, #16
 80063a8:	4618      	mov	r0, r3
 80063aa:	4553      	cmp	r3, sl
 80063ac:	db33      	blt.n	8006416 <__lshift+0xb6>
 80063ae:	6920      	ldr	r0, [r4, #16]
 80063b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063b4:	f104 0314 	add.w	r3, r4, #20
 80063b8:	f019 091f 	ands.w	r9, r9, #31
 80063bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063c4:	d02b      	beq.n	800641e <__lshift+0xbe>
 80063c6:	468a      	mov	sl, r1
 80063c8:	2200      	movs	r2, #0
 80063ca:	f1c9 0e20 	rsb	lr, r9, #32
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	fa00 f009 	lsl.w	r0, r0, r9
 80063d4:	4310      	orrs	r0, r2
 80063d6:	f84a 0b04 	str.w	r0, [sl], #4
 80063da:	f853 2b04 	ldr.w	r2, [r3], #4
 80063de:	459c      	cmp	ip, r3
 80063e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80063e4:	d8f3      	bhi.n	80063ce <__lshift+0x6e>
 80063e6:	ebac 0304 	sub.w	r3, ip, r4
 80063ea:	3b15      	subs	r3, #21
 80063ec:	f023 0303 	bic.w	r3, r3, #3
 80063f0:	3304      	adds	r3, #4
 80063f2:	f104 0015 	add.w	r0, r4, #21
 80063f6:	4584      	cmp	ip, r0
 80063f8:	bf38      	it	cc
 80063fa:	2304      	movcc	r3, #4
 80063fc:	50ca      	str	r2, [r1, r3]
 80063fe:	b10a      	cbz	r2, 8006404 <__lshift+0xa4>
 8006400:	f108 0602 	add.w	r6, r8, #2
 8006404:	3e01      	subs	r6, #1
 8006406:	4638      	mov	r0, r7
 8006408:	4621      	mov	r1, r4
 800640a:	612e      	str	r6, [r5, #16]
 800640c:	f7ff fd90 	bl	8005f30 <_Bfree>
 8006410:	4628      	mov	r0, r5
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	f842 0f04 	str.w	r0, [r2, #4]!
 800641a:	3301      	adds	r3, #1
 800641c:	e7c5      	b.n	80063aa <__lshift+0x4a>
 800641e:	3904      	subs	r1, #4
 8006420:	f853 2b04 	ldr.w	r2, [r3], #4
 8006424:	459c      	cmp	ip, r3
 8006426:	f841 2f04 	str.w	r2, [r1, #4]!
 800642a:	d8f9      	bhi.n	8006420 <__lshift+0xc0>
 800642c:	e7ea      	b.n	8006404 <__lshift+0xa4>
 800642e:	bf00      	nop
 8006430:	08008f63 	.word	0x08008f63
 8006434:	08008f74 	.word	0x08008f74

08006438 <__mcmp>:
 8006438:	4603      	mov	r3, r0
 800643a:	690a      	ldr	r2, [r1, #16]
 800643c:	6900      	ldr	r0, [r0, #16]
 800643e:	b530      	push	{r4, r5, lr}
 8006440:	1a80      	subs	r0, r0, r2
 8006442:	d10d      	bne.n	8006460 <__mcmp+0x28>
 8006444:	3314      	adds	r3, #20
 8006446:	3114      	adds	r1, #20
 8006448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800644c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006458:	4295      	cmp	r5, r2
 800645a:	d002      	beq.n	8006462 <__mcmp+0x2a>
 800645c:	d304      	bcc.n	8006468 <__mcmp+0x30>
 800645e:	2001      	movs	r0, #1
 8006460:	bd30      	pop	{r4, r5, pc}
 8006462:	42a3      	cmp	r3, r4
 8006464:	d3f4      	bcc.n	8006450 <__mcmp+0x18>
 8006466:	e7fb      	b.n	8006460 <__mcmp+0x28>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	e7f8      	b.n	8006460 <__mcmp+0x28>
	...

08006470 <__mdiff>:
 8006470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	460d      	mov	r5, r1
 8006476:	4607      	mov	r7, r0
 8006478:	4611      	mov	r1, r2
 800647a:	4628      	mov	r0, r5
 800647c:	4614      	mov	r4, r2
 800647e:	f7ff ffdb 	bl	8006438 <__mcmp>
 8006482:	1e06      	subs	r6, r0, #0
 8006484:	d111      	bne.n	80064aa <__mdiff+0x3a>
 8006486:	4631      	mov	r1, r6
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff fd11 	bl	8005eb0 <_Balloc>
 800648e:	4602      	mov	r2, r0
 8006490:	b928      	cbnz	r0, 800649e <__mdiff+0x2e>
 8006492:	f240 2137 	movw	r1, #567	; 0x237
 8006496:	4b3a      	ldr	r3, [pc, #232]	; (8006580 <__mdiff+0x110>)
 8006498:	483a      	ldr	r0, [pc, #232]	; (8006584 <__mdiff+0x114>)
 800649a:	f001 fc5b 	bl	8007d54 <__assert_func>
 800649e:	2301      	movs	r3, #1
 80064a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064a4:	4610      	mov	r0, r2
 80064a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	bfa4      	itt	ge
 80064ac:	4623      	movge	r3, r4
 80064ae:	462c      	movge	r4, r5
 80064b0:	4638      	mov	r0, r7
 80064b2:	6861      	ldr	r1, [r4, #4]
 80064b4:	bfa6      	itte	ge
 80064b6:	461d      	movge	r5, r3
 80064b8:	2600      	movge	r6, #0
 80064ba:	2601      	movlt	r6, #1
 80064bc:	f7ff fcf8 	bl	8005eb0 <_Balloc>
 80064c0:	4602      	mov	r2, r0
 80064c2:	b918      	cbnz	r0, 80064cc <__mdiff+0x5c>
 80064c4:	f240 2145 	movw	r1, #581	; 0x245
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <__mdiff+0x110>)
 80064ca:	e7e5      	b.n	8006498 <__mdiff+0x28>
 80064cc:	f102 0814 	add.w	r8, r2, #20
 80064d0:	46c2      	mov	sl, r8
 80064d2:	f04f 0c00 	mov.w	ip, #0
 80064d6:	6927      	ldr	r7, [r4, #16]
 80064d8:	60c6      	str	r6, [r0, #12]
 80064da:	692e      	ldr	r6, [r5, #16]
 80064dc:	f104 0014 	add.w	r0, r4, #20
 80064e0:	f105 0914 	add.w	r9, r5, #20
 80064e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80064e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064ec:	3410      	adds	r4, #16
 80064ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80064f6:	fa1f f18b 	uxth.w	r1, fp
 80064fa:	4461      	add	r1, ip
 80064fc:	fa1f fc83 	uxth.w	ip, r3
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	eba1 010c 	sub.w	r1, r1, ip
 8006506:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800650a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800650e:	b289      	uxth	r1, r1
 8006510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006514:	454e      	cmp	r6, r9
 8006516:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800651a:	f84a 1b04 	str.w	r1, [sl], #4
 800651e:	d8e6      	bhi.n	80064ee <__mdiff+0x7e>
 8006520:	1b73      	subs	r3, r6, r5
 8006522:	3b15      	subs	r3, #21
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	3515      	adds	r5, #21
 800652a:	3304      	adds	r3, #4
 800652c:	42ae      	cmp	r6, r5
 800652e:	bf38      	it	cc
 8006530:	2304      	movcc	r3, #4
 8006532:	4418      	add	r0, r3
 8006534:	4443      	add	r3, r8
 8006536:	461e      	mov	r6, r3
 8006538:	4605      	mov	r5, r0
 800653a:	4575      	cmp	r5, lr
 800653c:	d30e      	bcc.n	800655c <__mdiff+0xec>
 800653e:	f10e 0103 	add.w	r1, lr, #3
 8006542:	1a09      	subs	r1, r1, r0
 8006544:	f021 0103 	bic.w	r1, r1, #3
 8006548:	3803      	subs	r0, #3
 800654a:	4586      	cmp	lr, r0
 800654c:	bf38      	it	cc
 800654e:	2100      	movcc	r1, #0
 8006550:	440b      	add	r3, r1
 8006552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006556:	b189      	cbz	r1, 800657c <__mdiff+0x10c>
 8006558:	6117      	str	r7, [r2, #16]
 800655a:	e7a3      	b.n	80064a4 <__mdiff+0x34>
 800655c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006560:	fa1f f188 	uxth.w	r1, r8
 8006564:	4461      	add	r1, ip
 8006566:	140c      	asrs	r4, r1, #16
 8006568:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800656c:	b289      	uxth	r1, r1
 800656e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006572:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006576:	f846 1b04 	str.w	r1, [r6], #4
 800657a:	e7de      	b.n	800653a <__mdiff+0xca>
 800657c:	3f01      	subs	r7, #1
 800657e:	e7e8      	b.n	8006552 <__mdiff+0xe2>
 8006580:	08008f63 	.word	0x08008f63
 8006584:	08008f74 	.word	0x08008f74

08006588 <__ulp>:
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <__ulp+0x3c>)
 800658a:	400b      	ands	r3, r1
 800658c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006590:	2b00      	cmp	r3, #0
 8006592:	dc08      	bgt.n	80065a6 <__ulp+0x1e>
 8006594:	425b      	negs	r3, r3
 8006596:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800659a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800659e:	da04      	bge.n	80065aa <__ulp+0x22>
 80065a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065a4:	4113      	asrs	r3, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	e008      	b.n	80065bc <__ulp+0x34>
 80065aa:	f1a2 0314 	sub.w	r3, r2, #20
 80065ae:	2b1e      	cmp	r3, #30
 80065b0:	bfd6      	itet	le
 80065b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80065b6:	2201      	movgt	r2, #1
 80065b8:	40da      	lsrle	r2, r3
 80065ba:	2300      	movs	r3, #0
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	7ff00000 	.word	0x7ff00000

080065c8 <__b2d>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	6905      	ldr	r5, [r0, #16]
 80065cc:	f100 0714 	add.w	r7, r0, #20
 80065d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80065d4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80065d8:	1f2e      	subs	r6, r5, #4
 80065da:	4620      	mov	r0, r4
 80065dc:	f7ff fd5a 	bl	8006094 <__hi0bits>
 80065e0:	f1c0 0220 	rsb	r2, r0, #32
 80065e4:	280a      	cmp	r0, #10
 80065e6:	4603      	mov	r3, r0
 80065e8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006654 <__b2d+0x8c>
 80065ec:	600a      	str	r2, [r1, #0]
 80065ee:	dc12      	bgt.n	8006616 <__b2d+0x4e>
 80065f0:	f1c0 0e0b 	rsb	lr, r0, #11
 80065f4:	fa24 f20e 	lsr.w	r2, r4, lr
 80065f8:	42b7      	cmp	r7, r6
 80065fa:	ea42 010c 	orr.w	r1, r2, ip
 80065fe:	bf2c      	ite	cs
 8006600:	2200      	movcs	r2, #0
 8006602:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006606:	3315      	adds	r3, #21
 8006608:	fa04 f303 	lsl.w	r3, r4, r3
 800660c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006610:	431a      	orrs	r2, r3
 8006612:	4610      	mov	r0, r2
 8006614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006616:	42b7      	cmp	r7, r6
 8006618:	bf2e      	itee	cs
 800661a:	2200      	movcs	r2, #0
 800661c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006620:	f1a5 0608 	subcc.w	r6, r5, #8
 8006624:	3b0b      	subs	r3, #11
 8006626:	d012      	beq.n	800664e <__b2d+0x86>
 8006628:	f1c3 0520 	rsb	r5, r3, #32
 800662c:	fa22 f105 	lsr.w	r1, r2, r5
 8006630:	409c      	lsls	r4, r3
 8006632:	430c      	orrs	r4, r1
 8006634:	42be      	cmp	r6, r7
 8006636:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800663a:	bf94      	ite	ls
 800663c:	2400      	movls	r4, #0
 800663e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006642:	409a      	lsls	r2, r3
 8006644:	40ec      	lsrs	r4, r5
 8006646:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800664a:	4322      	orrs	r2, r4
 800664c:	e7e1      	b.n	8006612 <__b2d+0x4a>
 800664e:	ea44 010c 	orr.w	r1, r4, ip
 8006652:	e7de      	b.n	8006612 <__b2d+0x4a>
 8006654:	3ff00000 	.word	0x3ff00000

08006658 <__d2b>:
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	2101      	movs	r1, #1
 800665c:	4617      	mov	r7, r2
 800665e:	461c      	mov	r4, r3
 8006660:	9e08      	ldr	r6, [sp, #32]
 8006662:	f7ff fc25 	bl	8005eb0 <_Balloc>
 8006666:	4605      	mov	r5, r0
 8006668:	b930      	cbnz	r0, 8006678 <__d2b+0x20>
 800666a:	4602      	mov	r2, r0
 800666c:	f240 310f 	movw	r1, #783	; 0x30f
 8006670:	4b22      	ldr	r3, [pc, #136]	; (80066fc <__d2b+0xa4>)
 8006672:	4823      	ldr	r0, [pc, #140]	; (8006700 <__d2b+0xa8>)
 8006674:	f001 fb6e 	bl	8007d54 <__assert_func>
 8006678:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800667c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006680:	bb24      	cbnz	r4, 80066cc <__d2b+0x74>
 8006682:	2f00      	cmp	r7, #0
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	d026      	beq.n	80066d6 <__d2b+0x7e>
 8006688:	4668      	mov	r0, sp
 800668a:	9700      	str	r7, [sp, #0]
 800668c:	f7ff fd22 	bl	80060d4 <__lo0bits>
 8006690:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006694:	b1e8      	cbz	r0, 80066d2 <__d2b+0x7a>
 8006696:	f1c0 0320 	rsb	r3, r0, #32
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	430b      	orrs	r3, r1
 80066a0:	40c2      	lsrs	r2, r0
 80066a2:	616b      	str	r3, [r5, #20]
 80066a4:	9201      	str	r2, [sp, #4]
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bf14      	ite	ne
 80066ac:	2102      	movne	r1, #2
 80066ae:	2101      	moveq	r1, #1
 80066b0:	61ab      	str	r3, [r5, #24]
 80066b2:	6129      	str	r1, [r5, #16]
 80066b4:	b1bc      	cbz	r4, 80066e6 <__d2b+0x8e>
 80066b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066ba:	4404      	add	r4, r0
 80066bc:	6034      	str	r4, [r6, #0]
 80066be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c4:	6018      	str	r0, [r3, #0]
 80066c6:	4628      	mov	r0, r5
 80066c8:	b003      	add	sp, #12
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d0:	e7d7      	b.n	8006682 <__d2b+0x2a>
 80066d2:	6169      	str	r1, [r5, #20]
 80066d4:	e7e7      	b.n	80066a6 <__d2b+0x4e>
 80066d6:	a801      	add	r0, sp, #4
 80066d8:	f7ff fcfc 	bl	80060d4 <__lo0bits>
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	2101      	movs	r1, #1
 80066e0:	616b      	str	r3, [r5, #20]
 80066e2:	3020      	adds	r0, #32
 80066e4:	e7e5      	b.n	80066b2 <__d2b+0x5a>
 80066e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066ea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80066ee:	6030      	str	r0, [r6, #0]
 80066f0:	6918      	ldr	r0, [r3, #16]
 80066f2:	f7ff fccf 	bl	8006094 <__hi0bits>
 80066f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066fa:	e7e2      	b.n	80066c2 <__d2b+0x6a>
 80066fc:	08008f63 	.word	0x08008f63
 8006700:	08008f74 	.word	0x08008f74

08006704 <__ratio>:
 8006704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	4688      	mov	r8, r1
 800670a:	4669      	mov	r1, sp
 800670c:	4681      	mov	r9, r0
 800670e:	f7ff ff5b 	bl	80065c8 <__b2d>
 8006712:	460f      	mov	r7, r1
 8006714:	4604      	mov	r4, r0
 8006716:	460d      	mov	r5, r1
 8006718:	4640      	mov	r0, r8
 800671a:	a901      	add	r1, sp, #4
 800671c:	f7ff ff54 	bl	80065c8 <__b2d>
 8006720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006724:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006728:	468b      	mov	fp, r1
 800672a:	eba3 0c02 	sub.w	ip, r3, r2
 800672e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfd5      	itete	le
 800673c:	460a      	movle	r2, r1
 800673e:	462a      	movgt	r2, r5
 8006740:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006744:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006748:	bfd8      	it	le
 800674a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800674e:	465b      	mov	r3, fp
 8006750:	4602      	mov	r2, r0
 8006752:	4639      	mov	r1, r7
 8006754:	4620      	mov	r0, r4
 8006756:	f7fa f855 	bl	8000804 <__aeabi_ddiv>
 800675a:	b003      	add	sp, #12
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006760 <__copybits>:
 8006760:	3901      	subs	r1, #1
 8006762:	b570      	push	{r4, r5, r6, lr}
 8006764:	1149      	asrs	r1, r1, #5
 8006766:	6914      	ldr	r4, [r2, #16]
 8006768:	3101      	adds	r1, #1
 800676a:	f102 0314 	add.w	r3, r2, #20
 800676e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006772:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006776:	1f05      	subs	r5, r0, #4
 8006778:	42a3      	cmp	r3, r4
 800677a:	d30c      	bcc.n	8006796 <__copybits+0x36>
 800677c:	1aa3      	subs	r3, r4, r2
 800677e:	3b11      	subs	r3, #17
 8006780:	f023 0303 	bic.w	r3, r3, #3
 8006784:	3211      	adds	r2, #17
 8006786:	42a2      	cmp	r2, r4
 8006788:	bf88      	it	hi
 800678a:	2300      	movhi	r3, #0
 800678c:	4418      	add	r0, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4288      	cmp	r0, r1
 8006792:	d305      	bcc.n	80067a0 <__copybits+0x40>
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	f853 6b04 	ldr.w	r6, [r3], #4
 800679a:	f845 6f04 	str.w	r6, [r5, #4]!
 800679e:	e7eb      	b.n	8006778 <__copybits+0x18>
 80067a0:	f840 3b04 	str.w	r3, [r0], #4
 80067a4:	e7f4      	b.n	8006790 <__copybits+0x30>

080067a6 <__any_on>:
 80067a6:	f100 0214 	add.w	r2, r0, #20
 80067aa:	6900      	ldr	r0, [r0, #16]
 80067ac:	114b      	asrs	r3, r1, #5
 80067ae:	4298      	cmp	r0, r3
 80067b0:	b510      	push	{r4, lr}
 80067b2:	db11      	blt.n	80067d8 <__any_on+0x32>
 80067b4:	dd0a      	ble.n	80067cc <__any_on+0x26>
 80067b6:	f011 011f 	ands.w	r1, r1, #31
 80067ba:	d007      	beq.n	80067cc <__any_on+0x26>
 80067bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067c0:	fa24 f001 	lsr.w	r0, r4, r1
 80067c4:	fa00 f101 	lsl.w	r1, r0, r1
 80067c8:	428c      	cmp	r4, r1
 80067ca:	d10b      	bne.n	80067e4 <__any_on+0x3e>
 80067cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d803      	bhi.n	80067dc <__any_on+0x36>
 80067d4:	2000      	movs	r0, #0
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	4603      	mov	r3, r0
 80067da:	e7f7      	b.n	80067cc <__any_on+0x26>
 80067dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d0f5      	beq.n	80067d0 <__any_on+0x2a>
 80067e4:	2001      	movs	r0, #1
 80067e6:	e7f6      	b.n	80067d6 <__any_on+0x30>

080067e8 <sulp>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	460f      	mov	r7, r1
 80067ee:	4690      	mov	r8, r2
 80067f0:	f7ff feca 	bl	8006588 <__ulp>
 80067f4:	4604      	mov	r4, r0
 80067f6:	460d      	mov	r5, r1
 80067f8:	f1b8 0f00 	cmp.w	r8, #0
 80067fc:	d011      	beq.n	8006822 <sulp+0x3a>
 80067fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006806:	2b00      	cmp	r3, #0
 8006808:	dd0b      	ble.n	8006822 <sulp+0x3a>
 800680a:	2400      	movs	r4, #0
 800680c:	051b      	lsls	r3, r3, #20
 800680e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006812:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	f7f9 fec9 	bl	80005b0 <__aeabi_dmul>
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682a:	0000      	movs	r0, r0
 800682c:	0000      	movs	r0, r0
	...

08006830 <_strtod_l>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	b09f      	sub	sp, #124	; 0x7c
 8006836:	9217      	str	r2, [sp, #92]	; 0x5c
 8006838:	2200      	movs	r2, #0
 800683a:	4604      	mov	r4, r0
 800683c:	921a      	str	r2, [sp, #104]	; 0x68
 800683e:	460d      	mov	r5, r1
 8006840:	f04f 0800 	mov.w	r8, #0
 8006844:	f04f 0900 	mov.w	r9, #0
 8006848:	460a      	mov	r2, r1
 800684a:	9219      	str	r2, [sp, #100]	; 0x64
 800684c:	7811      	ldrb	r1, [r2, #0]
 800684e:	292b      	cmp	r1, #43	; 0x2b
 8006850:	d04a      	beq.n	80068e8 <_strtod_l+0xb8>
 8006852:	d838      	bhi.n	80068c6 <_strtod_l+0x96>
 8006854:	290d      	cmp	r1, #13
 8006856:	d832      	bhi.n	80068be <_strtod_l+0x8e>
 8006858:	2908      	cmp	r1, #8
 800685a:	d832      	bhi.n	80068c2 <_strtod_l+0x92>
 800685c:	2900      	cmp	r1, #0
 800685e:	d03b      	beq.n	80068d8 <_strtod_l+0xa8>
 8006860:	2200      	movs	r2, #0
 8006862:	920e      	str	r2, [sp, #56]	; 0x38
 8006864:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006866:	7832      	ldrb	r2, [r6, #0]
 8006868:	2a30      	cmp	r2, #48	; 0x30
 800686a:	f040 80b2 	bne.w	80069d2 <_strtod_l+0x1a2>
 800686e:	7872      	ldrb	r2, [r6, #1]
 8006870:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006874:	2a58      	cmp	r2, #88	; 0x58
 8006876:	d16e      	bne.n	8006956 <_strtod_l+0x126>
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687c:	4620      	mov	r0, r4
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	ab1a      	add	r3, sp, #104	; 0x68
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4a8c      	ldr	r2, [pc, #560]	; (8006ab8 <_strtod_l+0x288>)
 8006886:	ab1b      	add	r3, sp, #108	; 0x6c
 8006888:	a919      	add	r1, sp, #100	; 0x64
 800688a:	f001 fafd 	bl	8007e88 <__gethex>
 800688e:	f010 070f 	ands.w	r7, r0, #15
 8006892:	4605      	mov	r5, r0
 8006894:	d005      	beq.n	80068a2 <_strtod_l+0x72>
 8006896:	2f06      	cmp	r7, #6
 8006898:	d128      	bne.n	80068ec <_strtod_l+0xbc>
 800689a:	2300      	movs	r3, #0
 800689c:	3601      	adds	r6, #1
 800689e:	9619      	str	r6, [sp, #100]	; 0x64
 80068a0:	930e      	str	r3, [sp, #56]	; 0x38
 80068a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 85a0 	bne.w	80073ea <_strtod_l+0xbba>
 80068aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ac:	b1cb      	cbz	r3, 80068e2 <_strtod_l+0xb2>
 80068ae:	4642      	mov	r2, r8
 80068b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	b01f      	add	sp, #124	; 0x7c
 80068ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068be:	2920      	cmp	r1, #32
 80068c0:	d1ce      	bne.n	8006860 <_strtod_l+0x30>
 80068c2:	3201      	adds	r2, #1
 80068c4:	e7c1      	b.n	800684a <_strtod_l+0x1a>
 80068c6:	292d      	cmp	r1, #45	; 0x2d
 80068c8:	d1ca      	bne.n	8006860 <_strtod_l+0x30>
 80068ca:	2101      	movs	r1, #1
 80068cc:	910e      	str	r1, [sp, #56]	; 0x38
 80068ce:	1c51      	adds	r1, r2, #1
 80068d0:	9119      	str	r1, [sp, #100]	; 0x64
 80068d2:	7852      	ldrb	r2, [r2, #1]
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	d1c5      	bne.n	8006864 <_strtod_l+0x34>
 80068d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068da:	9519      	str	r5, [sp, #100]	; 0x64
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 8582 	bne.w	80073e6 <_strtod_l+0xbb6>
 80068e2:	4642      	mov	r2, r8
 80068e4:	464b      	mov	r3, r9
 80068e6:	e7e5      	b.n	80068b4 <_strtod_l+0x84>
 80068e8:	2100      	movs	r1, #0
 80068ea:	e7ef      	b.n	80068cc <_strtod_l+0x9c>
 80068ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068ee:	b13a      	cbz	r2, 8006900 <_strtod_l+0xd0>
 80068f0:	2135      	movs	r1, #53	; 0x35
 80068f2:	a81c      	add	r0, sp, #112	; 0x70
 80068f4:	f7ff ff34 	bl	8006760 <__copybits>
 80068f8:	4620      	mov	r0, r4
 80068fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068fc:	f7ff fb18 	bl	8005f30 <_Bfree>
 8006900:	3f01      	subs	r7, #1
 8006902:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006904:	2f04      	cmp	r7, #4
 8006906:	d806      	bhi.n	8006916 <_strtod_l+0xe6>
 8006908:	e8df f007 	tbb	[pc, r7]
 800690c:	201d0314 	.word	0x201d0314
 8006910:	14          	.byte	0x14
 8006911:	00          	.byte	0x00
 8006912:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006916:	05e9      	lsls	r1, r5, #23
 8006918:	bf48      	it	mi
 800691a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800691e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006922:	0d1b      	lsrs	r3, r3, #20
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1bb      	bne.n	80068a2 <_strtod_l+0x72>
 800692a:	f7fe fb17 	bl	8004f5c <__errno>
 800692e:	2322      	movs	r3, #34	; 0x22
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	e7b6      	b.n	80068a2 <_strtod_l+0x72>
 8006934:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006938:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800693c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006940:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006944:	e7e7      	b.n	8006916 <_strtod_l+0xe6>
 8006946:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006abc <_strtod_l+0x28c>
 800694a:	e7e4      	b.n	8006916 <_strtod_l+0xe6>
 800694c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006950:	f04f 38ff 	mov.w	r8, #4294967295
 8006954:	e7df      	b.n	8006916 <_strtod_l+0xe6>
 8006956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	9219      	str	r2, [sp, #100]	; 0x64
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b30      	cmp	r3, #48	; 0x30
 8006960:	d0f9      	beq.n	8006956 <_strtod_l+0x126>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d09d      	beq.n	80068a2 <_strtod_l+0x72>
 8006966:	2301      	movs	r3, #1
 8006968:	f04f 0a00 	mov.w	sl, #0
 800696c:	220a      	movs	r2, #10
 800696e:	46d3      	mov	fp, sl
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006974:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006978:	930b      	str	r3, [sp, #44]	; 0x2c
 800697a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800697c:	7806      	ldrb	r6, [r0, #0]
 800697e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006982:	b2d9      	uxtb	r1, r3
 8006984:	2909      	cmp	r1, #9
 8006986:	d926      	bls.n	80069d6 <_strtod_l+0x1a6>
 8006988:	2201      	movs	r2, #1
 800698a:	494d      	ldr	r1, [pc, #308]	; (8006ac0 <_strtod_l+0x290>)
 800698c:	f001 f989 	bl	8007ca2 <strncmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	d030      	beq.n	80069f6 <_strtod_l+0x1c6>
 8006994:	2000      	movs	r0, #0
 8006996:	4632      	mov	r2, r6
 8006998:	4603      	mov	r3, r0
 800699a:	465e      	mov	r6, fp
 800699c:	9008      	str	r0, [sp, #32]
 800699e:	2a65      	cmp	r2, #101	; 0x65
 80069a0:	d001      	beq.n	80069a6 <_strtod_l+0x176>
 80069a2:	2a45      	cmp	r2, #69	; 0x45
 80069a4:	d113      	bne.n	80069ce <_strtod_l+0x19e>
 80069a6:	b91e      	cbnz	r6, 80069b0 <_strtod_l+0x180>
 80069a8:	9a05      	ldr	r2, [sp, #20]
 80069aa:	4302      	orrs	r2, r0
 80069ac:	d094      	beq.n	80068d8 <_strtod_l+0xa8>
 80069ae:	2600      	movs	r6, #0
 80069b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80069b2:	1c6a      	adds	r2, r5, #1
 80069b4:	9219      	str	r2, [sp, #100]	; 0x64
 80069b6:	786a      	ldrb	r2, [r5, #1]
 80069b8:	2a2b      	cmp	r2, #43	; 0x2b
 80069ba:	d074      	beq.n	8006aa6 <_strtod_l+0x276>
 80069bc:	2a2d      	cmp	r2, #45	; 0x2d
 80069be:	d078      	beq.n	8006ab2 <_strtod_l+0x282>
 80069c0:	f04f 0c00 	mov.w	ip, #0
 80069c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80069c8:	2909      	cmp	r1, #9
 80069ca:	d97f      	bls.n	8006acc <_strtod_l+0x29c>
 80069cc:	9519      	str	r5, [sp, #100]	; 0x64
 80069ce:	2700      	movs	r7, #0
 80069d0:	e09e      	b.n	8006b10 <_strtod_l+0x2e0>
 80069d2:	2300      	movs	r3, #0
 80069d4:	e7c8      	b.n	8006968 <_strtod_l+0x138>
 80069d6:	f1bb 0f08 	cmp.w	fp, #8
 80069da:	bfd8      	it	le
 80069dc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80069de:	f100 0001 	add.w	r0, r0, #1
 80069e2:	bfd6      	itet	le
 80069e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80069e8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80069ec:	930a      	strle	r3, [sp, #40]	; 0x28
 80069ee:	f10b 0b01 	add.w	fp, fp, #1
 80069f2:	9019      	str	r0, [sp, #100]	; 0x64
 80069f4:	e7c1      	b.n	800697a <_strtod_l+0x14a>
 80069f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	9219      	str	r2, [sp, #100]	; 0x64
 80069fc:	785a      	ldrb	r2, [r3, #1]
 80069fe:	f1bb 0f00 	cmp.w	fp, #0
 8006a02:	d037      	beq.n	8006a74 <_strtod_l+0x244>
 8006a04:	465e      	mov	r6, fp
 8006a06:	9008      	str	r0, [sp, #32]
 8006a08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	d912      	bls.n	8006a36 <_strtod_l+0x206>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e7c4      	b.n	800699e <_strtod_l+0x16e>
 8006a14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a16:	3001      	adds	r0, #1
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a1c:	785a      	ldrb	r2, [r3, #1]
 8006a1e:	2a30      	cmp	r2, #48	; 0x30
 8006a20:	d0f8      	beq.n	8006a14 <_strtod_l+0x1e4>
 8006a22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	f200 84e4 	bhi.w	80073f4 <_strtod_l+0xbc4>
 8006a2c:	9008      	str	r0, [sp, #32]
 8006a2e:	2000      	movs	r0, #0
 8006a30:	4606      	mov	r6, r0
 8006a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a36:	3a30      	subs	r2, #48	; 0x30
 8006a38:	f100 0301 	add.w	r3, r0, #1
 8006a3c:	d014      	beq.n	8006a68 <_strtod_l+0x238>
 8006a3e:	9908      	ldr	r1, [sp, #32]
 8006a40:	eb00 0c06 	add.w	ip, r0, r6
 8006a44:	4419      	add	r1, r3
 8006a46:	9108      	str	r1, [sp, #32]
 8006a48:	4633      	mov	r3, r6
 8006a4a:	210a      	movs	r1, #10
 8006a4c:	4563      	cmp	r3, ip
 8006a4e:	d113      	bne.n	8006a78 <_strtod_l+0x248>
 8006a50:	1833      	adds	r3, r6, r0
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	f106 0601 	add.w	r6, r6, #1
 8006a58:	4406      	add	r6, r0
 8006a5a:	dc1a      	bgt.n	8006a92 <_strtod_l+0x262>
 8006a5c:	230a      	movs	r3, #10
 8006a5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a60:	fb03 2301 	mla	r3, r3, r1, r2
 8006a64:	930a      	str	r3, [sp, #40]	; 0x28
 8006a66:	2300      	movs	r3, #0
 8006a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	1c51      	adds	r1, r2, #1
 8006a6e:	9119      	str	r1, [sp, #100]	; 0x64
 8006a70:	7852      	ldrb	r2, [r2, #1]
 8006a72:	e7c9      	b.n	8006a08 <_strtod_l+0x1d8>
 8006a74:	4658      	mov	r0, fp
 8006a76:	e7d2      	b.n	8006a1e <_strtod_l+0x1ee>
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	f103 0301 	add.w	r3, r3, #1
 8006a7e:	dc03      	bgt.n	8006a88 <_strtod_l+0x258>
 8006a80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a82:	434f      	muls	r7, r1
 8006a84:	970a      	str	r7, [sp, #40]	; 0x28
 8006a86:	e7e1      	b.n	8006a4c <_strtod_l+0x21c>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	bfd8      	it	le
 8006a8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006a90:	e7dc      	b.n	8006a4c <_strtod_l+0x21c>
 8006a92:	2e10      	cmp	r6, #16
 8006a94:	bfdc      	itt	le
 8006a96:	230a      	movle	r3, #10
 8006a98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006a9c:	e7e3      	b.n	8006a66 <_strtod_l+0x236>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e780      	b.n	80069a8 <_strtod_l+0x178>
 8006aa6:	f04f 0c00 	mov.w	ip, #0
 8006aaa:	1caa      	adds	r2, r5, #2
 8006aac:	9219      	str	r2, [sp, #100]	; 0x64
 8006aae:	78aa      	ldrb	r2, [r5, #2]
 8006ab0:	e788      	b.n	80069c4 <_strtod_l+0x194>
 8006ab2:	f04f 0c01 	mov.w	ip, #1
 8006ab6:	e7f8      	b.n	8006aaa <_strtod_l+0x27a>
 8006ab8:	080090d0 	.word	0x080090d0
 8006abc:	7ff00000 	.word	0x7ff00000
 8006ac0:	080090cc 	.word	0x080090cc
 8006ac4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ac6:	1c51      	adds	r1, r2, #1
 8006ac8:	9119      	str	r1, [sp, #100]	; 0x64
 8006aca:	7852      	ldrb	r2, [r2, #1]
 8006acc:	2a30      	cmp	r2, #48	; 0x30
 8006ace:	d0f9      	beq.n	8006ac4 <_strtod_l+0x294>
 8006ad0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ad4:	2908      	cmp	r1, #8
 8006ad6:	f63f af7a 	bhi.w	80069ce <_strtod_l+0x19e>
 8006ada:	3a30      	subs	r2, #48	; 0x30
 8006adc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ade:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ae0:	920c      	str	r2, [sp, #48]	; 0x30
 8006ae2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ae4:	1c57      	adds	r7, r2, #1
 8006ae6:	9719      	str	r7, [sp, #100]	; 0x64
 8006ae8:	7852      	ldrb	r2, [r2, #1]
 8006aea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006aee:	f1be 0f09 	cmp.w	lr, #9
 8006af2:	d938      	bls.n	8006b66 <_strtod_l+0x336>
 8006af4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006af6:	1a7f      	subs	r7, r7, r1
 8006af8:	2f08      	cmp	r7, #8
 8006afa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006afe:	dc03      	bgt.n	8006b08 <_strtod_l+0x2d8>
 8006b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b02:	428f      	cmp	r7, r1
 8006b04:	bfa8      	it	ge
 8006b06:	460f      	movge	r7, r1
 8006b08:	f1bc 0f00 	cmp.w	ip, #0
 8006b0c:	d000      	beq.n	8006b10 <_strtod_l+0x2e0>
 8006b0e:	427f      	negs	r7, r7
 8006b10:	2e00      	cmp	r6, #0
 8006b12:	d14f      	bne.n	8006bb4 <_strtod_l+0x384>
 8006b14:	9905      	ldr	r1, [sp, #20]
 8006b16:	4301      	orrs	r1, r0
 8006b18:	f47f aec3 	bne.w	80068a2 <_strtod_l+0x72>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f47f aedb 	bne.w	80068d8 <_strtod_l+0xa8>
 8006b22:	2a69      	cmp	r2, #105	; 0x69
 8006b24:	d029      	beq.n	8006b7a <_strtod_l+0x34a>
 8006b26:	dc26      	bgt.n	8006b76 <_strtod_l+0x346>
 8006b28:	2a49      	cmp	r2, #73	; 0x49
 8006b2a:	d026      	beq.n	8006b7a <_strtod_l+0x34a>
 8006b2c:	2a4e      	cmp	r2, #78	; 0x4e
 8006b2e:	f47f aed3 	bne.w	80068d8 <_strtod_l+0xa8>
 8006b32:	499a      	ldr	r1, [pc, #616]	; (8006d9c <_strtod_l+0x56c>)
 8006b34:	a819      	add	r0, sp, #100	; 0x64
 8006b36:	f001 fbe9 	bl	800830c <__match>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f43f aecc 	beq.w	80068d8 <_strtod_l+0xa8>
 8006b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b28      	cmp	r3, #40	; 0x28
 8006b46:	d12f      	bne.n	8006ba8 <_strtod_l+0x378>
 8006b48:	4995      	ldr	r1, [pc, #596]	; (8006da0 <_strtod_l+0x570>)
 8006b4a:	aa1c      	add	r2, sp, #112	; 0x70
 8006b4c:	a819      	add	r0, sp, #100	; 0x64
 8006b4e:	f001 fbf1 	bl	8008334 <__hexnan>
 8006b52:	2805      	cmp	r0, #5
 8006b54:	d128      	bne.n	8006ba8 <_strtod_l+0x378>
 8006b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006b5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006b60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006b64:	e69d      	b.n	80068a2 <_strtod_l+0x72>
 8006b66:	210a      	movs	r1, #10
 8006b68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b6a:	fb01 2107 	mla	r1, r1, r7, r2
 8006b6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006b72:	9209      	str	r2, [sp, #36]	; 0x24
 8006b74:	e7b5      	b.n	8006ae2 <_strtod_l+0x2b2>
 8006b76:	2a6e      	cmp	r2, #110	; 0x6e
 8006b78:	e7d9      	b.n	8006b2e <_strtod_l+0x2fe>
 8006b7a:	498a      	ldr	r1, [pc, #552]	; (8006da4 <_strtod_l+0x574>)
 8006b7c:	a819      	add	r0, sp, #100	; 0x64
 8006b7e:	f001 fbc5 	bl	800830c <__match>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f aea8 	beq.w	80068d8 <_strtod_l+0xa8>
 8006b88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b8a:	4987      	ldr	r1, [pc, #540]	; (8006da8 <_strtod_l+0x578>)
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	a819      	add	r0, sp, #100	; 0x64
 8006b90:	9319      	str	r3, [sp, #100]	; 0x64
 8006b92:	f001 fbbb 	bl	800830c <__match>
 8006b96:	b910      	cbnz	r0, 8006b9e <_strtod_l+0x36e>
 8006b98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	9319      	str	r3, [sp, #100]	; 0x64
 8006b9e:	f04f 0800 	mov.w	r8, #0
 8006ba2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006dac <_strtod_l+0x57c>
 8006ba6:	e67c      	b.n	80068a2 <_strtod_l+0x72>
 8006ba8:	4881      	ldr	r0, [pc, #516]	; (8006db0 <_strtod_l+0x580>)
 8006baa:	f001 f8cd 	bl	8007d48 <nan>
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4689      	mov	r9, r1
 8006bb2:	e676      	b.n	80068a2 <_strtod_l+0x72>
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	f1bb 0f00 	cmp.w	fp, #0
 8006bba:	bf08      	it	eq
 8006bbc:	46b3      	moveq	fp, r6
 8006bbe:	1afb      	subs	r3, r7, r3
 8006bc0:	2e10      	cmp	r6, #16
 8006bc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bc4:	4635      	mov	r5, r6
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	bfa8      	it	ge
 8006bca:	2510      	movge	r5, #16
 8006bcc:	f7f9 fc76 	bl	80004bc <__aeabi_ui2d>
 8006bd0:	2e09      	cmp	r6, #9
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	dd13      	ble.n	8006c00 <_strtod_l+0x3d0>
 8006bd8:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <_strtod_l+0x584>)
 8006bda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006bde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006be2:	f7f9 fce5 	bl	80005b0 <__aeabi_dmul>
 8006be6:	4680      	mov	r8, r0
 8006be8:	4650      	mov	r0, sl
 8006bea:	4689      	mov	r9, r1
 8006bec:	f7f9 fc66 	bl	80004bc <__aeabi_ui2d>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 fb24 	bl	8000244 <__adddf3>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	4689      	mov	r9, r1
 8006c00:	2e0f      	cmp	r6, #15
 8006c02:	dc36      	bgt.n	8006c72 <_strtod_l+0x442>
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f43f ae4b 	beq.w	80068a2 <_strtod_l+0x72>
 8006c0c:	dd22      	ble.n	8006c54 <_strtod_l+0x424>
 8006c0e:	2b16      	cmp	r3, #22
 8006c10:	dc09      	bgt.n	8006c26 <_strtod_l+0x3f6>
 8006c12:	4968      	ldr	r1, [pc, #416]	; (8006db4 <_strtod_l+0x584>)
 8006c14:	4642      	mov	r2, r8
 8006c16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c20:	f7f9 fcc6 	bl	80005b0 <__aeabi_dmul>
 8006c24:	e7c3      	b.n	8006bae <_strtod_l+0x37e>
 8006c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c28:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	db20      	blt.n	8006c72 <_strtod_l+0x442>
 8006c30:	4c60      	ldr	r4, [pc, #384]	; (8006db4 <_strtod_l+0x584>)
 8006c32:	f1c6 060f 	rsb	r6, r6, #15
 8006c36:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c40:	464b      	mov	r3, r9
 8006c42:	f7f9 fcb5 	bl	80005b0 <__aeabi_dmul>
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	1b9e      	subs	r6, r3, r6
 8006c4a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c52:	e7e5      	b.n	8006c20 <_strtod_l+0x3f0>
 8006c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c56:	3316      	adds	r3, #22
 8006c58:	db0b      	blt.n	8006c72 <_strtod_l+0x442>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	1bdf      	subs	r7, r3, r7
 8006c60:	4b54      	ldr	r3, [pc, #336]	; (8006db4 <_strtod_l+0x584>)
 8006c62:	4649      	mov	r1, r9
 8006c64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	f7f9 fdca 	bl	8000804 <__aeabi_ddiv>
 8006c70:	e79d      	b.n	8006bae <_strtod_l+0x37e>
 8006c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c74:	1b75      	subs	r5, r6, r5
 8006c76:	441d      	add	r5, r3
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	dd70      	ble.n	8006d5e <_strtod_l+0x52e>
 8006c7c:	f015 030f 	ands.w	r3, r5, #15
 8006c80:	d00a      	beq.n	8006c98 <_strtod_l+0x468>
 8006c82:	494c      	ldr	r1, [pc, #304]	; (8006db4 <_strtod_l+0x584>)
 8006c84:	4642      	mov	r2, r8
 8006c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f7f9 fc8e 	bl	80005b0 <__aeabi_dmul>
 8006c94:	4680      	mov	r8, r0
 8006c96:	4689      	mov	r9, r1
 8006c98:	f035 050f 	bics.w	r5, r5, #15
 8006c9c:	d04d      	beq.n	8006d3a <_strtod_l+0x50a>
 8006c9e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006ca2:	dd22      	ble.n	8006cea <_strtod_l+0x4ba>
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	46b3      	mov	fp, r6
 8006ca8:	960b      	str	r6, [sp, #44]	; 0x2c
 8006caa:	9608      	str	r6, [sp, #32]
 8006cac:	2322      	movs	r3, #34	; 0x22
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006dac <_strtod_l+0x57c>
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f43f adf1 	beq.w	80068a2 <_strtod_l+0x72>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cc4:	f7ff f934 	bl	8005f30 <_Bfree>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	9908      	ldr	r1, [sp, #32]
 8006ccc:	f7ff f930 	bl	8005f30 <_Bfree>
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff f92c 	bl	8005f30 <_Bfree>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cdc:	f7ff f928 	bl	8005f30 <_Bfree>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff f924 	bl	8005f30 <_Bfree>
 8006ce8:	e5db      	b.n	80068a2 <_strtod_l+0x72>
 8006cea:	4b33      	ldr	r3, [pc, #204]	; (8006db8 <_strtod_l+0x588>)
 8006cec:	4640      	mov	r0, r8
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	469a      	mov	sl, r3
 8006cf6:	112d      	asrs	r5, r5, #4
 8006cf8:	2d01      	cmp	r5, #1
 8006cfa:	dc21      	bgt.n	8006d40 <_strtod_l+0x510>
 8006cfc:	b10b      	cbz	r3, 8006d02 <_strtod_l+0x4d2>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	492d      	ldr	r1, [pc, #180]	; (8006db8 <_strtod_l+0x588>)
 8006d04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d12:	464b      	mov	r3, r9
 8006d14:	f7f9 fc4c 	bl	80005b0 <__aeabi_dmul>
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <_strtod_l+0x57c>)
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	4927      	ldr	r1, [pc, #156]	; (8006dbc <_strtod_l+0x58c>)
 8006d20:	4680      	mov	r8, r0
 8006d22:	428b      	cmp	r3, r1
 8006d24:	d8be      	bhi.n	8006ca4 <_strtod_l+0x474>
 8006d26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d2a:	428b      	cmp	r3, r1
 8006d2c:	bf86      	itte	hi
 8006d2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006d32:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006dc0 <_strtod_l+0x590>
 8006d36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	e07b      	b.n	8006e38 <_strtod_l+0x608>
 8006d40:	07ea      	lsls	r2, r5, #31
 8006d42:	d505      	bpl.n	8006d50 <_strtod_l+0x520>
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fc31 	bl	80005b0 <__aeabi_dmul>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	9a05      	ldr	r2, [sp, #20]
 8006d52:	f10a 0a01 	add.w	sl, sl, #1
 8006d56:	3208      	adds	r2, #8
 8006d58:	106d      	asrs	r5, r5, #1
 8006d5a:	9205      	str	r2, [sp, #20]
 8006d5c:	e7cc      	b.n	8006cf8 <_strtod_l+0x4c8>
 8006d5e:	d0ec      	beq.n	8006d3a <_strtod_l+0x50a>
 8006d60:	426d      	negs	r5, r5
 8006d62:	f015 020f 	ands.w	r2, r5, #15
 8006d66:	d00a      	beq.n	8006d7e <_strtod_l+0x54e>
 8006d68:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <_strtod_l+0x584>)
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d70:	4649      	mov	r1, r9
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fd45 	bl	8000804 <__aeabi_ddiv>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	112d      	asrs	r5, r5, #4
 8006d80:	d0db      	beq.n	8006d3a <_strtod_l+0x50a>
 8006d82:	2d1f      	cmp	r5, #31
 8006d84:	dd1e      	ble.n	8006dc4 <_strtod_l+0x594>
 8006d86:	2600      	movs	r6, #0
 8006d88:	46b3      	mov	fp, r6
 8006d8a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006d8c:	9608      	str	r6, [sp, #32]
 8006d8e:	2322      	movs	r3, #34	; 0x22
 8006d90:	f04f 0800 	mov.w	r8, #0
 8006d94:	f04f 0900 	mov.w	r9, #0
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	e78d      	b.n	8006cb8 <_strtod_l+0x488>
 8006d9c:	08008ebb 	.word	0x08008ebb
 8006da0:	080090e4 	.word	0x080090e4
 8006da4:	08008eb3 	.word	0x08008eb3
 8006da8:	08008eea 	.word	0x08008eea
 8006dac:	7ff00000 	.word	0x7ff00000
 8006db0:	08009275 	.word	0x08009275
 8006db4:	08008ff8 	.word	0x08008ff8
 8006db8:	08008fd0 	.word	0x08008fd0
 8006dbc:	7ca00000 	.word	0x7ca00000
 8006dc0:	7fefffff 	.word	0x7fefffff
 8006dc4:	f015 0310 	ands.w	r3, r5, #16
 8006dc8:	bf18      	it	ne
 8006dca:	236a      	movne	r3, #106	; 0x6a
 8006dcc:	4640      	mov	r0, r8
 8006dce:	9305      	str	r3, [sp, #20]
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80070a0 <_strtod_l+0x870>
 8006dd8:	07ea      	lsls	r2, r5, #31
 8006dda:	d504      	bpl.n	8006de6 <_strtod_l+0x5b6>
 8006ddc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006de0:	f7f9 fbe6 	bl	80005b0 <__aeabi_dmul>
 8006de4:	2301      	movs	r3, #1
 8006de6:	106d      	asrs	r5, r5, #1
 8006de8:	f10a 0a08 	add.w	sl, sl, #8
 8006dec:	d1f4      	bne.n	8006dd8 <_strtod_l+0x5a8>
 8006dee:	b10b      	cbz	r3, 8006df4 <_strtod_l+0x5c4>
 8006df0:	4680      	mov	r8, r0
 8006df2:	4689      	mov	r9, r1
 8006df4:	9b05      	ldr	r3, [sp, #20]
 8006df6:	b1bb      	cbz	r3, 8006e28 <_strtod_l+0x5f8>
 8006df8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006dfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	4649      	mov	r1, r9
 8006e04:	dd10      	ble.n	8006e28 <_strtod_l+0x5f8>
 8006e06:	2b1f      	cmp	r3, #31
 8006e08:	f340 8128 	ble.w	800705c <_strtod_l+0x82c>
 8006e0c:	2b34      	cmp	r3, #52	; 0x34
 8006e0e:	bfd8      	it	le
 8006e10:	f04f 33ff 	movle.w	r3, #4294967295
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	bfcf      	iteee	gt
 8006e1a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006e1e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e22:	4093      	lslle	r3, r2
 8006e24:	ea03 0901 	andle.w	r9, r3, r1
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	4649      	mov	r1, r9
 8006e30:	f7f9 fe26 	bl	8000a80 <__aeabi_dcmpeq>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d1a6      	bne.n	8006d86 <_strtod_l+0x556>
 8006e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3a:	465a      	mov	r2, fp
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4633      	mov	r3, r6
 8006e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e44:	f7ff f8dc 	bl	8006000 <__s2b>
 8006e48:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f43f af2a 	beq.w	8006ca4 <_strtod_l+0x474>
 8006e50:	2600      	movs	r6, #0
 8006e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	eba3 0307 	sub.w	r3, r3, r7
 8006e5c:	bfa8      	it	ge
 8006e5e:	2300      	movge	r3, #0
 8006e60:	46b3      	mov	fp, r6
 8006e62:	9312      	str	r3, [sp, #72]	; 0x48
 8006e64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e68:	9316      	str	r3, [sp, #88]	; 0x58
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	f7ff f81e 	bl	8005eb0 <_Balloc>
 8006e74:	9008      	str	r0, [sp, #32]
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f af18 	beq.w	8006cac <_strtod_l+0x47c>
 8006e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7e:	300c      	adds	r0, #12
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	f103 010c 	add.w	r1, r3, #12
 8006e86:	3202      	adds	r2, #2
 8006e88:	0092      	lsls	r2, r2, #2
 8006e8a:	f000 ff4f 	bl	8007d2c <memcpy>
 8006e8e:	ab1c      	add	r3, sp, #112	; 0x70
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4642      	mov	r2, r8
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006ea0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006ea4:	f7ff fbd8 	bl	8006658 <__d2b>
 8006ea8:	901a      	str	r0, [sp, #104]	; 0x68
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	f43f aefe 	beq.w	8006cac <_strtod_l+0x47c>
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff f93c 	bl	8006130 <__i2b>
 8006eb8:	4683      	mov	fp, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f43f aef6 	beq.w	8006cac <_strtod_l+0x47c>
 8006ec0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006ec2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ec4:	2f00      	cmp	r7, #0
 8006ec6:	bfab      	itete	ge
 8006ec8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006eca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006ecc:	eb07 0a03 	addge.w	sl, r7, r3
 8006ed0:	1bdd      	sublt	r5, r3, r7
 8006ed2:	9b05      	ldr	r3, [sp, #20]
 8006ed4:	bfa8      	it	ge
 8006ed6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006ed8:	eba7 0703 	sub.w	r7, r7, r3
 8006edc:	4417      	add	r7, r2
 8006ede:	4b71      	ldr	r3, [pc, #452]	; (80070a4 <_strtod_l+0x874>)
 8006ee0:	f107 37ff 	add.w	r7, r7, #4294967295
 8006ee4:	bfb8      	it	lt
 8006ee6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006eea:	429f      	cmp	r7, r3
 8006eec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ef0:	f280 80c7 	bge.w	8007082 <_strtod_l+0x852>
 8006ef4:	1bdb      	subs	r3, r3, r7
 8006ef6:	2b1f      	cmp	r3, #31
 8006ef8:	f04f 0101 	mov.w	r1, #1
 8006efc:	eba2 0203 	sub.w	r2, r2, r3
 8006f00:	f300 80b3 	bgt.w	800706a <_strtod_l+0x83a>
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f0e:	eb0a 0702 	add.w	r7, sl, r2
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	45ba      	cmp	sl, r7
 8006f16:	4415      	add	r5, r2
 8006f18:	441d      	add	r5, r3
 8006f1a:	4653      	mov	r3, sl
 8006f1c:	bfa8      	it	ge
 8006f1e:	463b      	movge	r3, r7
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	bfa8      	it	ge
 8006f24:	462b      	movge	r3, r5
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfc2      	ittt	gt
 8006f2a:	1aff      	subgt	r7, r7, r3
 8006f2c:	1aed      	subgt	r5, r5, r3
 8006f2e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dd17      	ble.n	8006f68 <_strtod_l+0x738>
 8006f38:	4659      	mov	r1, fp
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7ff f9b5 	bl	80062ac <__pow5mult>
 8006f42:	4683      	mov	fp, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f aeb1 	beq.w	8006cac <_strtod_l+0x47c>
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff f904 	bl	800615c <__multiply>
 8006f54:	900a      	str	r0, [sp, #40]	; 0x28
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f aea8 	beq.w	8006cac <_strtod_l+0x47c>
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f60:	f7fe ffe6 	bl	8005f30 <_Bfree>
 8006f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f66:	931a      	str	r3, [sp, #104]	; 0x68
 8006f68:	2f00      	cmp	r7, #0
 8006f6a:	f300 808f 	bgt.w	800708c <_strtod_l+0x85c>
 8006f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dd08      	ble.n	8006f86 <_strtod_l+0x756>
 8006f74:	4620      	mov	r0, r4
 8006f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f78:	9908      	ldr	r1, [sp, #32]
 8006f7a:	f7ff f997 	bl	80062ac <__pow5mult>
 8006f7e:	9008      	str	r0, [sp, #32]
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f43f ae93 	beq.w	8006cac <_strtod_l+0x47c>
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	dd08      	ble.n	8006f9c <_strtod_l+0x76c>
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	9908      	ldr	r1, [sp, #32]
 8006f90:	f7ff f9e6 	bl	8006360 <__lshift>
 8006f94:	9008      	str	r0, [sp, #32]
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f ae88 	beq.w	8006cac <_strtod_l+0x47c>
 8006f9c:	f1ba 0f00 	cmp.w	sl, #0
 8006fa0:	dd08      	ble.n	8006fb4 <_strtod_l+0x784>
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f7ff f9da 	bl	8006360 <__lshift>
 8006fac:	4683      	mov	fp, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f ae7c 	beq.w	8006cac <_strtod_l+0x47c>
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	9a08      	ldr	r2, [sp, #32]
 8006fb8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fba:	f7ff fa59 	bl	8006470 <__mdiff>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f43f ae73 	beq.w	8006cac <_strtod_l+0x47c>
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	68c3      	ldr	r3, [r0, #12]
 8006fca:	4659      	mov	r1, fp
 8006fcc:	60c5      	str	r5, [r0, #12]
 8006fce:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd0:	f7ff fa32 	bl	8006438 <__mcmp>
 8006fd4:	42a8      	cmp	r0, r5
 8006fd6:	da6b      	bge.n	80070b0 <_strtod_l+0x880>
 8006fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fda:	ea53 0308 	orrs.w	r3, r3, r8
 8006fde:	f040 808f 	bne.w	8007100 <_strtod_l+0x8d0>
 8006fe2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 808a 	bne.w	8007100 <_strtod_l+0x8d0>
 8006fec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ff0:	0d1b      	lsrs	r3, r3, #20
 8006ff2:	051b      	lsls	r3, r3, #20
 8006ff4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ff8:	f240 8082 	bls.w	8007100 <_strtod_l+0x8d0>
 8006ffc:	6973      	ldr	r3, [r6, #20]
 8006ffe:	b913      	cbnz	r3, 8007006 <_strtod_l+0x7d6>
 8007000:	6933      	ldr	r3, [r6, #16]
 8007002:	2b01      	cmp	r3, #1
 8007004:	dd7c      	ble.n	8007100 <_strtod_l+0x8d0>
 8007006:	4631      	mov	r1, r6
 8007008:	2201      	movs	r2, #1
 800700a:	4620      	mov	r0, r4
 800700c:	f7ff f9a8 	bl	8006360 <__lshift>
 8007010:	4659      	mov	r1, fp
 8007012:	4606      	mov	r6, r0
 8007014:	f7ff fa10 	bl	8006438 <__mcmp>
 8007018:	2800      	cmp	r0, #0
 800701a:	dd71      	ble.n	8007100 <_strtod_l+0x8d0>
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	464b      	mov	r3, r9
 8007020:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <_strtod_l+0x878>)
 8007022:	2900      	cmp	r1, #0
 8007024:	f000 808d 	beq.w	8007142 <_strtod_l+0x912>
 8007028:	ea02 0109 	and.w	r1, r2, r9
 800702c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007030:	f300 8087 	bgt.w	8007142 <_strtod_l+0x912>
 8007034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007038:	f77f aea9 	ble.w	8006d8e <_strtod_l+0x55e>
 800703c:	4640      	mov	r0, r8
 800703e:	4649      	mov	r1, r9
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <_strtod_l+0x87c>)
 8007042:	2200      	movs	r2, #0
 8007044:	f7f9 fab4 	bl	80005b0 <__aeabi_dmul>
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <_strtod_l+0x878>)
 800704a:	4680      	mov	r8, r0
 800704c:	400b      	ands	r3, r1
 800704e:	4689      	mov	r9, r1
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f ae35 	bne.w	8006cc0 <_strtod_l+0x490>
 8007056:	2322      	movs	r3, #34	; 0x22
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	e631      	b.n	8006cc0 <_strtod_l+0x490>
 800705c:	f04f 32ff 	mov.w	r2, #4294967295
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	ea03 0808 	and.w	r8, r3, r8
 8007068:	e6de      	b.n	8006e28 <_strtod_l+0x5f8>
 800706a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800706e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007072:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007076:	37e2      	adds	r7, #226	; 0xe2
 8007078:	fa01 f307 	lsl.w	r3, r1, r7
 800707c:	9310      	str	r3, [sp, #64]	; 0x40
 800707e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007080:	e745      	b.n	8006f0e <_strtod_l+0x6de>
 8007082:	2300      	movs	r3, #0
 8007084:	9310      	str	r3, [sp, #64]	; 0x40
 8007086:	2301      	movs	r3, #1
 8007088:	9313      	str	r3, [sp, #76]	; 0x4c
 800708a:	e740      	b.n	8006f0e <_strtod_l+0x6de>
 800708c:	463a      	mov	r2, r7
 800708e:	4620      	mov	r0, r4
 8007090:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007092:	f7ff f965 	bl	8006360 <__lshift>
 8007096:	901a      	str	r0, [sp, #104]	; 0x68
 8007098:	2800      	cmp	r0, #0
 800709a:	f47f af68 	bne.w	8006f6e <_strtod_l+0x73e>
 800709e:	e605      	b.n	8006cac <_strtod_l+0x47c>
 80070a0:	080090f8 	.word	0x080090f8
 80070a4:	fffffc02 	.word	0xfffffc02
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	39500000 	.word	0x39500000
 80070b0:	46ca      	mov	sl, r9
 80070b2:	d165      	bne.n	8007180 <_strtod_l+0x950>
 80070b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070ba:	b352      	cbz	r2, 8007112 <_strtod_l+0x8e2>
 80070bc:	4a9e      	ldr	r2, [pc, #632]	; (8007338 <_strtod_l+0xb08>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d12a      	bne.n	8007118 <_strtod_l+0x8e8>
 80070c2:	9b05      	ldr	r3, [sp, #20]
 80070c4:	4641      	mov	r1, r8
 80070c6:	b1fb      	cbz	r3, 8007108 <_strtod_l+0x8d8>
 80070c8:	4b9c      	ldr	r3, [pc, #624]	; (800733c <_strtod_l+0xb0c>)
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	ea09 0303 	and.w	r3, r9, r3
 80070d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070d6:	d81a      	bhi.n	800710e <_strtod_l+0x8de>
 80070d8:	0d1b      	lsrs	r3, r3, #20
 80070da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	4299      	cmp	r1, r3
 80070e4:	d118      	bne.n	8007118 <_strtod_l+0x8e8>
 80070e6:	4b96      	ldr	r3, [pc, #600]	; (8007340 <_strtod_l+0xb10>)
 80070e8:	459a      	cmp	sl, r3
 80070ea:	d102      	bne.n	80070f2 <_strtod_l+0x8c2>
 80070ec:	3101      	adds	r1, #1
 80070ee:	f43f addd 	beq.w	8006cac <_strtod_l+0x47c>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	4b91      	ldr	r3, [pc, #580]	; (800733c <_strtod_l+0xb0c>)
 80070f8:	ea0a 0303 	and.w	r3, sl, r3
 80070fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d19a      	bne.n	800703c <_strtod_l+0x80c>
 8007106:	e5db      	b.n	8006cc0 <_strtod_l+0x490>
 8007108:	f04f 33ff 	mov.w	r3, #4294967295
 800710c:	e7e9      	b.n	80070e2 <_strtod_l+0x8b2>
 800710e:	4613      	mov	r3, r2
 8007110:	e7e7      	b.n	80070e2 <_strtod_l+0x8b2>
 8007112:	ea53 0308 	orrs.w	r3, r3, r8
 8007116:	d081      	beq.n	800701c <_strtod_l+0x7ec>
 8007118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800711a:	b1e3      	cbz	r3, 8007156 <_strtod_l+0x926>
 800711c:	ea13 0f0a 	tst.w	r3, sl
 8007120:	d0ee      	beq.n	8007100 <_strtod_l+0x8d0>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	9a05      	ldr	r2, [sp, #20]
 800712a:	b1c3      	cbz	r3, 800715e <_strtod_l+0x92e>
 800712c:	f7ff fb5c 	bl	80067e8 <sulp>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007136:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007138:	f7f9 f884 	bl	8000244 <__adddf3>
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	e7de      	b.n	8007100 <_strtod_l+0x8d0>
 8007142:	4013      	ands	r3, r2
 8007144:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007148:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800714c:	f04f 38ff 	mov.w	r8, #4294967295
 8007150:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007154:	e7d4      	b.n	8007100 <_strtod_l+0x8d0>
 8007156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007158:	ea13 0f08 	tst.w	r3, r8
 800715c:	e7e0      	b.n	8007120 <_strtod_l+0x8f0>
 800715e:	f7ff fb43 	bl	80067e8 <sulp>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800716a:	f7f9 f869 	bl	8000240 <__aeabi_dsub>
 800716e:	2200      	movs	r2, #0
 8007170:	2300      	movs	r3, #0
 8007172:	4680      	mov	r8, r0
 8007174:	4689      	mov	r9, r1
 8007176:	f7f9 fc83 	bl	8000a80 <__aeabi_dcmpeq>
 800717a:	2800      	cmp	r0, #0
 800717c:	d0c0      	beq.n	8007100 <_strtod_l+0x8d0>
 800717e:	e606      	b.n	8006d8e <_strtod_l+0x55e>
 8007180:	4659      	mov	r1, fp
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff fabe 	bl	8006704 <__ratio>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007190:	2200      	movs	r2, #0
 8007192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007196:	f7f9 fc87 	bl	8000aa8 <__aeabi_dcmple>
 800719a:	2800      	cmp	r0, #0
 800719c:	d06f      	beq.n	800727e <_strtod_l+0xa4e>
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d17c      	bne.n	800729e <_strtod_l+0xa6e>
 80071a4:	f1b8 0f00 	cmp.w	r8, #0
 80071a8:	d159      	bne.n	800725e <_strtod_l+0xa2e>
 80071aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d17b      	bne.n	80072aa <_strtod_l+0xa7a>
 80071b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b62      	ldr	r3, [pc, #392]	; (8007344 <_strtod_l+0xb14>)
 80071ba:	f7f9 fc6b 	bl	8000a94 <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d15a      	bne.n	8007278 <_strtod_l+0xa48>
 80071c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c6:	2200      	movs	r2, #0
 80071c8:	4b5f      	ldr	r3, [pc, #380]	; (8007348 <_strtod_l+0xb18>)
 80071ca:	f7f9 f9f1 	bl	80005b0 <__aeabi_dmul>
 80071ce:	4605      	mov	r5, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80071d6:	9506      	str	r5, [sp, #24]
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80071e2:	4b56      	ldr	r3, [pc, #344]	; (800733c <_strtod_l+0xb0c>)
 80071e4:	4a55      	ldr	r2, [pc, #340]	; (800733c <_strtod_l+0xb0c>)
 80071e6:	ea0a 0303 	and.w	r3, sl, r3
 80071ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80071ec:	4b57      	ldr	r3, [pc, #348]	; (800734c <_strtod_l+0xb1c>)
 80071ee:	ea0a 0202 	and.w	r2, sl, r2
 80071f2:	429a      	cmp	r2, r3
 80071f4:	f040 80b0 	bne.w	8007358 <_strtod_l+0xb28>
 80071f8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7ff f9c2 	bl	8006588 <__ulp>
 8007204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007208:	f7f9 f9d2 	bl	80005b0 <__aeabi_dmul>
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	f7f9 f818 	bl	8000244 <__adddf3>
 8007214:	f8df a124 	ldr.w	sl, [pc, #292]	; 800733c <_strtod_l+0xb0c>
 8007218:	4a4d      	ldr	r2, [pc, #308]	; (8007350 <_strtod_l+0xb20>)
 800721a:	ea01 0a0a 	and.w	sl, r1, sl
 800721e:	4592      	cmp	sl, r2
 8007220:	4680      	mov	r8, r0
 8007222:	d948      	bls.n	80072b6 <_strtod_l+0xa86>
 8007224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <_strtod_l+0xb10>)
 8007228:	429a      	cmp	r2, r3
 800722a:	d103      	bne.n	8007234 <_strtod_l+0xa04>
 800722c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800722e:	3301      	adds	r3, #1
 8007230:	f43f ad3c 	beq.w	8006cac <_strtod_l+0x47c>
 8007234:	f04f 38ff 	mov.w	r8, #4294967295
 8007238:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007340 <_strtod_l+0xb10>
 800723c:	4620      	mov	r0, r4
 800723e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007240:	f7fe fe76 	bl	8005f30 <_Bfree>
 8007244:	4620      	mov	r0, r4
 8007246:	9908      	ldr	r1, [sp, #32]
 8007248:	f7fe fe72 	bl	8005f30 <_Bfree>
 800724c:	4659      	mov	r1, fp
 800724e:	4620      	mov	r0, r4
 8007250:	f7fe fe6e 	bl	8005f30 <_Bfree>
 8007254:	4631      	mov	r1, r6
 8007256:	4620      	mov	r0, r4
 8007258:	f7fe fe6a 	bl	8005f30 <_Bfree>
 800725c:	e605      	b.n	8006e6a <_strtod_l+0x63a>
 800725e:	f1b8 0f01 	cmp.w	r8, #1
 8007262:	d103      	bne.n	800726c <_strtod_l+0xa3c>
 8007264:	f1b9 0f00 	cmp.w	r9, #0
 8007268:	f43f ad91 	beq.w	8006d8e <_strtod_l+0x55e>
 800726c:	2200      	movs	r2, #0
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <_strtod_l+0xb24>)
 8007270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007272:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007276:	e016      	b.n	80072a6 <_strtod_l+0xa76>
 8007278:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800727a:	4f33      	ldr	r7, [pc, #204]	; (8007348 <_strtod_l+0xb18>)
 800727c:	e7a9      	b.n	80071d2 <_strtod_l+0x9a2>
 800727e:	4b32      	ldr	r3, [pc, #200]	; (8007348 <_strtod_l+0xb18>)
 8007280:	2200      	movs	r2, #0
 8007282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007286:	f7f9 f993 	bl	80005b0 <__aeabi_dmul>
 800728a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728c:	4605      	mov	r5, r0
 800728e:	460f      	mov	r7, r1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d09e      	beq.n	80071d2 <_strtod_l+0x9a2>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800729c:	e79d      	b.n	80071da <_strtod_l+0x9aa>
 800729e:	2200      	movs	r2, #0
 80072a0:	4b28      	ldr	r3, [pc, #160]	; (8007344 <_strtod_l+0xb14>)
 80072a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072a6:	4f27      	ldr	r7, [pc, #156]	; (8007344 <_strtod_l+0xb14>)
 80072a8:	e797      	b.n	80071da <_strtod_l+0x9aa>
 80072aa:	2200      	movs	r2, #0
 80072ac:	4b29      	ldr	r3, [pc, #164]	; (8007354 <_strtod_l+0xb24>)
 80072ae:	4645      	mov	r5, r8
 80072b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072b4:	e7f7      	b.n	80072a6 <_strtod_l+0xa76>
 80072b6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	46ca      	mov	sl, r9
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1bc      	bne.n	800723c <_strtod_l+0xa0c>
 80072c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d1b5      	bne.n	800723c <_strtod_l+0xa0c>
 80072d0:	4628      	mov	r0, r5
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 ff32 	bl	800113c <__aeabi_d2lz>
 80072d8:	f7f9 f93c 	bl	8000554 <__aeabi_l2d>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4628      	mov	r0, r5
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f8 ffac 	bl	8000240 <__aeabi_dsub>
 80072e8:	460b      	mov	r3, r1
 80072ea:	4602      	mov	r2, r0
 80072ec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80072f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80072f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f6:	ea4a 0a08 	orr.w	sl, sl, r8
 80072fa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80072fe:	d06c      	beq.n	80073da <_strtod_l+0xbaa>
 8007300:	a309      	add	r3, pc, #36	; (adr r3, 8007328 <_strtod_l+0xaf8>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f9 fbc5 	bl	8000a94 <__aeabi_dcmplt>
 800730a:	2800      	cmp	r0, #0
 800730c:	f47f acd8 	bne.w	8006cc0 <_strtod_l+0x490>
 8007310:	a307      	add	r3, pc, #28	; (adr r3, 8007330 <_strtod_l+0xb00>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800731a:	f7f9 fbd9 	bl	8000ad0 <__aeabi_dcmpgt>
 800731e:	2800      	cmp	r0, #0
 8007320:	d08c      	beq.n	800723c <_strtod_l+0xa0c>
 8007322:	e4cd      	b.n	8006cc0 <_strtod_l+0x490>
 8007324:	f3af 8000 	nop.w
 8007328:	94a03595 	.word	0x94a03595
 800732c:	3fdfffff 	.word	0x3fdfffff
 8007330:	35afe535 	.word	0x35afe535
 8007334:	3fe00000 	.word	0x3fe00000
 8007338:	000fffff 	.word	0x000fffff
 800733c:	7ff00000 	.word	0x7ff00000
 8007340:	7fefffff 	.word	0x7fefffff
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	7fe00000 	.word	0x7fe00000
 8007350:	7c9fffff 	.word	0x7c9fffff
 8007354:	bff00000 	.word	0xbff00000
 8007358:	9b05      	ldr	r3, [sp, #20]
 800735a:	b333      	cbz	r3, 80073aa <_strtod_l+0xb7a>
 800735c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800735e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007362:	d822      	bhi.n	80073aa <_strtod_l+0xb7a>
 8007364:	a328      	add	r3, pc, #160	; (adr r3, 8007408 <_strtod_l+0xbd8>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	4628      	mov	r0, r5
 800736c:	4639      	mov	r1, r7
 800736e:	f7f9 fb9b 	bl	8000aa8 <__aeabi_dcmple>
 8007372:	b1a0      	cbz	r0, 800739e <_strtod_l+0xb6e>
 8007374:	4639      	mov	r1, r7
 8007376:	4628      	mov	r0, r5
 8007378:	f7f9 fbf2 	bl	8000b60 <__aeabi_d2uiz>
 800737c:	2801      	cmp	r0, #1
 800737e:	bf38      	it	cc
 8007380:	2001      	movcc	r0, #1
 8007382:	f7f9 f89b 	bl	80004bc <__aeabi_ui2d>
 8007386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007388:	4605      	mov	r5, r0
 800738a:	460f      	mov	r7, r1
 800738c:	bb03      	cbnz	r3, 80073d0 <_strtod_l+0xba0>
 800738e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007392:	9014      	str	r0, [sp, #80]	; 0x50
 8007394:	9315      	str	r3, [sp, #84]	; 0x54
 8007396:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800739a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800739e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073a2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	9311      	str	r3, [sp, #68]	; 0x44
 80073aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073ae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80073b2:	f7ff f8e9 	bl	8006588 <__ulp>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4640      	mov	r0, r8
 80073bc:	4649      	mov	r1, r9
 80073be:	f7f9 f8f7 	bl	80005b0 <__aeabi_dmul>
 80073c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c6:	f7f8 ff3d 	bl	8000244 <__adddf3>
 80073ca:	4680      	mov	r8, r0
 80073cc:	4689      	mov	r9, r1
 80073ce:	e774      	b.n	80072ba <_strtod_l+0xa8a>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80073d8:	e7dd      	b.n	8007396 <_strtod_l+0xb66>
 80073da:	a30d      	add	r3, pc, #52	; (adr r3, 8007410 <_strtod_l+0xbe0>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f9 fb58 	bl	8000a94 <__aeabi_dcmplt>
 80073e4:	e79b      	b.n	800731e <_strtod_l+0xaee>
 80073e6:	2300      	movs	r3, #0
 80073e8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	f7ff ba5b 	b.w	80068aa <_strtod_l+0x7a>
 80073f4:	2a65      	cmp	r2, #101	; 0x65
 80073f6:	f43f ab52 	beq.w	8006a9e <_strtod_l+0x26e>
 80073fa:	2a45      	cmp	r2, #69	; 0x45
 80073fc:	f43f ab4f 	beq.w	8006a9e <_strtod_l+0x26e>
 8007400:	2301      	movs	r3, #1
 8007402:	f7ff bb87 	b.w	8006b14 <_strtod_l+0x2e4>
 8007406:	bf00      	nop
 8007408:	ffc00000 	.word	0xffc00000
 800740c:	41dfffff 	.word	0x41dfffff
 8007410:	94a03595 	.word	0x94a03595
 8007414:	3fcfffff 	.word	0x3fcfffff

08007418 <_strtod_r>:
 8007418:	4b01      	ldr	r3, [pc, #4]	; (8007420 <_strtod_r+0x8>)
 800741a:	f7ff ba09 	b.w	8006830 <_strtod_l>
 800741e:	bf00      	nop
 8007420:	20000068 	.word	0x20000068

08007424 <_strtol_l.constprop.0>:
 8007424:	2b01      	cmp	r3, #1
 8007426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742a:	4686      	mov	lr, r0
 800742c:	4690      	mov	r8, r2
 800742e:	d001      	beq.n	8007434 <_strtol_l.constprop.0+0x10>
 8007430:	2b24      	cmp	r3, #36	; 0x24
 8007432:	d906      	bls.n	8007442 <_strtol_l.constprop.0+0x1e>
 8007434:	f7fd fd92 	bl	8004f5c <__errno>
 8007438:	2316      	movs	r3, #22
 800743a:	6003      	str	r3, [r0, #0]
 800743c:	2000      	movs	r0, #0
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	460d      	mov	r5, r1
 8007444:	4835      	ldr	r0, [pc, #212]	; (800751c <_strtol_l.constprop.0+0xf8>)
 8007446:	462a      	mov	r2, r5
 8007448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800744c:	5d06      	ldrb	r6, [r0, r4]
 800744e:	f016 0608 	ands.w	r6, r6, #8
 8007452:	d1f8      	bne.n	8007446 <_strtol_l.constprop.0+0x22>
 8007454:	2c2d      	cmp	r4, #45	; 0x2d
 8007456:	d12e      	bne.n	80074b6 <_strtol_l.constprop.0+0x92>
 8007458:	2601      	movs	r6, #1
 800745a:	782c      	ldrb	r4, [r5, #0]
 800745c:	1c95      	adds	r5, r2, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d057      	beq.n	8007512 <_strtol_l.constprop.0+0xee>
 8007462:	2b10      	cmp	r3, #16
 8007464:	d109      	bne.n	800747a <_strtol_l.constprop.0+0x56>
 8007466:	2c30      	cmp	r4, #48	; 0x30
 8007468:	d107      	bne.n	800747a <_strtol_l.constprop.0+0x56>
 800746a:	782a      	ldrb	r2, [r5, #0]
 800746c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007470:	2a58      	cmp	r2, #88	; 0x58
 8007472:	d149      	bne.n	8007508 <_strtol_l.constprop.0+0xe4>
 8007474:	2310      	movs	r3, #16
 8007476:	786c      	ldrb	r4, [r5, #1]
 8007478:	3502      	adds	r5, #2
 800747a:	2200      	movs	r2, #0
 800747c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007480:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007484:	fbbc f9f3 	udiv	r9, ip, r3
 8007488:	4610      	mov	r0, r2
 800748a:	fb03 ca19 	mls	sl, r3, r9, ip
 800748e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007492:	2f09      	cmp	r7, #9
 8007494:	d814      	bhi.n	80074c0 <_strtol_l.constprop.0+0x9c>
 8007496:	463c      	mov	r4, r7
 8007498:	42a3      	cmp	r3, r4
 800749a:	dd20      	ble.n	80074de <_strtol_l.constprop.0+0xba>
 800749c:	1c57      	adds	r7, r2, #1
 800749e:	d007      	beq.n	80074b0 <_strtol_l.constprop.0+0x8c>
 80074a0:	4581      	cmp	r9, r0
 80074a2:	d319      	bcc.n	80074d8 <_strtol_l.constprop.0+0xb4>
 80074a4:	d101      	bne.n	80074aa <_strtol_l.constprop.0+0x86>
 80074a6:	45a2      	cmp	sl, r4
 80074a8:	db16      	blt.n	80074d8 <_strtol_l.constprop.0+0xb4>
 80074aa:	2201      	movs	r2, #1
 80074ac:	fb00 4003 	mla	r0, r0, r3, r4
 80074b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074b4:	e7eb      	b.n	800748e <_strtol_l.constprop.0+0x6a>
 80074b6:	2c2b      	cmp	r4, #43	; 0x2b
 80074b8:	bf04      	itt	eq
 80074ba:	782c      	ldrbeq	r4, [r5, #0]
 80074bc:	1c95      	addeq	r5, r2, #2
 80074be:	e7ce      	b.n	800745e <_strtol_l.constprop.0+0x3a>
 80074c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80074c4:	2f19      	cmp	r7, #25
 80074c6:	d801      	bhi.n	80074cc <_strtol_l.constprop.0+0xa8>
 80074c8:	3c37      	subs	r4, #55	; 0x37
 80074ca:	e7e5      	b.n	8007498 <_strtol_l.constprop.0+0x74>
 80074cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80074d0:	2f19      	cmp	r7, #25
 80074d2:	d804      	bhi.n	80074de <_strtol_l.constprop.0+0xba>
 80074d4:	3c57      	subs	r4, #87	; 0x57
 80074d6:	e7df      	b.n	8007498 <_strtol_l.constprop.0+0x74>
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
 80074dc:	e7e8      	b.n	80074b0 <_strtol_l.constprop.0+0x8c>
 80074de:	1c53      	adds	r3, r2, #1
 80074e0:	d108      	bne.n	80074f4 <_strtol_l.constprop.0+0xd0>
 80074e2:	2322      	movs	r3, #34	; 0x22
 80074e4:	4660      	mov	r0, ip
 80074e6:	f8ce 3000 	str.w	r3, [lr]
 80074ea:	f1b8 0f00 	cmp.w	r8, #0
 80074ee:	d0a6      	beq.n	800743e <_strtol_l.constprop.0+0x1a>
 80074f0:	1e69      	subs	r1, r5, #1
 80074f2:	e006      	b.n	8007502 <_strtol_l.constprop.0+0xde>
 80074f4:	b106      	cbz	r6, 80074f8 <_strtol_l.constprop.0+0xd4>
 80074f6:	4240      	negs	r0, r0
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	d09f      	beq.n	800743e <_strtol_l.constprop.0+0x1a>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d1f6      	bne.n	80074f0 <_strtol_l.constprop.0+0xcc>
 8007502:	f8c8 1000 	str.w	r1, [r8]
 8007506:	e79a      	b.n	800743e <_strtol_l.constprop.0+0x1a>
 8007508:	2430      	movs	r4, #48	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1b5      	bne.n	800747a <_strtol_l.constprop.0+0x56>
 800750e:	2308      	movs	r3, #8
 8007510:	e7b3      	b.n	800747a <_strtol_l.constprop.0+0x56>
 8007512:	2c30      	cmp	r4, #48	; 0x30
 8007514:	d0a9      	beq.n	800746a <_strtol_l.constprop.0+0x46>
 8007516:	230a      	movs	r3, #10
 8007518:	e7af      	b.n	800747a <_strtol_l.constprop.0+0x56>
 800751a:	bf00      	nop
 800751c:	08009121 	.word	0x08009121

08007520 <_strtol_r>:
 8007520:	f7ff bf80 	b.w	8007424 <_strtol_l.constprop.0>

08007524 <__ssputs_r>:
 8007524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	461f      	mov	r7, r3
 800752a:	688e      	ldr	r6, [r1, #8]
 800752c:	4682      	mov	sl, r0
 800752e:	42be      	cmp	r6, r7
 8007530:	460c      	mov	r4, r1
 8007532:	4690      	mov	r8, r2
 8007534:	680b      	ldr	r3, [r1, #0]
 8007536:	d82c      	bhi.n	8007592 <__ssputs_r+0x6e>
 8007538:	898a      	ldrh	r2, [r1, #12]
 800753a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800753e:	d026      	beq.n	800758e <__ssputs_r+0x6a>
 8007540:	6965      	ldr	r5, [r4, #20]
 8007542:	6909      	ldr	r1, [r1, #16]
 8007544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007548:	eba3 0901 	sub.w	r9, r3, r1
 800754c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007550:	1c7b      	adds	r3, r7, #1
 8007552:	444b      	add	r3, r9
 8007554:	106d      	asrs	r5, r5, #1
 8007556:	429d      	cmp	r5, r3
 8007558:	bf38      	it	cc
 800755a:	461d      	movcc	r5, r3
 800755c:	0553      	lsls	r3, r2, #21
 800755e:	d527      	bpl.n	80075b0 <__ssputs_r+0x8c>
 8007560:	4629      	mov	r1, r5
 8007562:	f7fe fc19 	bl	8005d98 <_malloc_r>
 8007566:	4606      	mov	r6, r0
 8007568:	b360      	cbz	r0, 80075c4 <__ssputs_r+0xa0>
 800756a:	464a      	mov	r2, r9
 800756c:	6921      	ldr	r1, [r4, #16]
 800756e:	f000 fbdd 	bl	8007d2c <memcpy>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	6126      	str	r6, [r4, #16]
 8007580:	444e      	add	r6, r9
 8007582:	6026      	str	r6, [r4, #0]
 8007584:	463e      	mov	r6, r7
 8007586:	6165      	str	r5, [r4, #20]
 8007588:	eba5 0509 	sub.w	r5, r5, r9
 800758c:	60a5      	str	r5, [r4, #8]
 800758e:	42be      	cmp	r6, r7
 8007590:	d900      	bls.n	8007594 <__ssputs_r+0x70>
 8007592:	463e      	mov	r6, r7
 8007594:	4632      	mov	r2, r6
 8007596:	4641      	mov	r1, r8
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	f000 fb68 	bl	8007c6e <memmove>
 800759e:	2000      	movs	r0, #0
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	1b9b      	subs	r3, r3, r6
 80075a4:	60a3      	str	r3, [r4, #8]
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	4433      	add	r3, r6
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b0:	462a      	mov	r2, r5
 80075b2:	f000 ff6c 	bl	800848e <_realloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1e0      	bne.n	800757e <__ssputs_r+0x5a>
 80075bc:	4650      	mov	r0, sl
 80075be:	6921      	ldr	r1, [r4, #16]
 80075c0:	f7fe fb7a 	bl	8005cb8 <_free_r>
 80075c4:	230c      	movs	r3, #12
 80075c6:	f8ca 3000 	str.w	r3, [sl]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	e7e9      	b.n	80075ac <__ssputs_r+0x88>

080075d8 <_svfiprintf_r>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	4698      	mov	r8, r3
 80075de:	898b      	ldrh	r3, [r1, #12]
 80075e0:	4607      	mov	r7, r0
 80075e2:	061b      	lsls	r3, r3, #24
 80075e4:	460d      	mov	r5, r1
 80075e6:	4614      	mov	r4, r2
 80075e8:	b09d      	sub	sp, #116	; 0x74
 80075ea:	d50e      	bpl.n	800760a <_svfiprintf_r+0x32>
 80075ec:	690b      	ldr	r3, [r1, #16]
 80075ee:	b963      	cbnz	r3, 800760a <_svfiprintf_r+0x32>
 80075f0:	2140      	movs	r1, #64	; 0x40
 80075f2:	f7fe fbd1 	bl	8005d98 <_malloc_r>
 80075f6:	6028      	str	r0, [r5, #0]
 80075f8:	6128      	str	r0, [r5, #16]
 80075fa:	b920      	cbnz	r0, 8007606 <_svfiprintf_r+0x2e>
 80075fc:	230c      	movs	r3, #12
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e0d0      	b.n	80077a8 <_svfiprintf_r+0x1d0>
 8007606:	2340      	movs	r3, #64	; 0x40
 8007608:	616b      	str	r3, [r5, #20]
 800760a:	2300      	movs	r3, #0
 800760c:	9309      	str	r3, [sp, #36]	; 0x24
 800760e:	2320      	movs	r3, #32
 8007610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007614:	2330      	movs	r3, #48	; 0x30
 8007616:	f04f 0901 	mov.w	r9, #1
 800761a:	f8cd 800c 	str.w	r8, [sp, #12]
 800761e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80077c0 <_svfiprintf_r+0x1e8>
 8007622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007626:	4623      	mov	r3, r4
 8007628:	469a      	mov	sl, r3
 800762a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800762e:	b10a      	cbz	r2, 8007634 <_svfiprintf_r+0x5c>
 8007630:	2a25      	cmp	r2, #37	; 0x25
 8007632:	d1f9      	bne.n	8007628 <_svfiprintf_r+0x50>
 8007634:	ebba 0b04 	subs.w	fp, sl, r4
 8007638:	d00b      	beq.n	8007652 <_svfiprintf_r+0x7a>
 800763a:	465b      	mov	r3, fp
 800763c:	4622      	mov	r2, r4
 800763e:	4629      	mov	r1, r5
 8007640:	4638      	mov	r0, r7
 8007642:	f7ff ff6f 	bl	8007524 <__ssputs_r>
 8007646:	3001      	adds	r0, #1
 8007648:	f000 80a9 	beq.w	800779e <_svfiprintf_r+0x1c6>
 800764c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800764e:	445a      	add	r2, fp
 8007650:	9209      	str	r2, [sp, #36]	; 0x24
 8007652:	f89a 3000 	ldrb.w	r3, [sl]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80a1 	beq.w	800779e <_svfiprintf_r+0x1c6>
 800765c:	2300      	movs	r3, #0
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007666:	f10a 0a01 	add.w	sl, sl, #1
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	9307      	str	r3, [sp, #28]
 800766e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007672:	931a      	str	r3, [sp, #104]	; 0x68
 8007674:	4654      	mov	r4, sl
 8007676:	2205      	movs	r2, #5
 8007678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767c:	4850      	ldr	r0, [pc, #320]	; (80077c0 <_svfiprintf_r+0x1e8>)
 800767e:	f7fd fc9a 	bl	8004fb6 <memchr>
 8007682:	9a04      	ldr	r2, [sp, #16]
 8007684:	b9d8      	cbnz	r0, 80076be <_svfiprintf_r+0xe6>
 8007686:	06d0      	lsls	r0, r2, #27
 8007688:	bf44      	itt	mi
 800768a:	2320      	movmi	r3, #32
 800768c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007690:	0711      	lsls	r1, r2, #28
 8007692:	bf44      	itt	mi
 8007694:	232b      	movmi	r3, #43	; 0x2b
 8007696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800769a:	f89a 3000 	ldrb.w	r3, [sl]
 800769e:	2b2a      	cmp	r3, #42	; 0x2a
 80076a0:	d015      	beq.n	80076ce <_svfiprintf_r+0xf6>
 80076a2:	4654      	mov	r4, sl
 80076a4:	2000      	movs	r0, #0
 80076a6:	f04f 0c0a 	mov.w	ip, #10
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	4621      	mov	r1, r4
 80076ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076b2:	3b30      	subs	r3, #48	; 0x30
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	d94d      	bls.n	8007754 <_svfiprintf_r+0x17c>
 80076b8:	b1b0      	cbz	r0, 80076e8 <_svfiprintf_r+0x110>
 80076ba:	9207      	str	r2, [sp, #28]
 80076bc:	e014      	b.n	80076e8 <_svfiprintf_r+0x110>
 80076be:	eba0 0308 	sub.w	r3, r0, r8
 80076c2:	fa09 f303 	lsl.w	r3, r9, r3
 80076c6:	4313      	orrs	r3, r2
 80076c8:	46a2      	mov	sl, r4
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	e7d2      	b.n	8007674 <_svfiprintf_r+0x9c>
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	1d19      	adds	r1, r3, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	9103      	str	r1, [sp, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfbb      	ittet	lt
 80076da:	425b      	neglt	r3, r3
 80076dc:	f042 0202 	orrlt.w	r2, r2, #2
 80076e0:	9307      	strge	r3, [sp, #28]
 80076e2:	9307      	strlt	r3, [sp, #28]
 80076e4:	bfb8      	it	lt
 80076e6:	9204      	strlt	r2, [sp, #16]
 80076e8:	7823      	ldrb	r3, [r4, #0]
 80076ea:	2b2e      	cmp	r3, #46	; 0x2e
 80076ec:	d10c      	bne.n	8007708 <_svfiprintf_r+0x130>
 80076ee:	7863      	ldrb	r3, [r4, #1]
 80076f0:	2b2a      	cmp	r3, #42	; 0x2a
 80076f2:	d134      	bne.n	800775e <_svfiprintf_r+0x186>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	3402      	adds	r4, #2
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9203      	str	r2, [sp, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfb8      	it	lt
 8007702:	f04f 33ff 	movlt.w	r3, #4294967295
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80077c4 <_svfiprintf_r+0x1ec>
 800770c:	2203      	movs	r2, #3
 800770e:	4650      	mov	r0, sl
 8007710:	7821      	ldrb	r1, [r4, #0]
 8007712:	f7fd fc50 	bl	8004fb6 <memchr>
 8007716:	b138      	cbz	r0, 8007728 <_svfiprintf_r+0x150>
 8007718:	2240      	movs	r2, #64	; 0x40
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	eba0 000a 	sub.w	r0, r0, sl
 8007720:	4082      	lsls	r2, r0
 8007722:	4313      	orrs	r3, r2
 8007724:	3401      	adds	r4, #1
 8007726:	9304      	str	r3, [sp, #16]
 8007728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772c:	2206      	movs	r2, #6
 800772e:	4826      	ldr	r0, [pc, #152]	; (80077c8 <_svfiprintf_r+0x1f0>)
 8007730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007734:	f7fd fc3f 	bl	8004fb6 <memchr>
 8007738:	2800      	cmp	r0, #0
 800773a:	d038      	beq.n	80077ae <_svfiprintf_r+0x1d6>
 800773c:	4b23      	ldr	r3, [pc, #140]	; (80077cc <_svfiprintf_r+0x1f4>)
 800773e:	bb1b      	cbnz	r3, 8007788 <_svfiprintf_r+0x1b0>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	3307      	adds	r3, #7
 8007744:	f023 0307 	bic.w	r3, r3, #7
 8007748:	3308      	adds	r3, #8
 800774a:	9303      	str	r3, [sp, #12]
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	4433      	add	r3, r6
 8007750:	9309      	str	r3, [sp, #36]	; 0x24
 8007752:	e768      	b.n	8007626 <_svfiprintf_r+0x4e>
 8007754:	460c      	mov	r4, r1
 8007756:	2001      	movs	r0, #1
 8007758:	fb0c 3202 	mla	r2, ip, r2, r3
 800775c:	e7a6      	b.n	80076ac <_svfiprintf_r+0xd4>
 800775e:	2300      	movs	r3, #0
 8007760:	f04f 0c0a 	mov.w	ip, #10
 8007764:	4619      	mov	r1, r3
 8007766:	3401      	adds	r4, #1
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	4620      	mov	r0, r4
 800776c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007770:	3a30      	subs	r2, #48	; 0x30
 8007772:	2a09      	cmp	r2, #9
 8007774:	d903      	bls.n	800777e <_svfiprintf_r+0x1a6>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0c6      	beq.n	8007708 <_svfiprintf_r+0x130>
 800777a:	9105      	str	r1, [sp, #20]
 800777c:	e7c4      	b.n	8007708 <_svfiprintf_r+0x130>
 800777e:	4604      	mov	r4, r0
 8007780:	2301      	movs	r3, #1
 8007782:	fb0c 2101 	mla	r1, ip, r1, r2
 8007786:	e7f0      	b.n	800776a <_svfiprintf_r+0x192>
 8007788:	ab03      	add	r3, sp, #12
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	462a      	mov	r2, r5
 800778e:	4638      	mov	r0, r7
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <_svfiprintf_r+0x1f8>)
 8007792:	a904      	add	r1, sp, #16
 8007794:	f7fc fb98 	bl	8003ec8 <_printf_float>
 8007798:	1c42      	adds	r2, r0, #1
 800779a:	4606      	mov	r6, r0
 800779c:	d1d6      	bne.n	800774c <_svfiprintf_r+0x174>
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	065b      	lsls	r3, r3, #25
 80077a2:	f53f af2d 	bmi.w	8007600 <_svfiprintf_r+0x28>
 80077a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a8:	b01d      	add	sp, #116	; 0x74
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	ab03      	add	r3, sp, #12
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	462a      	mov	r2, r5
 80077b4:	4638      	mov	r0, r7
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <_svfiprintf_r+0x1f8>)
 80077b8:	a904      	add	r1, sp, #16
 80077ba:	f7fc fe25 	bl	8004408 <_printf_i>
 80077be:	e7eb      	b.n	8007798 <_svfiprintf_r+0x1c0>
 80077c0:	08009221 	.word	0x08009221
 80077c4:	08009227 	.word	0x08009227
 80077c8:	0800922b 	.word	0x0800922b
 80077cc:	08003ec9 	.word	0x08003ec9
 80077d0:	08007525 	.word	0x08007525

080077d4 <__sfputc_r>:
 80077d4:	6893      	ldr	r3, [r2, #8]
 80077d6:	b410      	push	{r4}
 80077d8:	3b01      	subs	r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	6093      	str	r3, [r2, #8]
 80077de:	da07      	bge.n	80077f0 <__sfputc_r+0x1c>
 80077e0:	6994      	ldr	r4, [r2, #24]
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	db01      	blt.n	80077ea <__sfputc_r+0x16>
 80077e6:	290a      	cmp	r1, #10
 80077e8:	d102      	bne.n	80077f0 <__sfputc_r+0x1c>
 80077ea:	bc10      	pop	{r4}
 80077ec:	f7fd bacf 	b.w	8004d8e <__swbuf_r>
 80077f0:	6813      	ldr	r3, [r2, #0]
 80077f2:	1c58      	adds	r0, r3, #1
 80077f4:	6010      	str	r0, [r2, #0]
 80077f6:	7019      	strb	r1, [r3, #0]
 80077f8:	4608      	mov	r0, r1
 80077fa:	bc10      	pop	{r4}
 80077fc:	4770      	bx	lr

080077fe <__sfputs_r>:
 80077fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007800:	4606      	mov	r6, r0
 8007802:	460f      	mov	r7, r1
 8007804:	4614      	mov	r4, r2
 8007806:	18d5      	adds	r5, r2, r3
 8007808:	42ac      	cmp	r4, r5
 800780a:	d101      	bne.n	8007810 <__sfputs_r+0x12>
 800780c:	2000      	movs	r0, #0
 800780e:	e007      	b.n	8007820 <__sfputs_r+0x22>
 8007810:	463a      	mov	r2, r7
 8007812:	4630      	mov	r0, r6
 8007814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007818:	f7ff ffdc 	bl	80077d4 <__sfputc_r>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d1f3      	bne.n	8007808 <__sfputs_r+0xa>
 8007820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007824 <_vfiprintf_r>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	460d      	mov	r5, r1
 800782a:	4614      	mov	r4, r2
 800782c:	4698      	mov	r8, r3
 800782e:	4606      	mov	r6, r0
 8007830:	b09d      	sub	sp, #116	; 0x74
 8007832:	b118      	cbz	r0, 800783c <_vfiprintf_r+0x18>
 8007834:	6a03      	ldr	r3, [r0, #32]
 8007836:	b90b      	cbnz	r3, 800783c <_vfiprintf_r+0x18>
 8007838:	f7fd f9a2 	bl	8004b80 <__sinit>
 800783c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d405      	bmi.n	800784e <_vfiprintf_r+0x2a>
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	059a      	lsls	r2, r3, #22
 8007846:	d402      	bmi.n	800784e <_vfiprintf_r+0x2a>
 8007848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800784a:	f7fd fbb2 	bl	8004fb2 <__retarget_lock_acquire_recursive>
 800784e:	89ab      	ldrh	r3, [r5, #12]
 8007850:	071b      	lsls	r3, r3, #28
 8007852:	d501      	bpl.n	8007858 <_vfiprintf_r+0x34>
 8007854:	692b      	ldr	r3, [r5, #16]
 8007856:	b99b      	cbnz	r3, 8007880 <_vfiprintf_r+0x5c>
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7fd fad4 	bl	8004e08 <__swsetup_r>
 8007860:	b170      	cbz	r0, 8007880 <_vfiprintf_r+0x5c>
 8007862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007864:	07dc      	lsls	r4, r3, #31
 8007866:	d504      	bpl.n	8007872 <_vfiprintf_r+0x4e>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	b01d      	add	sp, #116	; 0x74
 800786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	0598      	lsls	r0, r3, #22
 8007876:	d4f7      	bmi.n	8007868 <_vfiprintf_r+0x44>
 8007878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787a:	f7fd fb9b 	bl	8004fb4 <__retarget_lock_release_recursive>
 800787e:	e7f3      	b.n	8007868 <_vfiprintf_r+0x44>
 8007880:	2300      	movs	r3, #0
 8007882:	9309      	str	r3, [sp, #36]	; 0x24
 8007884:	2320      	movs	r3, #32
 8007886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788a:	2330      	movs	r3, #48	; 0x30
 800788c:	f04f 0901 	mov.w	r9, #1
 8007890:	f8cd 800c 	str.w	r8, [sp, #12]
 8007894:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007a44 <_vfiprintf_r+0x220>
 8007898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789c:	4623      	mov	r3, r4
 800789e:	469a      	mov	sl, r3
 80078a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a4:	b10a      	cbz	r2, 80078aa <_vfiprintf_r+0x86>
 80078a6:	2a25      	cmp	r2, #37	; 0x25
 80078a8:	d1f9      	bne.n	800789e <_vfiprintf_r+0x7a>
 80078aa:	ebba 0b04 	subs.w	fp, sl, r4
 80078ae:	d00b      	beq.n	80078c8 <_vfiprintf_r+0xa4>
 80078b0:	465b      	mov	r3, fp
 80078b2:	4622      	mov	r2, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	4630      	mov	r0, r6
 80078b8:	f7ff ffa1 	bl	80077fe <__sfputs_r>
 80078bc:	3001      	adds	r0, #1
 80078be:	f000 80a9 	beq.w	8007a14 <_vfiprintf_r+0x1f0>
 80078c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c4:	445a      	add	r2, fp
 80078c6:	9209      	str	r2, [sp, #36]	; 0x24
 80078c8:	f89a 3000 	ldrb.w	r3, [sl]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80a1 	beq.w	8007a14 <_vfiprintf_r+0x1f0>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f04f 32ff 	mov.w	r2, #4294967295
 80078d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078dc:	f10a 0a01 	add.w	sl, sl, #1
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	9307      	str	r3, [sp, #28]
 80078e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e8:	931a      	str	r3, [sp, #104]	; 0x68
 80078ea:	4654      	mov	r4, sl
 80078ec:	2205      	movs	r2, #5
 80078ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f2:	4854      	ldr	r0, [pc, #336]	; (8007a44 <_vfiprintf_r+0x220>)
 80078f4:	f7fd fb5f 	bl	8004fb6 <memchr>
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	b9d8      	cbnz	r0, 8007934 <_vfiprintf_r+0x110>
 80078fc:	06d1      	lsls	r1, r2, #27
 80078fe:	bf44      	itt	mi
 8007900:	2320      	movmi	r3, #32
 8007902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007906:	0713      	lsls	r3, r2, #28
 8007908:	bf44      	itt	mi
 800790a:	232b      	movmi	r3, #43	; 0x2b
 800790c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007910:	f89a 3000 	ldrb.w	r3, [sl]
 8007914:	2b2a      	cmp	r3, #42	; 0x2a
 8007916:	d015      	beq.n	8007944 <_vfiprintf_r+0x120>
 8007918:	4654      	mov	r4, sl
 800791a:	2000      	movs	r0, #0
 800791c:	f04f 0c0a 	mov.w	ip, #10
 8007920:	9a07      	ldr	r2, [sp, #28]
 8007922:	4621      	mov	r1, r4
 8007924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007928:	3b30      	subs	r3, #48	; 0x30
 800792a:	2b09      	cmp	r3, #9
 800792c:	d94d      	bls.n	80079ca <_vfiprintf_r+0x1a6>
 800792e:	b1b0      	cbz	r0, 800795e <_vfiprintf_r+0x13a>
 8007930:	9207      	str	r2, [sp, #28]
 8007932:	e014      	b.n	800795e <_vfiprintf_r+0x13a>
 8007934:	eba0 0308 	sub.w	r3, r0, r8
 8007938:	fa09 f303 	lsl.w	r3, r9, r3
 800793c:	4313      	orrs	r3, r2
 800793e:	46a2      	mov	sl, r4
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	e7d2      	b.n	80078ea <_vfiprintf_r+0xc6>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	1d19      	adds	r1, r3, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	9103      	str	r1, [sp, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	bfbb      	ittet	lt
 8007950:	425b      	neglt	r3, r3
 8007952:	f042 0202 	orrlt.w	r2, r2, #2
 8007956:	9307      	strge	r3, [sp, #28]
 8007958:	9307      	strlt	r3, [sp, #28]
 800795a:	bfb8      	it	lt
 800795c:	9204      	strlt	r2, [sp, #16]
 800795e:	7823      	ldrb	r3, [r4, #0]
 8007960:	2b2e      	cmp	r3, #46	; 0x2e
 8007962:	d10c      	bne.n	800797e <_vfiprintf_r+0x15a>
 8007964:	7863      	ldrb	r3, [r4, #1]
 8007966:	2b2a      	cmp	r3, #42	; 0x2a
 8007968:	d134      	bne.n	80079d4 <_vfiprintf_r+0x1b0>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	3402      	adds	r4, #2
 800796e:	1d1a      	adds	r2, r3, #4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	9203      	str	r2, [sp, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	bfb8      	it	lt
 8007978:	f04f 33ff 	movlt.w	r3, #4294967295
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a48 <_vfiprintf_r+0x224>
 8007982:	2203      	movs	r2, #3
 8007984:	4650      	mov	r0, sl
 8007986:	7821      	ldrb	r1, [r4, #0]
 8007988:	f7fd fb15 	bl	8004fb6 <memchr>
 800798c:	b138      	cbz	r0, 800799e <_vfiprintf_r+0x17a>
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	eba0 000a 	sub.w	r0, r0, sl
 8007996:	4082      	lsls	r2, r0
 8007998:	4313      	orrs	r3, r2
 800799a:	3401      	adds	r4, #1
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a2:	2206      	movs	r2, #6
 80079a4:	4829      	ldr	r0, [pc, #164]	; (8007a4c <_vfiprintf_r+0x228>)
 80079a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079aa:	f7fd fb04 	bl	8004fb6 <memchr>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d03f      	beq.n	8007a32 <_vfiprintf_r+0x20e>
 80079b2:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <_vfiprintf_r+0x22c>)
 80079b4:	bb1b      	cbnz	r3, 80079fe <_vfiprintf_r+0x1da>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	3307      	adds	r3, #7
 80079ba:	f023 0307 	bic.w	r3, r3, #7
 80079be:	3308      	adds	r3, #8
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c4:	443b      	add	r3, r7
 80079c6:	9309      	str	r3, [sp, #36]	; 0x24
 80079c8:	e768      	b.n	800789c <_vfiprintf_r+0x78>
 80079ca:	460c      	mov	r4, r1
 80079cc:	2001      	movs	r0, #1
 80079ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d2:	e7a6      	b.n	8007922 <_vfiprintf_r+0xfe>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f04f 0c0a 	mov.w	ip, #10
 80079da:	4619      	mov	r1, r3
 80079dc:	3401      	adds	r4, #1
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	4620      	mov	r0, r4
 80079e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e6:	3a30      	subs	r2, #48	; 0x30
 80079e8:	2a09      	cmp	r2, #9
 80079ea:	d903      	bls.n	80079f4 <_vfiprintf_r+0x1d0>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0c6      	beq.n	800797e <_vfiprintf_r+0x15a>
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	e7c4      	b.n	800797e <_vfiprintf_r+0x15a>
 80079f4:	4604      	mov	r4, r0
 80079f6:	2301      	movs	r3, #1
 80079f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fc:	e7f0      	b.n	80079e0 <_vfiprintf_r+0x1bc>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4630      	mov	r0, r6
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <_vfiprintf_r+0x230>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	f7fc fa5d 	bl	8003ec8 <_printf_float>
 8007a0e:	4607      	mov	r7, r0
 8007a10:	1c78      	adds	r0, r7, #1
 8007a12:	d1d6      	bne.n	80079c2 <_vfiprintf_r+0x19e>
 8007a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a16:	07d9      	lsls	r1, r3, #31
 8007a18:	d405      	bmi.n	8007a26 <_vfiprintf_r+0x202>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	059a      	lsls	r2, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_vfiprintf_r+0x202>
 8007a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a22:	f7fd fac7 	bl	8004fb4 <__retarget_lock_release_recursive>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	065b      	lsls	r3, r3, #25
 8007a2a:	f53f af1d 	bmi.w	8007868 <_vfiprintf_r+0x44>
 8007a2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a30:	e71c      	b.n	800786c <_vfiprintf_r+0x48>
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <_vfiprintf_r+0x230>)
 8007a3c:	a904      	add	r1, sp, #16
 8007a3e:	f7fc fce3 	bl	8004408 <_printf_i>
 8007a42:	e7e4      	b.n	8007a0e <_vfiprintf_r+0x1ea>
 8007a44:	08009221 	.word	0x08009221
 8007a48:	08009227 	.word	0x08009227
 8007a4c:	0800922b 	.word	0x0800922b
 8007a50:	08003ec9 	.word	0x08003ec9
 8007a54:	080077ff 	.word	0x080077ff

08007a58 <__sflush_r>:
 8007a58:	898a      	ldrh	r2, [r1, #12]
 8007a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	0710      	lsls	r0, r2, #28
 8007a60:	460c      	mov	r4, r1
 8007a62:	d457      	bmi.n	8007b14 <__sflush_r+0xbc>
 8007a64:	684b      	ldr	r3, [r1, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc04      	bgt.n	8007a74 <__sflush_r+0x1c>
 8007a6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc01      	bgt.n	8007a74 <__sflush_r+0x1c>
 8007a70:	2000      	movs	r0, #0
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d0fa      	beq.n	8007a70 <__sflush_r+0x18>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a80:	682f      	ldr	r7, [r5, #0]
 8007a82:	6a21      	ldr	r1, [r4, #32]
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	d032      	beq.n	8007aee <__sflush_r+0x96>
 8007a88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	075a      	lsls	r2, r3, #29
 8007a8e:	d505      	bpl.n	8007a9c <__sflush_r+0x44>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a96:	b10b      	cbz	r3, 8007a9c <__sflush_r+0x44>
 8007a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a9a:	1ac0      	subs	r0, r0, r3
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	47b0      	blx	r6
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	d106      	bne.n	8007abc <__sflush_r+0x64>
 8007aae:	6829      	ldr	r1, [r5, #0]
 8007ab0:	291d      	cmp	r1, #29
 8007ab2:	d82b      	bhi.n	8007b0c <__sflush_r+0xb4>
 8007ab4:	4a28      	ldr	r2, [pc, #160]	; (8007b58 <__sflush_r+0x100>)
 8007ab6:	410a      	asrs	r2, r1
 8007ab8:	07d6      	lsls	r6, r2, #31
 8007aba:	d427      	bmi.n	8007b0c <__sflush_r+0xb4>
 8007abc:	2200      	movs	r2, #0
 8007abe:	6062      	str	r2, [r4, #4]
 8007ac0:	6922      	ldr	r2, [r4, #16]
 8007ac2:	04d9      	lsls	r1, r3, #19
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	d504      	bpl.n	8007ad2 <__sflush_r+0x7a>
 8007ac8:	1c42      	adds	r2, r0, #1
 8007aca:	d101      	bne.n	8007ad0 <__sflush_r+0x78>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b903      	cbnz	r3, 8007ad2 <__sflush_r+0x7a>
 8007ad0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad4:	602f      	str	r7, [r5, #0]
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d0ca      	beq.n	8007a70 <__sflush_r+0x18>
 8007ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	d002      	beq.n	8007ae8 <__sflush_r+0x90>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7fe f8e8 	bl	8005cb8 <_free_r>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	6360      	str	r0, [r4, #52]	; 0x34
 8007aec:	e7c1      	b.n	8007a72 <__sflush_r+0x1a>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b0      	blx	r6
 8007af4:	1c41      	adds	r1, r0, #1
 8007af6:	d1c8      	bne.n	8007a8a <__sflush_r+0x32>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c5      	beq.n	8007a8a <__sflush_r+0x32>
 8007afe:	2b1d      	cmp	r3, #29
 8007b00:	d001      	beq.n	8007b06 <__sflush_r+0xae>
 8007b02:	2b16      	cmp	r3, #22
 8007b04:	d101      	bne.n	8007b0a <__sflush_r+0xb2>
 8007b06:	602f      	str	r7, [r5, #0]
 8007b08:	e7b2      	b.n	8007a70 <__sflush_r+0x18>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	e7ae      	b.n	8007a72 <__sflush_r+0x1a>
 8007b14:	690f      	ldr	r7, [r1, #16]
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	d0aa      	beq.n	8007a70 <__sflush_r+0x18>
 8007b1a:	0793      	lsls	r3, r2, #30
 8007b1c:	bf18      	it	ne
 8007b1e:	2300      	movne	r3, #0
 8007b20:	680e      	ldr	r6, [r1, #0]
 8007b22:	bf08      	it	eq
 8007b24:	694b      	ldreq	r3, [r1, #20]
 8007b26:	1bf6      	subs	r6, r6, r7
 8007b28:	600f      	str	r7, [r1, #0]
 8007b2a:	608b      	str	r3, [r1, #8]
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	dd9f      	ble.n	8007a70 <__sflush_r+0x18>
 8007b30:	4633      	mov	r3, r6
 8007b32:	463a      	mov	r2, r7
 8007b34:	4628      	mov	r0, r5
 8007b36:	6a21      	ldr	r1, [r4, #32]
 8007b38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b3c:	47e0      	blx	ip
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	dc06      	bgt.n	8007b50 <__sflush_r+0xf8>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	e790      	b.n	8007a72 <__sflush_r+0x1a>
 8007b50:	4407      	add	r7, r0
 8007b52:	1a36      	subs	r6, r6, r0
 8007b54:	e7ea      	b.n	8007b2c <__sflush_r+0xd4>
 8007b56:	bf00      	nop
 8007b58:	dfbffffe 	.word	0xdfbffffe

08007b5c <_fflush_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	4605      	mov	r5, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	b913      	cbnz	r3, 8007b6c <_fflush_r+0x10>
 8007b66:	2500      	movs	r5, #0
 8007b68:	4628      	mov	r0, r5
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	b118      	cbz	r0, 8007b76 <_fflush_r+0x1a>
 8007b6e:	6a03      	ldr	r3, [r0, #32]
 8007b70:	b90b      	cbnz	r3, 8007b76 <_fflush_r+0x1a>
 8007b72:	f7fd f805 	bl	8004b80 <__sinit>
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f3      	beq.n	8007b66 <_fflush_r+0xa>
 8007b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b80:	07d0      	lsls	r0, r2, #31
 8007b82:	d404      	bmi.n	8007b8e <_fflush_r+0x32>
 8007b84:	0599      	lsls	r1, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_fflush_r+0x32>
 8007b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8a:	f7fd fa12 	bl	8004fb2 <__retarget_lock_acquire_recursive>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	f7ff ff61 	bl	8007a58 <__sflush_r>
 8007b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b98:	4605      	mov	r5, r0
 8007b9a:	07da      	lsls	r2, r3, #31
 8007b9c:	d4e4      	bmi.n	8007b68 <_fflush_r+0xc>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	059b      	lsls	r3, r3, #22
 8007ba2:	d4e1      	bmi.n	8007b68 <_fflush_r+0xc>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba6:	f7fd fa05 	bl	8004fb4 <__retarget_lock_release_recursive>
 8007baa:	e7dd      	b.n	8007b68 <_fflush_r+0xc>

08007bac <__swhatbuf_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	4615      	mov	r5, r2
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	461e      	mov	r6, r3
 8007bba:	b096      	sub	sp, #88	; 0x58
 8007bbc:	da0c      	bge.n	8007bd8 <__swhatbuf_r+0x2c>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bc6:	bf0c      	ite	eq
 8007bc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007bcc:	2340      	movne	r3, #64	; 0x40
 8007bce:	2000      	movs	r0, #0
 8007bd0:	6031      	str	r1, [r6, #0]
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	b016      	add	sp, #88	; 0x58
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	466a      	mov	r2, sp
 8007bda:	f000 f875 	bl	8007cc8 <_fstat_r>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	dbed      	blt.n	8007bbe <__swhatbuf_r+0x12>
 8007be2:	9901      	ldr	r1, [sp, #4]
 8007be4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007be8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bec:	4259      	negs	r1, r3
 8007bee:	4159      	adcs	r1, r3
 8007bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf4:	e7eb      	b.n	8007bce <__swhatbuf_r+0x22>

08007bf6 <__smakebuf_r>:
 8007bf6:	898b      	ldrh	r3, [r1, #12]
 8007bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bfa:	079d      	lsls	r5, r3, #30
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	d507      	bpl.n	8007c12 <__smakebuf_r+0x1c>
 8007c02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	6163      	str	r3, [r4, #20]
 8007c0e:	b002      	add	sp, #8
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	466a      	mov	r2, sp
 8007c14:	ab01      	add	r3, sp, #4
 8007c16:	f7ff ffc9 	bl	8007bac <__swhatbuf_r>
 8007c1a:	9900      	ldr	r1, [sp, #0]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7fe f8ba 	bl	8005d98 <_malloc_r>
 8007c24:	b948      	cbnz	r0, 8007c3a <__smakebuf_r+0x44>
 8007c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2a:	059a      	lsls	r2, r3, #22
 8007c2c:	d4ef      	bmi.n	8007c0e <__smakebuf_r+0x18>
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	f043 0302 	orr.w	r3, r3, #2
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	e7e3      	b.n	8007c02 <__smakebuf_r+0xc>
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	6020      	str	r0, [r4, #0]
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	6120      	str	r0, [r4, #16]
 8007c48:	6163      	str	r3, [r4, #20]
 8007c4a:	9b01      	ldr	r3, [sp, #4]
 8007c4c:	b15b      	cbz	r3, 8007c66 <__smakebuf_r+0x70>
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c54:	f000 f84a 	bl	8007cec <_isatty_r>
 8007c58:	b128      	cbz	r0, 8007c66 <__smakebuf_r+0x70>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	431d      	orrs	r5, r3
 8007c6a:	81a5      	strh	r5, [r4, #12]
 8007c6c:	e7cf      	b.n	8007c0e <__smakebuf_r+0x18>

08007c6e <memmove>:
 8007c6e:	4288      	cmp	r0, r1
 8007c70:	b510      	push	{r4, lr}
 8007c72:	eb01 0402 	add.w	r4, r1, r2
 8007c76:	d902      	bls.n	8007c7e <memmove+0x10>
 8007c78:	4284      	cmp	r4, r0
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	d807      	bhi.n	8007c8e <memmove+0x20>
 8007c7e:	1e43      	subs	r3, r0, #1
 8007c80:	42a1      	cmp	r1, r4
 8007c82:	d008      	beq.n	8007c96 <memmove+0x28>
 8007c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c8c:	e7f8      	b.n	8007c80 <memmove+0x12>
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4402      	add	r2, r0
 8007c92:	428a      	cmp	r2, r1
 8007c94:	d100      	bne.n	8007c98 <memmove+0x2a>
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ca0:	e7f7      	b.n	8007c92 <memmove+0x24>

08007ca2 <strncmp>:
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	b16a      	cbz	r2, 8007cc2 <strncmp+0x20>
 8007ca6:	3901      	subs	r1, #1
 8007ca8:	1884      	adds	r4, r0, r2
 8007caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d103      	bne.n	8007cbe <strncmp+0x1c>
 8007cb6:	42a0      	cmp	r0, r4
 8007cb8:	d001      	beq.n	8007cbe <strncmp+0x1c>
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d1f5      	bne.n	8007caa <strncmp+0x8>
 8007cbe:	1ad0      	subs	r0, r2, r3
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	e7fc      	b.n	8007cc0 <strncmp+0x1e>
	...

08007cc8 <_fstat_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4d06      	ldr	r5, [pc, #24]	; (8007ce8 <_fstat_r+0x20>)
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f7fa f902 	bl	8001ede <_fstat>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d102      	bne.n	8007ce4 <_fstat_r+0x1c>
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	b103      	cbz	r3, 8007ce4 <_fstat_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000428 	.word	0x20000428

08007cec <_isatty_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4d05      	ldr	r5, [pc, #20]	; (8007d08 <_isatty_r+0x1c>)
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	f7fa f900 	bl	8001efc <_isatty>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_isatty_r+0x1a>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_isatty_r+0x1a>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000428 	.word	0x20000428

08007d0c <_sbrk_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4d05      	ldr	r5, [pc, #20]	; (8007d28 <_sbrk_r+0x1c>)
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7fa f906 	bl	8001f28 <_sbrk>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_sbrk_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_sbrk_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000428 	.word	0x20000428

08007d2c <memcpy>:
 8007d2c:	440a      	add	r2, r1
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d34:	d100      	bne.n	8007d38 <memcpy+0xc>
 8007d36:	4770      	bx	lr
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	4291      	cmp	r1, r2
 8007d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d44:	d1f9      	bne.n	8007d3a <memcpy+0xe>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <nan>:
 8007d48:	2000      	movs	r0, #0
 8007d4a:	4901      	ldr	r1, [pc, #4]	; (8007d50 <nan+0x8>)
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	7ff80000 	.word	0x7ff80000

08007d54 <__assert_func>:
 8007d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d56:	4614      	mov	r4, r2
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <__assert_func+0x2c>)
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68d8      	ldr	r0, [r3, #12]
 8007d62:	b14c      	cbz	r4, 8007d78 <__assert_func+0x24>
 8007d64:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <__assert_func+0x30>)
 8007d66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d6a:	9100      	str	r1, [sp, #0]
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	4906      	ldr	r1, [pc, #24]	; (8007d88 <__assert_func+0x34>)
 8007d70:	f000 fbca 	bl	8008508 <fiprintf>
 8007d74:	f000 fbda 	bl	800852c <abort>
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <__assert_func+0x38>)
 8007d7a:	461c      	mov	r4, r3
 8007d7c:	e7f3      	b.n	8007d66 <__assert_func+0x12>
 8007d7e:	bf00      	nop
 8007d80:	20000064 	.word	0x20000064
 8007d84:	0800923a 	.word	0x0800923a
 8007d88:	08009247 	.word	0x08009247
 8007d8c:	08009275 	.word	0x08009275

08007d90 <_calloc_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	fba1 5402 	umull	r5, r4, r1, r2
 8007d96:	b934      	cbnz	r4, 8007da6 <_calloc_r+0x16>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7fd fffd 	bl	8005d98 <_malloc_r>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b928      	cbnz	r0, 8007dae <_calloc_r+0x1e>
 8007da2:	4630      	mov	r0, r6
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	220c      	movs	r2, #12
 8007da8:	2600      	movs	r6, #0
 8007daa:	6002      	str	r2, [r0, #0]
 8007dac:	e7f9      	b.n	8007da2 <_calloc_r+0x12>
 8007dae:	462a      	mov	r2, r5
 8007db0:	4621      	mov	r1, r4
 8007db2:	f7fd f881 	bl	8004eb8 <memset>
 8007db6:	e7f4      	b.n	8007da2 <_calloc_r+0x12>

08007db8 <rshift>:
 8007db8:	6903      	ldr	r3, [r0, #16]
 8007dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007dc2:	f100 0414 	add.w	r4, r0, #20
 8007dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dca:	dd46      	ble.n	8007e5a <rshift+0xa2>
 8007dcc:	f011 011f 	ands.w	r1, r1, #31
 8007dd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007dd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dd8:	d10c      	bne.n	8007df4 <rshift+0x3c>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f100 0710 	add.w	r7, r0, #16
 8007de0:	42b1      	cmp	r1, r6
 8007de2:	d335      	bcc.n	8007e50 <rshift+0x98>
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	1eea      	subs	r2, r5, #3
 8007dea:	4296      	cmp	r6, r2
 8007dec:	bf38      	it	cc
 8007dee:	2300      	movcc	r3, #0
 8007df0:	4423      	add	r3, r4
 8007df2:	e015      	b.n	8007e20 <rshift+0x68>
 8007df4:	46a1      	mov	r9, r4
 8007df6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007dfa:	f1c1 0820 	rsb	r8, r1, #32
 8007dfe:	40cf      	lsrs	r7, r1
 8007e00:	f105 0e04 	add.w	lr, r5, #4
 8007e04:	4576      	cmp	r6, lr
 8007e06:	46f4      	mov	ip, lr
 8007e08:	d816      	bhi.n	8007e38 <rshift+0x80>
 8007e0a:	1a9a      	subs	r2, r3, r2
 8007e0c:	0092      	lsls	r2, r2, #2
 8007e0e:	3a04      	subs	r2, #4
 8007e10:	3501      	adds	r5, #1
 8007e12:	42ae      	cmp	r6, r5
 8007e14:	bf38      	it	cc
 8007e16:	2200      	movcc	r2, #0
 8007e18:	18a3      	adds	r3, r4, r2
 8007e1a:	50a7      	str	r7, [r4, r2]
 8007e1c:	b107      	cbz	r7, 8007e20 <rshift+0x68>
 8007e1e:	3304      	adds	r3, #4
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	eba3 0204 	sub.w	r2, r3, r4
 8007e26:	bf08      	it	eq
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e2e:	6102      	str	r2, [r0, #16]
 8007e30:	bf08      	it	eq
 8007e32:	6143      	streq	r3, [r0, #20]
 8007e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e38:	f8dc c000 	ldr.w	ip, [ip]
 8007e3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e40:	ea4c 0707 	orr.w	r7, ip, r7
 8007e44:	f849 7b04 	str.w	r7, [r9], #4
 8007e48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e4c:	40cf      	lsrs	r7, r1
 8007e4e:	e7d9      	b.n	8007e04 <rshift+0x4c>
 8007e50:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e54:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e58:	e7c2      	b.n	8007de0 <rshift+0x28>
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	e7e0      	b.n	8007e20 <rshift+0x68>

08007e5e <__hexdig_fun>:
 8007e5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d802      	bhi.n	8007e6c <__hexdig_fun+0xe>
 8007e66:	3820      	subs	r0, #32
 8007e68:	b2c0      	uxtb	r0, r0
 8007e6a:	4770      	bx	lr
 8007e6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	d801      	bhi.n	8007e78 <__hexdig_fun+0x1a>
 8007e74:	3847      	subs	r0, #71	; 0x47
 8007e76:	e7f7      	b.n	8007e68 <__hexdig_fun+0xa>
 8007e78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d801      	bhi.n	8007e84 <__hexdig_fun+0x26>
 8007e80:	3827      	subs	r0, #39	; 0x27
 8007e82:	e7f1      	b.n	8007e68 <__hexdig_fun+0xa>
 8007e84:	2000      	movs	r0, #0
 8007e86:	4770      	bx	lr

08007e88 <__gethex>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	4681      	mov	r9, r0
 8007e8e:	468a      	mov	sl, r1
 8007e90:	4617      	mov	r7, r2
 8007e92:	680a      	ldr	r2, [r1, #0]
 8007e94:	b085      	sub	sp, #20
 8007e96:	f102 0b02 	add.w	fp, r2, #2
 8007e9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007ea2:	9302      	str	r3, [sp, #8]
 8007ea4:	32fe      	adds	r2, #254	; 0xfe
 8007ea6:	eb02 030b 	add.w	r3, r2, fp
 8007eaa:	46d8      	mov	r8, fp
 8007eac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	2830      	cmp	r0, #48	; 0x30
 8007eb4:	d0f7      	beq.n	8007ea6 <__gethex+0x1e>
 8007eb6:	f7ff ffd2 	bl	8007e5e <__hexdig_fun>
 8007eba:	4604      	mov	r4, r0
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d138      	bne.n	8007f32 <__gethex+0xaa>
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	49a7      	ldr	r1, [pc, #668]	; (8008164 <__gethex+0x2dc>)
 8007ec6:	f7ff feec 	bl	8007ca2 <strncmp>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d169      	bne.n	8007fa4 <__gethex+0x11c>
 8007ed0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007ed4:	465d      	mov	r5, fp
 8007ed6:	f7ff ffc2 	bl	8007e5e <__hexdig_fun>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d064      	beq.n	8007fa8 <__gethex+0x120>
 8007ede:	465a      	mov	r2, fp
 8007ee0:	7810      	ldrb	r0, [r2, #0]
 8007ee2:	4690      	mov	r8, r2
 8007ee4:	2830      	cmp	r0, #48	; 0x30
 8007ee6:	f102 0201 	add.w	r2, r2, #1
 8007eea:	d0f9      	beq.n	8007ee0 <__gethex+0x58>
 8007eec:	f7ff ffb7 	bl	8007e5e <__hexdig_fun>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	fab0 f480 	clz	r4, r0
 8007ef6:	465e      	mov	r6, fp
 8007ef8:	0964      	lsrs	r4, r4, #5
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	4642      	mov	r2, r8
 8007efe:	4615      	mov	r5, r2
 8007f00:	7828      	ldrb	r0, [r5, #0]
 8007f02:	3201      	adds	r2, #1
 8007f04:	f7ff ffab 	bl	8007e5e <__hexdig_fun>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1f8      	bne.n	8007efe <__gethex+0x76>
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4994      	ldr	r1, [pc, #592]	; (8008164 <__gethex+0x2dc>)
 8007f12:	f7ff fec6 	bl	8007ca2 <strncmp>
 8007f16:	b978      	cbnz	r0, 8007f38 <__gethex+0xb0>
 8007f18:	b946      	cbnz	r6, 8007f2c <__gethex+0xa4>
 8007f1a:	1c6e      	adds	r6, r5, #1
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4615      	mov	r5, r2
 8007f20:	7828      	ldrb	r0, [r5, #0]
 8007f22:	3201      	adds	r2, #1
 8007f24:	f7ff ff9b 	bl	8007e5e <__hexdig_fun>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d1f8      	bne.n	8007f1e <__gethex+0x96>
 8007f2c:	1b73      	subs	r3, r6, r5
 8007f2e:	009e      	lsls	r6, r3, #2
 8007f30:	e004      	b.n	8007f3c <__gethex+0xb4>
 8007f32:	2400      	movs	r4, #0
 8007f34:	4626      	mov	r6, r4
 8007f36:	e7e1      	b.n	8007efc <__gethex+0x74>
 8007f38:	2e00      	cmp	r6, #0
 8007f3a:	d1f7      	bne.n	8007f2c <__gethex+0xa4>
 8007f3c:	782b      	ldrb	r3, [r5, #0]
 8007f3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f42:	2b50      	cmp	r3, #80	; 0x50
 8007f44:	d13d      	bne.n	8007fc2 <__gethex+0x13a>
 8007f46:	786b      	ldrb	r3, [r5, #1]
 8007f48:	2b2b      	cmp	r3, #43	; 0x2b
 8007f4a:	d02f      	beq.n	8007fac <__gethex+0x124>
 8007f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f4e:	d031      	beq.n	8007fb4 <__gethex+0x12c>
 8007f50:	f04f 0b00 	mov.w	fp, #0
 8007f54:	1c69      	adds	r1, r5, #1
 8007f56:	7808      	ldrb	r0, [r1, #0]
 8007f58:	f7ff ff81 	bl	8007e5e <__hexdig_fun>
 8007f5c:	1e42      	subs	r2, r0, #1
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	2a18      	cmp	r2, #24
 8007f62:	d82e      	bhi.n	8007fc2 <__gethex+0x13a>
 8007f64:	f1a0 0210 	sub.w	r2, r0, #16
 8007f68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f6c:	f7ff ff77 	bl	8007e5e <__hexdig_fun>
 8007f70:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f74:	fa5f fc8c 	uxtb.w	ip, ip
 8007f78:	f1bc 0f18 	cmp.w	ip, #24
 8007f7c:	d91d      	bls.n	8007fba <__gethex+0x132>
 8007f7e:	f1bb 0f00 	cmp.w	fp, #0
 8007f82:	d000      	beq.n	8007f86 <__gethex+0xfe>
 8007f84:	4252      	negs	r2, r2
 8007f86:	4416      	add	r6, r2
 8007f88:	f8ca 1000 	str.w	r1, [sl]
 8007f8c:	b1dc      	cbz	r4, 8007fc6 <__gethex+0x13e>
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf14      	ite	ne
 8007f94:	f04f 0800 	movne.w	r8, #0
 8007f98:	f04f 0806 	moveq.w	r8, #6
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	b005      	add	sp, #20
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	4645      	mov	r5, r8
 8007fa6:	4626      	mov	r6, r4
 8007fa8:	2401      	movs	r4, #1
 8007faa:	e7c7      	b.n	8007f3c <__gethex+0xb4>
 8007fac:	f04f 0b00 	mov.w	fp, #0
 8007fb0:	1ca9      	adds	r1, r5, #2
 8007fb2:	e7d0      	b.n	8007f56 <__gethex+0xce>
 8007fb4:	f04f 0b01 	mov.w	fp, #1
 8007fb8:	e7fa      	b.n	8007fb0 <__gethex+0x128>
 8007fba:	230a      	movs	r3, #10
 8007fbc:	fb03 0002 	mla	r0, r3, r2, r0
 8007fc0:	e7d0      	b.n	8007f64 <__gethex+0xdc>
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	e7e0      	b.n	8007f88 <__gethex+0x100>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	eba5 0308 	sub.w	r3, r5, r8
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2b07      	cmp	r3, #7
 8007fd0:	dc0a      	bgt.n	8007fe8 <__gethex+0x160>
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	f7fd ff6c 	bl	8005eb0 <_Balloc>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	b940      	cbnz	r0, 8007fee <__gethex+0x166>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	21e4      	movs	r1, #228	; 0xe4
 8007fe0:	4b61      	ldr	r3, [pc, #388]	; (8008168 <__gethex+0x2e0>)
 8007fe2:	4862      	ldr	r0, [pc, #392]	; (800816c <__gethex+0x2e4>)
 8007fe4:	f7ff feb6 	bl	8007d54 <__assert_func>
 8007fe8:	3101      	adds	r1, #1
 8007fea:	105b      	asrs	r3, r3, #1
 8007fec:	e7ef      	b.n	8007fce <__gethex+0x146>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	469b      	mov	fp, r3
 8007ff2:	f100 0a14 	add.w	sl, r0, #20
 8007ff6:	f8cd a004 	str.w	sl, [sp, #4]
 8007ffa:	45a8      	cmp	r8, r5
 8007ffc:	d344      	bcc.n	8008088 <__gethex+0x200>
 8007ffe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008002:	4658      	mov	r0, fp
 8008004:	f848 bb04 	str.w	fp, [r8], #4
 8008008:	eba8 080a 	sub.w	r8, r8, sl
 800800c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008010:	6122      	str	r2, [r4, #16]
 8008012:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008016:	f7fe f83d 	bl	8006094 <__hi0bits>
 800801a:	683d      	ldr	r5, [r7, #0]
 800801c:	eba8 0800 	sub.w	r8, r8, r0
 8008020:	45a8      	cmp	r8, r5
 8008022:	dd59      	ble.n	80080d8 <__gethex+0x250>
 8008024:	eba8 0805 	sub.w	r8, r8, r5
 8008028:	4641      	mov	r1, r8
 800802a:	4620      	mov	r0, r4
 800802c:	f7fe fbbb 	bl	80067a6 <__any_on>
 8008030:	4683      	mov	fp, r0
 8008032:	b1b8      	cbz	r0, 8008064 <__gethex+0x1dc>
 8008034:	f04f 0b01 	mov.w	fp, #1
 8008038:	f108 33ff 	add.w	r3, r8, #4294967295
 800803c:	1159      	asrs	r1, r3, #5
 800803e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008042:	f003 021f 	and.w	r2, r3, #31
 8008046:	fa0b f202 	lsl.w	r2, fp, r2
 800804a:	420a      	tst	r2, r1
 800804c:	d00a      	beq.n	8008064 <__gethex+0x1dc>
 800804e:	455b      	cmp	r3, fp
 8008050:	dd06      	ble.n	8008060 <__gethex+0x1d8>
 8008052:	4620      	mov	r0, r4
 8008054:	f1a8 0102 	sub.w	r1, r8, #2
 8008058:	f7fe fba5 	bl	80067a6 <__any_on>
 800805c:	2800      	cmp	r0, #0
 800805e:	d138      	bne.n	80080d2 <__gethex+0x24a>
 8008060:	f04f 0b02 	mov.w	fp, #2
 8008064:	4641      	mov	r1, r8
 8008066:	4620      	mov	r0, r4
 8008068:	f7ff fea6 	bl	8007db8 <rshift>
 800806c:	4446      	add	r6, r8
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	42b3      	cmp	r3, r6
 8008072:	da41      	bge.n	80080f8 <__gethex+0x270>
 8008074:	4621      	mov	r1, r4
 8008076:	4648      	mov	r0, r9
 8008078:	f7fd ff5a 	bl	8005f30 <_Bfree>
 800807c:	2300      	movs	r3, #0
 800807e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008080:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	e789      	b.n	8007f9c <__gethex+0x114>
 8008088:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800808c:	2a2e      	cmp	r2, #46	; 0x2e
 800808e:	d014      	beq.n	80080ba <__gethex+0x232>
 8008090:	2b20      	cmp	r3, #32
 8008092:	d106      	bne.n	80080a2 <__gethex+0x21a>
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	f843 bb04 	str.w	fp, [r3], #4
 800809a:	f04f 0b00 	mov.w	fp, #0
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	465b      	mov	r3, fp
 80080a2:	7828      	ldrb	r0, [r5, #0]
 80080a4:	9303      	str	r3, [sp, #12]
 80080a6:	f7ff feda 	bl	8007e5e <__hexdig_fun>
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	f000 000f 	and.w	r0, r0, #15
 80080b0:	4098      	lsls	r0, r3
 80080b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80080b6:	3304      	adds	r3, #4
 80080b8:	e79f      	b.n	8007ffa <__gethex+0x172>
 80080ba:	45a8      	cmp	r8, r5
 80080bc:	d8e8      	bhi.n	8008090 <__gethex+0x208>
 80080be:	2201      	movs	r2, #1
 80080c0:	4628      	mov	r0, r5
 80080c2:	4928      	ldr	r1, [pc, #160]	; (8008164 <__gethex+0x2dc>)
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	f7ff fdec 	bl	8007ca2 <strncmp>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d1df      	bne.n	8008090 <__gethex+0x208>
 80080d0:	e793      	b.n	8007ffa <__gethex+0x172>
 80080d2:	f04f 0b03 	mov.w	fp, #3
 80080d6:	e7c5      	b.n	8008064 <__gethex+0x1dc>
 80080d8:	da0b      	bge.n	80080f2 <__gethex+0x26a>
 80080da:	eba5 0808 	sub.w	r8, r5, r8
 80080de:	4621      	mov	r1, r4
 80080e0:	4642      	mov	r2, r8
 80080e2:	4648      	mov	r0, r9
 80080e4:	f7fe f93c 	bl	8006360 <__lshift>
 80080e8:	4604      	mov	r4, r0
 80080ea:	eba6 0608 	sub.w	r6, r6, r8
 80080ee:	f100 0a14 	add.w	sl, r0, #20
 80080f2:	f04f 0b00 	mov.w	fp, #0
 80080f6:	e7ba      	b.n	800806e <__gethex+0x1e6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	dd74      	ble.n	80081e8 <__gethex+0x360>
 80080fe:	1b9e      	subs	r6, r3, r6
 8008100:	42b5      	cmp	r5, r6
 8008102:	dc35      	bgt.n	8008170 <__gethex+0x2e8>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d023      	beq.n	8008152 <__gethex+0x2ca>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d025      	beq.n	800815a <__gethex+0x2d2>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d115      	bne.n	800813e <__gethex+0x2b6>
 8008112:	42b5      	cmp	r5, r6
 8008114:	d113      	bne.n	800813e <__gethex+0x2b6>
 8008116:	2d01      	cmp	r5, #1
 8008118:	d10b      	bne.n	8008132 <__gethex+0x2aa>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	9a02      	ldr	r2, [sp, #8]
 800811e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	2301      	movs	r3, #1
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	f8ca 3000 	str.w	r3, [sl]
 800812c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800812e:	601c      	str	r4, [r3, #0]
 8008130:	e734      	b.n	8007f9c <__gethex+0x114>
 8008132:	4620      	mov	r0, r4
 8008134:	1e69      	subs	r1, r5, #1
 8008136:	f7fe fb36 	bl	80067a6 <__any_on>
 800813a:	2800      	cmp	r0, #0
 800813c:	d1ed      	bne.n	800811a <__gethex+0x292>
 800813e:	4621      	mov	r1, r4
 8008140:	4648      	mov	r0, r9
 8008142:	f7fd fef5 	bl	8005f30 <_Bfree>
 8008146:	2300      	movs	r3, #0
 8008148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800814a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e724      	b.n	8007f9c <__gethex+0x114>
 8008152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f2      	bne.n	800813e <__gethex+0x2b6>
 8008158:	e7df      	b.n	800811a <__gethex+0x292>
 800815a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1dc      	bne.n	800811a <__gethex+0x292>
 8008160:	e7ed      	b.n	800813e <__gethex+0x2b6>
 8008162:	bf00      	nop
 8008164:	080090cc 	.word	0x080090cc
 8008168:	08008f63 	.word	0x08008f63
 800816c:	08009276 	.word	0x08009276
 8008170:	f106 38ff 	add.w	r8, r6, #4294967295
 8008174:	f1bb 0f00 	cmp.w	fp, #0
 8008178:	d133      	bne.n	80081e2 <__gethex+0x35a>
 800817a:	f1b8 0f00 	cmp.w	r8, #0
 800817e:	d004      	beq.n	800818a <__gethex+0x302>
 8008180:	4641      	mov	r1, r8
 8008182:	4620      	mov	r0, r4
 8008184:	f7fe fb0f 	bl	80067a6 <__any_on>
 8008188:	4683      	mov	fp, r0
 800818a:	2301      	movs	r3, #1
 800818c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008190:	f008 081f 	and.w	r8, r8, #31
 8008194:	fa03 f308 	lsl.w	r3, r3, r8
 8008198:	f04f 0802 	mov.w	r8, #2
 800819c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80081a0:	4631      	mov	r1, r6
 80081a2:	4213      	tst	r3, r2
 80081a4:	4620      	mov	r0, r4
 80081a6:	bf18      	it	ne
 80081a8:	f04b 0b02 	orrne.w	fp, fp, #2
 80081ac:	1bad      	subs	r5, r5, r6
 80081ae:	f7ff fe03 	bl	8007db8 <rshift>
 80081b2:	687e      	ldr	r6, [r7, #4]
 80081b4:	f1bb 0f00 	cmp.w	fp, #0
 80081b8:	d04a      	beq.n	8008250 <__gethex+0x3c8>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d016      	beq.n	80081ee <__gethex+0x366>
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d018      	beq.n	80081f6 <__gethex+0x36e>
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d109      	bne.n	80081dc <__gethex+0x354>
 80081c8:	f01b 0f02 	tst.w	fp, #2
 80081cc:	d006      	beq.n	80081dc <__gethex+0x354>
 80081ce:	f8da 3000 	ldr.w	r3, [sl]
 80081d2:	ea4b 0b03 	orr.w	fp, fp, r3
 80081d6:	f01b 0f01 	tst.w	fp, #1
 80081da:	d10f      	bne.n	80081fc <__gethex+0x374>
 80081dc:	f048 0810 	orr.w	r8, r8, #16
 80081e0:	e036      	b.n	8008250 <__gethex+0x3c8>
 80081e2:	f04f 0b01 	mov.w	fp, #1
 80081e6:	e7d0      	b.n	800818a <__gethex+0x302>
 80081e8:	f04f 0801 	mov.w	r8, #1
 80081ec:	e7e2      	b.n	80081b4 <__gethex+0x32c>
 80081ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f0:	f1c3 0301 	rsb	r3, r3, #1
 80081f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0ef      	beq.n	80081dc <__gethex+0x354>
 80081fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008200:	f104 0214 	add.w	r2, r4, #20
 8008204:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	2300      	movs	r3, #0
 800820c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008210:	4694      	mov	ip, r2
 8008212:	f852 1b04 	ldr.w	r1, [r2], #4
 8008216:	f1b1 3fff 	cmp.w	r1, #4294967295
 800821a:	d01e      	beq.n	800825a <__gethex+0x3d2>
 800821c:	3101      	adds	r1, #1
 800821e:	f8cc 1000 	str.w	r1, [ip]
 8008222:	f1b8 0f02 	cmp.w	r8, #2
 8008226:	f104 0214 	add.w	r2, r4, #20
 800822a:	d13d      	bne.n	80082a8 <__gethex+0x420>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	42ab      	cmp	r3, r5
 8008232:	d10b      	bne.n	800824c <__gethex+0x3c4>
 8008234:	2301      	movs	r3, #1
 8008236:	1169      	asrs	r1, r5, #5
 8008238:	f005 051f 	and.w	r5, r5, #31
 800823c:	fa03 f505 	lsl.w	r5, r3, r5
 8008240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008244:	421d      	tst	r5, r3
 8008246:	bf18      	it	ne
 8008248:	f04f 0801 	movne.w	r8, #1
 800824c:	f048 0820 	orr.w	r8, r8, #32
 8008250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008252:	601c      	str	r4, [r3, #0]
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	601e      	str	r6, [r3, #0]
 8008258:	e6a0      	b.n	8007f9c <__gethex+0x114>
 800825a:	4290      	cmp	r0, r2
 800825c:	f842 3c04 	str.w	r3, [r2, #-4]
 8008260:	d8d6      	bhi.n	8008210 <__gethex+0x388>
 8008262:	68a2      	ldr	r2, [r4, #8]
 8008264:	4593      	cmp	fp, r2
 8008266:	db17      	blt.n	8008298 <__gethex+0x410>
 8008268:	6861      	ldr	r1, [r4, #4]
 800826a:	4648      	mov	r0, r9
 800826c:	3101      	adds	r1, #1
 800826e:	f7fd fe1f 	bl	8005eb0 <_Balloc>
 8008272:	4682      	mov	sl, r0
 8008274:	b918      	cbnz	r0, 800827e <__gethex+0x3f6>
 8008276:	4602      	mov	r2, r0
 8008278:	2184      	movs	r1, #132	; 0x84
 800827a:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <__gethex+0x45c>)
 800827c:	e6b1      	b.n	8007fe2 <__gethex+0x15a>
 800827e:	6922      	ldr	r2, [r4, #16]
 8008280:	f104 010c 	add.w	r1, r4, #12
 8008284:	3202      	adds	r2, #2
 8008286:	0092      	lsls	r2, r2, #2
 8008288:	300c      	adds	r0, #12
 800828a:	f7ff fd4f 	bl	8007d2c <memcpy>
 800828e:	4621      	mov	r1, r4
 8008290:	4648      	mov	r0, r9
 8008292:	f7fd fe4d 	bl	8005f30 <_Bfree>
 8008296:	4654      	mov	r4, sl
 8008298:	6922      	ldr	r2, [r4, #16]
 800829a:	1c51      	adds	r1, r2, #1
 800829c:	6121      	str	r1, [r4, #16]
 800829e:	2101      	movs	r1, #1
 80082a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80082a4:	6151      	str	r1, [r2, #20]
 80082a6:	e7bc      	b.n	8008222 <__gethex+0x39a>
 80082a8:	6921      	ldr	r1, [r4, #16]
 80082aa:	4559      	cmp	r1, fp
 80082ac:	dd0b      	ble.n	80082c6 <__gethex+0x43e>
 80082ae:	2101      	movs	r1, #1
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fd81 	bl	8007db8 <rshift>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	3601      	adds	r6, #1
 80082ba:	42b3      	cmp	r3, r6
 80082bc:	f6ff aeda 	blt.w	8008074 <__gethex+0x1ec>
 80082c0:	f04f 0801 	mov.w	r8, #1
 80082c4:	e7c2      	b.n	800824c <__gethex+0x3c4>
 80082c6:	f015 051f 	ands.w	r5, r5, #31
 80082ca:	d0f9      	beq.n	80082c0 <__gethex+0x438>
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	f1c5 0520 	rsb	r5, r5, #32
 80082d2:	441a      	add	r2, r3
 80082d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80082d8:	f7fd fedc 	bl	8006094 <__hi0bits>
 80082dc:	42a8      	cmp	r0, r5
 80082de:	dbe6      	blt.n	80082ae <__gethex+0x426>
 80082e0:	e7ee      	b.n	80082c0 <__gethex+0x438>
 80082e2:	bf00      	nop
 80082e4:	08008f63 	.word	0x08008f63

080082e8 <L_shift>:
 80082e8:	f1c2 0208 	rsb	r2, r2, #8
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	f1c2 0620 	rsb	r6, r2, #32
 80082f4:	6843      	ldr	r3, [r0, #4]
 80082f6:	6804      	ldr	r4, [r0, #0]
 80082f8:	fa03 f506 	lsl.w	r5, r3, r6
 80082fc:	432c      	orrs	r4, r5
 80082fe:	40d3      	lsrs	r3, r2
 8008300:	6004      	str	r4, [r0, #0]
 8008302:	f840 3f04 	str.w	r3, [r0, #4]!
 8008306:	4288      	cmp	r0, r1
 8008308:	d3f4      	bcc.n	80082f4 <L_shift+0xc>
 800830a:	bd70      	pop	{r4, r5, r6, pc}

0800830c <__match>:
 800830c:	b530      	push	{r4, r5, lr}
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008316:	b914      	cbnz	r4, 800831e <__match+0x12>
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	2001      	movs	r0, #1
 800831c:	bd30      	pop	{r4, r5, pc}
 800831e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008326:	2d19      	cmp	r5, #25
 8008328:	bf98      	it	ls
 800832a:	3220      	addls	r2, #32
 800832c:	42a2      	cmp	r2, r4
 800832e:	d0f0      	beq.n	8008312 <__match+0x6>
 8008330:	2000      	movs	r0, #0
 8008332:	e7f3      	b.n	800831c <__match+0x10>

08008334 <__hexnan>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	2500      	movs	r5, #0
 800833a:	680b      	ldr	r3, [r1, #0]
 800833c:	4682      	mov	sl, r0
 800833e:	115e      	asrs	r6, r3, #5
 8008340:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008344:	f013 031f 	ands.w	r3, r3, #31
 8008348:	bf18      	it	ne
 800834a:	3604      	addne	r6, #4
 800834c:	1f37      	subs	r7, r6, #4
 800834e:	4690      	mov	r8, r2
 8008350:	46b9      	mov	r9, r7
 8008352:	463c      	mov	r4, r7
 8008354:	46ab      	mov	fp, r5
 8008356:	b087      	sub	sp, #28
 8008358:	6801      	ldr	r1, [r0, #0]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008360:	9502      	str	r5, [sp, #8]
 8008362:	784a      	ldrb	r2, [r1, #1]
 8008364:	1c4b      	adds	r3, r1, #1
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	b342      	cbz	r2, 80083bc <__hexnan+0x88>
 800836a:	4610      	mov	r0, r2
 800836c:	9105      	str	r1, [sp, #20]
 800836e:	9204      	str	r2, [sp, #16]
 8008370:	f7ff fd75 	bl	8007e5e <__hexdig_fun>
 8008374:	2800      	cmp	r0, #0
 8008376:	d14f      	bne.n	8008418 <__hexnan+0xe4>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	9905      	ldr	r1, [sp, #20]
 800837c:	2a20      	cmp	r2, #32
 800837e:	d818      	bhi.n	80083b2 <__hexnan+0x7e>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	459b      	cmp	fp, r3
 8008384:	dd13      	ble.n	80083ae <__hexnan+0x7a>
 8008386:	454c      	cmp	r4, r9
 8008388:	d206      	bcs.n	8008398 <__hexnan+0x64>
 800838a:	2d07      	cmp	r5, #7
 800838c:	dc04      	bgt.n	8008398 <__hexnan+0x64>
 800838e:	462a      	mov	r2, r5
 8008390:	4649      	mov	r1, r9
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff ffa8 	bl	80082e8 <L_shift>
 8008398:	4544      	cmp	r4, r8
 800839a:	d950      	bls.n	800843e <__hexnan+0x10a>
 800839c:	2300      	movs	r3, #0
 800839e:	f1a4 0904 	sub.w	r9, r4, #4
 80083a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80083a6:	461d      	mov	r5, r3
 80083a8:	464c      	mov	r4, r9
 80083aa:	f8cd b008 	str.w	fp, [sp, #8]
 80083ae:	9903      	ldr	r1, [sp, #12]
 80083b0:	e7d7      	b.n	8008362 <__hexnan+0x2e>
 80083b2:	2a29      	cmp	r2, #41	; 0x29
 80083b4:	d155      	bne.n	8008462 <__hexnan+0x12e>
 80083b6:	3102      	adds	r1, #2
 80083b8:	f8ca 1000 	str.w	r1, [sl]
 80083bc:	f1bb 0f00 	cmp.w	fp, #0
 80083c0:	d04f      	beq.n	8008462 <__hexnan+0x12e>
 80083c2:	454c      	cmp	r4, r9
 80083c4:	d206      	bcs.n	80083d4 <__hexnan+0xa0>
 80083c6:	2d07      	cmp	r5, #7
 80083c8:	dc04      	bgt.n	80083d4 <__hexnan+0xa0>
 80083ca:	462a      	mov	r2, r5
 80083cc:	4649      	mov	r1, r9
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff ff8a 	bl	80082e8 <L_shift>
 80083d4:	4544      	cmp	r4, r8
 80083d6:	d934      	bls.n	8008442 <__hexnan+0x10e>
 80083d8:	4623      	mov	r3, r4
 80083da:	f1a8 0204 	sub.w	r2, r8, #4
 80083de:	f853 1b04 	ldr.w	r1, [r3], #4
 80083e2:	429f      	cmp	r7, r3
 80083e4:	f842 1f04 	str.w	r1, [r2, #4]!
 80083e8:	d2f9      	bcs.n	80083de <__hexnan+0xaa>
 80083ea:	1b3b      	subs	r3, r7, r4
 80083ec:	f023 0303 	bic.w	r3, r3, #3
 80083f0:	3304      	adds	r3, #4
 80083f2:	3e03      	subs	r6, #3
 80083f4:	3401      	adds	r4, #1
 80083f6:	42a6      	cmp	r6, r4
 80083f8:	bf38      	it	cc
 80083fa:	2304      	movcc	r3, #4
 80083fc:	2200      	movs	r2, #0
 80083fe:	4443      	add	r3, r8
 8008400:	f843 2b04 	str.w	r2, [r3], #4
 8008404:	429f      	cmp	r7, r3
 8008406:	d2fb      	bcs.n	8008400 <__hexnan+0xcc>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	b91b      	cbnz	r3, 8008414 <__hexnan+0xe0>
 800840c:	4547      	cmp	r7, r8
 800840e:	d126      	bne.n	800845e <__hexnan+0x12a>
 8008410:	2301      	movs	r3, #1
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	2005      	movs	r0, #5
 8008416:	e025      	b.n	8008464 <__hexnan+0x130>
 8008418:	3501      	adds	r5, #1
 800841a:	2d08      	cmp	r5, #8
 800841c:	f10b 0b01 	add.w	fp, fp, #1
 8008420:	dd06      	ble.n	8008430 <__hexnan+0xfc>
 8008422:	4544      	cmp	r4, r8
 8008424:	d9c3      	bls.n	80083ae <__hexnan+0x7a>
 8008426:	2300      	movs	r3, #0
 8008428:	2501      	movs	r5, #1
 800842a:	f844 3c04 	str.w	r3, [r4, #-4]
 800842e:	3c04      	subs	r4, #4
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f000 000f 	and.w	r0, r0, #15
 8008436:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800843a:	6020      	str	r0, [r4, #0]
 800843c:	e7b7      	b.n	80083ae <__hexnan+0x7a>
 800843e:	2508      	movs	r5, #8
 8008440:	e7b5      	b.n	80083ae <__hexnan+0x7a>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0df      	beq.n	8008408 <__hexnan+0xd4>
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	f1c3 0320 	rsb	r3, r3, #32
 8008450:	40da      	lsrs	r2, r3
 8008452:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008456:	4013      	ands	r3, r2
 8008458:	f846 3c04 	str.w	r3, [r6, #-4]
 800845c:	e7d4      	b.n	8008408 <__hexnan+0xd4>
 800845e:	3f04      	subs	r7, #4
 8008460:	e7d2      	b.n	8008408 <__hexnan+0xd4>
 8008462:	2004      	movs	r0, #4
 8008464:	b007      	add	sp, #28
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800846a <__ascii_mbtowc>:
 800846a:	b082      	sub	sp, #8
 800846c:	b901      	cbnz	r1, 8008470 <__ascii_mbtowc+0x6>
 800846e:	a901      	add	r1, sp, #4
 8008470:	b142      	cbz	r2, 8008484 <__ascii_mbtowc+0x1a>
 8008472:	b14b      	cbz	r3, 8008488 <__ascii_mbtowc+0x1e>
 8008474:	7813      	ldrb	r3, [r2, #0]
 8008476:	600b      	str	r3, [r1, #0]
 8008478:	7812      	ldrb	r2, [r2, #0]
 800847a:	1e10      	subs	r0, r2, #0
 800847c:	bf18      	it	ne
 800847e:	2001      	movne	r0, #1
 8008480:	b002      	add	sp, #8
 8008482:	4770      	bx	lr
 8008484:	4610      	mov	r0, r2
 8008486:	e7fb      	b.n	8008480 <__ascii_mbtowc+0x16>
 8008488:	f06f 0001 	mvn.w	r0, #1
 800848c:	e7f8      	b.n	8008480 <__ascii_mbtowc+0x16>

0800848e <_realloc_r>:
 800848e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008492:	4680      	mov	r8, r0
 8008494:	4614      	mov	r4, r2
 8008496:	460e      	mov	r6, r1
 8008498:	b921      	cbnz	r1, 80084a4 <_realloc_r+0x16>
 800849a:	4611      	mov	r1, r2
 800849c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	f7fd bc7a 	b.w	8005d98 <_malloc_r>
 80084a4:	b92a      	cbnz	r2, 80084b2 <_realloc_r+0x24>
 80084a6:	f7fd fc07 	bl	8005cb8 <_free_r>
 80084aa:	4625      	mov	r5, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b2:	f000 f842 	bl	800853a <_malloc_usable_size_r>
 80084b6:	4284      	cmp	r4, r0
 80084b8:	4607      	mov	r7, r0
 80084ba:	d802      	bhi.n	80084c2 <_realloc_r+0x34>
 80084bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084c0:	d812      	bhi.n	80084e8 <_realloc_r+0x5a>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4640      	mov	r0, r8
 80084c6:	f7fd fc67 	bl	8005d98 <_malloc_r>
 80084ca:	4605      	mov	r5, r0
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d0ed      	beq.n	80084ac <_realloc_r+0x1e>
 80084d0:	42bc      	cmp	r4, r7
 80084d2:	4622      	mov	r2, r4
 80084d4:	4631      	mov	r1, r6
 80084d6:	bf28      	it	cs
 80084d8:	463a      	movcs	r2, r7
 80084da:	f7ff fc27 	bl	8007d2c <memcpy>
 80084de:	4631      	mov	r1, r6
 80084e0:	4640      	mov	r0, r8
 80084e2:	f7fd fbe9 	bl	8005cb8 <_free_r>
 80084e6:	e7e1      	b.n	80084ac <_realloc_r+0x1e>
 80084e8:	4635      	mov	r5, r6
 80084ea:	e7df      	b.n	80084ac <_realloc_r+0x1e>

080084ec <__ascii_wctomb>:
 80084ec:	4603      	mov	r3, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	b141      	cbz	r1, 8008504 <__ascii_wctomb+0x18>
 80084f2:	2aff      	cmp	r2, #255	; 0xff
 80084f4:	d904      	bls.n	8008500 <__ascii_wctomb+0x14>
 80084f6:	228a      	movs	r2, #138	; 0x8a
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	4770      	bx	lr
 8008500:	2001      	movs	r0, #1
 8008502:	700a      	strb	r2, [r1, #0]
 8008504:	4770      	bx	lr
	...

08008508 <fiprintf>:
 8008508:	b40e      	push	{r1, r2, r3}
 800850a:	b503      	push	{r0, r1, lr}
 800850c:	4601      	mov	r1, r0
 800850e:	ab03      	add	r3, sp, #12
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <fiprintf+0x20>)
 8008512:	f853 2b04 	ldr.w	r2, [r3], #4
 8008516:	6800      	ldr	r0, [r0, #0]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	f7ff f983 	bl	8007824 <_vfiprintf_r>
 800851e:	b002      	add	sp, #8
 8008520:	f85d eb04 	ldr.w	lr, [sp], #4
 8008524:	b003      	add	sp, #12
 8008526:	4770      	bx	lr
 8008528:	20000064 	.word	0x20000064

0800852c <abort>:
 800852c:	2006      	movs	r0, #6
 800852e:	b508      	push	{r3, lr}
 8008530:	f000 f834 	bl	800859c <raise>
 8008534:	2001      	movs	r0, #1
 8008536:	f7f9 fc84 	bl	8001e42 <_exit>

0800853a <_malloc_usable_size_r>:
 800853a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853e:	1f18      	subs	r0, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfbc      	itt	lt
 8008544:	580b      	ldrlt	r3, [r1, r0]
 8008546:	18c0      	addlt	r0, r0, r3
 8008548:	4770      	bx	lr

0800854a <_raise_r>:
 800854a:	291f      	cmp	r1, #31
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	460d      	mov	r5, r1
 8008552:	d904      	bls.n	800855e <_raise_r+0x14>
 8008554:	2316      	movs	r3, #22
 8008556:	6003      	str	r3, [r0, #0]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008560:	b112      	cbz	r2, 8008568 <_raise_r+0x1e>
 8008562:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008566:	b94b      	cbnz	r3, 800857c <_raise_r+0x32>
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f831 	bl	80085d0 <_getpid_r>
 800856e:	462a      	mov	r2, r5
 8008570:	4601      	mov	r1, r0
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008578:	f000 b818 	b.w	80085ac <_kill_r>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d00a      	beq.n	8008596 <_raise_r+0x4c>
 8008580:	1c59      	adds	r1, r3, #1
 8008582:	d103      	bne.n	800858c <_raise_r+0x42>
 8008584:	2316      	movs	r3, #22
 8008586:	6003      	str	r3, [r0, #0]
 8008588:	2001      	movs	r0, #1
 800858a:	e7e7      	b.n	800855c <_raise_r+0x12>
 800858c:	2400      	movs	r4, #0
 800858e:	4628      	mov	r0, r5
 8008590:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008594:	4798      	blx	r3
 8008596:	2000      	movs	r0, #0
 8008598:	e7e0      	b.n	800855c <_raise_r+0x12>
	...

0800859c <raise>:
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <raise+0xc>)
 800859e:	4601      	mov	r1, r0
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f7ff bfd2 	b.w	800854a <_raise_r>
 80085a6:	bf00      	nop
 80085a8:	20000064 	.word	0x20000064

080085ac <_kill_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	2300      	movs	r3, #0
 80085b0:	4d06      	ldr	r5, [pc, #24]	; (80085cc <_kill_r+0x20>)
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7f9 fc32 	bl	8001e22 <_kill>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_kill_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_kill_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20000428 	.word	0x20000428

080085d0 <_getpid_r>:
 80085d0:	f7f9 bc20 	b.w	8001e14 <_getpid>

080085d4 <_init>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

080085e0 <_fini>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr
