
RCD_02_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008f40  08008f40  00018f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080093a8  080093a8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093a8  080093a8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080093b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001d8  08009588  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08009588  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df6f  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002718  00000000  00000000  0002e1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a91  00000000  00000000  00031688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b58c  00000000  00000000  00032119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001142b  00000000  00000000  0004d6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bdcf  00000000  00000000  0005ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  000fa8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000ff5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008f28 	.word	0x08008f28

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08008f28 	.word	0x08008f28

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4605      	mov	r5, r0
 800114c:	460c      	mov	r4, r1
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4628      	mov	r0, r5
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc9d 	bl	8000a94 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff fa13 	bl	80005b0 <__aeabi_dmul>
 800118a:	f7ff fce9 	bl	8000b60 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f994 	bl	80004bc <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff fa0a 	bl	80005b0 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f84c 	bl	8000240 <__aeabi_dsub>
 80011a8:	f7ff fcda 	bl	8000b60 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_DAC_Init+0x4c>)
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_DAC_Init+0x50>)
 80011ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_DAC_Init+0x4c>)
 80011ce:	f001 f95a 	bl	8002486 <HAL_DAC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d8:	f000 fb0b 	bl	80017f2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_DAC_Init+0x4c>)
 80011ec:	f001 f9ec 	bl	80025c8 <HAL_DAC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f6:	f000 fafc 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001f4 	.word	0x200001f4
 8001208:	40007400 	.word	0x40007400

0800120c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_DAC_MspInit+0x6c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d121      	bne.n	8001270 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_DAC_MspInit+0x70>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_DAC_MspInit+0x70>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_DAC_MspInit+0x70>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = TEST_IN_Pin;
 800125c:	2310      	movs	r3, #16
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(TEST_IN_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_DAC_MspInit+0x74>)
 800126c:	f001 fa04 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40007400 	.word	0x40007400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x124>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <MX_GPIO_Init+0x124>)
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3c      	ldr	r2, [pc, #240]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Calibration_RED_Pin|Calibration_GREEN_Pin|Calibration_BLUE_Pin|HEART_RED_Pin
 80012f8:	2201      	movs	r2, #1
 80012fa:	21ce      	movs	r1, #206	; 0xce
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <MX_GPIO_Init+0x128>)
 80012fe:	f001 fb66 	bl	80029ce <HAL_GPIO_WritePin>
                          |HEART_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_BLUE_GPIO_Port, HEART_BLUE_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2110      	movs	r1, #16
 8001306:	482a      	ldr	r0, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x12c>)
 8001308:	f001 fb61 	bl	80029ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TEST_IN_RED_Pin
 800130c:	2201      	movs	r2, #1
 800130e:	f647 4104 	movw	r1, #31748	; 0x7c04
 8001312:	4828      	ldr	r0, [pc, #160]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001314:	f001 fb5b 	bl	80029ce <HAL_GPIO_WritePin>
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Calibration_RED_Pin|Calibration_GREEN_Pin|Calibration_BLUE_Pin|HEART_RED_Pin
 8001318:	23ce      	movs	r3, #206	; 0xce
 800131a:	613b      	str	r3, [r7, #16]
                          |HEART_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <MX_GPIO_Init+0x128>)
 8001330:	f001 f9a2 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEART_BLUE_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEART_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4819      	ldr	r0, [pc, #100]	; (80013b0 <MX_GPIO_Init+0x12c>)
 800134c:	f001 f994 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TEST_IN_RED_Pin
 8001350:	f647 4304 	movw	r3, #31748	; 0x7c04
 8001354:	613b      	str	r3, [r7, #16]
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_GPIO_Init+0x130>)
 800136a:	f001 f985 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_INPUT_Pin;
 800136e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIP_INPUT_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <MX_GPIO_Init+0x128>)
 8001384:	f001 f978 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Calibration_START_Pin;
 8001388:	2308      	movs	r3, #8
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Calibration_START_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_GPIO_Init+0x130>)
 800139c:	f001 f96c 	bl	8002678 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fef4 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f978 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f7ff ff5e 	bl	8001284 <MX_GPIO_Init>
  MX_DAC_Init();
 80013c8:	f7ff fef6 	bl	80011b8 <MX_DAC_Init>
  MX_TIM1_Init();
 80013cc:	f000 fb4a 	bl	8001a64 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013d0:	f000 fc94 	bl	8001cfc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013d4:	f000 fbe4 	bl	8001ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	48a9      	ldr	r0, [pc, #676]	; (8001680 <main+0x2c8>)
 80013dc:	f002 f840 	bl	8003460 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	48a7      	ldr	r0, [pc, #668]	; (8001680 <main+0x2c8>)
 80013e4:	f002 f83c 	bl	8003460 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_4);
 80013e8:	210c      	movs	r1, #12
 80013ea:	48a5      	ldr	r0, [pc, #660]	; (8001680 <main+0x2c8>)
 80013ec:	f002 f838 	bl	8003460 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	48a4      	ldr	r0, [pc, #656]	; (8001684 <main+0x2cc>)
 80013f2:	f001 ff7d 	bl	80032f0 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	48a3      	ldr	r0, [pc, #652]	; (8001688 <main+0x2d0>)
 80013fa:	f001 f866 	bl	80024ca <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("init success\r\n");
 80013fe:	48a3      	ldr	r0, [pc, #652]	; (800168c <main+0x2d4>)
 8001400:	f004 f906 	bl	8005610 <puts>
  while (1)
  {
	if(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0 && work_normol == 1)	//校准控制
 8001404:	2108      	movs	r1, #8
 8001406:	48a2      	ldr	r0, [pc, #648]	; (8001690 <main+0x2d8>)
 8001408:	f001 faca 	bl	80029a0 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d144      	bne.n	800149c <main+0xe4>
 8001412:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <main+0x2dc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d140      	bne.n	800149c <main+0xe4>
	{
		HAL_msDelay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f000 f9d0 	bl	80017c0 <HAL_msDelay>
		while(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0);	//校准控制
 8001420:	bf00      	nop
 8001422:	2108      	movs	r1, #8
 8001424:	489a      	ldr	r0, [pc, #616]	; (8001690 <main+0x2d8>)
 8001426:	f001 fabb 	bl	80029a0 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f8      	beq.n	8001422 <main+0x6a>

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8001430:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4893      	ldr	r0, [pc, #588]	; (8001688 <main+0x2d0>)
 800143a:	f001 f89c 	bl	8002576 <HAL_DAC_SetValue>
		HAL_msDelay(200);
 800143e:	20c8      	movs	r0, #200	; 0xc8
 8001440:	f000 f9be 	bl	80017c0 <HAL_msDelay>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001444:	2300      	movs	r3, #0
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	488f      	ldr	r0, [pc, #572]	; (8001688 <main+0x2d0>)
 800144c:	f001 f893 	bl	8002576 <HAL_DAC_SetValue>

		test_in_flag = 1;
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <main+0x2e0>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]

		SelectLedLight(TestLed,Red,0);
 8001456:	2200      	movs	r2, #0
 8001458:	2101      	movs	r1, #1
 800145a:	2004      	movs	r0, #4
 800145c:	f000 fcfc 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,0);
 8001460:	2200      	movs	r2, #0
 8001462:	2102      	movs	r1, #2
 8001464:	2004      	movs	r0, #4
 8001466:	f000 fcf7 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Blue,0);
 800146a:	2200      	movs	r2, #0
 800146c:	2103      	movs	r1, #3
 800146e:	2004      	movs	r0, #4
 8001470:	f000 fcf2 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,1);
 8001474:	2201      	movs	r2, #1
 8001476:	2102      	movs	r1, #2
 8001478:	2004      	movs	r0, #4
 800147a:	f000 fced 	bl	8001e58 <SelectLedLight>

		SelectLedLight(CalibrateLed,Red,0);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	2001      	movs	r0, #1
 8001484:	f000 fce8 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Green,0);
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	2001      	movs	r0, #1
 800148e:	f000 fce3 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Blue,0);
 8001492:	2200      	movs	r2, #0
 8001494:	2103      	movs	r1, #3
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fcde 	bl	8001e58 <SelectLedLight>
	}

	 if(end_flag)
 800149c:	4b7f      	ldr	r3, [pc, #508]	; (800169c <main+0x2e4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <main+0xf2>
	 {
//		printf ("Cap_val1 is :%ld ,  Cap_val2 is : %ld \r\n",Cap_val1 ,Cap_val2 );
//		printf ("Duty is :%0.2f%% Frequency is : %0.2f\r\n",Duty  ,Frequency  );
		end_flag=0;
 80014a4:	4b7d      	ldr	r3, [pc, #500]	; (800169c <main+0x2e4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	 }

	if(((int)Frequency >= 940 && (int)Frequency <= 1060) && ((int)Duty > 49 && (int)Duty < 51))//Heart beat信�?�
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <main+0x2e8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe24 	bl	80010fc <__aeabi_f2iz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f5b3 7f6b 	cmp.w	r3, #940	; 0x3ac
 80014ba:	db31      	blt.n	8001520 <main+0x168>
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <main+0x2e8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe1b 	bl	80010fc <__aeabi_f2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f240 4224 	movw	r2, #1060	; 0x424
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dc27      	bgt.n	8001520 <main+0x168>
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <main+0x2ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe11 	bl	80010fc <__aeabi_f2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b31      	cmp	r3, #49	; 0x31
 80014de:	dd1f      	ble.n	8001520 <main+0x168>
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <main+0x2ec>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe09 	bl	80010fc <__aeabi_f2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b32      	cmp	r3, #50	; 0x32
 80014ee:	dc17      	bgt.n	8001520 <main+0x168>
	{
		SelectLedLight(HeartLed,Red,0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 fcaf 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 fcaa 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Blue,0);
 8001504:	2200      	movs	r2, #0
 8001506:	2103      	movs	r1, #3
 8001508:	2002      	movs	r0, #2
 800150a:	f000 fca5 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,1);
 800150e:	2201      	movs	r2, #1
 8001510:	2102      	movs	r1, #2
 8001512:	2002      	movs	r0, #2
 8001514:	f000 fca0 	bl	8001e58 <SelectLedLight>
		work_normol = 1;
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <main+0x2dc>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e029      	b.n	8001574 <main+0x1bc>
	}
	else if(test_in_flag == 0)
 8001520:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <main+0x2e0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d125      	bne.n	8001574 <main+0x1bc>
	{
		SelectLedLight(CalibrateLed,Red,0);
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	2001      	movs	r0, #1
 800152e:	f000 fc93 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Green,0);
 8001532:	2200      	movs	r2, #0
 8001534:	2102      	movs	r1, #2
 8001536:	2001      	movs	r0, #1
 8001538:	f000 fc8e 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Blue,0);
 800153c:	2200      	movs	r2, #0
 800153e:	2103      	movs	r1, #3
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fc89 	bl	8001e58 <SelectLedLight>

		SelectLedLight(HeartLed,Red,0);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	2002      	movs	r0, #2
 800154c:	f000 fc84 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,0);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	2002      	movs	r0, #2
 8001556:	f000 fc7f 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Blue,0);
 800155a:	2200      	movs	r2, #0
 800155c:	2103      	movs	r1, #3
 800155e:	2002      	movs	r0, #2
 8001560:	f000 fc7a 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Red,1);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	2002      	movs	r0, #2
 800156a:	f000 fc75 	bl	8001e58 <SelectLedLight>
		work_normol = 0;
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <main+0x2dc>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	}

	if(test_in_flag == 2)
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <main+0x2e0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d162      	bne.n	8001642 <main+0x28a>
	{
		trip_time = 0;
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <main+0x2f0>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
		HAL_msDelay(1700);
 8001582:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001586:	f000 f91b 	bl	80017c0 <HAL_msDelay>
		if(((int)trip_time > 120 && (int)trip_time < 140) && work_normol == 1)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <main+0x2f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b78      	cmp	r3, #120	; 0x78
 8001590:	dd1c      	ble.n	80015cc <main+0x214>
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <main+0x2f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b8b      	cmp	r3, #139	; 0x8b
 8001598:	dc18      	bgt.n	80015cc <main+0x214>
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <main+0x2dc>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d114      	bne.n	80015cc <main+0x214>
		{
			SelectLedLight(CalibrateLed,Red,0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 fc56 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2102      	movs	r1, #2
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 fc51 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Blue,0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2103      	movs	r1, #3
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fc4c 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2102      	movs	r1, #2
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 fc47 	bl	8001e58 <SelectLedLight>
 80015ca:	e013      	b.n	80015f4 <main+0x23c>
		}
		else
		{
			SelectLedLight(CalibrateLed,Red,0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fc41 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fc3c 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Blue,0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2103      	movs	r1, #3
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 fc37 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Red,1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fc32 	bl	8001e58 <SelectLedLight>
		}
		test_in_flag = 0;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <main+0x2e0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		trip_time = 0;
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x2f0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
		trip_flag = 0;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <main+0x2f4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		SelectLedLight(TestLed,Red,0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	2004      	movs	r0, #4
 800160c:	f000 fc24 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,0);
 8001610:	2200      	movs	r2, #0
 8001612:	2102      	movs	r1, #2
 8001614:	2004      	movs	r0, #4
 8001616:	f000 fc1f 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Blue,0);
 800161a:	2200      	movs	r2, #0
 800161c:	2103      	movs	r1, #3
 800161e:	2004      	movs	r0, #4
 8001620:	f000 fc1a 	bl	8001e58 <SelectLedLight>

		SelectLedLight(TripLed,Red,0);
 8001624:	2200      	movs	r2, #0
 8001626:	2101      	movs	r1, #1
 8001628:	2003      	movs	r0, #3
 800162a:	f000 fc15 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Green,0);
 800162e:	2200      	movs	r2, #0
 8001630:	2102      	movs	r1, #2
 8001632:	2003      	movs	r0, #3
 8001634:	f000 fc10 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Blue,0);
 8001638:	2200      	movs	r2, #0
 800163a:	2103      	movs	r1, #3
 800163c:	2003      	movs	r0, #3
 800163e:	f000 fc0b 	bl	8001e58 <SelectLedLight>

	}

	if(trip_flag == 1 && test_in_flag == 0)
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <main+0x2f4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	f47f aedc 	bne.w	8001404 <main+0x4c>
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <main+0x2e0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f aed7 	bne.w	8001404 <main+0x4c>
	{
		HAL_msDelay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f000 f8b1 	bl	80017c0 <HAL_msDelay>
		if(HAL_GPIO_ReadPin(GPIOA, TRIP_INPUT_Pin) == 0)
 800165e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <main+0x2f8>)
 8001664:	f001 f99c 	bl	80029a0 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f aeca 	bne.w	8001404 <main+0x4c>
		{
			trip_flag = 0;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <main+0x2f4>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			trip_time = 0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <main+0x2f0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0 && work_normol == 1)	//校准控制
 800167c:	e6c2      	b.n	8001404 <main+0x4c>
 800167e:	bf00      	nop
 8001680:	20000210 	.word	0x20000210
 8001684:	20000258 	.word	0x20000258
 8001688:	200001f4 	.word	0x200001f4
 800168c:	08008f40 	.word	0x08008f40
 8001690:	40010c00 	.word	0x40010c00
 8001694:	20000209 	.word	0x20000209
 8001698:	20000208 	.word	0x20000208
 800169c:	200002f8 	.word	0x200002f8
 80016a0:	200002f0 	.word	0x200002f0
 80016a4:	200002f4 	.word	0x200002f4
 80016a8:	200002fc 	.word	0x200002fc
 80016ac:	200002f9 	.word	0x200002f9
 80016b0:	40010800 	.word	0x40010800

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b090      	sub	sp, #64	; 0x40
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f8a4 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 f997 	bl	8002a30 <HAL_RCC_OscConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001708:	f000 f873 	bl	80017f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2102      	movs	r1, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fc04 	bl	8002f34 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001732:	f000 f85e 	bl	80017f2 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_usDelay>:

/* USER CODE BEGIN 4 */
void HAL_usDelay(uint32_t udelay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_usDelay+0x7c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 800174e:	f000 fd83 	bl	8002258 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

  delays =udelay * 72;
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	d915      	bls.n	8001794 <HAL_usDelay+0x54>
  {
    while(HAL_GetTick() == tickn);
 8001768:	bf00      	nop
 800176a:	f000 fd75 	bl	8002258 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4293      	cmp	r3, r2
 8001774:	d0f9      	beq.n	800176a <HAL_usDelay+0x2a>
    wait = 72000 + startval - delays;
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001780:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001784:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL);
 8001786:	bf00      	nop
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_usDelay+0x7c>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3fa      	bcc.n	8001788 <HAL_usDelay+0x48>
  else
  {
    wait = startval - delays;
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
  }
}
 8001792:	e00f      	b.n	80017b4 <HAL_usDelay+0x74>
    wait = startval - delays;
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
 800179c:	bf00      	nop
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_usDelay+0x7c>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d205      	bcs.n	80017b4 <HAL_usDelay+0x74>
 80017a8:	f000 fd56 	bl	8002258 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d0f4      	beq.n	800179e <HAL_usDelay+0x5e>
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_msDelay>:

void HAL_msDelay(uint32_t udelay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	81fb      	strh	r3, [r7, #14]
	for(i = 0;i < udelay;i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e006      	b.n	80017e0 <HAL_msDelay+0x20>
	{
		HAL_usDelay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d6:	f7ff ffb3 	bl	8001740 <HAL_usDelay>
	for(i = 0;i < udelay;i++)
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	3301      	adds	r3, #1
 80017de:	81fb      	strh	r3, [r7, #14]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f4      	bhi.n	80017d2 <HAL_msDelay+0x12>
	}
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f6:	b672      	cpsid	i
}
 80017f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fa:	e7fe      	b.n	80017fa <Error_Handler+0x8>

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <HAL_MspInit+0x5c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_MspInit+0x5c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_MspInit+0x60>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_MspInit+0x60>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 fcc5 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM1_CC_IRQHandler+0x10>)
 80018b6:	f001 feed 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000210 	.word	0x20000210

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f001 fee3 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000258 	.word	0x20000258

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <_kill>:

int _kill(int pid, int sig)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f0:	f003 ffe0 	bl	80058b4 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2216      	movs	r2, #22
 80018f8:	601a      	str	r2, [r3, #0]
  return -1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_exit>:

void _exit (int status)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190e:	f04f 31ff 	mov.w	r1, #4294967295
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffe7 	bl	80018e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001918:	e7fe      	b.n	8001918 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fa3a 	bl	8001de8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_isatty>:

int _isatty(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f003 ff4a 	bl	80058b4 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000c000 	.word	0x2000c000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	2000020c 	.word	0x2000020c
 8001a54:	20000450 	.word	0x20000450

08001a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b090      	sub	sp, #64	; 0x40
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <MX_TIM1_Init+0x138>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aa6:	2247      	movs	r2, #71	; 0x47
 8001aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aca:	4833      	ldr	r0, [pc, #204]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001acc:	f001 fbc0 	bl	8003250 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ad6:	f7ff fe8c 	bl	80017f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	482c      	ldr	r0, [pc, #176]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ae8:	f001 ff78 	bl	80039dc <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001af2:	f7ff fe7e 	bl	80017f2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001af8:	f001 fc5a 	bl	80033b0 <HAL_TIM_IC_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001b02:	f7ff fe76 	bl	80017f2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b06:	2304      	movs	r3, #4
 8001b08:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b0a:	2350      	movs	r3, #80	; 0x50
 8001b0c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481e      	ldr	r0, [pc, #120]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b1e:	f002 f824 	bl	8003b6a <HAL_TIM_SlaveConfigSynchro>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b28:	f7ff fe63 	bl	80017f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b3c:	f002 fb98 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8001b46:	f7ff fe54 	bl	80017f2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b62:	f001 fe9f 	bl	80038a4 <HAL_TIM_IC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001b6c:	f7ff fe41 	bl	80017f2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b80:	f001 fe90 	bl	80038a4 <HAL_TIM_IC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b8a:	f7ff fe32 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3740      	adds	r7, #64	; 0x40
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000210 	.word	0x20000210
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bc6:	2248      	movs	r2, #72	; 0x48
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be6:	f001 fb33 	bl	8003250 <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f7ff fdff 	bl	80017f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c02:	f001 feeb 	bl	80039dc <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f7ff fdf1 	bl	80017f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c1e:	f002 fb27 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f7ff fde3 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000258 	.word	0x20000258

08001c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d12d      	bne.n	8001cb4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEART_BEAT_Pin;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c92:	2302      	movs	r3, #2
 8001c94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HEART_BEAT_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <HAL_TIM_Base_MspInit+0xc0>)
 8001c9e:	f000 fceb 	bl	8002678 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	201b      	movs	r0, #27
 8001ca8:	f000 fbb7 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cac:	201b      	movs	r0, #27
 8001cae:	f000 fbd0 	bl	8002452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cb2:	e018      	b.n	8001ce6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d113      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f000 fb9d 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce0:	201c      	movs	r0, #28
 8001ce2:	f000 fbb6 	bl	8002452 <HAL_NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010800 	.word	0x40010800

08001cfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <MX_USART1_UART_Init+0x50>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d34:	f002 fb1a 	bl	800436c <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d3e:	f7ff fd58 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002a0 	.word	0x200002a0
 8001d4c:	40013800 	.word	0x40013800

08001d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_UART_MspInit+0x8c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d131      	bne.n	8001dd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_UART_MspInit+0x94>)
 8001db6:	f000 fc5f 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_UART_MspInit+0x94>)
 8001dd0:	f000 fc52 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010800 	.word	0x40010800

08001de8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001df0:	1d39      	adds	r1, r7, #4
 8001df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df6:	2201      	movs	r2, #1
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <__io_putchar+0x20>)
 8001dfa:	f002 fb07 	bl	800440c <HAL_UART_Transmit>
	return ch;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002a0 	.word	0x200002a0

08001e0c <Reset_Handler>:
 8001e0c:	f7ff fe24 	bl	8001a58 <SystemInit>
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0xe>)
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <LoopFillZerobss+0x12>)
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LoopFillZerobss+0x16>)
 8001e16:	2300      	movs	r3, #0
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:
 8001e1a:	58d4      	ldr	r4, [r2, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:
 8001e20:	18c4      	adds	r4, r0, r3
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <LoopFillZerobss+0x1a>)
 8001e28:	4c09      	ldr	r4, [pc, #36]	; (8001e50 <LoopFillZerobss+0x1e>)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:
 8001e32:	42a2      	cmp	r2, r4
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>
 8001e36:	f003 fd43 	bl	80058c0 <__libc_init_array>
 8001e3a:	f7ff fabd 	bl	80013b8 <main>
 8001e3e:	4770      	bx	lr
 8001e40:	20000000 	.word	0x20000000
 8001e44:	200001d8 	.word	0x200001d8
 8001e48:	080093b0 	.word	0x080093b0
 8001e4c:	200001d8 	.word	0x200001d8
 8001e50:	20000450 	.word	0x20000450

08001e54 <ADC1_2_IRQHandler>:
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <SelectLedLight>:
#include "led.h"



void SelectLedLight(unsigned char signal,unsigned char color,unsigned char state)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
 8001e62:	460b      	mov	r3, r1
 8001e64:	71bb      	strb	r3, [r7, #6]
 8001e66:	4613      	mov	r3, r2
 8001e68:	717b      	strb	r3, [r7, #5]
	if(state)
 8001e6a:	797b      	ldrb	r3, [r7, #5]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <SelectLedLight+0x1e>
		state = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	717b      	strb	r3, [r7, #5]
 8001e74:	e001      	b.n	8001e7a <SelectLedLight+0x22>
	else
		state = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	717b      	strb	r3, [r7, #5]
	switch(signal)
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 8098 	bhi.w	8001fb4 <SelectLedLight+0x15c>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <SelectLedLight+0x34>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001edd 	.word	0x08001edd
 8001e94:	08001f1d 	.word	0x08001f1d
 8001e98:	08001f61 	.word	0x08001f61
	{
	case CalibrateLed:
		switch(color)
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d014      	beq.n	8001ecc <SelectLedLight+0x74>
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	dc7f      	bgt.n	8001fa6 <SelectLedLight+0x14e>
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <SelectLedLight+0x58>
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d007      	beq.n	8001ebe <SelectLedLight+0x66>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOA, Calibration_BLUE_Pin, state);
			break;
		}
		break;
 8001eae:	e07a      	b.n	8001fa6 <SelectLedLight+0x14e>
			HAL_GPIO_WritePin(GPIOA, Calibration_RED_Pin, state);
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4841      	ldr	r0, [pc, #260]	; (8001fbc <SelectLedLight+0x164>)
 8001eb8:	f000 fd89 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001ebc:	e00d      	b.n	8001eda <SelectLedLight+0x82>
			HAL_GPIO_WritePin(GPIOA, Calibration_GREEN_Pin, state);
 8001ebe:	797b      	ldrb	r3, [r7, #5]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	483d      	ldr	r0, [pc, #244]	; (8001fbc <SelectLedLight+0x164>)
 8001ec6:	f000 fd82 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001eca:	e006      	b.n	8001eda <SelectLedLight+0x82>
			HAL_GPIO_WritePin(GPIOA, Calibration_BLUE_Pin, state);
 8001ecc:	797b      	ldrb	r3, [r7, #5]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <SelectLedLight+0x164>)
 8001ed4:	f000 fd7b 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001ed8:	bf00      	nop
		break;
 8001eda:	e064      	b.n	8001fa6 <SelectLedLight+0x14e>
	case HeartLed:
		switch(color)
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d014      	beq.n	8001f0c <SelectLedLight+0xb4>
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	dc61      	bgt.n	8001faa <SelectLedLight+0x152>
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <SelectLedLight+0x98>
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d007      	beq.n	8001efe <SelectLedLight+0xa6>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOC, HEART_BLUE_Pin, state);
			break;
		}
		break;
 8001eee:	e05c      	b.n	8001faa <SelectLedLight+0x152>
			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, state);
 8001ef0:	797b      	ldrb	r3, [r7, #5]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <SelectLedLight+0x164>)
 8001ef8:	f000 fd69 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001efc:	e00d      	b.n	8001f1a <SelectLedLight+0xc2>
			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, state);
 8001efe:	797b      	ldrb	r3, [r7, #5]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	482d      	ldr	r0, [pc, #180]	; (8001fbc <SelectLedLight+0x164>)
 8001f06:	f000 fd62 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001f0a:	e006      	b.n	8001f1a <SelectLedLight+0xc2>
			HAL_GPIO_WritePin(GPIOC, HEART_BLUE_Pin, state);
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2110      	movs	r1, #16
 8001f12:	482b      	ldr	r0, [pc, #172]	; (8001fc0 <SelectLedLight+0x168>)
 8001f14:	f000 fd5b 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001f18:	bf00      	nop
		break;
 8001f1a:	e046      	b.n	8001faa <SelectLedLight+0x152>
	case TripLed:
		switch(color)
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d015      	beq.n	8001f4e <SelectLedLight+0xf6>
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	dc43      	bgt.n	8001fae <SelectLedLight+0x156>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <SelectLedLight+0xd8>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d007      	beq.n	8001f3e <SelectLedLight+0xe6>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOB, TRIP_BLUE_Pin, state);
			break;
		}
		break;
 8001f2e:	e03e      	b.n	8001fae <SelectLedLight+0x156>
			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, state);
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	461a      	mov	r2, r3
 8001f34:	2104      	movs	r1, #4
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f38:	f000 fd49 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001f3c:	e00f      	b.n	8001f5e <SelectLedLight+0x106>
			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, state);
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f48:	f000 fd41 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001f4c:	e007      	b.n	8001f5e <SelectLedLight+0x106>
			HAL_GPIO_WritePin(GPIOB, TRIP_BLUE_Pin, state);
 8001f4e:	797b      	ldrb	r3, [r7, #5]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f56:	481b      	ldr	r0, [pc, #108]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f58:	f000 fd39 	bl	80029ce <HAL_GPIO_WritePin>
			break;
 8001f5c:	bf00      	nop
		break;
 8001f5e:	e026      	b.n	8001fae <SelectLedLight+0x156>
	case TestLed:
			switch(color)
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d016      	beq.n	8001f94 <SelectLedLight+0x13c>
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	dc23      	bgt.n	8001fb2 <SelectLedLight+0x15a>
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d002      	beq.n	8001f74 <SelectLedLight+0x11c>
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d008      	beq.n	8001f84 <SelectLedLight+0x12c>
				break;
			case Blue:
				HAL_GPIO_WritePin(GPIOB, TEST_IN_BLUE_Pin, state);
				break;
			}
			break;
 8001f72:	e01e      	b.n	8001fb2 <SelectLedLight+0x15a>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_RED_Pin, state);
 8001f74:	797b      	ldrb	r3, [r7, #5]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f7e:	f000 fd26 	bl	80029ce <HAL_GPIO_WritePin>
				break;
 8001f82:	e00f      	b.n	8001fa4 <SelectLedLight+0x14c>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, state);
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f8e:	f000 fd1e 	bl	80029ce <HAL_GPIO_WritePin>
				break;
 8001f92:	e007      	b.n	8001fa4 <SelectLedLight+0x14c>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_BLUE_Pin, state);
 8001f94:	797b      	ldrb	r3, [r7, #5]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f9e:	f000 fd16 	bl	80029ce <HAL_GPIO_WritePin>
				break;
 8001fa2:	bf00      	nop
			break;
 8001fa4:	e005      	b.n	8001fb2 <SelectLedLight+0x15a>
		break;
 8001fa6:	bf00      	nop
 8001fa8:	e004      	b.n	8001fb4 <SelectLedLight+0x15c>
		break;
 8001faa:	bf00      	nop
 8001fac:	e002      	b.n	8001fb4 <SelectLedLight+0x15c>
		break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <SelectLedLight+0x15c>
			break;
 8001fb2:	bf00      	nop
	}

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <HAL_TIM_IC_CaptureCallback>:
unsigned char end_flag = 0;
unsigned char trip_flag = 0;
unsigned int trip_time = 0;
/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

/*判断中断来源*/
	if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7f1b      	ldrb	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d148      	bne.n	800206a <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Cap_val1=HAL_TIM_ReadCapturedValue (&htim1 ,TIM_CHANNEL_1 );
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4826      	ldr	r0, [pc, #152]	; (8002074 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001fdc:	f001 fe08 	bl	8003bf0 <HAL_TIM_ReadCapturedValue>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001fe4:	6013      	str	r3, [r2, #0]

		if(Cap_val1!=0)
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d035      	beq.n	800205a <HAL_TIM_IC_CaptureCallback+0x92>
		{
			Cap_val2=HAL_TIM_ReadCapturedValue (&htim1 ,TIM_CHANNEL_2 );
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ff2:	f001 fdfd 	bl	8003bf0 <HAL_TIM_ReadCapturedValue>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001ffa:	6013      	str	r3, [r2, #0]
			Frequency=(float)(72000000 / 72)/(Cap_val1+1);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fed2 	bl	8000dac <__aeabi_ui2f>
 8002008:	4603      	mov	r3, r0
 800200a:	4619      	mov	r1, r3
 800200c:	481c      	ldr	r0, [pc, #112]	; (8002080 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800200e:	f7fe ffd9 	bl	8000fc4 <__aeabi_fdiv>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002018:	601a      	str	r2, [r3, #0]
			Duty=(float)(Cap_val2+1)*100/(Cap_val1+1);
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fec3 	bl	8000dac <__aeabi_ui2f>
 8002026:	4603      	mov	r3, r0
 8002028:	4917      	ldr	r1, [pc, #92]	; (8002088 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff16 	bl	8000e5c <__aeabi_fmul>
 8002030:	4603      	mov	r3, r0
 8002032:	461c      	mov	r4, r3
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe feb6 	bl	8000dac <__aeabi_ui2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe ffbd 	bl	8000fc4 <__aeabi_fdiv>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002050:	601a      	str	r2, [r3, #0]
			end_flag=1;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
		{
			Frequency=0;
			Duty=0;
		}
	}
}
 8002058:	e007      	b.n	800206a <HAL_TIM_IC_CaptureCallback+0xa2>
			Frequency=0;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
			Duty=0;
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000210 	.word	0x20000210
 8002078:	200002e8 	.word	0x200002e8
 800207c:	200002ec 	.word	0x200002ec
 8002080:	49742400 	.word	0x49742400
 8002084:	200002f0 	.word	0x200002f0
 8002088:	42c80000 	.word	0x42c80000
 800208c:	200002f4 	.word	0x200002f4
 8002090:	200002f8 	.word	0x200002f8

08002094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //10mm
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	static unsigned char delay_tim = 10;
	if(htim == &htim2  && work_normol)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d158      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0xc2>
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d054      	beq.n	8002156 <HAL_TIM_PeriodElapsedCallback+0xc2>
	{
		if(HAL_GPIO_ReadPin(GPIOA, TRIP_INPUT_Pin) == 1)		//Trip信�?�
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4835      	ldr	r0, [pc, #212]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80020b2:	f000 fc75 	bl	80029a0 <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			trip_time++;
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020c4:	6013      	str	r3, [r2, #0]
			trip_flag = 1;
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
		}

		if(trip_time > 200)
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2bc8      	cmp	r3, #200	; 0xc8
 80020d2:	d908      	bls.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			Frequency=0;
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
			Duty=0;
 80020dc:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
		if(trip_time > 200)
 80020e4:	e047      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0xe2>
		}

		else if(trip_time > 0)
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d023      	beq.n	8002136 <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			SelectLedLight(TripLed,Red,0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2101      	movs	r1, #1
 80020f2:	2003      	movs	r0, #3
 80020f4:	f7ff feb0 	bl	8001e58 <SelectLedLight>
//			SelectLedLight(TripLed,Green,0);
			SelectLedLight(TripLed,Blue,0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2103      	movs	r1, #3
 80020fc:	2003      	movs	r0, #3
 80020fe:	f7ff feab 	bl	8001e58 <SelectLedLight>
			delay_tim--;
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3b01      	subs	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800210c:	701a      	strb	r2, [r3, #0]
			if(delay_tim == 0)
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				HAL_GPIO_TogglePin(GPIOB, TRIP_GREEN_Pin);
 8002116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211a:	4821      	ldr	r0, [pc, #132]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800211c:	f000 fc6f 	bl	80029fe <HAL_GPIO_TogglePin>
				delay_tim = 5;
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002122:	2205      	movs	r2, #5
 8002124:	701a      	strb	r2, [r3, #0]
			}

			if(test_in_flag == 1)
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d123      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0xe2>
				test_in_flag = 2;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002130:	2202      	movs	r2, #2
 8002132:	701a      	strb	r2, [r3, #0]
		if(trip_time > 200)
 8002134:	e01f      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0xe2>
		}

		else
		{
			SelectLedLight(TripLed,Red,0);
 8002136:	2200      	movs	r2, #0
 8002138:	2101      	movs	r1, #1
 800213a:	2003      	movs	r0, #3
 800213c:	f7ff fe8c 	bl	8001e58 <SelectLedLight>
			SelectLedLight(TripLed,Green,0);
 8002140:	2200      	movs	r2, #0
 8002142:	2102      	movs	r1, #2
 8002144:	2003      	movs	r0, #3
 8002146:	f7ff fe87 	bl	8001e58 <SelectLedLight>
			SelectLedLight(TripLed,Blue,0);
 800214a:	2200      	movs	r2, #0
 800214c:	2103      	movs	r1, #3
 800214e:	2003      	movs	r0, #3
 8002150:	f7ff fe82 	bl	8001e58 <SelectLedLight>
		if(trip_time > 200)
 8002154:	e00f      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0xe2>
//			test_in_flag = 2;
//		}
	}
	else
	{
		SelectLedLight(TripLed,Red,0);
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	2003      	movs	r0, #3
 800215c:	f7ff fe7c 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Green,0);
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	2003      	movs	r0, #3
 8002166:	f7ff fe77 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Blue,0);
 800216a:	2200      	movs	r2, #0
 800216c:	2103      	movs	r1, #3
 800216e:	2003      	movs	r0, #3
 8002170:	f7ff fe72 	bl	8001e58 <SelectLedLight>
	}
}
 8002174:	e000      	b.n	8002178 <HAL_TIM_PeriodElapsedCallback+0xe4>
		if(trip_time > 200)
 8002176:	bf00      	nop
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000258 	.word	0x20000258
 8002184:	20000209 	.word	0x20000209
 8002188:	40010800 	.word	0x40010800
 800218c:	200002fc 	.word	0x200002fc
 8002190:	200002f9 	.word	0x200002f9
 8002194:	200002f0 	.word	0x200002f0
 8002198:	200002f4 	.word	0x200002f4
 800219c:	20000004 	.word	0x20000004
 80021a0:	40010c00 	.word	0x40010c00
 80021a4:	20000208 	.word	0x20000208

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f923 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fb1a 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f93b 	bl	800246e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 f903 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000000 	.word	0x20000000
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	2000000c 	.word	0x2000000c
 8002254:	20000300 	.word	0x20000300

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000300 	.word	0x20000300

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4906      	ldr	r1, [pc, #24]	; (8002304 <__NVIC_EnableIRQ+0x34>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff2d 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff42 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff35 	bl	80022d0 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e014      	b.n	80024c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe feaf 	bl	800120c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e046      	b.n	800256c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	795b      	ldrb	r3, [r3, #5]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_DAC_Start+0x20>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e040      	b.n	800256c <HAL_DAC_Start+0xa2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2201      	movs	r2, #1
 8002504:	409a      	lsls	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800251e:	2b3c      	cmp	r3, #60	; 0x3c
 8002520:	d11d      	bne.n	800255e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e014      	b.n	800255e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	213c      	movs	r1, #60	; 0x3c
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	429a      	cmp	r2, r3
 800254c:	d107      	bne.n	800255e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0202 	orr.w	r2, r2, #2
 800255c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002576:	b480      	push	{r7}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e015      	b.n	80025be <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	3308      	adds	r3, #8
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e004      	b.n	80025b4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	3314      	adds	r3, #20
 80025b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_DAC_ConfigChannel+0x1c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e042      	b.n	800266e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	795b      	ldrb	r3, [r3, #5]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_DAC_ConfigChannel+0x2c>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e03c      	b.n	800266e <HAL_DAC_ConfigChannel+0xa6>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	22c0      	movs	r2, #192	; 0xc0
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800266c:	7ffb      	ldrb	r3, [r7, #31]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e179      	b.n	8002980 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800268c:	2201      	movs	r2, #1
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8168 	bne.w	800297a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a96      	ldr	r2, [pc, #600]	; (8002908 <HAL_GPIO_Init+0x290>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d05e      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026b4:	4a94      	ldr	r2, [pc, #592]	; (8002908 <HAL_GPIO_Init+0x290>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d875      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ba:	4a94      	ldr	r2, [pc, #592]	; (800290c <HAL_GPIO_Init+0x294>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d058      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026c0:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_GPIO_Init+0x294>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d86f      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026c6:	4a92      	ldr	r2, [pc, #584]	; (8002910 <HAL_GPIO_Init+0x298>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d052      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026cc:	4a90      	ldr	r2, [pc, #576]	; (8002910 <HAL_GPIO_Init+0x298>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d869      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026d2:	4a90      	ldr	r2, [pc, #576]	; (8002914 <HAL_GPIO_Init+0x29c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d04c      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026d8:	4a8e      	ldr	r2, [pc, #568]	; (8002914 <HAL_GPIO_Init+0x29c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d863      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026de:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_GPIO_Init+0x2a0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d046      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026e4:	4a8c      	ldr	r2, [pc, #560]	; (8002918 <HAL_GPIO_Init+0x2a0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d85d      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d82a      	bhi.n	8002744 <HAL_GPIO_Init+0xcc>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d859      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_GPIO_Init+0x80>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002773 	.word	0x08002773
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800275f 	.word	0x0800275f
 8002704:	080027a1 	.word	0x080027a1
 8002708:	080027a7 	.word	0x080027a7
 800270c:	080027a7 	.word	0x080027a7
 8002710:	080027a7 	.word	0x080027a7
 8002714:	080027a7 	.word	0x080027a7
 8002718:	080027a7 	.word	0x080027a7
 800271c:	080027a7 	.word	0x080027a7
 8002720:	080027a7 	.word	0x080027a7
 8002724:	080027a7 	.word	0x080027a7
 8002728:	080027a7 	.word	0x080027a7
 800272c:	080027a7 	.word	0x080027a7
 8002730:	080027a7 	.word	0x080027a7
 8002734:	080027a7 	.word	0x080027a7
 8002738:	080027a7 	.word	0x080027a7
 800273c:	08002755 	.word	0x08002755
 8002740:	08002769 	.word	0x08002769
 8002744:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_GPIO_Init+0x2a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274a:	e02c      	b.n	80027a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e029      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	3304      	adds	r3, #4
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e024      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	3308      	adds	r3, #8
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e01f      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	330c      	adds	r3, #12
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e01a      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277a:	2304      	movs	r3, #4
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e013      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002788:	2308      	movs	r3, #8
 800278a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	611a      	str	r2, [r3, #16]
          break;
 8002792:	e009      	b.n	80027a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002794:	2308      	movs	r3, #8
 8002796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	615a      	str	r2, [r3, #20]
          break;
 800279e:	e003      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          break;
 80027a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	; 0xff
 80027ac:	d801      	bhi.n	80027b2 <HAL_GPIO_Init+0x13a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_Init+0x13e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d802      	bhi.n	80027c4 <HAL_GPIO_Init+0x14c>
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x152>
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3b08      	subs	r3, #8
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	210f      	movs	r1, #15
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80c1 	beq.w	800297a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f8:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_GPIO_Init+0x2a8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a48      	ldr	r2, [pc, #288]	; (8002920 <HAL_GPIO_Init+0x2a8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_GPIO_Init+0x2a8>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002810:	4a44      	ldr	r2, [pc, #272]	; (8002924 <HAL_GPIO_Init+0x2ac>)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <HAL_GPIO_Init+0x2b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01f      	beq.n	800287c <HAL_GPIO_Init+0x204>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3b      	ldr	r2, [pc, #236]	; (800292c <HAL_GPIO_Init+0x2b4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d019      	beq.n	8002878 <HAL_GPIO_Init+0x200>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_GPIO_Init+0x2b8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x1fc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_GPIO_Init+0x2bc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1f8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_GPIO_Init+0x2c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1f4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a37      	ldr	r2, [pc, #220]	; (800293c <HAL_GPIO_Init+0x2c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1f0>
 8002864:	2305      	movs	r3, #5
 8002866:	e00a      	b.n	800287e <HAL_GPIO_Init+0x206>
 8002868:	2306      	movs	r3, #6
 800286a:	e008      	b.n	800287e <HAL_GPIO_Init+0x206>
 800286c:	2304      	movs	r3, #4
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x206>
 8002870:	2303      	movs	r3, #3
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x206>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x206>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x206>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	4925      	ldr	r1, [pc, #148]	; (8002924 <HAL_GPIO_Init+0x2ac>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4924      	ldr	r1, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4920      	ldr	r1, [pc, #128]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	491a      	ldr	r1, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4916      	ldr	r1, [pc, #88]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d025      	beq.n	8002944 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4910      	ldr	r1, [pc, #64]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e025      	b.n	8002952 <HAL_GPIO_Init+0x2da>
 8002906:	bf00      	nop
 8002908:	10320000 	.word	0x10320000
 800290c:	10310000 	.word	0x10310000
 8002910:	10220000 	.word	0x10220000
 8002914:	10210000 	.word	0x10210000
 8002918:	10120000 	.word	0x10120000
 800291c:	10110000 	.word	0x10110000
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	40010800 	.word	0x40010800
 800292c:	40010c00 	.word	0x40010c00
 8002930:	40011000 	.word	0x40011000
 8002934:	40011400 	.word	0x40011400
 8002938:	40011800 	.word	0x40011800
 800293c:	40011c00 	.word	0x40011c00
 8002940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_GPIO_Init+0x324>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	43db      	mvns	r3, r3
 800294c:	4913      	ldr	r1, [pc, #76]	; (800299c <HAL_GPIO_Init+0x324>)
 800294e:	4013      	ands	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_GPIO_Init+0x324>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_GPIO_Init+0x324>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
 800296a:	e006      	b.n	800297a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_GPIO_Init+0x324>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	43db      	mvns	r3, r3
 8002974:	4909      	ldr	r1, [pc, #36]	; (800299c <HAL_GPIO_Init+0x324>)
 8002976:	4013      	ands	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	3301      	adds	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	f47f ae7e 	bne.w	800268c <HAL_GPIO_Init+0x14>
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	372c      	adds	r7, #44	; 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]
 80029da:	4613      	mov	r3, r2
 80029dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029de:	787b      	ldrb	r3, [r7, #1]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ea:	e003      	b.n	80029f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	041a      	lsls	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e272      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8087 	beq.w	8002b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	4b92      	ldr	r3, [pc, #584]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
 8002a68:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x12c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d168      	bne.n	8002b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e24c      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x76>
 8002a98:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a7f      	ldr	r2, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e02e      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7a      	ldr	r2, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b78      	ldr	r3, [pc, #480]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a77      	ldr	r2, [pc, #476]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0xbc>
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xd4>
 8002aec:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fba4 	bl	8002258 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff fba0 	bl	8002258 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e200      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe4>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fb90 	bl	8002258 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fb8c 	bl	8002258 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1ec      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x10c>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
 8002b82:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1c0      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e03a      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff fb45 	bl	8002258 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7ff fb41 	bl	8002258 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1a1      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4927      	ldr	r1, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fb24 	bl	8002258 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c14:	f7ff fb20 	bl	8002258 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e180      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03a      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7ff fb04 	bl	8002258 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c54:	f7ff fb00 	bl	8002258 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e160      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f000 face 	bl	8003214 <RCC_Delay>
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7ff faea 	bl	8002258 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7ff fae6 	bl	8002258 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d908      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e146      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	42420000 	.word	0x42420000
 8002ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e9      	bne.n	8002c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a6 	beq.w	8002e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7ff faa7 	bl	8002258 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7ff faa3 	bl	8002258 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e103      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x4c8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x312>
 8002d34:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e02d      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x334>
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a66      	ldr	r2, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	e01c      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x356>
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a60      	ldr	r2, [pc, #384]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x36e>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a5a      	ldr	r2, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7ff fa57 	bl	8002258 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7ff fa53 	bl	8002258 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0b1      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCC_OscConfig+0x37e>
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff fa41 	bl	8002258 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7ff fa3d 	bl	8002258 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e09b      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d061      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d146      	bne.n	8002eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b33      	ldr	r3, [pc, #204]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff fa11 	bl	8002258 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff fa0d 	bl	8002258 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e06d      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4921      	ldr	r1, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a19      	ldr	r1, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	430b      	orrs	r3, r1
 8002e86:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7ff f9e1 	bl	8002258 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7ff f9dd 	bl	8002258 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e03d      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46a>
 8002eb8:	e035      	b.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f9ca 	bl	8002258 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7ff f9c6 	bl	8002258 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e026      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x498>
 8002ee6:	e01e      	b.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e019      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x500>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d0      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4965      	ldr	r1, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d040      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e073      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4936      	ldr	r1, [pc, #216]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7ff f918 	bl	8002258 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7ff f914 	bl	8002258 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e053      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d210      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4922      	ldr	r1, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1cc>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f876 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08008f50 	.word	0x08008f50
 8003100:	20000000 	.word	0x20000000
 8003104:	20000008 	.word	0x20000008

08003108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_GetSysClockFreq+0x94>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x30>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x36>
 8003136:	e027      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800313a:	613b      	str	r3, [r7, #16]
      break;
 800313c:	e027      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003148:	5cd3      	ldrb	r3, [r2, r3]
 800314a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_GetSysClockFreq+0x94>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0c5b      	lsrs	r3, r3, #17
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	fb03 f202 	mul.w	r2, r3, r2
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e004      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	613b      	str	r3, [r7, #16]
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800318a:	613b      	str	r3, [r7, #16]
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	693b      	ldr	r3, [r7, #16]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	007a1200 	.word	0x007a1200
 80031a4:	08008f68 	.word	0x08008f68
 80031a8:	08008f78 	.word	0x08008f78
 80031ac:	003d0900 	.word	0x003d0900

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000000 	.word	0x20000000

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c8:	f7ff fff2 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08008f60 	.word	0x08008f60

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f0:	f7ff ffde 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	08008f60 	.word	0x08008f60

08003214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <RCC_Delay+0x34>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <RCC_Delay+0x38>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a5b      	lsrs	r3, r3, #9
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003230:	bf00      	nop
  }
  while (Delay --);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f9      	bne.n	8003230 <RCC_Delay+0x1c>
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000000 	.word	0x20000000
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e041      	b.n	80032e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe fcde 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fd0e 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e044      	b.n	8003392 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_TIM_Base_Start_IT+0xac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d018      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x6c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x6c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333c:	d00e      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x6c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x6c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_TIM_Base_Start_IT+0xb8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x6c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_TIM_Base_Start_IT+0xbc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d111      	bne.n	8003380 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d010      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	e007      	b.n	8003390 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40013400 	.word	0x40013400
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00

080033b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e041      	b.n	8003446 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f839 	bl	800344e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 fc5e 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_IC_Start_IT+0x1e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e013      	b.n	80034a6 <HAL_TIM_IC_Start_IT+0x46>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_IC_Start_IT+0x2e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e00b      	b.n	80034a6 <HAL_TIM_IC_Start_IT+0x46>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_IC_Start_IT+0x3e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e003      	b.n	80034a6 <HAL_TIM_IC_Start_IT+0x46>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <HAL_TIM_IC_Start_IT+0x58>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e013      	b.n	80034e0 <HAL_TIM_IC_Start_IT+0x80>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d104      	bne.n	80034c8 <HAL_TIM_IC_Start_IT+0x68>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	e00b      	b.n	80034e0 <HAL_TIM_IC_Start_IT+0x80>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d104      	bne.n	80034d8 <HAL_TIM_IC_Start_IT+0x78>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e003      	b.n	80034e0 <HAL_TIM_IC_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80034e8:	7b7b      	ldrb	r3, [r7, #13]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0c2      	b.n	8003678 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0xa2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	e013      	b.n	800352a <HAL_TIM_IC_Start_IT+0xca>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0xb2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	e00b      	b.n	800352a <HAL_TIM_IC_Start_IT+0xca>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0xc2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	e003      	b.n	800352a <HAL_TIM_IC_Start_IT+0xca>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_TIM_IC_Start_IT+0xda>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003538:	e013      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x102>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d104      	bne.n	800354a <HAL_TIM_IC_Start_IT+0xea>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003548:	e00b      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x102>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <HAL_TIM_IC_Start_IT+0xfa>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003558:	e003      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x102>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d841      	bhi.n	80035ec <HAL_TIM_IC_Start_IT+0x18c>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_TIM_IC_Start_IT+0x110>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035ed 	.word	0x080035ed
 8003578:	080035ed 	.word	0x080035ed
 800357c:	080035ed 	.word	0x080035ed
 8003580:	080035b7 	.word	0x080035b7
 8003584:	080035ed 	.word	0x080035ed
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080035ed 	.word	0x080035ed
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035ed 	.word	0x080035ed
 8003598:	080035ed 	.word	0x080035ed
 800359c:	080035ed 	.word	0x080035ed
 80035a0:	080035db 	.word	0x080035db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0202 	orr.w	r2, r2, #2
 80035b2:	60da      	str	r2, [r3, #12]
      break;
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0204 	orr.w	r2, r2, #4
 80035c4:	60da      	str	r2, [r3, #12]
      break;
 80035c6:	e014      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0208 	orr.w	r2, r2, #8
 80035d6:	60da      	str	r2, [r3, #12]
      break;
 80035d8:	e00b      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0210 	orr.w	r2, r2, #16
 80035e8:	60da      	str	r2, [r3, #12]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d13e      	bne.n	8003676 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe10 	bl	8004226 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <HAL_TIM_IC_Start_IT+0x220>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x1e2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_TIM_IC_Start_IT+0x224>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x1e2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003622:	d00e      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x1e2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIM_IC_Start_IT+0x228>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x1e2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_TIM_IC_Start_IT+0x22c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x1e2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_TIM_IC_Start_IT+0x230>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d111      	bne.n	8003666 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d010      	beq.n	8003676 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	e007      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40013400 	.word	0x40013400
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe fc76 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 faca 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fad0 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fc4c 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 faa0 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 faa6 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fc22 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa76 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa7c 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe fbf8 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa4c 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa52 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe fc3e 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fd8b 	bl	800435a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa16 	bl	8003c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0220 	mvn.w	r2, #32
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd56 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80038be:	2302      	movs	r3, #2
 80038c0:	e088      	b.n	80039d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80038e0:	f000 faf2 	bl	8003ec8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020c 	bic.w	r2, r2, #12
 80038f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	e060      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d11c      	bne.n	8003948 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800391e:	f000 fb67 	bl	8003ff0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003930:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6999      	ldr	r1, [r3, #24]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	021a      	lsls	r2, r3, #8
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
 8003946:	e040      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11b      	bne.n	8003986 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800395e:	f000 fbb2 	bl	80040c6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020c 	bic.w	r2, r2, #12
 8003970:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
 8003984:	e021      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d11c      	bne.n	80039c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800399c:	f000 fbce 	bl	800413c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69d9      	ldr	r1, [r3, #28]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	61da      	str	r2, [r3, #28]
 80039c4:	e001      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIM_ConfigClockSource+0x1c>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e0b4      	b.n	8003b62 <HAL_TIM_ConfigClockSource+0x186>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d03e      	beq.n	8003ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	f200 8087 	bhi.w	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	f000 8086 	beq.w	8003b4e <HAL_TIM_ConfigClockSource+0x172>
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a46:	d87f      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b70      	cmp	r3, #112	; 0x70
 8003a4a:	d01a      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xa6>
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d87b      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b60      	cmp	r3, #96	; 0x60
 8003a52:	d050      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a54:	2b60      	cmp	r3, #96	; 0x60
 8003a56:	d877      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b50      	cmp	r3, #80	; 0x50
 8003a5a:	d03c      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a5c:	2b50      	cmp	r3, #80	; 0x50
 8003a5e:	d873      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d058      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x13a>
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d86f      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b30      	cmp	r3, #48	; 0x30
 8003a6a:	d064      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d86b      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d060      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d867      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05c      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d05a      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x15a>
 8003a80:	e062      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a92:	f000 fba9 	bl	80041e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	609a      	str	r2, [r3, #8]
      break;
 8003aae:	e04f      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac0:	f000 fb92 	bl	80041e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad2:	609a      	str	r2, [r3, #8]
      break;
 8003ad4:	e03c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f000 fa56 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2150      	movs	r1, #80	; 0x50
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fb60 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003af4:	e02c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 fab0 	bl	8004068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2160      	movs	r1, #96	; 0x60
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fb50 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003b14:	e01c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 fa36 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fb40 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003b34:	e00c      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f000 fb37 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003b46:	e003      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e031      	b.n	8003be6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f905 	bl	8003da4 <TIM_SlaveTimer_SetConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e018      	b.n	8003be6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d831      	bhi.n	8003c68 <HAL_TIM_ReadCapturedValue+0x78>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003c69 	.word	0x08003c69
 8003c1c:	08003c4b 	.word	0x08003c4b
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c69 	.word	0x08003c69
 8003c3c:	08003c5f 	.word	0x08003c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	60fb      	str	r3, [r7, #12]

      break;
 8003c48:	e00f      	b.n	8003c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	60fb      	str	r3, [r7, #12]

      break;
 8003c52:	e00a      	b.n	8003c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	60fb      	str	r3, [r7, #12]

      break;
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	60fb      	str	r3, [r7, #12]

      break;
 8003c66:	e000      	b.n	8003c6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c68:	bf00      	nop
  }

  return tmpreg;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <TIM_Base_SetConfig+0xe0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <TIM_Base_SetConfig+0xe4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <TIM_Base_SetConfig+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <TIM_Base_SetConfig+0xec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <TIM_Base_SetConfig+0xf0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <TIM_Base_SetConfig+0xe0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <TIM_Base_SetConfig+0x82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_Base_SetConfig+0xe4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00f      	beq.n	8003d32 <TIM_Base_SetConfig+0x82>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0x82>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <TIM_Base_SetConfig+0xe8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0x82>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <TIM_Base_SetConfig+0xec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0x82>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <TIM_Base_SetConfig+0xf0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <TIM_Base_SetConfig+0xe0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0xc8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <TIM_Base_SetConfig+0xe4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d103      	bne.n	8003d80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	615a      	str	r2, [r3, #20]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00

08003da4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b70      	cmp	r3, #112	; 0x70
 8003dec:	d01a      	beq.n	8003e24 <TIM_SlaveTimer_SetConfig+0x80>
 8003dee:	2b70      	cmp	r3, #112	; 0x70
 8003df0:	d860      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003df2:	2b60      	cmp	r3, #96	; 0x60
 8003df4:	d054      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003df6:	2b60      	cmp	r3, #96	; 0x60
 8003df8:	d85c      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003dfa:	2b50      	cmp	r3, #80	; 0x50
 8003dfc:	d046      	beq.n	8003e8c <TIM_SlaveTimer_SetConfig+0xe8>
 8003dfe:	2b50      	cmp	r3, #80	; 0x50
 8003e00:	d858      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d019      	beq.n	8003e3a <TIM_SlaveTimer_SetConfig+0x96>
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d854      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e0a:	2b30      	cmp	r3, #48	; 0x30
 8003e0c:	d055      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x116>
 8003e0e:	2b30      	cmp	r3, #48	; 0x30
 8003e10:	d850      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d051      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x116>
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d84c      	bhi.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04d      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x116>
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d04b      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x116>
 8003e22:	e047      	b.n	8003eb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	f000 f9d8 	bl	80041e8 <TIM_ETR_SetConfig>
      break;
 8003e38:	e040      	b.n	8003ebc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d101      	bne.n	8003e46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e03b      	b.n	8003ebe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
      break;
 8003e8a:	e017      	b.n	8003ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f000 f87b 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      break;
 8003e9e:	e00d      	b.n	8003ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eac:	461a      	mov	r2, r3
 8003eae:	f000 f8db 	bl	8004068 <TIM_TI2_ConfigInputStage>
      break;
 8003eb2:	e003      	b.n	8003ebc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e000      	b.n	8003ebc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003eba:	bf00      	nop
  }

  return status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 0201 	bic.w	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_TI1_SetConfig+0xb8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_TI1_SetConfig+0x56>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <TIM_TI1_SetConfig+0xbc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_TI1_SetConfig+0x56>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d00b      	beq.n	8003f1e <TIM_TI1_SetConfig+0x56>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <TIM_TI1_SetConfig+0xc0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_TI1_SetConfig+0x56>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <TIM_TI1_SetConfig+0xc4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_TI1_SetConfig+0x56>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <TIM_TI1_SetConfig+0xc8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <TIM_TI1_SetConfig+0x5a>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <TIM_TI1_SetConfig+0x5c>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e003      	b.n	8003f42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f023 030a 	bic.w	r3, r3, #10
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 030a 	and.w	r3, r3, #10
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f023 0210 	bic.w	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	b29b      	uxth	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004042:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0210 	bic.w	r2, r3, #16
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004102:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	b2db      	uxtb	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004116:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	031b      	lsls	r3, r3, #12
 8004180:	b29b      	uxth	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	031b      	lsls	r3, r3, #12
 8004194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f043 0307 	orr.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2201      	movs	r2, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	43db      	mvns	r3, r3
 8004248:	401a      	ands	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	431a      	orrs	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
	...

08004270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004284:	2302      	movs	r3, #2
 8004286:	e050      	b.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d018      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00e      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a12      	ldr	r2, [pc, #72]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10c      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40013400 	.word	0x40013400
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e042      	b.n	8004404 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd fcdc 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f91d 	bl	80045f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	d16d      	bne.n	8004508 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Transmit+0x2c>
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e066      	b.n	800450a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fd ff05 	bl	8002258 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d108      	bne.n	8004478 <HAL_UART_Transmit+0x6c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e003      	b.n	8004480 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004480:	e02a      	b.n	80044d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f840 	bl	8004512 <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e036      	b.n	800450a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3302      	adds	r3, #2
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e007      	b.n	80044ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1cf      	bne.n	8004482 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2140      	movs	r1, #64	; 0x40
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f810 	bl	8004512 <UART_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e006      	b.n	800450a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b090      	sub	sp, #64	; 0x40
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004522:	e050      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d04c      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800452c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0x30>
 8004532:	f7fd fe91 	bl	8002258 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453e:	429a      	cmp	r2, r3
 8004540:	d241      	bcs.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004562:	637a      	str	r2, [r7, #52]	; 0x34
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004596:	623a      	str	r2, [r7, #32]
 8004598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	69f9      	ldr	r1, [r7, #28]
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e5      	bne.n	8004576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e00f      	b.n	80045e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d09f      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3740      	adds	r7, #64	; 0x40
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800462a:	f023 030c 	bic.w	r3, r3, #12
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	430b      	orrs	r3, r1
 8004636:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <UART_SetConfig+0x114>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fdc8 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	e002      	b.n	8004666 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fe fdb0 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004664:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	0119      	lsls	r1, r3, #4
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	fbb2 f2f3 	udiv	r2, r2, r3
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <UART_SetConfig+0x118>)
 800469e:	fba3 0302 	umull	r0, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2064      	movs	r0, #100	; 0x64
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	4419      	add	r1, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <UART_SetConfig+0x118>)
 80046d6:	fba3 0302 	umull	r0, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2064      	movs	r0, #100	; 0x64
 80046de:	fb00 f303 	mul.w	r3, r0, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <UART_SetConfig+0x118>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	440a      	add	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40013800 	.word	0x40013800
 8004708:	51eb851f 	.word	0x51eb851f

0800470c <__cvt>:
 800470c:	2b00      	cmp	r3, #0
 800470e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004712:	461f      	mov	r7, r3
 8004714:	bfbb      	ittet	lt
 8004716:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800471a:	461f      	movlt	r7, r3
 800471c:	2300      	movge	r3, #0
 800471e:	232d      	movlt	r3, #45	; 0x2d
 8004720:	b088      	sub	sp, #32
 8004722:	4614      	mov	r4, r2
 8004724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004726:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004728:	7013      	strb	r3, [r2, #0]
 800472a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800472c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004730:	f023 0820 	bic.w	r8, r3, #32
 8004734:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004738:	d005      	beq.n	8004746 <__cvt+0x3a>
 800473a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800473e:	d100      	bne.n	8004742 <__cvt+0x36>
 8004740:	3501      	adds	r5, #1
 8004742:	2302      	movs	r3, #2
 8004744:	e000      	b.n	8004748 <__cvt+0x3c>
 8004746:	2303      	movs	r3, #3
 8004748:	aa07      	add	r2, sp, #28
 800474a:	9204      	str	r2, [sp, #16]
 800474c:	aa06      	add	r2, sp, #24
 800474e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004752:	e9cd 3500 	strd	r3, r5, [sp]
 8004756:	4622      	mov	r2, r4
 8004758:	463b      	mov	r3, r7
 800475a:	f001 f975 	bl	8005a48 <_dtoa_r>
 800475e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004762:	4606      	mov	r6, r0
 8004764:	d102      	bne.n	800476c <__cvt+0x60>
 8004766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004768:	07db      	lsls	r3, r3, #31
 800476a:	d522      	bpl.n	80047b2 <__cvt+0xa6>
 800476c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004770:	eb06 0905 	add.w	r9, r6, r5
 8004774:	d110      	bne.n	8004798 <__cvt+0x8c>
 8004776:	7833      	ldrb	r3, [r6, #0]
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	d10a      	bne.n	8004792 <__cvt+0x86>
 800477c:	2200      	movs	r2, #0
 800477e:	2300      	movs	r3, #0
 8004780:	4620      	mov	r0, r4
 8004782:	4639      	mov	r1, r7
 8004784:	f7fc f97c 	bl	8000a80 <__aeabi_dcmpeq>
 8004788:	b918      	cbnz	r0, 8004792 <__cvt+0x86>
 800478a:	f1c5 0501 	rsb	r5, r5, #1
 800478e:	f8ca 5000 	str.w	r5, [sl]
 8004792:	f8da 3000 	ldr.w	r3, [sl]
 8004796:	4499      	add	r9, r3
 8004798:	2200      	movs	r2, #0
 800479a:	2300      	movs	r3, #0
 800479c:	4620      	mov	r0, r4
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fc f96e 	bl	8000a80 <__aeabi_dcmpeq>
 80047a4:	b108      	cbz	r0, 80047aa <__cvt+0x9e>
 80047a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80047aa:	2230      	movs	r2, #48	; 0x30
 80047ac:	9b07      	ldr	r3, [sp, #28]
 80047ae:	454b      	cmp	r3, r9
 80047b0:	d307      	bcc.n	80047c2 <__cvt+0xb6>
 80047b2:	4630      	mov	r0, r6
 80047b4:	9b07      	ldr	r3, [sp, #28]
 80047b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047b8:	1b9b      	subs	r3, r3, r6
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	b008      	add	sp, #32
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	9107      	str	r1, [sp, #28]
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e7f0      	b.n	80047ac <__cvt+0xa0>

080047ca <__exponent>:
 80047ca:	4603      	mov	r3, r0
 80047cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ce:	2900      	cmp	r1, #0
 80047d0:	f803 2b02 	strb.w	r2, [r3], #2
 80047d4:	bfb6      	itet	lt
 80047d6:	222d      	movlt	r2, #45	; 0x2d
 80047d8:	222b      	movge	r2, #43	; 0x2b
 80047da:	4249      	neglt	r1, r1
 80047dc:	2909      	cmp	r1, #9
 80047de:	7042      	strb	r2, [r0, #1]
 80047e0:	dd2a      	ble.n	8004838 <__exponent+0x6e>
 80047e2:	f10d 0207 	add.w	r2, sp, #7
 80047e6:	4617      	mov	r7, r2
 80047e8:	260a      	movs	r6, #10
 80047ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80047ee:	4694      	mov	ip, r2
 80047f0:	fb06 1415 	mls	r4, r6, r5, r1
 80047f4:	3430      	adds	r4, #48	; 0x30
 80047f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80047fa:	460c      	mov	r4, r1
 80047fc:	2c63      	cmp	r4, #99	; 0x63
 80047fe:	4629      	mov	r1, r5
 8004800:	f102 32ff 	add.w	r2, r2, #4294967295
 8004804:	dcf1      	bgt.n	80047ea <__exponent+0x20>
 8004806:	3130      	adds	r1, #48	; 0x30
 8004808:	f1ac 0402 	sub.w	r4, ip, #2
 800480c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004810:	4622      	mov	r2, r4
 8004812:	1c41      	adds	r1, r0, #1
 8004814:	42ba      	cmp	r2, r7
 8004816:	d30a      	bcc.n	800482e <__exponent+0x64>
 8004818:	f10d 0209 	add.w	r2, sp, #9
 800481c:	eba2 020c 	sub.w	r2, r2, ip
 8004820:	42bc      	cmp	r4, r7
 8004822:	bf88      	it	hi
 8004824:	2200      	movhi	r2, #0
 8004826:	4413      	add	r3, r2
 8004828:	1a18      	subs	r0, r3, r0
 800482a:	b003      	add	sp, #12
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004832:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004836:	e7ed      	b.n	8004814 <__exponent+0x4a>
 8004838:	2330      	movs	r3, #48	; 0x30
 800483a:	3130      	adds	r1, #48	; 0x30
 800483c:	7083      	strb	r3, [r0, #2]
 800483e:	70c1      	strb	r1, [r0, #3]
 8004840:	1d03      	adds	r3, r0, #4
 8004842:	e7f1      	b.n	8004828 <__exponent+0x5e>

08004844 <_printf_float>:
 8004844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004848:	b091      	sub	sp, #68	; 0x44
 800484a:	460c      	mov	r4, r1
 800484c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004850:	4616      	mov	r6, r2
 8004852:	461f      	mov	r7, r3
 8004854:	4605      	mov	r5, r0
 8004856:	f000 ffe3 	bl	8005820 <_localeconv_r>
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	9309      	str	r3, [sp, #36]	; 0x24
 8004860:	f7fb fce2 	bl	8000228 <strlen>
 8004864:	2300      	movs	r3, #0
 8004866:	930e      	str	r3, [sp, #56]	; 0x38
 8004868:	f8d8 3000 	ldr.w	r3, [r8]
 800486c:	900a      	str	r0, [sp, #40]	; 0x28
 800486e:	3307      	adds	r3, #7
 8004870:	f023 0307 	bic.w	r3, r3, #7
 8004874:	f103 0208 	add.w	r2, r3, #8
 8004878:	f894 9018 	ldrb.w	r9, [r4, #24]
 800487c:	f8d4 b000 	ldr.w	fp, [r4]
 8004880:	f8c8 2000 	str.w	r2, [r8]
 8004884:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004888:	4652      	mov	r2, sl
 800488a:	4643      	mov	r3, r8
 800488c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004890:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004894:	930b      	str	r3, [sp, #44]	; 0x2c
 8004896:	f04f 32ff 	mov.w	r2, #4294967295
 800489a:	4650      	mov	r0, sl
 800489c:	4b9c      	ldr	r3, [pc, #624]	; (8004b10 <_printf_float+0x2cc>)
 800489e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048a0:	f7fc f920 	bl	8000ae4 <__aeabi_dcmpun>
 80048a4:	bb70      	cbnz	r0, 8004904 <_printf_float+0xc0>
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	4650      	mov	r0, sl
 80048ac:	4b98      	ldr	r3, [pc, #608]	; (8004b10 <_printf_float+0x2cc>)
 80048ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048b0:	f7fc f8fa 	bl	8000aa8 <__aeabi_dcmple>
 80048b4:	bb30      	cbnz	r0, 8004904 <_printf_float+0xc0>
 80048b6:	2200      	movs	r2, #0
 80048b8:	2300      	movs	r3, #0
 80048ba:	4650      	mov	r0, sl
 80048bc:	4641      	mov	r1, r8
 80048be:	f7fc f8e9 	bl	8000a94 <__aeabi_dcmplt>
 80048c2:	b110      	cbz	r0, 80048ca <_printf_float+0x86>
 80048c4:	232d      	movs	r3, #45	; 0x2d
 80048c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ca:	4a92      	ldr	r2, [pc, #584]	; (8004b14 <_printf_float+0x2d0>)
 80048cc:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <_printf_float+0x2d4>)
 80048ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048d2:	bf94      	ite	ls
 80048d4:	4690      	movls	r8, r2
 80048d6:	4698      	movhi	r8, r3
 80048d8:	2303      	movs	r3, #3
 80048da:	f04f 0a00 	mov.w	sl, #0
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	f02b 0304 	bic.w	r3, fp, #4
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	4633      	mov	r3, r6
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	9700      	str	r7, [sp, #0]
 80048ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80048f0:	f000 f9d6 	bl	8004ca0 <_printf_common>
 80048f4:	3001      	adds	r0, #1
 80048f6:	f040 8090 	bne.w	8004a1a <_printf_float+0x1d6>
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	b011      	add	sp, #68	; 0x44
 8004900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004904:	4652      	mov	r2, sl
 8004906:	4643      	mov	r3, r8
 8004908:	4650      	mov	r0, sl
 800490a:	4641      	mov	r1, r8
 800490c:	f7fc f8ea 	bl	8000ae4 <__aeabi_dcmpun>
 8004910:	b148      	cbz	r0, 8004926 <_printf_float+0xe2>
 8004912:	f1b8 0f00 	cmp.w	r8, #0
 8004916:	bfb8      	it	lt
 8004918:	232d      	movlt	r3, #45	; 0x2d
 800491a:	4a80      	ldr	r2, [pc, #512]	; (8004b1c <_printf_float+0x2d8>)
 800491c:	bfb8      	it	lt
 800491e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004922:	4b7f      	ldr	r3, [pc, #508]	; (8004b20 <_printf_float+0x2dc>)
 8004924:	e7d3      	b.n	80048ce <_printf_float+0x8a>
 8004926:	6863      	ldr	r3, [r4, #4]
 8004928:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	d142      	bne.n	80049b6 <_printf_float+0x172>
 8004930:	2306      	movs	r3, #6
 8004932:	6063      	str	r3, [r4, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	9206      	str	r2, [sp, #24]
 8004938:	aa0e      	add	r2, sp, #56	; 0x38
 800493a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800493e:	aa0d      	add	r2, sp, #52	; 0x34
 8004940:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004944:	9203      	str	r2, [sp, #12]
 8004946:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800494a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	4652      	mov	r2, sl
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4628      	mov	r0, r5
 8004958:	4643      	mov	r3, r8
 800495a:	910b      	str	r1, [sp, #44]	; 0x2c
 800495c:	f7ff fed6 	bl	800470c <__cvt>
 8004960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004962:	4680      	mov	r8, r0
 8004964:	2947      	cmp	r1, #71	; 0x47
 8004966:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004968:	d108      	bne.n	800497c <_printf_float+0x138>
 800496a:	1cc8      	adds	r0, r1, #3
 800496c:	db02      	blt.n	8004974 <_printf_float+0x130>
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	4299      	cmp	r1, r3
 8004972:	dd40      	ble.n	80049f6 <_printf_float+0x1b2>
 8004974:	f1a9 0902 	sub.w	r9, r9, #2
 8004978:	fa5f f989 	uxtb.w	r9, r9
 800497c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004980:	d81f      	bhi.n	80049c2 <_printf_float+0x17e>
 8004982:	464a      	mov	r2, r9
 8004984:	3901      	subs	r1, #1
 8004986:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800498a:	910d      	str	r1, [sp, #52]	; 0x34
 800498c:	f7ff ff1d 	bl	80047ca <__exponent>
 8004990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004992:	4682      	mov	sl, r0
 8004994:	1813      	adds	r3, r2, r0
 8004996:	2a01      	cmp	r2, #1
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	dc02      	bgt.n	80049a2 <_printf_float+0x15e>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	07d2      	lsls	r2, r2, #31
 80049a0:	d501      	bpl.n	80049a6 <_printf_float+0x162>
 80049a2:	3301      	adds	r3, #1
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d09b      	beq.n	80048e6 <_printf_float+0xa2>
 80049ae:	232d      	movs	r3, #45	; 0x2d
 80049b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b4:	e797      	b.n	80048e6 <_printf_float+0xa2>
 80049b6:	2947      	cmp	r1, #71	; 0x47
 80049b8:	d1bc      	bne.n	8004934 <_printf_float+0xf0>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1ba      	bne.n	8004934 <_printf_float+0xf0>
 80049be:	2301      	movs	r3, #1
 80049c0:	e7b7      	b.n	8004932 <_printf_float+0xee>
 80049c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80049c6:	d118      	bne.n	80049fa <_printf_float+0x1b6>
 80049c8:	2900      	cmp	r1, #0
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	dd0b      	ble.n	80049e6 <_printf_float+0x1a2>
 80049ce:	6121      	str	r1, [r4, #16]
 80049d0:	b913      	cbnz	r3, 80049d8 <_printf_float+0x194>
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	07d0      	lsls	r0, r2, #31
 80049d6:	d502      	bpl.n	80049de <_printf_float+0x19a>
 80049d8:	3301      	adds	r3, #1
 80049da:	440b      	add	r3, r1
 80049dc:	6123      	str	r3, [r4, #16]
 80049de:	f04f 0a00 	mov.w	sl, #0
 80049e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80049e4:	e7df      	b.n	80049a6 <_printf_float+0x162>
 80049e6:	b913      	cbnz	r3, 80049ee <_printf_float+0x1aa>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	07d2      	lsls	r2, r2, #31
 80049ec:	d501      	bpl.n	80049f2 <_printf_float+0x1ae>
 80049ee:	3302      	adds	r3, #2
 80049f0:	e7f4      	b.n	80049dc <_printf_float+0x198>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7f2      	b.n	80049dc <_printf_float+0x198>
 80049f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049fc:	4299      	cmp	r1, r3
 80049fe:	db05      	blt.n	8004a0c <_printf_float+0x1c8>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	6121      	str	r1, [r4, #16]
 8004a04:	07d8      	lsls	r0, r3, #31
 8004a06:	d5ea      	bpl.n	80049de <_printf_float+0x19a>
 8004a08:	1c4b      	adds	r3, r1, #1
 8004a0a:	e7e7      	b.n	80049dc <_printf_float+0x198>
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	bfcc      	ite	gt
 8004a10:	2201      	movgt	r2, #1
 8004a12:	f1c1 0202 	rsble	r2, r1, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	e7e0      	b.n	80049dc <_printf_float+0x198>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	055a      	lsls	r2, r3, #21
 8004a1e:	d407      	bmi.n	8004a30 <_printf_float+0x1ec>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	4642      	mov	r2, r8
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d12b      	bne.n	8004a86 <_printf_float+0x242>
 8004a2e:	e764      	b.n	80048fa <_printf_float+0xb6>
 8004a30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a34:	f240 80dd 	bls.w	8004bf2 <_printf_float+0x3ae>
 8004a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f7fc f81e 	bl	8000a80 <__aeabi_dcmpeq>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d033      	beq.n	8004ab0 <_printf_float+0x26c>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	4a35      	ldr	r2, [pc, #212]	; (8004b24 <_printf_float+0x2e0>)
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f af51 	beq.w	80048fa <_printf_float+0xb6>
 8004a58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	db02      	blt.n	8004a66 <_printf_float+0x222>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07d8      	lsls	r0, r3, #31
 8004a64:	d50f      	bpl.n	8004a86 <_printf_float+0x242>
 8004a66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f af42 	beq.w	80048fa <_printf_float+0xb6>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	f104 091a 	add.w	r9, r4, #26
 8004a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a80:	3b01      	subs	r3, #1
 8004a82:	4543      	cmp	r3, r8
 8004a84:	dc09      	bgt.n	8004a9a <_printf_float+0x256>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	079b      	lsls	r3, r3, #30
 8004a8a:	f100 8104 	bmi.w	8004c96 <_printf_float+0x452>
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a92:	4298      	cmp	r0, r3
 8004a94:	bfb8      	it	lt
 8004a96:	4618      	movlt	r0, r3
 8004a98:	e731      	b.n	80048fe <_printf_float+0xba>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f af28 	beq.w	80048fa <_printf_float+0xb6>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	e7e6      	b.n	8004a7e <_printf_float+0x23a>
 8004ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	dc38      	bgt.n	8004b28 <_printf_float+0x2e4>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <_printf_float+0x2e0>)
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f af1a 	beq.w	80048fa <_printf_float+0xb6>
 8004ac6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d102      	bne.n	8004ad4 <_printf_float+0x290>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	07d9      	lsls	r1, r3, #31
 8004ad2:	d5d8      	bpl.n	8004a86 <_printf_float+0x242>
 8004ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f43f af0b 	beq.w	80048fa <_printf_float+0xb6>
 8004ae4:	f04f 0900 	mov.w	r9, #0
 8004ae8:	f104 0a1a 	add.w	sl, r4, #26
 8004aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aee:	425b      	negs	r3, r3
 8004af0:	454b      	cmp	r3, r9
 8004af2:	dc01      	bgt.n	8004af8 <_printf_float+0x2b4>
 8004af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af6:	e794      	b.n	8004a22 <_printf_float+0x1de>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4652      	mov	r2, sl
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f aef9 	beq.w	80048fa <_printf_float+0xb6>
 8004b08:	f109 0901 	add.w	r9, r9, #1
 8004b0c:	e7ee      	b.n	8004aec <_printf_float+0x2a8>
 8004b0e:	bf00      	nop
 8004b10:	7fefffff 	.word	0x7fefffff
 8004b14:	08008f7a 	.word	0x08008f7a
 8004b18:	08008f7e 	.word	0x08008f7e
 8004b1c:	08008f82 	.word	0x08008f82
 8004b20:	08008f86 	.word	0x08008f86
 8004b24:	08008f8a 	.word	0x08008f8a
 8004b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bfa8      	it	ge
 8004b30:	461a      	movge	r2, r3
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	4691      	mov	r9, r2
 8004b36:	dc37      	bgt.n	8004ba8 <_printf_float+0x364>
 8004b38:	f04f 0b00 	mov.w	fp, #0
 8004b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b40:	f104 021a 	add.w	r2, r4, #26
 8004b44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b48:	ebaa 0309 	sub.w	r3, sl, r9
 8004b4c:	455b      	cmp	r3, fp
 8004b4e:	dc33      	bgt.n	8004bb8 <_printf_float+0x374>
 8004b50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b54:	429a      	cmp	r2, r3
 8004b56:	db3b      	blt.n	8004bd0 <_printf_float+0x38c>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07da      	lsls	r2, r3, #31
 8004b5c:	d438      	bmi.n	8004bd0 <_printf_float+0x38c>
 8004b5e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b62:	eba2 0903 	sub.w	r9, r2, r3
 8004b66:	eba2 020a 	sub.w	r2, r2, sl
 8004b6a:	4591      	cmp	r9, r2
 8004b6c:	bfa8      	it	ge
 8004b6e:	4691      	movge	r9, r2
 8004b70:	f1b9 0f00 	cmp.w	r9, #0
 8004b74:	dc34      	bgt.n	8004be0 <_printf_float+0x39c>
 8004b76:	f04f 0800 	mov.w	r8, #0
 8004b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b7e:	f104 0a1a 	add.w	sl, r4, #26
 8004b82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	eba3 0309 	sub.w	r3, r3, r9
 8004b8c:	4543      	cmp	r3, r8
 8004b8e:	f77f af7a 	ble.w	8004a86 <_printf_float+0x242>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4652      	mov	r2, sl
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f43f aeac 	beq.w	80048fa <_printf_float+0xb6>
 8004ba2:	f108 0801 	add.w	r8, r8, #1
 8004ba6:	e7ec      	b.n	8004b82 <_printf_float+0x33e>
 8004ba8:	4613      	mov	r3, r2
 8004baa:	4631      	mov	r1, r6
 8004bac:	4642      	mov	r2, r8
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d1c0      	bne.n	8004b38 <_printf_float+0x2f4>
 8004bb6:	e6a0      	b.n	80048fa <_printf_float+0xb6>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f ae99 	beq.w	80048fa <_printf_float+0xb6>
 8004bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bca:	f10b 0b01 	add.w	fp, fp, #1
 8004bce:	e7b9      	b.n	8004b44 <_printf_float+0x300>
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d1bf      	bne.n	8004b5e <_printf_float+0x31a>
 8004bde:	e68c      	b.n	80048fa <_printf_float+0xb6>
 8004be0:	464b      	mov	r3, r9
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	eb08 020a 	add.w	r2, r8, sl
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	d1c2      	bne.n	8004b76 <_printf_float+0x332>
 8004bf0:	e683      	b.n	80048fa <_printf_float+0xb6>
 8004bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bf4:	2a01      	cmp	r2, #1
 8004bf6:	dc01      	bgt.n	8004bfc <_printf_float+0x3b8>
 8004bf8:	07db      	lsls	r3, r3, #31
 8004bfa:	d539      	bpl.n	8004c70 <_printf_float+0x42c>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4642      	mov	r2, r8
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	f43f ae77 	beq.w	80048fa <_printf_float+0xb6>
 8004c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f ae6f 	beq.w	80048fa <_printf_float+0xb6>
 8004c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c20:	2200      	movs	r2, #0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004c28:	f7fb ff2a 	bl	8000a80 <__aeabi_dcmpeq>
 8004c2c:	b9d8      	cbnz	r0, 8004c66 <_printf_float+0x422>
 8004c2e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004c32:	f108 0201 	add.w	r2, r8, #1
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d10e      	bne.n	8004c5e <_printf_float+0x41a>
 8004c40:	e65b      	b.n	80048fa <_printf_float+0xb6>
 8004c42:	2301      	movs	r3, #1
 8004c44:	464a      	mov	r2, r9
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae54 	beq.w	80048fa <_printf_float+0xb6>
 8004c52:	f108 0801 	add.w	r8, r8, #1
 8004c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	4543      	cmp	r3, r8
 8004c5c:	dcf1      	bgt.n	8004c42 <_printf_float+0x3fe>
 8004c5e:	4653      	mov	r3, sl
 8004c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c64:	e6de      	b.n	8004a24 <_printf_float+0x1e0>
 8004c66:	f04f 0800 	mov.w	r8, #0
 8004c6a:	f104 091a 	add.w	r9, r4, #26
 8004c6e:	e7f2      	b.n	8004c56 <_printf_float+0x412>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4642      	mov	r2, r8
 8004c74:	e7df      	b.n	8004c36 <_printf_float+0x3f2>
 8004c76:	2301      	movs	r3, #1
 8004c78:	464a      	mov	r2, r9
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	f43f ae3a 	beq.w	80048fa <_printf_float+0xb6>
 8004c86:	f108 0801 	add.w	r8, r8, #1
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	4543      	cmp	r3, r8
 8004c92:	dcf0      	bgt.n	8004c76 <_printf_float+0x432>
 8004c94:	e6fb      	b.n	8004a8e <_printf_float+0x24a>
 8004c96:	f04f 0800 	mov.w	r8, #0
 8004c9a:	f104 0919 	add.w	r9, r4, #25
 8004c9e:	e7f4      	b.n	8004c8a <_printf_float+0x446>

08004ca0 <_printf_common>:
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	688a      	ldr	r2, [r1, #8]
 8004caa:	690b      	ldr	r3, [r1, #16]
 8004cac:	4607      	mov	r7, r0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bfb8      	it	lt
 8004cb2:	4613      	movlt	r3, r2
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc0:	b10a      	cbz	r2, 8004cc6 <_printf_common+0x26>
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	0699      	lsls	r1, r3, #26
 8004cca:	bf42      	ittt	mi
 8004ccc:	6833      	ldrmi	r3, [r6, #0]
 8004cce:	3302      	addmi	r3, #2
 8004cd0:	6033      	strmi	r3, [r6, #0]
 8004cd2:	6825      	ldr	r5, [r4, #0]
 8004cd4:	f015 0506 	ands.w	r5, r5, #6
 8004cd8:	d106      	bne.n	8004ce8 <_printf_common+0x48>
 8004cda:	f104 0a19 	add.w	sl, r4, #25
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	6832      	ldr	r2, [r6, #0]
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	42ab      	cmp	r3, r5
 8004ce6:	dc2b      	bgt.n	8004d40 <_printf_common+0xa0>
 8004ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cec:	1e13      	subs	r3, r2, #0
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	bf18      	it	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	0692      	lsls	r2, r2, #26
 8004cf6:	d430      	bmi.n	8004d5a <_printf_common+0xba>
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d00:	47c0      	blx	r8
 8004d02:	3001      	adds	r0, #1
 8004d04:	d023      	beq.n	8004d4e <_printf_common+0xae>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	6922      	ldr	r2, [r4, #16]
 8004d0a:	f003 0306 	and.w	r3, r3, #6
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	bf14      	ite	ne
 8004d12:	2500      	movne	r5, #0
 8004d14:	6833      	ldreq	r3, [r6, #0]
 8004d16:	f04f 0600 	mov.w	r6, #0
 8004d1a:	bf08      	it	eq
 8004d1c:	68e5      	ldreq	r5, [r4, #12]
 8004d1e:	f104 041a 	add.w	r4, r4, #26
 8004d22:	bf08      	it	eq
 8004d24:	1aed      	subeq	r5, r5, r3
 8004d26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d2a:	bf08      	it	eq
 8004d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d30:	4293      	cmp	r3, r2
 8004d32:	bfc4      	itt	gt
 8004d34:	1a9b      	subgt	r3, r3, r2
 8004d36:	18ed      	addgt	r5, r5, r3
 8004d38:	42b5      	cmp	r5, r6
 8004d3a:	d11a      	bne.n	8004d72 <_printf_common+0xd2>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e008      	b.n	8004d52 <_printf_common+0xb2>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4652      	mov	r2, sl
 8004d44:	4649      	mov	r1, r9
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c0      	blx	r8
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d103      	bne.n	8004d56 <_printf_common+0xb6>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	3501      	adds	r5, #1
 8004d58:	e7c1      	b.n	8004cde <_printf_common+0x3e>
 8004d5a:	2030      	movs	r0, #48	; 0x30
 8004d5c:	18e1      	adds	r1, r4, r3
 8004d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d68:	4422      	add	r2, r4
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d70:	e7c2      	b.n	8004cf8 <_printf_common+0x58>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4622      	mov	r2, r4
 8004d76:	4649      	mov	r1, r9
 8004d78:	4638      	mov	r0, r7
 8004d7a:	47c0      	blx	r8
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d0e6      	beq.n	8004d4e <_printf_common+0xae>
 8004d80:	3601      	adds	r6, #1
 8004d82:	e7d9      	b.n	8004d38 <_printf_common+0x98>

08004d84 <_printf_i>:
 8004d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	7e0f      	ldrb	r7, [r1, #24]
 8004d8a:	4691      	mov	r9, r2
 8004d8c:	2f78      	cmp	r7, #120	; 0x78
 8004d8e:	4680      	mov	r8, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	469a      	mov	sl, r3
 8004d94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d9a:	d807      	bhi.n	8004dac <_printf_i+0x28>
 8004d9c:	2f62      	cmp	r7, #98	; 0x62
 8004d9e:	d80a      	bhi.n	8004db6 <_printf_i+0x32>
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	f000 80d5 	beq.w	8004f50 <_printf_i+0x1cc>
 8004da6:	2f58      	cmp	r7, #88	; 0x58
 8004da8:	f000 80c1 	beq.w	8004f2e <_printf_i+0x1aa>
 8004dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004db4:	e03a      	b.n	8004e2c <_printf_i+0xa8>
 8004db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dba:	2b15      	cmp	r3, #21
 8004dbc:	d8f6      	bhi.n	8004dac <_printf_i+0x28>
 8004dbe:	a101      	add	r1, pc, #4	; (adr r1, 8004dc4 <_printf_i+0x40>)
 8004dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004dad 	.word	0x08004dad
 8004dd0:	08004dad 	.word	0x08004dad
 8004dd4:	08004dad 	.word	0x08004dad
 8004dd8:	08004dad 	.word	0x08004dad
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004dad 	.word	0x08004dad
 8004de4:	08004dad 	.word	0x08004dad
 8004de8:	08004dad 	.word	0x08004dad
 8004dec:	08004dad 	.word	0x08004dad
 8004df0:	08004f37 	.word	0x08004f37
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004ef1 	.word	0x08004ef1
 8004dfc:	08004dad 	.word	0x08004dad
 8004e00:	08004dad 	.word	0x08004dad
 8004e04:	08004f59 	.word	0x08004f59
 8004e08:	08004dad 	.word	0x08004dad
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004dad 	.word	0x08004dad
 8004e14:	08004dad 	.word	0x08004dad
 8004e18:	08004ef9 	.word	0x08004ef9
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	602a      	str	r2, [r5, #0]
 8004e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0a0      	b.n	8004f72 <_printf_i+0x1ee>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	0607      	lsls	r7, r0, #24
 8004e36:	f103 0104 	add.w	r1, r3, #4
 8004e3a:	6029      	str	r1, [r5, #0]
 8004e3c:	d501      	bpl.n	8004e42 <_printf_i+0xbe>
 8004e3e:	681e      	ldr	r6, [r3, #0]
 8004e40:	e003      	b.n	8004e4a <_printf_i+0xc6>
 8004e42:	0646      	lsls	r6, r0, #25
 8004e44:	d5fb      	bpl.n	8004e3e <_printf_i+0xba>
 8004e46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	da03      	bge.n	8004e56 <_printf_i+0xd2>
 8004e4e:	232d      	movs	r3, #45	; 0x2d
 8004e50:	4276      	negs	r6, r6
 8004e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e56:	230a      	movs	r3, #10
 8004e58:	4859      	ldr	r0, [pc, #356]	; (8004fc0 <_printf_i+0x23c>)
 8004e5a:	e012      	b.n	8004e82 <_printf_i+0xfe>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	6820      	ldr	r0, [r4, #0]
 8004e60:	1d19      	adds	r1, r3, #4
 8004e62:	6029      	str	r1, [r5, #0]
 8004e64:	0605      	lsls	r5, r0, #24
 8004e66:	d501      	bpl.n	8004e6c <_printf_i+0xe8>
 8004e68:	681e      	ldr	r6, [r3, #0]
 8004e6a:	e002      	b.n	8004e72 <_printf_i+0xee>
 8004e6c:	0641      	lsls	r1, r0, #25
 8004e6e:	d5fb      	bpl.n	8004e68 <_printf_i+0xe4>
 8004e70:	881e      	ldrh	r6, [r3, #0]
 8004e72:	2f6f      	cmp	r7, #111	; 0x6f
 8004e74:	bf0c      	ite	eq
 8004e76:	2308      	moveq	r3, #8
 8004e78:	230a      	movne	r3, #10
 8004e7a:	4851      	ldr	r0, [pc, #324]	; (8004fc0 <_printf_i+0x23c>)
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e82:	6865      	ldr	r5, [r4, #4]
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	bfa8      	it	ge
 8004e88:	6821      	ldrge	r1, [r4, #0]
 8004e8a:	60a5      	str	r5, [r4, #8]
 8004e8c:	bfa4      	itt	ge
 8004e8e:	f021 0104 	bicge.w	r1, r1, #4
 8004e92:	6021      	strge	r1, [r4, #0]
 8004e94:	b90e      	cbnz	r6, 8004e9a <_printf_i+0x116>
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	d04b      	beq.n	8004f32 <_printf_i+0x1ae>
 8004e9a:	4615      	mov	r5, r2
 8004e9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ea0:	fb03 6711 	mls	r7, r3, r1, r6
 8004ea4:	5dc7      	ldrb	r7, [r0, r7]
 8004ea6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eaa:	4637      	mov	r7, r6
 8004eac:	42bb      	cmp	r3, r7
 8004eae:	460e      	mov	r6, r1
 8004eb0:	d9f4      	bls.n	8004e9c <_printf_i+0x118>
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d10b      	bne.n	8004ece <_printf_i+0x14a>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	07de      	lsls	r6, r3, #31
 8004eba:	d508      	bpl.n	8004ece <_printf_i+0x14a>
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	6861      	ldr	r1, [r4, #4]
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	bfde      	ittt	le
 8004ec4:	2330      	movle	r3, #48	; 0x30
 8004ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ece:	1b52      	subs	r2, r2, r5
 8004ed0:	6122      	str	r2, [r4, #16]
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f8cd a000 	str.w	sl, [sp]
 8004edc:	aa03      	add	r2, sp, #12
 8004ede:	f7ff fedf 	bl	8004ca0 <_printf_common>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d14a      	bne.n	8004f7c <_printf_i+0x1f8>
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	b004      	add	sp, #16
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f043 0320 	orr.w	r3, r3, #32
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	2778      	movs	r7, #120	; 0x78
 8004efa:	4832      	ldr	r0, [pc, #200]	; (8004fc4 <_printf_i+0x240>)
 8004efc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	6829      	ldr	r1, [r5, #0]
 8004f04:	061f      	lsls	r7, r3, #24
 8004f06:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f0a:	d402      	bmi.n	8004f12 <_printf_i+0x18e>
 8004f0c:	065f      	lsls	r7, r3, #25
 8004f0e:	bf48      	it	mi
 8004f10:	b2b6      	uxthmi	r6, r6
 8004f12:	07df      	lsls	r7, r3, #31
 8004f14:	bf48      	it	mi
 8004f16:	f043 0320 	orrmi.w	r3, r3, #32
 8004f1a:	6029      	str	r1, [r5, #0]
 8004f1c:	bf48      	it	mi
 8004f1e:	6023      	strmi	r3, [r4, #0]
 8004f20:	b91e      	cbnz	r6, 8004f2a <_printf_i+0x1a6>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f023 0320 	bic.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	2310      	movs	r3, #16
 8004f2c:	e7a6      	b.n	8004e7c <_printf_i+0xf8>
 8004f2e:	4824      	ldr	r0, [pc, #144]	; (8004fc0 <_printf_i+0x23c>)
 8004f30:	e7e4      	b.n	8004efc <_printf_i+0x178>
 8004f32:	4615      	mov	r5, r2
 8004f34:	e7bd      	b.n	8004eb2 <_printf_i+0x12e>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	6826      	ldr	r6, [r4, #0]
 8004f3a:	1d18      	adds	r0, r3, #4
 8004f3c:	6961      	ldr	r1, [r4, #20]
 8004f3e:	6028      	str	r0, [r5, #0]
 8004f40:	0635      	lsls	r5, r6, #24
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	d501      	bpl.n	8004f4a <_printf_i+0x1c6>
 8004f46:	6019      	str	r1, [r3, #0]
 8004f48:	e002      	b.n	8004f50 <_printf_i+0x1cc>
 8004f4a:	0670      	lsls	r0, r6, #25
 8004f4c:	d5fb      	bpl.n	8004f46 <_printf_i+0x1c2>
 8004f4e:	8019      	strh	r1, [r3, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	4615      	mov	r5, r2
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	e7bc      	b.n	8004ed2 <_printf_i+0x14e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	602a      	str	r2, [r5, #0]
 8004f60:	681d      	ldr	r5, [r3, #0]
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 fcd2 	bl	800590e <memchr>
 8004f6a:	b108      	cbz	r0, 8004f70 <_printf_i+0x1ec>
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	6060      	str	r0, [r4, #4]
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	6123      	str	r3, [r4, #16]
 8004f74:	2300      	movs	r3, #0
 8004f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7a:	e7aa      	b.n	8004ed2 <_printf_i+0x14e>
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	47d0      	blx	sl
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0ad      	beq.n	8004ee6 <_printf_i+0x162>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	079b      	lsls	r3, r3, #30
 8004f8e:	d413      	bmi.n	8004fb8 <_printf_i+0x234>
 8004f90:	68e0      	ldr	r0, [r4, #12]
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	4298      	cmp	r0, r3
 8004f96:	bfb8      	it	lt
 8004f98:	4618      	movlt	r0, r3
 8004f9a:	e7a6      	b.n	8004eea <_printf_i+0x166>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	47d0      	blx	sl
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d09d      	beq.n	8004ee6 <_printf_i+0x162>
 8004faa:	3501      	adds	r5, #1
 8004fac:	68e3      	ldr	r3, [r4, #12]
 8004fae:	9903      	ldr	r1, [sp, #12]
 8004fb0:	1a5b      	subs	r3, r3, r1
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	dcf2      	bgt.n	8004f9c <_printf_i+0x218>
 8004fb6:	e7eb      	b.n	8004f90 <_printf_i+0x20c>
 8004fb8:	2500      	movs	r5, #0
 8004fba:	f104 0619 	add.w	r6, r4, #25
 8004fbe:	e7f5      	b.n	8004fac <_printf_i+0x228>
 8004fc0:	08008f8c 	.word	0x08008f8c
 8004fc4:	08008f9d 	.word	0x08008f9d

08004fc8 <_scanf_float>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	688b      	ldr	r3, [r1, #8]
 8004fd2:	4617      	mov	r7, r2
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fda:	bf85      	ittet	hi
 8004fdc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fe0:	195b      	addhi	r3, r3, r5
 8004fe2:	2300      	movls	r3, #0
 8004fe4:	9302      	strhi	r3, [sp, #8]
 8004fe6:	bf88      	it	hi
 8004fe8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fec:	468b      	mov	fp, r1
 8004fee:	f04f 0500 	mov.w	r5, #0
 8004ff2:	bf8c      	ite	hi
 8004ff4:	608b      	strhi	r3, [r1, #8]
 8004ff6:	9302      	strls	r3, [sp, #8]
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	4680      	mov	r8, r0
 8004ffc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005000:	f84b 3b1c 	str.w	r3, [fp], #28
 8005004:	460c      	mov	r4, r1
 8005006:	465e      	mov	r6, fp
 8005008:	46aa      	mov	sl, r5
 800500a:	46a9      	mov	r9, r5
 800500c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005010:	9501      	str	r5, [sp, #4]
 8005012:	68a2      	ldr	r2, [r4, #8]
 8005014:	b152      	cbz	r2, 800502c <_scanf_float+0x64>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b4e      	cmp	r3, #78	; 0x4e
 800501c:	d864      	bhi.n	80050e8 <_scanf_float+0x120>
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d83c      	bhi.n	800509c <_scanf_float+0xd4>
 8005022:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005026:	b2c8      	uxtb	r0, r1
 8005028:	280e      	cmp	r0, #14
 800502a:	d93a      	bls.n	80050a2 <_scanf_float+0xda>
 800502c:	f1b9 0f00 	cmp.w	r9, #0
 8005030:	d003      	beq.n	800503a <_scanf_float+0x72>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800503e:	f1ba 0f01 	cmp.w	sl, #1
 8005042:	f200 8113 	bhi.w	800526c <_scanf_float+0x2a4>
 8005046:	455e      	cmp	r6, fp
 8005048:	f200 8105 	bhi.w	8005256 <_scanf_float+0x28e>
 800504c:	2501      	movs	r5, #1
 800504e:	4628      	mov	r0, r5
 8005050:	b007      	add	sp, #28
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800505a:	2a0d      	cmp	r2, #13
 800505c:	d8e6      	bhi.n	800502c <_scanf_float+0x64>
 800505e:	a101      	add	r1, pc, #4	; (adr r1, 8005064 <_scanf_float+0x9c>)
 8005060:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005064:	080051a3 	.word	0x080051a3
 8005068:	0800502d 	.word	0x0800502d
 800506c:	0800502d 	.word	0x0800502d
 8005070:	0800502d 	.word	0x0800502d
 8005074:	08005203 	.word	0x08005203
 8005078:	080051db 	.word	0x080051db
 800507c:	0800502d 	.word	0x0800502d
 8005080:	0800502d 	.word	0x0800502d
 8005084:	080051b1 	.word	0x080051b1
 8005088:	0800502d 	.word	0x0800502d
 800508c:	0800502d 	.word	0x0800502d
 8005090:	0800502d 	.word	0x0800502d
 8005094:	0800502d 	.word	0x0800502d
 8005098:	08005169 	.word	0x08005169
 800509c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80050a0:	e7db      	b.n	800505a <_scanf_float+0x92>
 80050a2:	290e      	cmp	r1, #14
 80050a4:	d8c2      	bhi.n	800502c <_scanf_float+0x64>
 80050a6:	a001      	add	r0, pc, #4	; (adr r0, 80050ac <_scanf_float+0xe4>)
 80050a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80050ac:	0800515b 	.word	0x0800515b
 80050b0:	0800502d 	.word	0x0800502d
 80050b4:	0800515b 	.word	0x0800515b
 80050b8:	080051ef 	.word	0x080051ef
 80050bc:	0800502d 	.word	0x0800502d
 80050c0:	08005109 	.word	0x08005109
 80050c4:	08005145 	.word	0x08005145
 80050c8:	08005145 	.word	0x08005145
 80050cc:	08005145 	.word	0x08005145
 80050d0:	08005145 	.word	0x08005145
 80050d4:	08005145 	.word	0x08005145
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005145 	.word	0x08005145
 80050e0:	08005145 	.word	0x08005145
 80050e4:	08005145 	.word	0x08005145
 80050e8:	2b6e      	cmp	r3, #110	; 0x6e
 80050ea:	d809      	bhi.n	8005100 <_scanf_float+0x138>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d8b2      	bhi.n	8005056 <_scanf_float+0x8e>
 80050f0:	2b54      	cmp	r3, #84	; 0x54
 80050f2:	d077      	beq.n	80051e4 <_scanf_float+0x21c>
 80050f4:	2b59      	cmp	r3, #89	; 0x59
 80050f6:	d199      	bne.n	800502c <_scanf_float+0x64>
 80050f8:	2d07      	cmp	r5, #7
 80050fa:	d197      	bne.n	800502c <_scanf_float+0x64>
 80050fc:	2508      	movs	r5, #8
 80050fe:	e029      	b.n	8005154 <_scanf_float+0x18c>
 8005100:	2b74      	cmp	r3, #116	; 0x74
 8005102:	d06f      	beq.n	80051e4 <_scanf_float+0x21c>
 8005104:	2b79      	cmp	r3, #121	; 0x79
 8005106:	e7f6      	b.n	80050f6 <_scanf_float+0x12e>
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	05c8      	lsls	r0, r1, #23
 800510c:	d51a      	bpl.n	8005144 <_scanf_float+0x17c>
 800510e:	9b02      	ldr	r3, [sp, #8]
 8005110:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005114:	6021      	str	r1, [r4, #0]
 8005116:	f109 0901 	add.w	r9, r9, #1
 800511a:	b11b      	cbz	r3, 8005124 <_scanf_float+0x15c>
 800511c:	3b01      	subs	r3, #1
 800511e:	3201      	adds	r2, #1
 8005120:	9302      	str	r3, [sp, #8]
 8005122:	60a2      	str	r2, [r4, #8]
 8005124:	68a3      	ldr	r3, [r4, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	3301      	adds	r3, #1
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	f340 8084 	ble.w	8005244 <_scanf_float+0x27c>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	e766      	b.n	8005012 <_scanf_float+0x4a>
 8005144:	eb1a 0f05 	cmn.w	sl, r5
 8005148:	f47f af70 	bne.w	800502c <_scanf_float+0x64>
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005152:	6022      	str	r2, [r4, #0]
 8005154:	f806 3b01 	strb.w	r3, [r6], #1
 8005158:	e7e4      	b.n	8005124 <_scanf_float+0x15c>
 800515a:	6822      	ldr	r2, [r4, #0]
 800515c:	0610      	lsls	r0, r2, #24
 800515e:	f57f af65 	bpl.w	800502c <_scanf_float+0x64>
 8005162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005166:	e7f4      	b.n	8005152 <_scanf_float+0x18a>
 8005168:	f1ba 0f00 	cmp.w	sl, #0
 800516c:	d10e      	bne.n	800518c <_scanf_float+0x1c4>
 800516e:	f1b9 0f00 	cmp.w	r9, #0
 8005172:	d10e      	bne.n	8005192 <_scanf_float+0x1ca>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800517a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800517e:	d108      	bne.n	8005192 <_scanf_float+0x1ca>
 8005180:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005184:	f04f 0a01 	mov.w	sl, #1
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	e7e3      	b.n	8005154 <_scanf_float+0x18c>
 800518c:	f1ba 0f02 	cmp.w	sl, #2
 8005190:	d055      	beq.n	800523e <_scanf_float+0x276>
 8005192:	2d01      	cmp	r5, #1
 8005194:	d002      	beq.n	800519c <_scanf_float+0x1d4>
 8005196:	2d04      	cmp	r5, #4
 8005198:	f47f af48 	bne.w	800502c <_scanf_float+0x64>
 800519c:	3501      	adds	r5, #1
 800519e:	b2ed      	uxtb	r5, r5
 80051a0:	e7d8      	b.n	8005154 <_scanf_float+0x18c>
 80051a2:	f1ba 0f01 	cmp.w	sl, #1
 80051a6:	f47f af41 	bne.w	800502c <_scanf_float+0x64>
 80051aa:	f04f 0a02 	mov.w	sl, #2
 80051ae:	e7d1      	b.n	8005154 <_scanf_float+0x18c>
 80051b0:	b97d      	cbnz	r5, 80051d2 <_scanf_float+0x20a>
 80051b2:	f1b9 0f00 	cmp.w	r9, #0
 80051b6:	f47f af3c 	bne.w	8005032 <_scanf_float+0x6a>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051c4:	f47f af39 	bne.w	800503a <_scanf_float+0x72>
 80051c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051cc:	2501      	movs	r5, #1
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	e7c0      	b.n	8005154 <_scanf_float+0x18c>
 80051d2:	2d03      	cmp	r5, #3
 80051d4:	d0e2      	beq.n	800519c <_scanf_float+0x1d4>
 80051d6:	2d05      	cmp	r5, #5
 80051d8:	e7de      	b.n	8005198 <_scanf_float+0x1d0>
 80051da:	2d02      	cmp	r5, #2
 80051dc:	f47f af26 	bne.w	800502c <_scanf_float+0x64>
 80051e0:	2503      	movs	r5, #3
 80051e2:	e7b7      	b.n	8005154 <_scanf_float+0x18c>
 80051e4:	2d06      	cmp	r5, #6
 80051e6:	f47f af21 	bne.w	800502c <_scanf_float+0x64>
 80051ea:	2507      	movs	r5, #7
 80051ec:	e7b2      	b.n	8005154 <_scanf_float+0x18c>
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	0591      	lsls	r1, r2, #22
 80051f2:	f57f af1b 	bpl.w	800502c <_scanf_float+0x64>
 80051f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005200:	e7a8      	b.n	8005154 <_scanf_float+0x18c>
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005208:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800520c:	d006      	beq.n	800521c <_scanf_float+0x254>
 800520e:	0550      	lsls	r0, r2, #21
 8005210:	f57f af0c 	bpl.w	800502c <_scanf_float+0x64>
 8005214:	f1b9 0f00 	cmp.w	r9, #0
 8005218:	f43f af0f 	beq.w	800503a <_scanf_float+0x72>
 800521c:	0591      	lsls	r1, r2, #22
 800521e:	bf58      	it	pl
 8005220:	9901      	ldrpl	r1, [sp, #4]
 8005222:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005226:	bf58      	it	pl
 8005228:	eba9 0101 	subpl.w	r1, r9, r1
 800522c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005230:	f04f 0900 	mov.w	r9, #0
 8005234:	bf58      	it	pl
 8005236:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	e78a      	b.n	8005154 <_scanf_float+0x18c>
 800523e:	f04f 0a03 	mov.w	sl, #3
 8005242:	e787      	b.n	8005154 <_scanf_float+0x18c>
 8005244:	4639      	mov	r1, r7
 8005246:	4640      	mov	r0, r8
 8005248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800524c:	4798      	blx	r3
 800524e:	2800      	cmp	r0, #0
 8005250:	f43f aedf 	beq.w	8005012 <_scanf_float+0x4a>
 8005254:	e6ea      	b.n	800502c <_scanf_float+0x64>
 8005256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800525a:	463a      	mov	r2, r7
 800525c:	4640      	mov	r0, r8
 800525e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005262:	4798      	blx	r3
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	3b01      	subs	r3, #1
 8005268:	6123      	str	r3, [r4, #16]
 800526a:	e6ec      	b.n	8005046 <_scanf_float+0x7e>
 800526c:	1e6b      	subs	r3, r5, #1
 800526e:	2b06      	cmp	r3, #6
 8005270:	d825      	bhi.n	80052be <_scanf_float+0x2f6>
 8005272:	2d02      	cmp	r5, #2
 8005274:	d836      	bhi.n	80052e4 <_scanf_float+0x31c>
 8005276:	455e      	cmp	r6, fp
 8005278:	f67f aee8 	bls.w	800504c <_scanf_float+0x84>
 800527c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005280:	463a      	mov	r2, r7
 8005282:	4640      	mov	r0, r8
 8005284:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005288:	4798      	blx	r3
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	e7f1      	b.n	8005276 <_scanf_float+0x2ae>
 8005292:	9802      	ldr	r0, [sp, #8]
 8005294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005298:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800529c:	463a      	mov	r2, r7
 800529e:	9002      	str	r0, [sp, #8]
 80052a0:	4640      	mov	r0, r8
 80052a2:	4798      	blx	r3
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ae:	fa5f fa8a 	uxtb.w	sl, sl
 80052b2:	f1ba 0f02 	cmp.w	sl, #2
 80052b6:	d1ec      	bne.n	8005292 <_scanf_float+0x2ca>
 80052b8:	3d03      	subs	r5, #3
 80052ba:	b2ed      	uxtb	r5, r5
 80052bc:	1b76      	subs	r6, r6, r5
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	05da      	lsls	r2, r3, #23
 80052c2:	d52f      	bpl.n	8005324 <_scanf_float+0x35c>
 80052c4:	055b      	lsls	r3, r3, #21
 80052c6:	d510      	bpl.n	80052ea <_scanf_float+0x322>
 80052c8:	455e      	cmp	r6, fp
 80052ca:	f67f aebf 	bls.w	800504c <_scanf_float+0x84>
 80052ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052d2:	463a      	mov	r2, r7
 80052d4:	4640      	mov	r0, r8
 80052d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052da:	4798      	blx	r3
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	3b01      	subs	r3, #1
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	e7f1      	b.n	80052c8 <_scanf_float+0x300>
 80052e4:	46aa      	mov	sl, r5
 80052e6:	9602      	str	r6, [sp, #8]
 80052e8:	e7df      	b.n	80052aa <_scanf_float+0x2e2>
 80052ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	2965      	cmp	r1, #101	; 0x65
 80052f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	d00c      	beq.n	8005318 <_scanf_float+0x350>
 80052fe:	2945      	cmp	r1, #69	; 0x45
 8005300:	d00a      	beq.n	8005318 <_scanf_float+0x350>
 8005302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005306:	463a      	mov	r2, r7
 8005308:	4640      	mov	r0, r8
 800530a:	4798      	blx	r3
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005312:	3b01      	subs	r3, #1
 8005314:	1eb5      	subs	r5, r6, #2
 8005316:	6123      	str	r3, [r4, #16]
 8005318:	463a      	mov	r2, r7
 800531a:	4640      	mov	r0, r8
 800531c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005320:	4798      	blx	r3
 8005322:	462e      	mov	r6, r5
 8005324:	6825      	ldr	r5, [r4, #0]
 8005326:	f015 0510 	ands.w	r5, r5, #16
 800532a:	d155      	bne.n	80053d8 <_scanf_float+0x410>
 800532c:	7035      	strb	r5, [r6, #0]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005338:	d11d      	bne.n	8005376 <_scanf_float+0x3ae>
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	454b      	cmp	r3, r9
 800533e:	eba3 0209 	sub.w	r2, r3, r9
 8005342:	d125      	bne.n	8005390 <_scanf_float+0x3c8>
 8005344:	2200      	movs	r2, #0
 8005346:	4659      	mov	r1, fp
 8005348:	4640      	mov	r0, r8
 800534a:	f002 fd11 	bl	8007d70 <_strtod_r>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	f8d4 c000 	ldr.w	ip, [r4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f01c 0f02 	tst.w	ip, #2
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	f103 0204 	add.w	r2, r3, #4
 8005362:	d020      	beq.n	80053a6 <_scanf_float+0x3de>
 8005364:	9903      	ldr	r1, [sp, #12]
 8005366:	600a      	str	r2, [r1, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	e9c3 6700 	strd	r6, r7, [r3]
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60e3      	str	r3, [r4, #12]
 8005374:	e66b      	b.n	800504e <_scanf_float+0x86>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0e3      	beq.n	8005344 <_scanf_float+0x37c>
 800537c:	9905      	ldr	r1, [sp, #20]
 800537e:	230a      	movs	r3, #10
 8005380:	462a      	mov	r2, r5
 8005382:	4640      	mov	r0, r8
 8005384:	3101      	adds	r1, #1
 8005386:	f002 fd77 	bl	8007e78 <_strtol_r>
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	9e05      	ldr	r6, [sp, #20]
 800538e:	1ac2      	subs	r2, r0, r3
 8005390:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005394:	429e      	cmp	r6, r3
 8005396:	bf28      	it	cs
 8005398:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800539c:	4630      	mov	r0, r6
 800539e:	490f      	ldr	r1, [pc, #60]	; (80053dc <_scanf_float+0x414>)
 80053a0:	f000 f93e 	bl	8005620 <siprintf>
 80053a4:	e7ce      	b.n	8005344 <_scanf_float+0x37c>
 80053a6:	f01c 0f04 	tst.w	ip, #4
 80053aa:	d1db      	bne.n	8005364 <_scanf_float+0x39c>
 80053ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80053b0:	f8cc 2000 	str.w	r2, [ip]
 80053b4:	f8d3 8000 	ldr.w	r8, [r3]
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	f7fb fb92 	bl	8000ae4 <__aeabi_dcmpun>
 80053c0:	b128      	cbz	r0, 80053ce <_scanf_float+0x406>
 80053c2:	4807      	ldr	r0, [pc, #28]	; (80053e0 <_scanf_float+0x418>)
 80053c4:	f000 fab2 	bl	800592c <nanf>
 80053c8:	f8c8 0000 	str.w	r0, [r8]
 80053cc:	e7cf      	b.n	800536e <_scanf_float+0x3a6>
 80053ce:	4630      	mov	r0, r6
 80053d0:	4639      	mov	r1, r7
 80053d2:	f7fb fbe5 	bl	8000ba0 <__aeabi_d2f>
 80053d6:	e7f7      	b.n	80053c8 <_scanf_float+0x400>
 80053d8:	2500      	movs	r5, #0
 80053da:	e638      	b.n	800504e <_scanf_float+0x86>
 80053dc:	08008fae 	.word	0x08008fae
 80053e0:	08009345 	.word	0x08009345

080053e4 <std>:
 80053e4:	2300      	movs	r3, #0
 80053e6:	b510      	push	{r4, lr}
 80053e8:	4604      	mov	r4, r0
 80053ea:	e9c0 3300 	strd	r3, r3, [r0]
 80053ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053f2:	6083      	str	r3, [r0, #8]
 80053f4:	8181      	strh	r1, [r0, #12]
 80053f6:	6643      	str	r3, [r0, #100]	; 0x64
 80053f8:	81c2      	strh	r2, [r0, #14]
 80053fa:	6183      	str	r3, [r0, #24]
 80053fc:	4619      	mov	r1, r3
 80053fe:	2208      	movs	r2, #8
 8005400:	305c      	adds	r0, #92	; 0x5c
 8005402:	f000 fa05 	bl	8005810 <memset>
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <std+0x58>)
 8005408:	6224      	str	r4, [r4, #32]
 800540a:	6263      	str	r3, [r4, #36]	; 0x24
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <std+0x5c>)
 800540e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <std+0x60>)
 8005412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <std+0x64>)
 8005416:	6323      	str	r3, [r4, #48]	; 0x30
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <std+0x68>)
 800541a:	429c      	cmp	r4, r3
 800541c:	d006      	beq.n	800542c <std+0x48>
 800541e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005422:	4294      	cmp	r4, r2
 8005424:	d002      	beq.n	800542c <std+0x48>
 8005426:	33d0      	adds	r3, #208	; 0xd0
 8005428:	429c      	cmp	r4, r3
 800542a:	d105      	bne.n	8005438 <std+0x54>
 800542c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005434:	f000 ba68 	b.w	8005908 <__retarget_lock_init_recursive>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	bf00      	nop
 800543c:	08005661 	.word	0x08005661
 8005440:	08005683 	.word	0x08005683
 8005444:	080056bb 	.word	0x080056bb
 8005448:	080056df 	.word	0x080056df
 800544c:	20000304 	.word	0x20000304

08005450 <stdio_exit_handler>:
 8005450:	4a02      	ldr	r2, [pc, #8]	; (800545c <stdio_exit_handler+0xc>)
 8005452:	4903      	ldr	r1, [pc, #12]	; (8005460 <stdio_exit_handler+0x10>)
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <stdio_exit_handler+0x14>)
 8005456:	f000 b869 	b.w	800552c <_fwalk_sglue>
 800545a:	bf00      	nop
 800545c:	20000010 	.word	0x20000010
 8005460:	08008231 	.word	0x08008231
 8005464:	2000001c 	.word	0x2000001c

08005468 <cleanup_stdio>:
 8005468:	6841      	ldr	r1, [r0, #4]
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <cleanup_stdio+0x34>)
 800546c:	b510      	push	{r4, lr}
 800546e:	4299      	cmp	r1, r3
 8005470:	4604      	mov	r4, r0
 8005472:	d001      	beq.n	8005478 <cleanup_stdio+0x10>
 8005474:	f002 fedc 	bl	8008230 <_fflush_r>
 8005478:	68a1      	ldr	r1, [r4, #8]
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <cleanup_stdio+0x38>)
 800547c:	4299      	cmp	r1, r3
 800547e:	d002      	beq.n	8005486 <cleanup_stdio+0x1e>
 8005480:	4620      	mov	r0, r4
 8005482:	f002 fed5 	bl	8008230 <_fflush_r>
 8005486:	68e1      	ldr	r1, [r4, #12]
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <cleanup_stdio+0x3c>)
 800548a:	4299      	cmp	r1, r3
 800548c:	d004      	beq.n	8005498 <cleanup_stdio+0x30>
 800548e:	4620      	mov	r0, r4
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	f002 becc 	b.w	8008230 <_fflush_r>
 8005498:	bd10      	pop	{r4, pc}
 800549a:	bf00      	nop
 800549c:	20000304 	.word	0x20000304
 80054a0:	2000036c 	.word	0x2000036c
 80054a4:	200003d4 	.word	0x200003d4

080054a8 <global_stdio_init.part.0>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <global_stdio_init.part.0+0x30>)
 80054ac:	4c0b      	ldr	r4, [pc, #44]	; (80054dc <global_stdio_init.part.0+0x34>)
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <global_stdio_init.part.0+0x38>)
 80054b0:	4620      	mov	r0, r4
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	2104      	movs	r1, #4
 80054b6:	2200      	movs	r2, #0
 80054b8:	f7ff ff94 	bl	80053e4 <std>
 80054bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054c0:	2201      	movs	r2, #1
 80054c2:	2109      	movs	r1, #9
 80054c4:	f7ff ff8e 	bl	80053e4 <std>
 80054c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054cc:	2202      	movs	r2, #2
 80054ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d2:	2112      	movs	r1, #18
 80054d4:	f7ff bf86 	b.w	80053e4 <std>
 80054d8:	2000043c 	.word	0x2000043c
 80054dc:	20000304 	.word	0x20000304
 80054e0:	08005451 	.word	0x08005451

080054e4 <__sfp_lock_acquire>:
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <__sfp_lock_acquire+0x8>)
 80054e6:	f000 ba10 	b.w	800590a <__retarget_lock_acquire_recursive>
 80054ea:	bf00      	nop
 80054ec:	20000445 	.word	0x20000445

080054f0 <__sfp_lock_release>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__sfp_lock_release+0x8>)
 80054f2:	f000 ba0b 	b.w	800590c <__retarget_lock_release_recursive>
 80054f6:	bf00      	nop
 80054f8:	20000445 	.word	0x20000445

080054fc <__sinit>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	f7ff fff0 	bl	80054e4 <__sfp_lock_acquire>
 8005504:	6a23      	ldr	r3, [r4, #32]
 8005506:	b11b      	cbz	r3, 8005510 <__sinit+0x14>
 8005508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550c:	f7ff bff0 	b.w	80054f0 <__sfp_lock_release>
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <__sinit+0x28>)
 8005512:	6223      	str	r3, [r4, #32]
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <__sinit+0x2c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f5      	bne.n	8005508 <__sinit+0xc>
 800551c:	f7ff ffc4 	bl	80054a8 <global_stdio_init.part.0>
 8005520:	e7f2      	b.n	8005508 <__sinit+0xc>
 8005522:	bf00      	nop
 8005524:	08005469 	.word	0x08005469
 8005528:	2000043c 	.word	0x2000043c

0800552c <_fwalk_sglue>:
 800552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005530:	4607      	mov	r7, r0
 8005532:	4688      	mov	r8, r1
 8005534:	4614      	mov	r4, r2
 8005536:	2600      	movs	r6, #0
 8005538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800553c:	f1b9 0901 	subs.w	r9, r9, #1
 8005540:	d505      	bpl.n	800554e <_fwalk_sglue+0x22>
 8005542:	6824      	ldr	r4, [r4, #0]
 8005544:	2c00      	cmp	r4, #0
 8005546:	d1f7      	bne.n	8005538 <_fwalk_sglue+0xc>
 8005548:	4630      	mov	r0, r6
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d907      	bls.n	8005564 <_fwalk_sglue+0x38>
 8005554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005558:	3301      	adds	r3, #1
 800555a:	d003      	beq.n	8005564 <_fwalk_sglue+0x38>
 800555c:	4629      	mov	r1, r5
 800555e:	4638      	mov	r0, r7
 8005560:	47c0      	blx	r8
 8005562:	4306      	orrs	r6, r0
 8005564:	3568      	adds	r5, #104	; 0x68
 8005566:	e7e9      	b.n	800553c <_fwalk_sglue+0x10>

08005568 <_puts_r>:
 8005568:	6a03      	ldr	r3, [r0, #32]
 800556a:	b570      	push	{r4, r5, r6, lr}
 800556c:	4605      	mov	r5, r0
 800556e:	460e      	mov	r6, r1
 8005570:	6884      	ldr	r4, [r0, #8]
 8005572:	b90b      	cbnz	r3, 8005578 <_puts_r+0x10>
 8005574:	f7ff ffc2 	bl	80054fc <__sinit>
 8005578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557a:	07db      	lsls	r3, r3, #31
 800557c:	d405      	bmi.n	800558a <_puts_r+0x22>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	0598      	lsls	r0, r3, #22
 8005582:	d402      	bmi.n	800558a <_puts_r+0x22>
 8005584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005586:	f000 f9c0 	bl	800590a <__retarget_lock_acquire_recursive>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	0719      	lsls	r1, r3, #28
 800558e:	d513      	bpl.n	80055b8 <_puts_r+0x50>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	b18b      	cbz	r3, 80055b8 <_puts_r+0x50>
 8005594:	3e01      	subs	r6, #1
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800559c:	3b01      	subs	r3, #1
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	b9e9      	cbnz	r1, 80055de <_puts_r+0x76>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da2e      	bge.n	8005604 <_puts_r+0x9c>
 80055a6:	4622      	mov	r2, r4
 80055a8:	210a      	movs	r1, #10
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f89b 	bl	80056e6 <__swbuf_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d007      	beq.n	80055c4 <_puts_r+0x5c>
 80055b4:	250a      	movs	r5, #10
 80055b6:	e007      	b.n	80055c8 <_puts_r+0x60>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f8d0 	bl	8005760 <__swsetup_r>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d0e7      	beq.n	8005594 <_puts_r+0x2c>
 80055c4:	f04f 35ff 	mov.w	r5, #4294967295
 80055c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ca:	07da      	lsls	r2, r3, #31
 80055cc:	d405      	bmi.n	80055da <_puts_r+0x72>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	d402      	bmi.n	80055da <_puts_r+0x72>
 80055d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055d6:	f000 f999 	bl	800590c <__retarget_lock_release_recursive>
 80055da:	4628      	mov	r0, r5
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da04      	bge.n	80055ec <_puts_r+0x84>
 80055e2:	69a2      	ldr	r2, [r4, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	dc06      	bgt.n	80055f6 <_puts_r+0x8e>
 80055e8:	290a      	cmp	r1, #10
 80055ea:	d004      	beq.n	80055f6 <_puts_r+0x8e>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	6022      	str	r2, [r4, #0]
 80055f2:	7019      	strb	r1, [r3, #0]
 80055f4:	e7cf      	b.n	8005596 <_puts_r+0x2e>
 80055f6:	4622      	mov	r2, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 f874 	bl	80056e6 <__swbuf_r>
 80055fe:	3001      	adds	r0, #1
 8005600:	d1c9      	bne.n	8005596 <_puts_r+0x2e>
 8005602:	e7df      	b.n	80055c4 <_puts_r+0x5c>
 8005604:	250a      	movs	r5, #10
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	6022      	str	r2, [r4, #0]
 800560c:	701d      	strb	r5, [r3, #0]
 800560e:	e7db      	b.n	80055c8 <_puts_r+0x60>

08005610 <puts>:
 8005610:	4b02      	ldr	r3, [pc, #8]	; (800561c <puts+0xc>)
 8005612:	4601      	mov	r1, r0
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f7ff bfa7 	b.w	8005568 <_puts_r>
 800561a:	bf00      	nop
 800561c:	20000068 	.word	0x20000068

08005620 <siprintf>:
 8005620:	b40e      	push	{r1, r2, r3}
 8005622:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005626:	b500      	push	{lr}
 8005628:	b09c      	sub	sp, #112	; 0x70
 800562a:	ab1d      	add	r3, sp, #116	; 0x74
 800562c:	9002      	str	r0, [sp, #8]
 800562e:	9006      	str	r0, [sp, #24]
 8005630:	9107      	str	r1, [sp, #28]
 8005632:	9104      	str	r1, [sp, #16]
 8005634:	4808      	ldr	r0, [pc, #32]	; (8005658 <siprintf+0x38>)
 8005636:	4909      	ldr	r1, [pc, #36]	; (800565c <siprintf+0x3c>)
 8005638:	f853 2b04 	ldr.w	r2, [r3], #4
 800563c:	9105      	str	r1, [sp, #20]
 800563e:	6800      	ldr	r0, [r0, #0]
 8005640:	a902      	add	r1, sp, #8
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	f002 fc74 	bl	8007f30 <_svfiprintf_r>
 8005648:	2200      	movs	r2, #0
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	b01c      	add	sp, #112	; 0x70
 8005650:	f85d eb04 	ldr.w	lr, [sp], #4
 8005654:	b003      	add	sp, #12
 8005656:	4770      	bx	lr
 8005658:	20000068 	.word	0x20000068
 800565c:	ffff0208 	.word	0xffff0208

08005660 <__sread>:
 8005660:	b510      	push	{r4, lr}
 8005662:	460c      	mov	r4, r1
 8005664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005668:	f000 f900 	bl	800586c <_read_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	bfab      	itete	ge
 8005670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005672:	89a3      	ldrhlt	r3, [r4, #12]
 8005674:	181b      	addge	r3, r3, r0
 8005676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800567a:	bfac      	ite	ge
 800567c:	6563      	strge	r3, [r4, #84]	; 0x54
 800567e:	81a3      	strhlt	r3, [r4, #12]
 8005680:	bd10      	pop	{r4, pc}

08005682 <__swrite>:
 8005682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	461f      	mov	r7, r3
 8005688:	898b      	ldrh	r3, [r1, #12]
 800568a:	4605      	mov	r5, r0
 800568c:	05db      	lsls	r3, r3, #23
 800568e:	460c      	mov	r4, r1
 8005690:	4616      	mov	r6, r2
 8005692:	d505      	bpl.n	80056a0 <__swrite+0x1e>
 8005694:	2302      	movs	r3, #2
 8005696:	2200      	movs	r2, #0
 8005698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569c:	f000 f8d4 	bl	8005848 <_lseek_r>
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	4632      	mov	r2, r6
 80056a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	4628      	mov	r0, r5
 80056ac:	463b      	mov	r3, r7
 80056ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	f000 b8eb 	b.w	8005890 <_write_r>

080056ba <__sseek>:
 80056ba:	b510      	push	{r4, lr}
 80056bc:	460c      	mov	r4, r1
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 f8c1 	bl	8005848 <_lseek_r>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	bf15      	itete	ne
 80056cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056d6:	81a3      	strheq	r3, [r4, #12]
 80056d8:	bf18      	it	ne
 80056da:	81a3      	strhne	r3, [r4, #12]
 80056dc:	bd10      	pop	{r4, pc}

080056de <__sclose>:
 80056de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e2:	f000 b8a1 	b.w	8005828 <_close_r>

080056e6 <__swbuf_r>:
 80056e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e8:	460e      	mov	r6, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	4605      	mov	r5, r0
 80056ee:	b118      	cbz	r0, 80056f8 <__swbuf_r+0x12>
 80056f0:	6a03      	ldr	r3, [r0, #32]
 80056f2:	b90b      	cbnz	r3, 80056f8 <__swbuf_r+0x12>
 80056f4:	f7ff ff02 	bl	80054fc <__sinit>
 80056f8:	69a3      	ldr	r3, [r4, #24]
 80056fa:	60a3      	str	r3, [r4, #8]
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	071a      	lsls	r2, r3, #28
 8005700:	d525      	bpl.n	800574e <__swbuf_r+0x68>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	b31b      	cbz	r3, 800574e <__swbuf_r+0x68>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	b2f6      	uxtb	r6, r6
 800570c:	1a98      	subs	r0, r3, r2
 800570e:	6963      	ldr	r3, [r4, #20]
 8005710:	4637      	mov	r7, r6
 8005712:	4283      	cmp	r3, r0
 8005714:	dc04      	bgt.n	8005720 <__swbuf_r+0x3a>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f002 fd89 	bl	8008230 <_fflush_r>
 800571e:	b9e0      	cbnz	r0, 800575a <__swbuf_r+0x74>
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	3b01      	subs	r3, #1
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	701e      	strb	r6, [r3, #0]
 800572e:	6962      	ldr	r2, [r4, #20]
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	429a      	cmp	r2, r3
 8005734:	d004      	beq.n	8005740 <__swbuf_r+0x5a>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d506      	bpl.n	800574a <__swbuf_r+0x64>
 800573c:	2e0a      	cmp	r6, #10
 800573e:	d104      	bne.n	800574a <__swbuf_r+0x64>
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f002 fd74 	bl	8008230 <_fflush_r>
 8005748:	b938      	cbnz	r0, 800575a <__swbuf_r+0x74>
 800574a:	4638      	mov	r0, r7
 800574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f000 f805 	bl	8005760 <__swsetup_r>
 8005756:	2800      	cmp	r0, #0
 8005758:	d0d5      	beq.n	8005706 <__swbuf_r+0x20>
 800575a:	f04f 37ff 	mov.w	r7, #4294967295
 800575e:	e7f4      	b.n	800574a <__swbuf_r+0x64>

08005760 <__swsetup_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4b2a      	ldr	r3, [pc, #168]	; (800580c <__swsetup_r+0xac>)
 8005764:	4605      	mov	r5, r0
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	460c      	mov	r4, r1
 800576a:	b118      	cbz	r0, 8005774 <__swsetup_r+0x14>
 800576c:	6a03      	ldr	r3, [r0, #32]
 800576e:	b90b      	cbnz	r3, 8005774 <__swsetup_r+0x14>
 8005770:	f7ff fec4 	bl	80054fc <__sinit>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800577a:	0718      	lsls	r0, r3, #28
 800577c:	d422      	bmi.n	80057c4 <__swsetup_r+0x64>
 800577e:	06d9      	lsls	r1, r3, #27
 8005780:	d407      	bmi.n	8005792 <__swsetup_r+0x32>
 8005782:	2309      	movs	r3, #9
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800578a:	f04f 30ff 	mov.w	r0, #4294967295
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	e034      	b.n	80057fc <__swsetup_r+0x9c>
 8005792:	0758      	lsls	r0, r3, #29
 8005794:	d512      	bpl.n	80057bc <__swsetup_r+0x5c>
 8005796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005798:	b141      	cbz	r1, 80057ac <__swsetup_r+0x4c>
 800579a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800579e:	4299      	cmp	r1, r3
 80057a0:	d002      	beq.n	80057a8 <__swsetup_r+0x48>
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 ff34 	bl	8006610 <_free_r>
 80057a8:	2300      	movs	r3, #0
 80057aa:	6363      	str	r3, [r4, #52]	; 0x34
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	2300      	movs	r3, #0
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	6923      	ldr	r3, [r4, #16]
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	f043 0308 	orr.w	r3, r3, #8
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	b94b      	cbnz	r3, 80057dc <__swsetup_r+0x7c>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d2:	d003      	beq.n	80057dc <__swsetup_r+0x7c>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f002 fd77 	bl	80082ca <__smakebuf_r>
 80057dc:	89a0      	ldrh	r0, [r4, #12]
 80057de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e2:	f010 0301 	ands.w	r3, r0, #1
 80057e6:	d00a      	beq.n	80057fe <__swsetup_r+0x9e>
 80057e8:	2300      	movs	r3, #0
 80057ea:	60a3      	str	r3, [r4, #8]
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	425b      	negs	r3, r3
 80057f0:	61a3      	str	r3, [r4, #24]
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	b943      	cbnz	r3, 8005808 <__swsetup_r+0xa8>
 80057f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057fa:	d1c4      	bne.n	8005786 <__swsetup_r+0x26>
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	0781      	lsls	r1, r0, #30
 8005800:	bf58      	it	pl
 8005802:	6963      	ldrpl	r3, [r4, #20]
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	e7f4      	b.n	80057f2 <__swsetup_r+0x92>
 8005808:	2000      	movs	r0, #0
 800580a:	e7f7      	b.n	80057fc <__swsetup_r+0x9c>
 800580c:	20000068 	.word	0x20000068

08005810 <memset>:
 8005810:	4603      	mov	r3, r0
 8005812:	4402      	add	r2, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <_localeconv_r>:
 8005820:	4800      	ldr	r0, [pc, #0]	; (8005824 <_localeconv_r+0x4>)
 8005822:	4770      	bx	lr
 8005824:	2000015c 	.word	0x2000015c

08005828 <_close_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	2300      	movs	r3, #0
 800582c:	4d05      	ldr	r5, [pc, #20]	; (8005844 <_close_r+0x1c>)
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fc f8aa 	bl	800198c <_close>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_close_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_close_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000440 	.word	0x20000440

08005848 <_lseek_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	2200      	movs	r2, #0
 8005852:	4d05      	ldr	r5, [pc, #20]	; (8005868 <_lseek_r+0x20>)
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fc f8bc 	bl	80019d4 <_lseek>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_lseek_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_lseek_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000440 	.word	0x20000440

0800586c <_read_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	2200      	movs	r2, #0
 8005876:	4d05      	ldr	r5, [pc, #20]	; (800588c <_read_r+0x20>)
 8005878:	602a      	str	r2, [r5, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f7fc f84d 	bl	800191a <_read>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_read_r+0x1e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_read_r+0x1e>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	20000440 	.word	0x20000440

08005890 <_write_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	2200      	movs	r2, #0
 800589a:	4d05      	ldr	r5, [pc, #20]	; (80058b0 <_write_r+0x20>)
 800589c:	602a      	str	r2, [r5, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fc f858 	bl	8001954 <_write>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_write_r+0x1e>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_write_r+0x1e>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	20000440 	.word	0x20000440

080058b4 <__errno>:
 80058b4:	4b01      	ldr	r3, [pc, #4]	; (80058bc <__errno+0x8>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000068 	.word	0x20000068

080058c0 <__libc_init_array>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	2600      	movs	r6, #0
 80058c4:	4d0c      	ldr	r5, [pc, #48]	; (80058f8 <__libc_init_array+0x38>)
 80058c6:	4c0d      	ldr	r4, [pc, #52]	; (80058fc <__libc_init_array+0x3c>)
 80058c8:	1b64      	subs	r4, r4, r5
 80058ca:	10a4      	asrs	r4, r4, #2
 80058cc:	42a6      	cmp	r6, r4
 80058ce:	d109      	bne.n	80058e4 <__libc_init_array+0x24>
 80058d0:	f003 fb2a 	bl	8008f28 <_init>
 80058d4:	2600      	movs	r6, #0
 80058d6:	4d0a      	ldr	r5, [pc, #40]	; (8005900 <__libc_init_array+0x40>)
 80058d8:	4c0a      	ldr	r4, [pc, #40]	; (8005904 <__libc_init_array+0x44>)
 80058da:	1b64      	subs	r4, r4, r5
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	42a6      	cmp	r6, r4
 80058e0:	d105      	bne.n	80058ee <__libc_init_array+0x2e>
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e8:	4798      	blx	r3
 80058ea:	3601      	adds	r6, #1
 80058ec:	e7ee      	b.n	80058cc <__libc_init_array+0xc>
 80058ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f2:	4798      	blx	r3
 80058f4:	3601      	adds	r6, #1
 80058f6:	e7f2      	b.n	80058de <__libc_init_array+0x1e>
 80058f8:	080093a8 	.word	0x080093a8
 80058fc:	080093a8 	.word	0x080093a8
 8005900:	080093a8 	.word	0x080093a8
 8005904:	080093ac 	.word	0x080093ac

08005908 <__retarget_lock_init_recursive>:
 8005908:	4770      	bx	lr

0800590a <__retarget_lock_acquire_recursive>:
 800590a:	4770      	bx	lr

0800590c <__retarget_lock_release_recursive>:
 800590c:	4770      	bx	lr

0800590e <memchr>:
 800590e:	4603      	mov	r3, r0
 8005910:	b510      	push	{r4, lr}
 8005912:	b2c9      	uxtb	r1, r1
 8005914:	4402      	add	r2, r0
 8005916:	4293      	cmp	r3, r2
 8005918:	4618      	mov	r0, r3
 800591a:	d101      	bne.n	8005920 <memchr+0x12>
 800591c:	2000      	movs	r0, #0
 800591e:	e003      	b.n	8005928 <memchr+0x1a>
 8005920:	7804      	ldrb	r4, [r0, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	428c      	cmp	r4, r1
 8005926:	d1f6      	bne.n	8005916 <memchr+0x8>
 8005928:	bd10      	pop	{r4, pc}
	...

0800592c <nanf>:
 800592c:	4800      	ldr	r0, [pc, #0]	; (8005930 <nanf+0x4>)
 800592e:	4770      	bx	lr
 8005930:	7fc00000 	.word	0x7fc00000

08005934 <quorem>:
 8005934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	6903      	ldr	r3, [r0, #16]
 800593a:	690c      	ldr	r4, [r1, #16]
 800593c:	4607      	mov	r7, r0
 800593e:	42a3      	cmp	r3, r4
 8005940:	db7f      	blt.n	8005a42 <quorem+0x10e>
 8005942:	3c01      	subs	r4, #1
 8005944:	f100 0514 	add.w	r5, r0, #20
 8005948:	f101 0814 	add.w	r8, r1, #20
 800594c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800595a:	3301      	adds	r3, #1
 800595c:	429a      	cmp	r2, r3
 800595e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005962:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005966:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800596a:	d331      	bcc.n	80059d0 <quorem+0x9c>
 800596c:	f04f 0e00 	mov.w	lr, #0
 8005970:	4640      	mov	r0, r8
 8005972:	46ac      	mov	ip, r5
 8005974:	46f2      	mov	sl, lr
 8005976:	f850 2b04 	ldr.w	r2, [r0], #4
 800597a:	b293      	uxth	r3, r2
 800597c:	fb06 e303 	mla	r3, r6, r3, lr
 8005980:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005984:	0c1a      	lsrs	r2, r3, #16
 8005986:	b29b      	uxth	r3, r3
 8005988:	fb06 220e 	mla	r2, r6, lr, r2
 800598c:	ebaa 0303 	sub.w	r3, sl, r3
 8005990:	f8dc a000 	ldr.w	sl, [ip]
 8005994:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005998:	fa1f fa8a 	uxth.w	sl, sl
 800599c:	4453      	add	r3, sl
 800599e:	f8dc a000 	ldr.w	sl, [ip]
 80059a2:	b292      	uxth	r2, r2
 80059a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059b2:	4581      	cmp	r9, r0
 80059b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059b8:	f84c 3b04 	str.w	r3, [ip], #4
 80059bc:	d2db      	bcs.n	8005976 <quorem+0x42>
 80059be:	f855 300b 	ldr.w	r3, [r5, fp]
 80059c2:	b92b      	cbnz	r3, 80059d0 <quorem+0x9c>
 80059c4:	9b01      	ldr	r3, [sp, #4]
 80059c6:	3b04      	subs	r3, #4
 80059c8:	429d      	cmp	r5, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	d32d      	bcc.n	8005a2a <quorem+0xf6>
 80059ce:	613c      	str	r4, [r7, #16]
 80059d0:	4638      	mov	r0, r7
 80059d2:	f001 f9dd 	bl	8006d90 <__mcmp>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	db23      	blt.n	8005a22 <quorem+0xee>
 80059da:	4629      	mov	r1, r5
 80059dc:	2000      	movs	r0, #0
 80059de:	3601      	adds	r6, #1
 80059e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80059e4:	f8d1 c000 	ldr.w	ip, [r1]
 80059e8:	b293      	uxth	r3, r2
 80059ea:	1ac3      	subs	r3, r0, r3
 80059ec:	0c12      	lsrs	r2, r2, #16
 80059ee:	fa1f f08c 	uxth.w	r0, ip
 80059f2:	4403      	add	r3, r0
 80059f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a02:	45c1      	cmp	r9, r8
 8005a04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a08:	f841 3b04 	str.w	r3, [r1], #4
 8005a0c:	d2e8      	bcs.n	80059e0 <quorem+0xac>
 8005a0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a16:	b922      	cbnz	r2, 8005a22 <quorem+0xee>
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	429d      	cmp	r5, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	d30a      	bcc.n	8005a36 <quorem+0x102>
 8005a20:	613c      	str	r4, [r7, #16]
 8005a22:	4630      	mov	r0, r6
 8005a24:	b003      	add	sp, #12
 8005a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d1cd      	bne.n	80059ce <quorem+0x9a>
 8005a32:	3c01      	subs	r4, #1
 8005a34:	e7c8      	b.n	80059c8 <quorem+0x94>
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d1f0      	bne.n	8005a20 <quorem+0xec>
 8005a3e:	3c01      	subs	r4, #1
 8005a40:	e7eb      	b.n	8005a1a <quorem+0xe6>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e7ee      	b.n	8005a24 <quorem+0xf0>
	...

08005a48 <_dtoa_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	461f      	mov	r7, r3
 8005a50:	69c4      	ldr	r4, [r0, #28]
 8005a52:	b099      	sub	sp, #100	; 0x64
 8005a54:	4605      	mov	r5, r0
 8005a56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a5e:	b974      	cbnz	r4, 8005a7e <_dtoa_r+0x36>
 8005a60:	2010      	movs	r0, #16
 8005a62:	f000 fe1d 	bl	80066a0 <malloc>
 8005a66:	4602      	mov	r2, r0
 8005a68:	61e8      	str	r0, [r5, #28]
 8005a6a:	b920      	cbnz	r0, 8005a76 <_dtoa_r+0x2e>
 8005a6c:	21ef      	movs	r1, #239	; 0xef
 8005a6e:	4bac      	ldr	r3, [pc, #688]	; (8005d20 <_dtoa_r+0x2d8>)
 8005a70:	48ac      	ldr	r0, [pc, #688]	; (8005d24 <_dtoa_r+0x2dc>)
 8005a72:	f002 fcd9 	bl	8008428 <__assert_func>
 8005a76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a7a:	6004      	str	r4, [r0, #0]
 8005a7c:	60c4      	str	r4, [r0, #12]
 8005a7e:	69eb      	ldr	r3, [r5, #28]
 8005a80:	6819      	ldr	r1, [r3, #0]
 8005a82:	b151      	cbz	r1, 8005a9a <_dtoa_r+0x52>
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	2301      	movs	r3, #1
 8005a88:	4093      	lsls	r3, r2
 8005a8a:	604a      	str	r2, [r1, #4]
 8005a8c:	608b      	str	r3, [r1, #8]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fefa 	bl	8006888 <_Bfree>
 8005a94:	2200      	movs	r2, #0
 8005a96:	69eb      	ldr	r3, [r5, #28]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	1e3b      	subs	r3, r7, #0
 8005a9c:	bfaf      	iteee	ge
 8005a9e:	2300      	movge	r3, #0
 8005aa0:	2201      	movlt	r2, #1
 8005aa2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005aa6:	9305      	strlt	r3, [sp, #20]
 8005aa8:	bfa8      	it	ge
 8005aaa:	f8c8 3000 	strge.w	r3, [r8]
 8005aae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005ab2:	4b9d      	ldr	r3, [pc, #628]	; (8005d28 <_dtoa_r+0x2e0>)
 8005ab4:	bfb8      	it	lt
 8005ab6:	f8c8 2000 	strlt.w	r2, [r8]
 8005aba:	ea33 0309 	bics.w	r3, r3, r9
 8005abe:	d119      	bne.n	8005af4 <_dtoa_r+0xac>
 8005ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ac4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005acc:	4333      	orrs	r3, r6
 8005ace:	f000 8589 	beq.w	80065e4 <_dtoa_r+0xb9c>
 8005ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ad4:	b953      	cbnz	r3, 8005aec <_dtoa_r+0xa4>
 8005ad6:	4b95      	ldr	r3, [pc, #596]	; (8005d2c <_dtoa_r+0x2e4>)
 8005ad8:	e023      	b.n	8005b22 <_dtoa_r+0xda>
 8005ada:	4b95      	ldr	r3, [pc, #596]	; (8005d30 <_dtoa_r+0x2e8>)
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	9803      	ldr	r0, [sp, #12]
 8005ae6:	b019      	add	sp, #100	; 0x64
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aec:	4b8f      	ldr	r3, [pc, #572]	; (8005d2c <_dtoa_r+0x2e4>)
 8005aee:	9303      	str	r3, [sp, #12]
 8005af0:	3303      	adds	r3, #3
 8005af2:	e7f5      	b.n	8005ae0 <_dtoa_r+0x98>
 8005af4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005af8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	f7fa ffbc 	bl	8000a80 <__aeabi_dcmpeq>
 8005b08:	4680      	mov	r8, r0
 8005b0a:	b160      	cbz	r0, 8005b26 <_dtoa_r+0xde>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8562 	beq.w	80065de <_dtoa_r+0xb96>
 8005b1a:	4b86      	ldr	r3, [pc, #536]	; (8005d34 <_dtoa_r+0x2ec>)
 8005b1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	e7de      	b.n	8005ae4 <_dtoa_r+0x9c>
 8005b26:	ab16      	add	r3, sp, #88	; 0x58
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	ab17      	add	r3, sp, #92	; 0x5c
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4628      	mov	r0, r5
 8005b30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b34:	f001 fa3c 	bl	8006fb0 <__d2b>
 8005b38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	d07e      	beq.n	8005c40 <_dtoa_r+0x1f8>
 8005b42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4b75      	ldr	r3, [pc, #468]	; (8005d38 <_dtoa_r+0x2f0>)
 8005b62:	f7fa fb6d 	bl	8000240 <__aeabi_dsub>
 8005b66:	a368      	add	r3, pc, #416	; (adr r3, 8005d08 <_dtoa_r+0x2c0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fd20 	bl	80005b0 <__aeabi_dmul>
 8005b70:	a367      	add	r3, pc, #412	; (adr r3, 8005d10 <_dtoa_r+0x2c8>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fb65 	bl	8000244 <__adddf3>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	460f      	mov	r7, r1
 8005b80:	f7fa fcac 	bl	80004dc <__aeabi_i2d>
 8005b84:	a364      	add	r3, pc, #400	; (adr r3, 8005d18 <_dtoa_r+0x2d0>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fd11 	bl	80005b0 <__aeabi_dmul>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4630      	mov	r0, r6
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fb55 	bl	8000244 <__adddf3>
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460f      	mov	r7, r1
 8005b9e:	f7fa ffb7 	bl	8000b10 <__aeabi_d2iz>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4683      	mov	fp, r0
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4630      	mov	r0, r6
 8005baa:	4639      	mov	r1, r7
 8005bac:	f7fa ff72 	bl	8000a94 <__aeabi_dcmplt>
 8005bb0:	b148      	cbz	r0, 8005bc6 <_dtoa_r+0x17e>
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f7fa fc92 	bl	80004dc <__aeabi_i2d>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	f7fa ff60 	bl	8000a80 <__aeabi_dcmpeq>
 8005bc0:	b908      	cbnz	r0, 8005bc6 <_dtoa_r+0x17e>
 8005bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bc6:	f1bb 0f16 	cmp.w	fp, #22
 8005bca:	d857      	bhi.n	8005c7c <_dtoa_r+0x234>
 8005bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <_dtoa_r+0x2f4>)
 8005bd2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa ff5b 	bl	8000a94 <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d04e      	beq.n	8005c80 <_dtoa_r+0x238>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bec:	1b1b      	subs	r3, r3, r4
 8005bee:	1e5a      	subs	r2, r3, #1
 8005bf0:	bf46      	itte	mi
 8005bf2:	f1c3 0901 	rsbmi	r9, r3, #1
 8005bf6:	2300      	movmi	r3, #0
 8005bf8:	f04f 0900 	movpl.w	r9, #0
 8005bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfe:	bf48      	it	mi
 8005c00:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c02:	f1bb 0f00 	cmp.w	fp, #0
 8005c06:	db3d      	blt.n	8005c84 <_dtoa_r+0x23c>
 8005c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005c0e:	445b      	add	r3, fp
 8005c10:	9309      	str	r3, [sp, #36]	; 0x24
 8005c12:	2300      	movs	r3, #0
 8005c14:	930a      	str	r3, [sp, #40]	; 0x28
 8005c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d867      	bhi.n	8005cec <_dtoa_r+0x2a4>
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	bfc4      	itt	gt
 8005c20:	3b04      	subgt	r3, #4
 8005c22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c26:	bfc8      	it	gt
 8005c28:	2400      	movgt	r4, #0
 8005c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c2e:	bfd8      	it	le
 8005c30:	2401      	movle	r4, #1
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	f200 8086 	bhi.w	8005d44 <_dtoa_r+0x2fc>
 8005c38:	e8df f003 	tbb	[pc, r3]
 8005c3c:	5637392c 	.word	0x5637392c
 8005c40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c44:	441c      	add	r4, r3
 8005c46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	bfc1      	itttt	gt
 8005c4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c52:	fa09 f903 	lslgt.w	r9, r9, r3
 8005c56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005c5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c5e:	bfd6      	itet	le
 8005c60:	f1c3 0320 	rsble	r3, r3, #32
 8005c64:	ea49 0003 	orrgt.w	r0, r9, r3
 8005c68:	fa06 f003 	lslle.w	r0, r6, r3
 8005c6c:	f7fa fc26 	bl	80004bc <__aeabi_ui2d>
 8005c70:	2201      	movs	r2, #1
 8005c72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c76:	3c01      	subs	r4, #1
 8005c78:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c7a:	e76f      	b.n	8005b5c <_dtoa_r+0x114>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e7b3      	b.n	8005be8 <_dtoa_r+0x1a0>
 8005c80:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c82:	e7b2      	b.n	8005bea <_dtoa_r+0x1a2>
 8005c84:	f1cb 0300 	rsb	r3, fp, #0
 8005c88:	930a      	str	r3, [sp, #40]	; 0x28
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	eba9 090b 	sub.w	r9, r9, fp
 8005c90:	930e      	str	r3, [sp, #56]	; 0x38
 8005c92:	e7c0      	b.n	8005c16 <_dtoa_r+0x1ce>
 8005c94:	2300      	movs	r3, #0
 8005c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dc55      	bgt.n	8005d4a <_dtoa_r+0x302>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	9306      	str	r3, [sp, #24]
 8005ca4:	9308      	str	r3, [sp, #32]
 8005ca6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ca8:	e00b      	b.n	8005cc2 <_dtoa_r+0x27a>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f3      	b.n	8005c96 <_dtoa_r+0x24e>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cb4:	445b      	add	r3, fp
 8005cb6:	9306      	str	r3, [sp, #24]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	bfb8      	it	lt
 8005cc0:	2301      	movlt	r3, #1
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	69e8      	ldr	r0, [r5, #28]
 8005cc8:	f102 0614 	add.w	r6, r2, #20
 8005ccc:	429e      	cmp	r6, r3
 8005cce:	d940      	bls.n	8005d52 <_dtoa_r+0x30a>
 8005cd0:	6041      	str	r1, [r0, #4]
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fd98 	bl	8006808 <_Balloc>
 8005cd8:	9003      	str	r0, [sp, #12]
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d13c      	bne.n	8005d58 <_dtoa_r+0x310>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f240 11af 	movw	r1, #431	; 0x1af
 8005ce4:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <_dtoa_r+0x2f8>)
 8005ce6:	e6c3      	b.n	8005a70 <_dtoa_r+0x28>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e7e1      	b.n	8005cb0 <_dtoa_r+0x268>
 8005cec:	2401      	movs	r4, #1
 8005cee:	2300      	movs	r3, #0
 8005cf0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005cf2:	9322      	str	r3, [sp, #136]	; 0x88
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	9306      	str	r3, [sp, #24]
 8005cfc:	9308      	str	r3, [sp, #32]
 8005cfe:	2312      	movs	r3, #18
 8005d00:	e7d1      	b.n	8005ca6 <_dtoa_r+0x25e>
 8005d02:	bf00      	nop
 8005d04:	f3af 8000 	nop.w
 8005d08:	636f4361 	.word	0x636f4361
 8005d0c:	3fd287a7 	.word	0x3fd287a7
 8005d10:	8b60c8b3 	.word	0x8b60c8b3
 8005d14:	3fc68a28 	.word	0x3fc68a28
 8005d18:	509f79fb 	.word	0x509f79fb
 8005d1c:	3fd34413 	.word	0x3fd34413
 8005d20:	08008fc0 	.word	0x08008fc0
 8005d24:	08008fd7 	.word	0x08008fd7
 8005d28:	7ff00000 	.word	0x7ff00000
 8005d2c:	08008fbc 	.word	0x08008fbc
 8005d30:	08008fb3 	.word	0x08008fb3
 8005d34:	08008f8b 	.word	0x08008f8b
 8005d38:	3ff80000 	.word	0x3ff80000
 8005d3c:	080090c8 	.word	0x080090c8
 8005d40:	0800902f 	.word	0x0800902f
 8005d44:	2301      	movs	r3, #1
 8005d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d48:	e7d4      	b.n	8005cf4 <_dtoa_r+0x2ac>
 8005d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d4c:	9306      	str	r3, [sp, #24]
 8005d4e:	9308      	str	r3, [sp, #32]
 8005d50:	e7b7      	b.n	8005cc2 <_dtoa_r+0x27a>
 8005d52:	3101      	adds	r1, #1
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	e7b7      	b.n	8005cc8 <_dtoa_r+0x280>
 8005d58:	69eb      	ldr	r3, [r5, #28]
 8005d5a:	9a03      	ldr	r2, [sp, #12]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	9b08      	ldr	r3, [sp, #32]
 8005d60:	2b0e      	cmp	r3, #14
 8005d62:	f200 80a8 	bhi.w	8005eb6 <_dtoa_r+0x46e>
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	f000 80a5 	beq.w	8005eb6 <_dtoa_r+0x46e>
 8005d6c:	f1bb 0f00 	cmp.w	fp, #0
 8005d70:	dd34      	ble.n	8005ddc <_dtoa_r+0x394>
 8005d72:	4b9a      	ldr	r3, [pc, #616]	; (8005fdc <_dtoa_r+0x594>)
 8005d74:	f00b 020f 	and.w	r2, fp, #15
 8005d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d88:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005d8c:	d016      	beq.n	8005dbc <_dtoa_r+0x374>
 8005d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d92:	4b93      	ldr	r3, [pc, #588]	; (8005fe0 <_dtoa_r+0x598>)
 8005d94:	2703      	movs	r7, #3
 8005d96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d9a:	f7fa fd33 	bl	8000804 <__aeabi_ddiv>
 8005d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005da2:	f004 040f 	and.w	r4, r4, #15
 8005da6:	4e8e      	ldr	r6, [pc, #568]	; (8005fe0 <_dtoa_r+0x598>)
 8005da8:	b954      	cbnz	r4, 8005dc0 <_dtoa_r+0x378>
 8005daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db2:	f7fa fd27 	bl	8000804 <__aeabi_ddiv>
 8005db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dba:	e029      	b.n	8005e10 <_dtoa_r+0x3c8>
 8005dbc:	2702      	movs	r7, #2
 8005dbe:	e7f2      	b.n	8005da6 <_dtoa_r+0x35e>
 8005dc0:	07e1      	lsls	r1, r4, #31
 8005dc2:	d508      	bpl.n	8005dd6 <_dtoa_r+0x38e>
 8005dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dcc:	f7fa fbf0 	bl	80005b0 <__aeabi_dmul>
 8005dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dd4:	3701      	adds	r7, #1
 8005dd6:	1064      	asrs	r4, r4, #1
 8005dd8:	3608      	adds	r6, #8
 8005dda:	e7e5      	b.n	8005da8 <_dtoa_r+0x360>
 8005ddc:	f000 80a5 	beq.w	8005f2a <_dtoa_r+0x4e2>
 8005de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005de4:	f1cb 0400 	rsb	r4, fp, #0
 8005de8:	4b7c      	ldr	r3, [pc, #496]	; (8005fdc <_dtoa_r+0x594>)
 8005dea:	f004 020f 	and.w	r2, r4, #15
 8005dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fbdb 	bl	80005b0 <__aeabi_dmul>
 8005dfa:	2702      	movs	r7, #2
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e02:	4e77      	ldr	r6, [pc, #476]	; (8005fe0 <_dtoa_r+0x598>)
 8005e04:	1124      	asrs	r4, r4, #4
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	f040 8084 	bne.w	8005f14 <_dtoa_r+0x4cc>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1d2      	bne.n	8005db6 <_dtoa_r+0x36e>
 8005e10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8087 	beq.w	8005f2e <_dtoa_r+0x4e6>
 8005e20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e24:	2200      	movs	r2, #0
 8005e26:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <_dtoa_r+0x59c>)
 8005e28:	f7fa fe34 	bl	8000a94 <__aeabi_dcmplt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d07e      	beq.n	8005f2e <_dtoa_r+0x4e6>
 8005e30:	9b08      	ldr	r3, [sp, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d07b      	beq.n	8005f2e <_dtoa_r+0x4e6>
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dd38      	ble.n	8005eae <_dtoa_r+0x466>
 8005e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e40:	2200      	movs	r2, #0
 8005e42:	4b69      	ldr	r3, [pc, #420]	; (8005fe8 <_dtoa_r+0x5a0>)
 8005e44:	f7fa fbb4 	bl	80005b0 <__aeabi_dmul>
 8005e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e4c:	9c06      	ldr	r4, [sp, #24]
 8005e4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005e52:	3701      	adds	r7, #1
 8005e54:	4638      	mov	r0, r7
 8005e56:	f7fa fb41 	bl	80004dc <__aeabi_i2d>
 8005e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5e:	f7fa fba7 	bl	80005b0 <__aeabi_dmul>
 8005e62:	2200      	movs	r2, #0
 8005e64:	4b61      	ldr	r3, [pc, #388]	; (8005fec <_dtoa_r+0x5a4>)
 8005e66:	f7fa f9ed 	bl	8000244 <__adddf3>
 8005e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e72:	9611      	str	r6, [sp, #68]	; 0x44
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	d15d      	bne.n	8005f34 <_dtoa_r+0x4ec>
 8005e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b5c      	ldr	r3, [pc, #368]	; (8005ff0 <_dtoa_r+0x5a8>)
 8005e80:	f7fa f9de 	bl	8000240 <__aeabi_dsub>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e8c:	4633      	mov	r3, r6
 8005e8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e90:	f7fa fe1e 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f040 8295 	bne.w	80063c4 <_dtoa_r+0x97c>
 8005e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ea0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ea4:	f7fa fdf6 	bl	8000a94 <__aeabi_dcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f040 8289 	bne.w	80063c0 <_dtoa_r+0x978>
 8005eae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005eb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f2c0 8151 	blt.w	8006160 <_dtoa_r+0x718>
 8005ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8005ec2:	f300 814d 	bgt.w	8006160 <_dtoa_r+0x718>
 8005ec6:	4b45      	ldr	r3, [pc, #276]	; (8005fdc <_dtoa_r+0x594>)
 8005ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f280 80da 	bge.w	8006090 <_dtoa_r+0x648>
 8005edc:	9b08      	ldr	r3, [sp, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f300 80d6 	bgt.w	8006090 <_dtoa_r+0x648>
 8005ee4:	f040 826b 	bne.w	80063be <_dtoa_r+0x976>
 8005ee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eec:	2200      	movs	r2, #0
 8005eee:	4b40      	ldr	r3, [pc, #256]	; (8005ff0 <_dtoa_r+0x5a8>)
 8005ef0:	f7fa fb5e 	bl	80005b0 <__aeabi_dmul>
 8005ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ef8:	f7fa fde0 	bl	8000abc <__aeabi_dcmpge>
 8005efc:	9c08      	ldr	r4, [sp, #32]
 8005efe:	4626      	mov	r6, r4
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 8241 	bne.w	8006388 <_dtoa_r+0x940>
 8005f06:	2331      	movs	r3, #49	; 0x31
 8005f08:	9f03      	ldr	r7, [sp, #12]
 8005f0a:	f10b 0b01 	add.w	fp, fp, #1
 8005f0e:	f807 3b01 	strb.w	r3, [r7], #1
 8005f12:	e23d      	b.n	8006390 <_dtoa_r+0x948>
 8005f14:	07e2      	lsls	r2, r4, #31
 8005f16:	d505      	bpl.n	8005f24 <_dtoa_r+0x4dc>
 8005f18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f1c:	f7fa fb48 	bl	80005b0 <__aeabi_dmul>
 8005f20:	2301      	movs	r3, #1
 8005f22:	3701      	adds	r7, #1
 8005f24:	1064      	asrs	r4, r4, #1
 8005f26:	3608      	adds	r6, #8
 8005f28:	e76d      	b.n	8005e06 <_dtoa_r+0x3be>
 8005f2a:	2702      	movs	r7, #2
 8005f2c:	e770      	b.n	8005e10 <_dtoa_r+0x3c8>
 8005f2e:	46d8      	mov	r8, fp
 8005f30:	9c08      	ldr	r4, [sp, #32]
 8005f32:	e78f      	b.n	8005e54 <_dtoa_r+0x40c>
 8005f34:	9903      	ldr	r1, [sp, #12]
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <_dtoa_r+0x594>)
 8005f38:	4421      	add	r1, r4
 8005f3a:	9112      	str	r1, [sp, #72]	; 0x48
 8005f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f4a:	2900      	cmp	r1, #0
 8005f4c:	d054      	beq.n	8005ff8 <_dtoa_r+0x5b0>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	4928      	ldr	r1, [pc, #160]	; (8005ff4 <_dtoa_r+0x5ac>)
 8005f52:	f7fa fc57 	bl	8000804 <__aeabi_ddiv>
 8005f56:	463b      	mov	r3, r7
 8005f58:	4632      	mov	r2, r6
 8005f5a:	f7fa f971 	bl	8000240 <__aeabi_dsub>
 8005f5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f62:	9f03      	ldr	r7, [sp, #12]
 8005f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f68:	f7fa fdd2 	bl	8000b10 <__aeabi_d2iz>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	f7fa fab5 	bl	80004dc <__aeabi_i2d>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f7a:	f7fa f961 	bl	8000240 <__aeabi_dsub>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	3430      	adds	r4, #48	; 0x30
 8005f84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f8c:	f807 4b01 	strb.w	r4, [r7], #1
 8005f90:	f7fa fd80 	bl	8000a94 <__aeabi_dcmplt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d173      	bne.n	8006080 <_dtoa_r+0x638>
 8005f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	4911      	ldr	r1, [pc, #68]	; (8005fe4 <_dtoa_r+0x59c>)
 8005fa0:	f7fa f94e 	bl	8000240 <__aeabi_dsub>
 8005fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fa8:	f7fa fd74 	bl	8000a94 <__aeabi_dcmplt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 80b6 	bne.w	800611e <_dtoa_r+0x6d6>
 8005fb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb4:	429f      	cmp	r7, r3
 8005fb6:	f43f af7a 	beq.w	8005eae <_dtoa_r+0x466>
 8005fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <_dtoa_r+0x5a0>)
 8005fc2:	f7fa faf5 	bl	80005b0 <__aeabi_dmul>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd0:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <_dtoa_r+0x5a0>)
 8005fd2:	f7fa faed 	bl	80005b0 <__aeabi_dmul>
 8005fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fda:	e7c3      	b.n	8005f64 <_dtoa_r+0x51c>
 8005fdc:	080090c8 	.word	0x080090c8
 8005fe0:	080090a0 	.word	0x080090a0
 8005fe4:	3ff00000 	.word	0x3ff00000
 8005fe8:	40240000 	.word	0x40240000
 8005fec:	401c0000 	.word	0x401c0000
 8005ff0:	40140000 	.word	0x40140000
 8005ff4:	3fe00000 	.word	0x3fe00000
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa fad8 	bl	80005b0 <__aeabi_dmul>
 8006000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006006:	9c03      	ldr	r4, [sp, #12]
 8006008:	9314      	str	r3, [sp, #80]	; 0x50
 800600a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600e:	f7fa fd7f 	bl	8000b10 <__aeabi_d2iz>
 8006012:	9015      	str	r0, [sp, #84]	; 0x54
 8006014:	f7fa fa62 	bl	80004dc <__aeabi_i2d>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006020:	f7fa f90e 	bl	8000240 <__aeabi_dsub>
 8006024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006026:	4606      	mov	r6, r0
 8006028:	3330      	adds	r3, #48	; 0x30
 800602a:	f804 3b01 	strb.w	r3, [r4], #1
 800602e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006030:	460f      	mov	r7, r1
 8006032:	429c      	cmp	r4, r3
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	d124      	bne.n	8006084 <_dtoa_r+0x63c>
 800603a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800603e:	4baf      	ldr	r3, [pc, #700]	; (80062fc <_dtoa_r+0x8b4>)
 8006040:	f7fa f900 	bl	8000244 <__adddf3>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa fd40 	bl	8000ad0 <__aeabi_dcmpgt>
 8006050:	2800      	cmp	r0, #0
 8006052:	d163      	bne.n	800611c <_dtoa_r+0x6d4>
 8006054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006058:	2000      	movs	r0, #0
 800605a:	49a8      	ldr	r1, [pc, #672]	; (80062fc <_dtoa_r+0x8b4>)
 800605c:	f7fa f8f0 	bl	8000240 <__aeabi_dsub>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa fd14 	bl	8000a94 <__aeabi_dcmplt>
 800606c:	2800      	cmp	r0, #0
 800606e:	f43f af1e 	beq.w	8005eae <_dtoa_r+0x466>
 8006072:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006074:	1e7b      	subs	r3, r7, #1
 8006076:	9314      	str	r3, [sp, #80]	; 0x50
 8006078:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d0f8      	beq.n	8006072 <_dtoa_r+0x62a>
 8006080:	46c3      	mov	fp, r8
 8006082:	e03b      	b.n	80060fc <_dtoa_r+0x6b4>
 8006084:	4b9e      	ldr	r3, [pc, #632]	; (8006300 <_dtoa_r+0x8b8>)
 8006086:	f7fa fa93 	bl	80005b0 <__aeabi_dmul>
 800608a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800608e:	e7bc      	b.n	800600a <_dtoa_r+0x5c2>
 8006090:	9f03      	ldr	r7, [sp, #12]
 8006092:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa fbb1 	bl	8000804 <__aeabi_ddiv>
 80060a2:	f7fa fd35 	bl	8000b10 <__aeabi_d2iz>
 80060a6:	4604      	mov	r4, r0
 80060a8:	f7fa fa18 	bl	80004dc <__aeabi_i2d>
 80060ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060b0:	f7fa fa7e 	bl	80005b0 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4640      	mov	r0, r8
 80060ba:	4649      	mov	r1, r9
 80060bc:	f7fa f8c0 	bl	8000240 <__aeabi_dsub>
 80060c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80060c4:	f807 6b01 	strb.w	r6, [r7], #1
 80060c8:	9e03      	ldr	r6, [sp, #12]
 80060ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80060ce:	1bbe      	subs	r6, r7, r6
 80060d0:	45b4      	cmp	ip, r6
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	d136      	bne.n	8006146 <_dtoa_r+0x6fe>
 80060d8:	f7fa f8b4 	bl	8000244 <__adddf3>
 80060dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060e0:	4680      	mov	r8, r0
 80060e2:	4689      	mov	r9, r1
 80060e4:	f7fa fcf4 	bl	8000ad0 <__aeabi_dcmpgt>
 80060e8:	bb58      	cbnz	r0, 8006142 <_dtoa_r+0x6fa>
 80060ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060ee:	4640      	mov	r0, r8
 80060f0:	4649      	mov	r1, r9
 80060f2:	f7fa fcc5 	bl	8000a80 <__aeabi_dcmpeq>
 80060f6:	b108      	cbz	r0, 80060fc <_dtoa_r+0x6b4>
 80060f8:	07e3      	lsls	r3, r4, #31
 80060fa:	d422      	bmi.n	8006142 <_dtoa_r+0x6fa>
 80060fc:	4651      	mov	r1, sl
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 fbc2 	bl	8006888 <_Bfree>
 8006104:	2300      	movs	r3, #0
 8006106:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006108:	703b      	strb	r3, [r7, #0]
 800610a:	f10b 0301 	add.w	r3, fp, #1
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006112:	2b00      	cmp	r3, #0
 8006114:	f43f ace6 	beq.w	8005ae4 <_dtoa_r+0x9c>
 8006118:	601f      	str	r7, [r3, #0]
 800611a:	e4e3      	b.n	8005ae4 <_dtoa_r+0x9c>
 800611c:	4627      	mov	r7, r4
 800611e:	463b      	mov	r3, r7
 8006120:	461f      	mov	r7, r3
 8006122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006126:	2a39      	cmp	r2, #57	; 0x39
 8006128:	d107      	bne.n	800613a <_dtoa_r+0x6f2>
 800612a:	9a03      	ldr	r2, [sp, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d1f7      	bne.n	8006120 <_dtoa_r+0x6d8>
 8006130:	2230      	movs	r2, #48	; 0x30
 8006132:	9903      	ldr	r1, [sp, #12]
 8006134:	f108 0801 	add.w	r8, r8, #1
 8006138:	700a      	strb	r2, [r1, #0]
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	3201      	adds	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e79e      	b.n	8006080 <_dtoa_r+0x638>
 8006142:	46d8      	mov	r8, fp
 8006144:	e7eb      	b.n	800611e <_dtoa_r+0x6d6>
 8006146:	2200      	movs	r2, #0
 8006148:	4b6d      	ldr	r3, [pc, #436]	; (8006300 <_dtoa_r+0x8b8>)
 800614a:	f7fa fa31 	bl	80005b0 <__aeabi_dmul>
 800614e:	2200      	movs	r2, #0
 8006150:	2300      	movs	r3, #0
 8006152:	4680      	mov	r8, r0
 8006154:	4689      	mov	r9, r1
 8006156:	f7fa fc93 	bl	8000a80 <__aeabi_dcmpeq>
 800615a:	2800      	cmp	r0, #0
 800615c:	d09b      	beq.n	8006096 <_dtoa_r+0x64e>
 800615e:	e7cd      	b.n	80060fc <_dtoa_r+0x6b4>
 8006160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006162:	2a00      	cmp	r2, #0
 8006164:	f000 80c4 	beq.w	80062f0 <_dtoa_r+0x8a8>
 8006168:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800616a:	2a01      	cmp	r2, #1
 800616c:	f300 80a8 	bgt.w	80062c0 <_dtoa_r+0x878>
 8006170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 80a0 	beq.w	80062b8 <_dtoa_r+0x870>
 8006178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800617c:	464f      	mov	r7, r9
 800617e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006182:	2101      	movs	r1, #1
 8006184:	441a      	add	r2, r3
 8006186:	4628      	mov	r0, r5
 8006188:	4499      	add	r9, r3
 800618a:	9209      	str	r2, [sp, #36]	; 0x24
 800618c:	f000 fc7c 	bl	8006a88 <__i2b>
 8006190:	4606      	mov	r6, r0
 8006192:	b15f      	cbz	r7, 80061ac <_dtoa_r+0x764>
 8006194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd08      	ble.n	80061ac <_dtoa_r+0x764>
 800619a:	42bb      	cmp	r3, r7
 800619c:	bfa8      	it	ge
 800619e:	463b      	movge	r3, r7
 80061a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a2:	eba9 0903 	sub.w	r9, r9, r3
 80061a6:	1aff      	subs	r7, r7, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	9309      	str	r3, [sp, #36]	; 0x24
 80061ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ae:	b1f3      	cbz	r3, 80061ee <_dtoa_r+0x7a6>
 80061b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80a0 	beq.w	80062f8 <_dtoa_r+0x8b0>
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	dd10      	ble.n	80061de <_dtoa_r+0x796>
 80061bc:	4631      	mov	r1, r6
 80061be:	4622      	mov	r2, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fd1f 	bl	8006c04 <__pow5mult>
 80061c6:	4652      	mov	r2, sl
 80061c8:	4601      	mov	r1, r0
 80061ca:	4606      	mov	r6, r0
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 fc71 	bl	8006ab4 <__multiply>
 80061d2:	4680      	mov	r8, r0
 80061d4:	4651      	mov	r1, sl
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fb56 	bl	8006888 <_Bfree>
 80061dc:	46c2      	mov	sl, r8
 80061de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e0:	1b1a      	subs	r2, r3, r4
 80061e2:	d004      	beq.n	80061ee <_dtoa_r+0x7a6>
 80061e4:	4651      	mov	r1, sl
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 fd0c 	bl	8006c04 <__pow5mult>
 80061ec:	4682      	mov	sl, r0
 80061ee:	2101      	movs	r1, #1
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fc49 	bl	8006a88 <__i2b>
 80061f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f8:	4604      	mov	r4, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f340 8082 	ble.w	8006304 <_dtoa_r+0x8bc>
 8006200:	461a      	mov	r2, r3
 8006202:	4601      	mov	r1, r0
 8006204:	4628      	mov	r0, r5
 8006206:	f000 fcfd 	bl	8006c04 <__pow5mult>
 800620a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620c:	4604      	mov	r4, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	dd7b      	ble.n	800630a <_dtoa_r+0x8c2>
 8006212:	f04f 0800 	mov.w	r8, #0
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800621c:	6918      	ldr	r0, [r3, #16]
 800621e:	f000 fbe5 	bl	80069ec <__hi0bits>
 8006222:	f1c0 0020 	rsb	r0, r0, #32
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	4418      	add	r0, r3
 800622a:	f010 001f 	ands.w	r0, r0, #31
 800622e:	f000 8092 	beq.w	8006356 <_dtoa_r+0x90e>
 8006232:	f1c0 0320 	rsb	r3, r0, #32
 8006236:	2b04      	cmp	r3, #4
 8006238:	f340 8085 	ble.w	8006346 <_dtoa_r+0x8fe>
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	f1c0 001c 	rsb	r0, r0, #28
 8006242:	4403      	add	r3, r0
 8006244:	4481      	add	r9, r0
 8006246:	4407      	add	r7, r0
 8006248:	9309      	str	r3, [sp, #36]	; 0x24
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	dd05      	ble.n	800625c <_dtoa_r+0x814>
 8006250:	4651      	mov	r1, sl
 8006252:	464a      	mov	r2, r9
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fd2f 	bl	8006cb8 <__lshift>
 800625a:	4682      	mov	sl, r0
 800625c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	dd05      	ble.n	800626e <_dtoa_r+0x826>
 8006262:	4621      	mov	r1, r4
 8006264:	461a      	mov	r2, r3
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fd26 	bl	8006cb8 <__lshift>
 800626c:	4604      	mov	r4, r0
 800626e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d072      	beq.n	800635a <_dtoa_r+0x912>
 8006274:	4621      	mov	r1, r4
 8006276:	4650      	mov	r0, sl
 8006278:	f000 fd8a 	bl	8006d90 <__mcmp>
 800627c:	2800      	cmp	r0, #0
 800627e:	da6c      	bge.n	800635a <_dtoa_r+0x912>
 8006280:	2300      	movs	r3, #0
 8006282:	4651      	mov	r1, sl
 8006284:	220a      	movs	r2, #10
 8006286:	4628      	mov	r0, r5
 8006288:	f000 fb20 	bl	80068cc <__multadd>
 800628c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800628e:	4682      	mov	sl, r0
 8006290:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 81ac 	beq.w	80065f2 <_dtoa_r+0xbaa>
 800629a:	2300      	movs	r3, #0
 800629c:	4631      	mov	r1, r6
 800629e:	220a      	movs	r2, #10
 80062a0:	4628      	mov	r0, r5
 80062a2:	f000 fb13 	bl	80068cc <__multadd>
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	4606      	mov	r6, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f300 8093 	bgt.w	80063d6 <_dtoa_r+0x98e>
 80062b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	dc59      	bgt.n	800636a <_dtoa_r+0x922>
 80062b6:	e08e      	b.n	80063d6 <_dtoa_r+0x98e>
 80062b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062be:	e75d      	b.n	800617c <_dtoa_r+0x734>
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	1e5c      	subs	r4, r3, #1
 80062c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	bfbf      	itttt	lt
 80062ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80062ce:	1ae3      	sublt	r3, r4, r3
 80062d0:	18d2      	addlt	r2, r2, r3
 80062d2:	bfa8      	it	ge
 80062d4:	1b1c      	subge	r4, r3, r4
 80062d6:	9b08      	ldr	r3, [sp, #32]
 80062d8:	bfbe      	ittt	lt
 80062da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80062dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80062de:	2400      	movlt	r4, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bfb5      	itete	lt
 80062e4:	eba9 0703 	sublt.w	r7, r9, r3
 80062e8:	464f      	movge	r7, r9
 80062ea:	2300      	movlt	r3, #0
 80062ec:	9b08      	ldrge	r3, [sp, #32]
 80062ee:	e747      	b.n	8006180 <_dtoa_r+0x738>
 80062f0:	464f      	mov	r7, r9
 80062f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062f6:	e74c      	b.n	8006192 <_dtoa_r+0x74a>
 80062f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fa:	e773      	b.n	80061e4 <_dtoa_r+0x79c>
 80062fc:	3fe00000 	.word	0x3fe00000
 8006300:	40240000 	.word	0x40240000
 8006304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006306:	2b01      	cmp	r3, #1
 8006308:	dc18      	bgt.n	800633c <_dtoa_r+0x8f4>
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	b9b3      	cbnz	r3, 800633c <_dtoa_r+0x8f4>
 800630e:	9b05      	ldr	r3, [sp, #20]
 8006310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006314:	b993      	cbnz	r3, 800633c <_dtoa_r+0x8f4>
 8006316:	9b05      	ldr	r3, [sp, #20]
 8006318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800631c:	0d1b      	lsrs	r3, r3, #20
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	b17b      	cbz	r3, 8006342 <_dtoa_r+0x8fa>
 8006322:	f04f 0801 	mov.w	r8, #1
 8006326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006328:	f109 0901 	add.w	r9, r9, #1
 800632c:	3301      	adds	r3, #1
 800632e:	9309      	str	r3, [sp, #36]	; 0x24
 8006330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	f47f af6f 	bne.w	8006216 <_dtoa_r+0x7ce>
 8006338:	2001      	movs	r0, #1
 800633a:	e774      	b.n	8006226 <_dtoa_r+0x7de>
 800633c:	f04f 0800 	mov.w	r8, #0
 8006340:	e7f6      	b.n	8006330 <_dtoa_r+0x8e8>
 8006342:	4698      	mov	r8, r3
 8006344:	e7f4      	b.n	8006330 <_dtoa_r+0x8e8>
 8006346:	d080      	beq.n	800624a <_dtoa_r+0x802>
 8006348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800634a:	331c      	adds	r3, #28
 800634c:	441a      	add	r2, r3
 800634e:	4499      	add	r9, r3
 8006350:	441f      	add	r7, r3
 8006352:	9209      	str	r2, [sp, #36]	; 0x24
 8006354:	e779      	b.n	800624a <_dtoa_r+0x802>
 8006356:	4603      	mov	r3, r0
 8006358:	e7f6      	b.n	8006348 <_dtoa_r+0x900>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dc34      	bgt.n	80063ca <_dtoa_r+0x982>
 8006360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006362:	2b02      	cmp	r3, #2
 8006364:	dd31      	ble.n	80063ca <_dtoa_r+0x982>
 8006366:	9b08      	ldr	r3, [sp, #32]
 8006368:	9306      	str	r3, [sp, #24]
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	b963      	cbnz	r3, 8006388 <_dtoa_r+0x940>
 800636e:	4621      	mov	r1, r4
 8006370:	2205      	movs	r2, #5
 8006372:	4628      	mov	r0, r5
 8006374:	f000 faaa 	bl	80068cc <__multadd>
 8006378:	4601      	mov	r1, r0
 800637a:	4604      	mov	r4, r0
 800637c:	4650      	mov	r0, sl
 800637e:	f000 fd07 	bl	8006d90 <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	f73f adbf 	bgt.w	8005f06 <_dtoa_r+0x4be>
 8006388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800638a:	9f03      	ldr	r7, [sp, #12]
 800638c:	ea6f 0b03 	mvn.w	fp, r3
 8006390:	f04f 0800 	mov.w	r8, #0
 8006394:	4621      	mov	r1, r4
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fa76 	bl	8006888 <_Bfree>
 800639c:	2e00      	cmp	r6, #0
 800639e:	f43f aead 	beq.w	80060fc <_dtoa_r+0x6b4>
 80063a2:	f1b8 0f00 	cmp.w	r8, #0
 80063a6:	d005      	beq.n	80063b4 <_dtoa_r+0x96c>
 80063a8:	45b0      	cmp	r8, r6
 80063aa:	d003      	beq.n	80063b4 <_dtoa_r+0x96c>
 80063ac:	4641      	mov	r1, r8
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fa6a 	bl	8006888 <_Bfree>
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fa66 	bl	8006888 <_Bfree>
 80063bc:	e69e      	b.n	80060fc <_dtoa_r+0x6b4>
 80063be:	2400      	movs	r4, #0
 80063c0:	4626      	mov	r6, r4
 80063c2:	e7e1      	b.n	8006388 <_dtoa_r+0x940>
 80063c4:	46c3      	mov	fp, r8
 80063c6:	4626      	mov	r6, r4
 80063c8:	e59d      	b.n	8005f06 <_dtoa_r+0x4be>
 80063ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80c8 	beq.w	8006562 <_dtoa_r+0xb1a>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	9306      	str	r3, [sp, #24]
 80063d6:	2f00      	cmp	r7, #0
 80063d8:	dd05      	ble.n	80063e6 <_dtoa_r+0x99e>
 80063da:	4631      	mov	r1, r6
 80063dc:	463a      	mov	r2, r7
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 fc6a 	bl	8006cb8 <__lshift>
 80063e4:	4606      	mov	r6, r0
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	d05b      	beq.n	80064a4 <_dtoa_r+0xa5c>
 80063ec:	4628      	mov	r0, r5
 80063ee:	6871      	ldr	r1, [r6, #4]
 80063f0:	f000 fa0a 	bl	8006808 <_Balloc>
 80063f4:	4607      	mov	r7, r0
 80063f6:	b928      	cbnz	r0, 8006404 <_dtoa_r+0x9bc>
 80063f8:	4602      	mov	r2, r0
 80063fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063fe:	4b81      	ldr	r3, [pc, #516]	; (8006604 <_dtoa_r+0xbbc>)
 8006400:	f7ff bb36 	b.w	8005a70 <_dtoa_r+0x28>
 8006404:	6932      	ldr	r2, [r6, #16]
 8006406:	f106 010c 	add.w	r1, r6, #12
 800640a:	3202      	adds	r2, #2
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	300c      	adds	r0, #12
 8006410:	f001 fff6 	bl	8008400 <memcpy>
 8006414:	2201      	movs	r2, #1
 8006416:	4639      	mov	r1, r7
 8006418:	4628      	mov	r0, r5
 800641a:	f000 fc4d 	bl	8006cb8 <__lshift>
 800641e:	46b0      	mov	r8, r6
 8006420:	4606      	mov	r6, r0
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	9a03      	ldr	r2, [sp, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9b06      	ldr	r3, [sp, #24]
 800642c:	4413      	add	r3, r2
 800642e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	930a      	str	r3, [sp, #40]	; 0x28
 8006438:	9b08      	ldr	r3, [sp, #32]
 800643a:	4621      	mov	r1, r4
 800643c:	3b01      	subs	r3, #1
 800643e:	4650      	mov	r0, sl
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	f7ff fa77 	bl	8005934 <quorem>
 8006446:	4641      	mov	r1, r8
 8006448:	9006      	str	r0, [sp, #24]
 800644a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800644e:	4650      	mov	r0, sl
 8006450:	f000 fc9e 	bl	8006d90 <__mcmp>
 8006454:	4632      	mov	r2, r6
 8006456:	9009      	str	r0, [sp, #36]	; 0x24
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fcb4 	bl	8006dc8 <__mdiff>
 8006460:	68c2      	ldr	r2, [r0, #12]
 8006462:	4607      	mov	r7, r0
 8006464:	bb02      	cbnz	r2, 80064a8 <_dtoa_r+0xa60>
 8006466:	4601      	mov	r1, r0
 8006468:	4650      	mov	r0, sl
 800646a:	f000 fc91 	bl	8006d90 <__mcmp>
 800646e:	4602      	mov	r2, r0
 8006470:	4639      	mov	r1, r7
 8006472:	4628      	mov	r0, r5
 8006474:	920c      	str	r2, [sp, #48]	; 0x30
 8006476:	f000 fa07 	bl	8006888 <_Bfree>
 800647a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800647c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800647e:	9f08      	ldr	r7, [sp, #32]
 8006480:	ea43 0102 	orr.w	r1, r3, r2
 8006484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006486:	4319      	orrs	r1, r3
 8006488:	d110      	bne.n	80064ac <_dtoa_r+0xa64>
 800648a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800648e:	d029      	beq.n	80064e4 <_dtoa_r+0xa9c>
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd02      	ble.n	800649c <_dtoa_r+0xa54>
 8006496:	9b06      	ldr	r3, [sp, #24]
 8006498:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	f883 9000 	strb.w	r9, [r3]
 80064a2:	e777      	b.n	8006394 <_dtoa_r+0x94c>
 80064a4:	4630      	mov	r0, r6
 80064a6:	e7ba      	b.n	800641e <_dtoa_r+0x9d6>
 80064a8:	2201      	movs	r2, #1
 80064aa:	e7e1      	b.n	8006470 <_dtoa_r+0xa28>
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db04      	blt.n	80064bc <_dtoa_r+0xa74>
 80064b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80064b4:	430b      	orrs	r3, r1
 80064b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064b8:	430b      	orrs	r3, r1
 80064ba:	d120      	bne.n	80064fe <_dtoa_r+0xab6>
 80064bc:	2a00      	cmp	r2, #0
 80064be:	dded      	ble.n	800649c <_dtoa_r+0xa54>
 80064c0:	4651      	mov	r1, sl
 80064c2:	2201      	movs	r2, #1
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fbf7 	bl	8006cb8 <__lshift>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4682      	mov	sl, r0
 80064ce:	f000 fc5f 	bl	8006d90 <__mcmp>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	dc03      	bgt.n	80064de <_dtoa_r+0xa96>
 80064d6:	d1e1      	bne.n	800649c <_dtoa_r+0xa54>
 80064d8:	f019 0f01 	tst.w	r9, #1
 80064dc:	d0de      	beq.n	800649c <_dtoa_r+0xa54>
 80064de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064e2:	d1d8      	bne.n	8006496 <_dtoa_r+0xa4e>
 80064e4:	2339      	movs	r3, #57	; 0x39
 80064e6:	9a04      	ldr	r2, [sp, #16]
 80064e8:	7013      	strb	r3, [r2, #0]
 80064ea:	463b      	mov	r3, r7
 80064ec:	461f      	mov	r7, r3
 80064ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2a39      	cmp	r2, #57	; 0x39
 80064f6:	d06b      	beq.n	80065d0 <_dtoa_r+0xb88>
 80064f8:	3201      	adds	r2, #1
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e74a      	b.n	8006394 <_dtoa_r+0x94c>
 80064fe:	2a00      	cmp	r2, #0
 8006500:	dd07      	ble.n	8006512 <_dtoa_r+0xaca>
 8006502:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006506:	d0ed      	beq.n	80064e4 <_dtoa_r+0xa9c>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	f109 0301 	add.w	r3, r9, #1
 800650e:	7013      	strb	r3, [r2, #0]
 8006510:	e740      	b.n	8006394 <_dtoa_r+0x94c>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006516:	f803 9c01 	strb.w	r9, [r3, #-1]
 800651a:	4293      	cmp	r3, r2
 800651c:	d042      	beq.n	80065a4 <_dtoa_r+0xb5c>
 800651e:	4651      	mov	r1, sl
 8006520:	2300      	movs	r3, #0
 8006522:	220a      	movs	r2, #10
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f9d1 	bl	80068cc <__multadd>
 800652a:	45b0      	cmp	r8, r6
 800652c:	4682      	mov	sl, r0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	f04f 020a 	mov.w	r2, #10
 8006536:	4641      	mov	r1, r8
 8006538:	4628      	mov	r0, r5
 800653a:	d107      	bne.n	800654c <_dtoa_r+0xb04>
 800653c:	f000 f9c6 	bl	80068cc <__multadd>
 8006540:	4680      	mov	r8, r0
 8006542:	4606      	mov	r6, r0
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	3301      	adds	r3, #1
 8006548:	9308      	str	r3, [sp, #32]
 800654a:	e775      	b.n	8006438 <_dtoa_r+0x9f0>
 800654c:	f000 f9be 	bl	80068cc <__multadd>
 8006550:	4631      	mov	r1, r6
 8006552:	4680      	mov	r8, r0
 8006554:	2300      	movs	r3, #0
 8006556:	220a      	movs	r2, #10
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f9b7 	bl	80068cc <__multadd>
 800655e:	4606      	mov	r6, r0
 8006560:	e7f0      	b.n	8006544 <_dtoa_r+0xafc>
 8006562:	9b08      	ldr	r3, [sp, #32]
 8006564:	9306      	str	r3, [sp, #24]
 8006566:	9f03      	ldr	r7, [sp, #12]
 8006568:	4621      	mov	r1, r4
 800656a:	4650      	mov	r0, sl
 800656c:	f7ff f9e2 	bl	8005934 <quorem>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006576:	f807 9b01 	strb.w	r9, [r7], #1
 800657a:	1afa      	subs	r2, r7, r3
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	4293      	cmp	r3, r2
 8006580:	dd07      	ble.n	8006592 <_dtoa_r+0xb4a>
 8006582:	4651      	mov	r1, sl
 8006584:	2300      	movs	r3, #0
 8006586:	220a      	movs	r2, #10
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f99f 	bl	80068cc <__multadd>
 800658e:	4682      	mov	sl, r0
 8006590:	e7ea      	b.n	8006568 <_dtoa_r+0xb20>
 8006592:	9b06      	ldr	r3, [sp, #24]
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfcc      	ite	gt
 800659c:	461f      	movgt	r7, r3
 800659e:	2701      	movle	r7, #1
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	441f      	add	r7, r3
 80065a4:	4651      	mov	r1, sl
 80065a6:	2201      	movs	r2, #1
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fb85 	bl	8006cb8 <__lshift>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4682      	mov	sl, r0
 80065b2:	f000 fbed 	bl	8006d90 <__mcmp>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	dc97      	bgt.n	80064ea <_dtoa_r+0xaa2>
 80065ba:	d102      	bne.n	80065c2 <_dtoa_r+0xb7a>
 80065bc:	f019 0f01 	tst.w	r9, #1
 80065c0:	d193      	bne.n	80064ea <_dtoa_r+0xaa2>
 80065c2:	463b      	mov	r3, r7
 80065c4:	461f      	mov	r7, r3
 80065c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ca:	2a30      	cmp	r2, #48	; 0x30
 80065cc:	d0fa      	beq.n	80065c4 <_dtoa_r+0xb7c>
 80065ce:	e6e1      	b.n	8006394 <_dtoa_r+0x94c>
 80065d0:	9a03      	ldr	r2, [sp, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d18a      	bne.n	80064ec <_dtoa_r+0xaa4>
 80065d6:	2331      	movs	r3, #49	; 0x31
 80065d8:	f10b 0b01 	add.w	fp, fp, #1
 80065dc:	e797      	b.n	800650e <_dtoa_r+0xac6>
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <_dtoa_r+0xbc0>)
 80065e0:	f7ff ba9f 	b.w	8005b22 <_dtoa_r+0xda>
 80065e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f47f aa77 	bne.w	8005ada <_dtoa_r+0x92>
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <_dtoa_r+0xbc4>)
 80065ee:	f7ff ba98 	b.w	8005b22 <_dtoa_r+0xda>
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dcb6      	bgt.n	8006566 <_dtoa_r+0xb1e>
 80065f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	f73f aeb5 	bgt.w	800636a <_dtoa_r+0x922>
 8006600:	e7b1      	b.n	8006566 <_dtoa_r+0xb1e>
 8006602:	bf00      	nop
 8006604:	0800902f 	.word	0x0800902f
 8006608:	08008f8a 	.word	0x08008f8a
 800660c:	08008fb3 	.word	0x08008fb3

08006610 <_free_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4605      	mov	r5, r0
 8006614:	2900      	cmp	r1, #0
 8006616:	d040      	beq.n	800669a <_free_r+0x8a>
 8006618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661c:	1f0c      	subs	r4, r1, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfb8      	it	lt
 8006622:	18e4      	addlt	r4, r4, r3
 8006624:	f000 f8e4 	bl	80067f0 <__malloc_lock>
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <_free_r+0x8c>)
 800662a:	6813      	ldr	r3, [r2, #0]
 800662c:	b933      	cbnz	r3, 800663c <_free_r+0x2c>
 800662e:	6063      	str	r3, [r4, #4]
 8006630:	6014      	str	r4, [r2, #0]
 8006632:	4628      	mov	r0, r5
 8006634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006638:	f000 b8e0 	b.w	80067fc <__malloc_unlock>
 800663c:	42a3      	cmp	r3, r4
 800663e:	d908      	bls.n	8006652 <_free_r+0x42>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	1821      	adds	r1, r4, r0
 8006644:	428b      	cmp	r3, r1
 8006646:	bf01      	itttt	eq
 8006648:	6819      	ldreq	r1, [r3, #0]
 800664a:	685b      	ldreq	r3, [r3, #4]
 800664c:	1809      	addeq	r1, r1, r0
 800664e:	6021      	streq	r1, [r4, #0]
 8006650:	e7ed      	b.n	800662e <_free_r+0x1e>
 8006652:	461a      	mov	r2, r3
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b10b      	cbz	r3, 800665c <_free_r+0x4c>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d9fa      	bls.n	8006652 <_free_r+0x42>
 800665c:	6811      	ldr	r1, [r2, #0]
 800665e:	1850      	adds	r0, r2, r1
 8006660:	42a0      	cmp	r0, r4
 8006662:	d10b      	bne.n	800667c <_free_r+0x6c>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	4401      	add	r1, r0
 8006668:	1850      	adds	r0, r2, r1
 800666a:	4283      	cmp	r3, r0
 800666c:	6011      	str	r1, [r2, #0]
 800666e:	d1e0      	bne.n	8006632 <_free_r+0x22>
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4408      	add	r0, r1
 8006676:	6010      	str	r0, [r2, #0]
 8006678:	6053      	str	r3, [r2, #4]
 800667a:	e7da      	b.n	8006632 <_free_r+0x22>
 800667c:	d902      	bls.n	8006684 <_free_r+0x74>
 800667e:	230c      	movs	r3, #12
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	e7d6      	b.n	8006632 <_free_r+0x22>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	1821      	adds	r1, r4, r0
 8006688:	428b      	cmp	r3, r1
 800668a:	bf01      	itttt	eq
 800668c:	6819      	ldreq	r1, [r3, #0]
 800668e:	685b      	ldreq	r3, [r3, #4]
 8006690:	1809      	addeq	r1, r1, r0
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6054      	str	r4, [r2, #4]
 8006698:	e7cb      	b.n	8006632 <_free_r+0x22>
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20000448 	.word	0x20000448

080066a0 <malloc>:
 80066a0:	4b02      	ldr	r3, [pc, #8]	; (80066ac <malloc+0xc>)
 80066a2:	4601      	mov	r1, r0
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f000 b823 	b.w	80066f0 <_malloc_r>
 80066aa:	bf00      	nop
 80066ac:	20000068 	.word	0x20000068

080066b0 <sbrk_aligned>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4e0e      	ldr	r6, [pc, #56]	; (80066ec <sbrk_aligned+0x3c>)
 80066b4:	460c      	mov	r4, r1
 80066b6:	6831      	ldr	r1, [r6, #0]
 80066b8:	4605      	mov	r5, r0
 80066ba:	b911      	cbnz	r1, 80066c2 <sbrk_aligned+0x12>
 80066bc:	f001 fe90 	bl	80083e0 <_sbrk_r>
 80066c0:	6030      	str	r0, [r6, #0]
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f001 fe8b 	bl	80083e0 <_sbrk_r>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d00a      	beq.n	80066e4 <sbrk_aligned+0x34>
 80066ce:	1cc4      	adds	r4, r0, #3
 80066d0:	f024 0403 	bic.w	r4, r4, #3
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	d007      	beq.n	80066e8 <sbrk_aligned+0x38>
 80066d8:	1a21      	subs	r1, r4, r0
 80066da:	4628      	mov	r0, r5
 80066dc:	f001 fe80 	bl	80083e0 <_sbrk_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d101      	bne.n	80066e8 <sbrk_aligned+0x38>
 80066e4:	f04f 34ff 	mov.w	r4, #4294967295
 80066e8:	4620      	mov	r0, r4
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	2000044c 	.word	0x2000044c

080066f0 <_malloc_r>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	1ccd      	adds	r5, r1, #3
 80066f6:	f025 0503 	bic.w	r5, r5, #3
 80066fa:	3508      	adds	r5, #8
 80066fc:	2d0c      	cmp	r5, #12
 80066fe:	bf38      	it	cc
 8006700:	250c      	movcc	r5, #12
 8006702:	2d00      	cmp	r5, #0
 8006704:	4607      	mov	r7, r0
 8006706:	db01      	blt.n	800670c <_malloc_r+0x1c>
 8006708:	42a9      	cmp	r1, r5
 800670a:	d905      	bls.n	8006718 <_malloc_r+0x28>
 800670c:	230c      	movs	r3, #12
 800670e:	2600      	movs	r6, #0
 8006710:	603b      	str	r3, [r7, #0]
 8006712:	4630      	mov	r0, r6
 8006714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067ec <_malloc_r+0xfc>
 800671c:	f000 f868 	bl	80067f0 <__malloc_lock>
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	461c      	mov	r4, r3
 8006726:	bb5c      	cbnz	r4, 8006780 <_malloc_r+0x90>
 8006728:	4629      	mov	r1, r5
 800672a:	4638      	mov	r0, r7
 800672c:	f7ff ffc0 	bl	80066b0 <sbrk_aligned>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	4604      	mov	r4, r0
 8006734:	d155      	bne.n	80067e2 <_malloc_r+0xf2>
 8006736:	f8d8 4000 	ldr.w	r4, [r8]
 800673a:	4626      	mov	r6, r4
 800673c:	2e00      	cmp	r6, #0
 800673e:	d145      	bne.n	80067cc <_malloc_r+0xdc>
 8006740:	2c00      	cmp	r4, #0
 8006742:	d048      	beq.n	80067d6 <_malloc_r+0xe6>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	4631      	mov	r1, r6
 8006748:	4638      	mov	r0, r7
 800674a:	eb04 0903 	add.w	r9, r4, r3
 800674e:	f001 fe47 	bl	80083e0 <_sbrk_r>
 8006752:	4581      	cmp	r9, r0
 8006754:	d13f      	bne.n	80067d6 <_malloc_r+0xe6>
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	4638      	mov	r0, r7
 800675a:	1a6d      	subs	r5, r5, r1
 800675c:	4629      	mov	r1, r5
 800675e:	f7ff ffa7 	bl	80066b0 <sbrk_aligned>
 8006762:	3001      	adds	r0, #1
 8006764:	d037      	beq.n	80067d6 <_malloc_r+0xe6>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	442b      	add	r3, r5
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d038      	beq.n	80067e6 <_malloc_r+0xf6>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	42a2      	cmp	r2, r4
 8006778:	d12b      	bne.n	80067d2 <_malloc_r+0xe2>
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	e00f      	b.n	80067a0 <_malloc_r+0xb0>
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	1b52      	subs	r2, r2, r5
 8006784:	d41f      	bmi.n	80067c6 <_malloc_r+0xd6>
 8006786:	2a0b      	cmp	r2, #11
 8006788:	d917      	bls.n	80067ba <_malloc_r+0xca>
 800678a:	1961      	adds	r1, r4, r5
 800678c:	42a3      	cmp	r3, r4
 800678e:	6025      	str	r5, [r4, #0]
 8006790:	bf18      	it	ne
 8006792:	6059      	strne	r1, [r3, #4]
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	bf08      	it	eq
 8006798:	f8c8 1000 	streq.w	r1, [r8]
 800679c:	5162      	str	r2, [r4, r5]
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	4638      	mov	r0, r7
 80067a2:	f104 060b 	add.w	r6, r4, #11
 80067a6:	f000 f829 	bl	80067fc <__malloc_unlock>
 80067aa:	f026 0607 	bic.w	r6, r6, #7
 80067ae:	1d23      	adds	r3, r4, #4
 80067b0:	1af2      	subs	r2, r6, r3
 80067b2:	d0ae      	beq.n	8006712 <_malloc_r+0x22>
 80067b4:	1b9b      	subs	r3, r3, r6
 80067b6:	50a3      	str	r3, [r4, r2]
 80067b8:	e7ab      	b.n	8006712 <_malloc_r+0x22>
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	6862      	ldr	r2, [r4, #4]
 80067be:	d1dd      	bne.n	800677c <_malloc_r+0x8c>
 80067c0:	f8c8 2000 	str.w	r2, [r8]
 80067c4:	e7ec      	b.n	80067a0 <_malloc_r+0xb0>
 80067c6:	4623      	mov	r3, r4
 80067c8:	6864      	ldr	r4, [r4, #4]
 80067ca:	e7ac      	b.n	8006726 <_malloc_r+0x36>
 80067cc:	4634      	mov	r4, r6
 80067ce:	6876      	ldr	r6, [r6, #4]
 80067d0:	e7b4      	b.n	800673c <_malloc_r+0x4c>
 80067d2:	4613      	mov	r3, r2
 80067d4:	e7cc      	b.n	8006770 <_malloc_r+0x80>
 80067d6:	230c      	movs	r3, #12
 80067d8:	4638      	mov	r0, r7
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	f000 f80e 	bl	80067fc <__malloc_unlock>
 80067e0:	e797      	b.n	8006712 <_malloc_r+0x22>
 80067e2:	6025      	str	r5, [r4, #0]
 80067e4:	e7dc      	b.n	80067a0 <_malloc_r+0xb0>
 80067e6:	605b      	str	r3, [r3, #4]
 80067e8:	deff      	udf	#255	; 0xff
 80067ea:	bf00      	nop
 80067ec:	20000448 	.word	0x20000448

080067f0 <__malloc_lock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_lock+0x8>)
 80067f2:	f7ff b88a 	b.w	800590a <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000444 	.word	0x20000444

080067fc <__malloc_unlock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_unlock+0x8>)
 80067fe:	f7ff b885 	b.w	800590c <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20000444 	.word	0x20000444

08006808 <_Balloc>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	69c6      	ldr	r6, [r0, #28]
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	b976      	cbnz	r6, 8006830 <_Balloc+0x28>
 8006812:	2010      	movs	r0, #16
 8006814:	f7ff ff44 	bl	80066a0 <malloc>
 8006818:	4602      	mov	r2, r0
 800681a:	61e0      	str	r0, [r4, #28]
 800681c:	b920      	cbnz	r0, 8006828 <_Balloc+0x20>
 800681e:	216b      	movs	r1, #107	; 0x6b
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <_Balloc+0x78>)
 8006822:	4818      	ldr	r0, [pc, #96]	; (8006884 <_Balloc+0x7c>)
 8006824:	f001 fe00 	bl	8008428 <__assert_func>
 8006828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800682c:	6006      	str	r6, [r0, #0]
 800682e:	60c6      	str	r6, [r0, #12]
 8006830:	69e6      	ldr	r6, [r4, #28]
 8006832:	68f3      	ldr	r3, [r6, #12]
 8006834:	b183      	cbz	r3, 8006858 <_Balloc+0x50>
 8006836:	69e3      	ldr	r3, [r4, #28]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800683e:	b9b8      	cbnz	r0, 8006870 <_Balloc+0x68>
 8006840:	2101      	movs	r1, #1
 8006842:	fa01 f605 	lsl.w	r6, r1, r5
 8006846:	1d72      	adds	r2, r6, #5
 8006848:	4620      	mov	r0, r4
 800684a:	0092      	lsls	r2, r2, #2
 800684c:	f001 fe0a 	bl	8008464 <_calloc_r>
 8006850:	b160      	cbz	r0, 800686c <_Balloc+0x64>
 8006852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006856:	e00e      	b.n	8006876 <_Balloc+0x6e>
 8006858:	2221      	movs	r2, #33	; 0x21
 800685a:	2104      	movs	r1, #4
 800685c:	4620      	mov	r0, r4
 800685e:	f001 fe01 	bl	8008464 <_calloc_r>
 8006862:	69e3      	ldr	r3, [r4, #28]
 8006864:	60f0      	str	r0, [r6, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e4      	bne.n	8006836 <_Balloc+0x2e>
 800686c:	2000      	movs	r0, #0
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	6802      	ldr	r2, [r0, #0]
 8006872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006876:	2300      	movs	r3, #0
 8006878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800687c:	e7f7      	b.n	800686e <_Balloc+0x66>
 800687e:	bf00      	nop
 8006880:	08008fc0 	.word	0x08008fc0
 8006884:	08009040 	.word	0x08009040

08006888 <_Bfree>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	69c6      	ldr	r6, [r0, #28]
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b976      	cbnz	r6, 80068b0 <_Bfree+0x28>
 8006892:	2010      	movs	r0, #16
 8006894:	f7ff ff04 	bl	80066a0 <malloc>
 8006898:	4602      	mov	r2, r0
 800689a:	61e8      	str	r0, [r5, #28]
 800689c:	b920      	cbnz	r0, 80068a8 <_Bfree+0x20>
 800689e:	218f      	movs	r1, #143	; 0x8f
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <_Bfree+0x3c>)
 80068a2:	4809      	ldr	r0, [pc, #36]	; (80068c8 <_Bfree+0x40>)
 80068a4:	f001 fdc0 	bl	8008428 <__assert_func>
 80068a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ac:	6006      	str	r6, [r0, #0]
 80068ae:	60c6      	str	r6, [r0, #12]
 80068b0:	b13c      	cbz	r4, 80068c2 <_Bfree+0x3a>
 80068b2:	69eb      	ldr	r3, [r5, #28]
 80068b4:	6862      	ldr	r2, [r4, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068bc:	6021      	str	r1, [r4, #0]
 80068be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	08008fc0 	.word	0x08008fc0
 80068c8:	08009040 	.word	0x08009040

080068cc <__multadd>:
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	4607      	mov	r7, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	461e      	mov	r6, r3
 80068d6:	2000      	movs	r0, #0
 80068d8:	690d      	ldr	r5, [r1, #16]
 80068da:	f101 0c14 	add.w	ip, r1, #20
 80068de:	f8dc 3000 	ldr.w	r3, [ip]
 80068e2:	3001      	adds	r0, #1
 80068e4:	b299      	uxth	r1, r3
 80068e6:	fb02 6101 	mla	r1, r2, r1, r6
 80068ea:	0c1e      	lsrs	r6, r3, #16
 80068ec:	0c0b      	lsrs	r3, r1, #16
 80068ee:	fb02 3306 	mla	r3, r2, r6, r3
 80068f2:	b289      	uxth	r1, r1
 80068f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068f8:	4285      	cmp	r5, r0
 80068fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006902:	dcec      	bgt.n	80068de <__multadd+0x12>
 8006904:	b30e      	cbz	r6, 800694a <__multadd+0x7e>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	42ab      	cmp	r3, r5
 800690a:	dc19      	bgt.n	8006940 <__multadd+0x74>
 800690c:	6861      	ldr	r1, [r4, #4]
 800690e:	4638      	mov	r0, r7
 8006910:	3101      	adds	r1, #1
 8006912:	f7ff ff79 	bl	8006808 <_Balloc>
 8006916:	4680      	mov	r8, r0
 8006918:	b928      	cbnz	r0, 8006926 <__multadd+0x5a>
 800691a:	4602      	mov	r2, r0
 800691c:	21ba      	movs	r1, #186	; 0xba
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <__multadd+0x84>)
 8006920:	480c      	ldr	r0, [pc, #48]	; (8006954 <__multadd+0x88>)
 8006922:	f001 fd81 	bl	8008428 <__assert_func>
 8006926:	6922      	ldr	r2, [r4, #16]
 8006928:	f104 010c 	add.w	r1, r4, #12
 800692c:	3202      	adds	r2, #2
 800692e:	0092      	lsls	r2, r2, #2
 8006930:	300c      	adds	r0, #12
 8006932:	f001 fd65 	bl	8008400 <memcpy>
 8006936:	4621      	mov	r1, r4
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ffa5 	bl	8006888 <_Bfree>
 800693e:	4644      	mov	r4, r8
 8006940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006944:	3501      	adds	r5, #1
 8006946:	615e      	str	r6, [r3, #20]
 8006948:	6125      	str	r5, [r4, #16]
 800694a:	4620      	mov	r0, r4
 800694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006950:	0800902f 	.word	0x0800902f
 8006954:	08009040 	.word	0x08009040

08006958 <__s2b>:
 8006958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695c:	4615      	mov	r5, r2
 800695e:	2209      	movs	r2, #9
 8006960:	461f      	mov	r7, r3
 8006962:	3308      	adds	r3, #8
 8006964:	460c      	mov	r4, r1
 8006966:	fb93 f3f2 	sdiv	r3, r3, r2
 800696a:	4606      	mov	r6, r0
 800696c:	2201      	movs	r2, #1
 800696e:	2100      	movs	r1, #0
 8006970:	429a      	cmp	r2, r3
 8006972:	db09      	blt.n	8006988 <__s2b+0x30>
 8006974:	4630      	mov	r0, r6
 8006976:	f7ff ff47 	bl	8006808 <_Balloc>
 800697a:	b940      	cbnz	r0, 800698e <__s2b+0x36>
 800697c:	4602      	mov	r2, r0
 800697e:	21d3      	movs	r1, #211	; 0xd3
 8006980:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <__s2b+0x8c>)
 8006982:	4819      	ldr	r0, [pc, #100]	; (80069e8 <__s2b+0x90>)
 8006984:	f001 fd50 	bl	8008428 <__assert_func>
 8006988:	0052      	lsls	r2, r2, #1
 800698a:	3101      	adds	r1, #1
 800698c:	e7f0      	b.n	8006970 <__s2b+0x18>
 800698e:	9b08      	ldr	r3, [sp, #32]
 8006990:	2d09      	cmp	r5, #9
 8006992:	6143      	str	r3, [r0, #20]
 8006994:	f04f 0301 	mov.w	r3, #1
 8006998:	6103      	str	r3, [r0, #16]
 800699a:	dd16      	ble.n	80069ca <__s2b+0x72>
 800699c:	f104 0909 	add.w	r9, r4, #9
 80069a0:	46c8      	mov	r8, r9
 80069a2:	442c      	add	r4, r5
 80069a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069a8:	4601      	mov	r1, r0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4630      	mov	r0, r6
 80069ae:	3b30      	subs	r3, #48	; 0x30
 80069b0:	f7ff ff8c 	bl	80068cc <__multadd>
 80069b4:	45a0      	cmp	r8, r4
 80069b6:	d1f5      	bne.n	80069a4 <__s2b+0x4c>
 80069b8:	f1a5 0408 	sub.w	r4, r5, #8
 80069bc:	444c      	add	r4, r9
 80069be:	1b2d      	subs	r5, r5, r4
 80069c0:	1963      	adds	r3, r4, r5
 80069c2:	42bb      	cmp	r3, r7
 80069c4:	db04      	blt.n	80069d0 <__s2b+0x78>
 80069c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ca:	2509      	movs	r5, #9
 80069cc:	340a      	adds	r4, #10
 80069ce:	e7f6      	b.n	80069be <__s2b+0x66>
 80069d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069d4:	4601      	mov	r1, r0
 80069d6:	220a      	movs	r2, #10
 80069d8:	4630      	mov	r0, r6
 80069da:	3b30      	subs	r3, #48	; 0x30
 80069dc:	f7ff ff76 	bl	80068cc <__multadd>
 80069e0:	e7ee      	b.n	80069c0 <__s2b+0x68>
 80069e2:	bf00      	nop
 80069e4:	0800902f 	.word	0x0800902f
 80069e8:	08009040 	.word	0x08009040

080069ec <__hi0bits>:
 80069ec:	0c02      	lsrs	r2, r0, #16
 80069ee:	0412      	lsls	r2, r2, #16
 80069f0:	4603      	mov	r3, r0
 80069f2:	b9ca      	cbnz	r2, 8006a28 <__hi0bits+0x3c>
 80069f4:	0403      	lsls	r3, r0, #16
 80069f6:	2010      	movs	r0, #16
 80069f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069fc:	bf04      	itt	eq
 80069fe:	021b      	lsleq	r3, r3, #8
 8006a00:	3008      	addeq	r0, #8
 8006a02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a06:	bf04      	itt	eq
 8006a08:	011b      	lsleq	r3, r3, #4
 8006a0a:	3004      	addeq	r0, #4
 8006a0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a10:	bf04      	itt	eq
 8006a12:	009b      	lsleq	r3, r3, #2
 8006a14:	3002      	addeq	r0, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	db05      	blt.n	8006a26 <__hi0bits+0x3a>
 8006a1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a1e:	f100 0001 	add.w	r0, r0, #1
 8006a22:	bf08      	it	eq
 8006a24:	2020      	moveq	r0, #32
 8006a26:	4770      	bx	lr
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7e5      	b.n	80069f8 <__hi0bits+0xc>

08006a2c <__lo0bits>:
 8006a2c:	6803      	ldr	r3, [r0, #0]
 8006a2e:	4602      	mov	r2, r0
 8006a30:	f013 0007 	ands.w	r0, r3, #7
 8006a34:	d00b      	beq.n	8006a4e <__lo0bits+0x22>
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	d421      	bmi.n	8006a7e <__lo0bits+0x52>
 8006a3a:	0798      	lsls	r0, r3, #30
 8006a3c:	bf49      	itett	mi
 8006a3e:	085b      	lsrmi	r3, r3, #1
 8006a40:	089b      	lsrpl	r3, r3, #2
 8006a42:	2001      	movmi	r0, #1
 8006a44:	6013      	strmi	r3, [r2, #0]
 8006a46:	bf5c      	itt	pl
 8006a48:	2002      	movpl	r0, #2
 8006a4a:	6013      	strpl	r3, [r2, #0]
 8006a4c:	4770      	bx	lr
 8006a4e:	b299      	uxth	r1, r3
 8006a50:	b909      	cbnz	r1, 8006a56 <__lo0bits+0x2a>
 8006a52:	2010      	movs	r0, #16
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	b2d9      	uxtb	r1, r3
 8006a58:	b909      	cbnz	r1, 8006a5e <__lo0bits+0x32>
 8006a5a:	3008      	adds	r0, #8
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	0719      	lsls	r1, r3, #28
 8006a60:	bf04      	itt	eq
 8006a62:	091b      	lsreq	r3, r3, #4
 8006a64:	3004      	addeq	r0, #4
 8006a66:	0799      	lsls	r1, r3, #30
 8006a68:	bf04      	itt	eq
 8006a6a:	089b      	lsreq	r3, r3, #2
 8006a6c:	3002      	addeq	r0, #2
 8006a6e:	07d9      	lsls	r1, r3, #31
 8006a70:	d403      	bmi.n	8006a7a <__lo0bits+0x4e>
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	f100 0001 	add.w	r0, r0, #1
 8006a78:	d003      	beq.n	8006a82 <__lo0bits+0x56>
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4770      	bx	lr
 8006a82:	2020      	movs	r0, #32
 8006a84:	4770      	bx	lr
	...

08006a88 <__i2b>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	f7ff febb 	bl	8006808 <_Balloc>
 8006a92:	4602      	mov	r2, r0
 8006a94:	b928      	cbnz	r0, 8006aa2 <__i2b+0x1a>
 8006a96:	f240 1145 	movw	r1, #325	; 0x145
 8006a9a:	4b04      	ldr	r3, [pc, #16]	; (8006aac <__i2b+0x24>)
 8006a9c:	4804      	ldr	r0, [pc, #16]	; (8006ab0 <__i2b+0x28>)
 8006a9e:	f001 fcc3 	bl	8008428 <__assert_func>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	6144      	str	r4, [r0, #20]
 8006aa6:	6103      	str	r3, [r0, #16]
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	0800902f 	.word	0x0800902f
 8006ab0:	08009040 	.word	0x08009040

08006ab4 <__multiply>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	4691      	mov	r9, r2
 8006aba:	690a      	ldr	r2, [r1, #16]
 8006abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bfbe      	ittt	lt
 8006ac6:	460b      	movlt	r3, r1
 8006ac8:	464c      	movlt	r4, r9
 8006aca:	4699      	movlt	r9, r3
 8006acc:	6927      	ldr	r7, [r4, #16]
 8006ace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	eb07 060a 	add.w	r6, r7, sl
 8006ada:	42b3      	cmp	r3, r6
 8006adc:	b085      	sub	sp, #20
 8006ade:	bfb8      	it	lt
 8006ae0:	3101      	addlt	r1, #1
 8006ae2:	f7ff fe91 	bl	8006808 <_Balloc>
 8006ae6:	b930      	cbnz	r0, 8006af6 <__multiply+0x42>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006aee:	4b43      	ldr	r3, [pc, #268]	; (8006bfc <__multiply+0x148>)
 8006af0:	4843      	ldr	r0, [pc, #268]	; (8006c00 <__multiply+0x14c>)
 8006af2:	f001 fc99 	bl	8008428 <__assert_func>
 8006af6:	f100 0514 	add.w	r5, r0, #20
 8006afa:	462b      	mov	r3, r5
 8006afc:	2200      	movs	r2, #0
 8006afe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b02:	4543      	cmp	r3, r8
 8006b04:	d321      	bcc.n	8006b4a <__multiply+0x96>
 8006b06:	f104 0314 	add.w	r3, r4, #20
 8006b0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b0e:	f109 0314 	add.w	r3, r9, #20
 8006b12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b16:	9202      	str	r2, [sp, #8]
 8006b18:	1b3a      	subs	r2, r7, r4
 8006b1a:	3a15      	subs	r2, #21
 8006b1c:	f022 0203 	bic.w	r2, r2, #3
 8006b20:	3204      	adds	r2, #4
 8006b22:	f104 0115 	add.w	r1, r4, #21
 8006b26:	428f      	cmp	r7, r1
 8006b28:	bf38      	it	cc
 8006b2a:	2204      	movcc	r2, #4
 8006b2c:	9201      	str	r2, [sp, #4]
 8006b2e:	9a02      	ldr	r2, [sp, #8]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d80c      	bhi.n	8006b50 <__multiply+0x9c>
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	dd03      	ble.n	8006b42 <__multiply+0x8e>
 8006b3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d05a      	beq.n	8006bf8 <__multiply+0x144>
 8006b42:	6106      	str	r6, [r0, #16]
 8006b44:	b005      	add	sp, #20
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	f843 2b04 	str.w	r2, [r3], #4
 8006b4e:	e7d8      	b.n	8006b02 <__multiply+0x4e>
 8006b50:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b54:	f1ba 0f00 	cmp.w	sl, #0
 8006b58:	d023      	beq.n	8006ba2 <__multiply+0xee>
 8006b5a:	46a9      	mov	r9, r5
 8006b5c:	f04f 0c00 	mov.w	ip, #0
 8006b60:	f104 0e14 	add.w	lr, r4, #20
 8006b64:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b68:	f8d9 1000 	ldr.w	r1, [r9]
 8006b6c:	fa1f fb82 	uxth.w	fp, r2
 8006b70:	b289      	uxth	r1, r1
 8006b72:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b76:	4461      	add	r1, ip
 8006b78:	f8d9 c000 	ldr.w	ip, [r9]
 8006b7c:	0c12      	lsrs	r2, r2, #16
 8006b7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b82:	fb0a c202 	mla	r2, sl, r2, ip
 8006b86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b8a:	b289      	uxth	r1, r1
 8006b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b90:	4577      	cmp	r7, lr
 8006b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b96:	f849 1b04 	str.w	r1, [r9], #4
 8006b9a:	d8e3      	bhi.n	8006b64 <__multiply+0xb0>
 8006b9c:	9a01      	ldr	r2, [sp, #4]
 8006b9e:	f845 c002 	str.w	ip, [r5, r2]
 8006ba2:	9a03      	ldr	r2, [sp, #12]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006baa:	f1b9 0f00 	cmp.w	r9, #0
 8006bae:	d021      	beq.n	8006bf4 <__multiply+0x140>
 8006bb0:	46ae      	mov	lr, r5
 8006bb2:	f04f 0a00 	mov.w	sl, #0
 8006bb6:	6829      	ldr	r1, [r5, #0]
 8006bb8:	f104 0c14 	add.w	ip, r4, #20
 8006bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8006bc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bc4:	b289      	uxth	r1, r1
 8006bc6:	fb09 220b 	mla	r2, r9, fp, r2
 8006bca:	4452      	add	r2, sl
 8006bcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bd0:	f84e 1b04 	str.w	r1, [lr], #4
 8006bd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bdc:	f8be 1000 	ldrh.w	r1, [lr]
 8006be0:	4567      	cmp	r7, ip
 8006be2:	fb09 110a 	mla	r1, r9, sl, r1
 8006be6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bee:	d8e5      	bhi.n	8006bbc <__multiply+0x108>
 8006bf0:	9a01      	ldr	r2, [sp, #4]
 8006bf2:	50a9      	str	r1, [r5, r2]
 8006bf4:	3504      	adds	r5, #4
 8006bf6:	e79a      	b.n	8006b2e <__multiply+0x7a>
 8006bf8:	3e01      	subs	r6, #1
 8006bfa:	e79c      	b.n	8006b36 <__multiply+0x82>
 8006bfc:	0800902f 	.word	0x0800902f
 8006c00:	08009040 	.word	0x08009040

08006c04 <__pow5mult>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	4615      	mov	r5, r2
 8006c0a:	f012 0203 	ands.w	r2, r2, #3
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	d007      	beq.n	8006c24 <__pow5mult+0x20>
 8006c14:	4c25      	ldr	r4, [pc, #148]	; (8006cac <__pow5mult+0xa8>)
 8006c16:	3a01      	subs	r2, #1
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c1e:	f7ff fe55 	bl	80068cc <__multadd>
 8006c22:	4607      	mov	r7, r0
 8006c24:	10ad      	asrs	r5, r5, #2
 8006c26:	d03d      	beq.n	8006ca4 <__pow5mult+0xa0>
 8006c28:	69f4      	ldr	r4, [r6, #28]
 8006c2a:	b97c      	cbnz	r4, 8006c4c <__pow5mult+0x48>
 8006c2c:	2010      	movs	r0, #16
 8006c2e:	f7ff fd37 	bl	80066a0 <malloc>
 8006c32:	4602      	mov	r2, r0
 8006c34:	61f0      	str	r0, [r6, #28]
 8006c36:	b928      	cbnz	r0, 8006c44 <__pow5mult+0x40>
 8006c38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c3c:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <__pow5mult+0xac>)
 8006c3e:	481d      	ldr	r0, [pc, #116]	; (8006cb4 <__pow5mult+0xb0>)
 8006c40:	f001 fbf2 	bl	8008428 <__assert_func>
 8006c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c48:	6004      	str	r4, [r0, #0]
 8006c4a:	60c4      	str	r4, [r0, #12]
 8006c4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c54:	b94c      	cbnz	r4, 8006c6a <__pow5mult+0x66>
 8006c56:	f240 2171 	movw	r1, #625	; 0x271
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff14 	bl	8006a88 <__i2b>
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	f04f 0900 	mov.w	r9, #0
 8006c6e:	07eb      	lsls	r3, r5, #31
 8006c70:	d50a      	bpl.n	8006c88 <__pow5mult+0x84>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4622      	mov	r2, r4
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff1c 	bl	8006ab4 <__multiply>
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff fe01 	bl	8006888 <_Bfree>
 8006c86:	4647      	mov	r7, r8
 8006c88:	106d      	asrs	r5, r5, #1
 8006c8a:	d00b      	beq.n	8006ca4 <__pow5mult+0xa0>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	b938      	cbnz	r0, 8006ca0 <__pow5mult+0x9c>
 8006c90:	4622      	mov	r2, r4
 8006c92:	4621      	mov	r1, r4
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff ff0d 	bl	8006ab4 <__multiply>
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	f8c0 9000 	str.w	r9, [r0]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	e7e4      	b.n	8006c6e <__pow5mult+0x6a>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	bf00      	nop
 8006cac:	08009190 	.word	0x08009190
 8006cb0:	08008fc0 	.word	0x08008fc0
 8006cb4:	08009040 	.word	0x08009040

08006cb8 <__lshift>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	4691      	mov	r9, r2
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	6849      	ldr	r1, [r1, #4]
 8006cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cd0:	f108 0601 	add.w	r6, r8, #1
 8006cd4:	42b3      	cmp	r3, r6
 8006cd6:	db0b      	blt.n	8006cf0 <__lshift+0x38>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff fd95 	bl	8006808 <_Balloc>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b948      	cbnz	r0, 8006cf6 <__lshift+0x3e>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ce8:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <__lshift+0xd0>)
 8006cea:	4828      	ldr	r0, [pc, #160]	; (8006d8c <__lshift+0xd4>)
 8006cec:	f001 fb9c 	bl	8008428 <__assert_func>
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	e7ee      	b.n	8006cd4 <__lshift+0x1c>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f100 0114 	add.w	r1, r0, #20
 8006cfc:	f100 0210 	add.w	r2, r0, #16
 8006d00:	4618      	mov	r0, r3
 8006d02:	4553      	cmp	r3, sl
 8006d04:	db33      	blt.n	8006d6e <__lshift+0xb6>
 8006d06:	6920      	ldr	r0, [r4, #16]
 8006d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d0c:	f104 0314 	add.w	r3, r4, #20
 8006d10:	f019 091f 	ands.w	r9, r9, #31
 8006d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d1c:	d02b      	beq.n	8006d76 <__lshift+0xbe>
 8006d1e:	468a      	mov	sl, r1
 8006d20:	2200      	movs	r2, #0
 8006d22:	f1c9 0e20 	rsb	lr, r9, #32
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	fa00 f009 	lsl.w	r0, r0, r9
 8006d2c:	4310      	orrs	r0, r2
 8006d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d36:	459c      	cmp	ip, r3
 8006d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d3c:	d8f3      	bhi.n	8006d26 <__lshift+0x6e>
 8006d3e:	ebac 0304 	sub.w	r3, ip, r4
 8006d42:	3b15      	subs	r3, #21
 8006d44:	f023 0303 	bic.w	r3, r3, #3
 8006d48:	3304      	adds	r3, #4
 8006d4a:	f104 0015 	add.w	r0, r4, #21
 8006d4e:	4584      	cmp	ip, r0
 8006d50:	bf38      	it	cc
 8006d52:	2304      	movcc	r3, #4
 8006d54:	50ca      	str	r2, [r1, r3]
 8006d56:	b10a      	cbz	r2, 8006d5c <__lshift+0xa4>
 8006d58:	f108 0602 	add.w	r6, r8, #2
 8006d5c:	3e01      	subs	r6, #1
 8006d5e:	4638      	mov	r0, r7
 8006d60:	4621      	mov	r1, r4
 8006d62:	612e      	str	r6, [r5, #16]
 8006d64:	f7ff fd90 	bl	8006888 <_Bfree>
 8006d68:	4628      	mov	r0, r5
 8006d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d72:	3301      	adds	r3, #1
 8006d74:	e7c5      	b.n	8006d02 <__lshift+0x4a>
 8006d76:	3904      	subs	r1, #4
 8006d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7c:	459c      	cmp	ip, r3
 8006d7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d82:	d8f9      	bhi.n	8006d78 <__lshift+0xc0>
 8006d84:	e7ea      	b.n	8006d5c <__lshift+0xa4>
 8006d86:	bf00      	nop
 8006d88:	0800902f 	.word	0x0800902f
 8006d8c:	08009040 	.word	0x08009040

08006d90 <__mcmp>:
 8006d90:	4603      	mov	r3, r0
 8006d92:	690a      	ldr	r2, [r1, #16]
 8006d94:	6900      	ldr	r0, [r0, #16]
 8006d96:	b530      	push	{r4, r5, lr}
 8006d98:	1a80      	subs	r0, r0, r2
 8006d9a:	d10d      	bne.n	8006db8 <__mcmp+0x28>
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	3114      	adds	r1, #20
 8006da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006db0:	4295      	cmp	r5, r2
 8006db2:	d002      	beq.n	8006dba <__mcmp+0x2a>
 8006db4:	d304      	bcc.n	8006dc0 <__mcmp+0x30>
 8006db6:	2001      	movs	r0, #1
 8006db8:	bd30      	pop	{r4, r5, pc}
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	d3f4      	bcc.n	8006da8 <__mcmp+0x18>
 8006dbe:	e7fb      	b.n	8006db8 <__mcmp+0x28>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e7f8      	b.n	8006db8 <__mcmp+0x28>
	...

08006dc8 <__mdiff>:
 8006dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	460d      	mov	r5, r1
 8006dce:	4607      	mov	r7, r0
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	f7ff ffdb 	bl	8006d90 <__mcmp>
 8006dda:	1e06      	subs	r6, r0, #0
 8006ddc:	d111      	bne.n	8006e02 <__mdiff+0x3a>
 8006dde:	4631      	mov	r1, r6
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff fd11 	bl	8006808 <_Balloc>
 8006de6:	4602      	mov	r2, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <__mdiff+0x2e>
 8006dea:	f240 2137 	movw	r1, #567	; 0x237
 8006dee:	4b3a      	ldr	r3, [pc, #232]	; (8006ed8 <__mdiff+0x110>)
 8006df0:	483a      	ldr	r0, [pc, #232]	; (8006edc <__mdiff+0x114>)
 8006df2:	f001 fb19 	bl	8008428 <__assert_func>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	bfa4      	itt	ge
 8006e04:	4623      	movge	r3, r4
 8006e06:	462c      	movge	r4, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	6861      	ldr	r1, [r4, #4]
 8006e0c:	bfa6      	itte	ge
 8006e0e:	461d      	movge	r5, r3
 8006e10:	2600      	movge	r6, #0
 8006e12:	2601      	movlt	r6, #1
 8006e14:	f7ff fcf8 	bl	8006808 <_Balloc>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	b918      	cbnz	r0, 8006e24 <__mdiff+0x5c>
 8006e1c:	f240 2145 	movw	r1, #581	; 0x245
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <__mdiff+0x110>)
 8006e22:	e7e5      	b.n	8006df0 <__mdiff+0x28>
 8006e24:	f102 0814 	add.w	r8, r2, #20
 8006e28:	46c2      	mov	sl, r8
 8006e2a:	f04f 0c00 	mov.w	ip, #0
 8006e2e:	6927      	ldr	r7, [r4, #16]
 8006e30:	60c6      	str	r6, [r0, #12]
 8006e32:	692e      	ldr	r6, [r5, #16]
 8006e34:	f104 0014 	add.w	r0, r4, #20
 8006e38:	f105 0914 	add.w	r9, r5, #20
 8006e3c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e44:	3410      	adds	r4, #16
 8006e46:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e4a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e4e:	fa1f f18b 	uxth.w	r1, fp
 8006e52:	4461      	add	r1, ip
 8006e54:	fa1f fc83 	uxth.w	ip, r3
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	eba1 010c 	sub.w	r1, r1, ip
 8006e5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e66:	b289      	uxth	r1, r1
 8006e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e6c:	454e      	cmp	r6, r9
 8006e6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e72:	f84a 1b04 	str.w	r1, [sl], #4
 8006e76:	d8e6      	bhi.n	8006e46 <__mdiff+0x7e>
 8006e78:	1b73      	subs	r3, r6, r5
 8006e7a:	3b15      	subs	r3, #21
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	3515      	adds	r5, #21
 8006e82:	3304      	adds	r3, #4
 8006e84:	42ae      	cmp	r6, r5
 8006e86:	bf38      	it	cc
 8006e88:	2304      	movcc	r3, #4
 8006e8a:	4418      	add	r0, r3
 8006e8c:	4443      	add	r3, r8
 8006e8e:	461e      	mov	r6, r3
 8006e90:	4605      	mov	r5, r0
 8006e92:	4575      	cmp	r5, lr
 8006e94:	d30e      	bcc.n	8006eb4 <__mdiff+0xec>
 8006e96:	f10e 0103 	add.w	r1, lr, #3
 8006e9a:	1a09      	subs	r1, r1, r0
 8006e9c:	f021 0103 	bic.w	r1, r1, #3
 8006ea0:	3803      	subs	r0, #3
 8006ea2:	4586      	cmp	lr, r0
 8006ea4:	bf38      	it	cc
 8006ea6:	2100      	movcc	r1, #0
 8006ea8:	440b      	add	r3, r1
 8006eaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eae:	b189      	cbz	r1, 8006ed4 <__mdiff+0x10c>
 8006eb0:	6117      	str	r7, [r2, #16]
 8006eb2:	e7a3      	b.n	8006dfc <__mdiff+0x34>
 8006eb4:	f855 8b04 	ldr.w	r8, [r5], #4
 8006eb8:	fa1f f188 	uxth.w	r1, r8
 8006ebc:	4461      	add	r1, ip
 8006ebe:	140c      	asrs	r4, r1, #16
 8006ec0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006eca:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ece:	f846 1b04 	str.w	r1, [r6], #4
 8006ed2:	e7de      	b.n	8006e92 <__mdiff+0xca>
 8006ed4:	3f01      	subs	r7, #1
 8006ed6:	e7e8      	b.n	8006eaa <__mdiff+0xe2>
 8006ed8:	0800902f 	.word	0x0800902f
 8006edc:	08009040 	.word	0x08009040

08006ee0 <__ulp>:
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <__ulp+0x3c>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dc08      	bgt.n	8006efe <__ulp+0x1e>
 8006eec:	425b      	negs	r3, r3
 8006eee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ef2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ef6:	da04      	bge.n	8006f02 <__ulp+0x22>
 8006ef8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006efc:	4113      	asrs	r3, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	e008      	b.n	8006f14 <__ulp+0x34>
 8006f02:	f1a2 0314 	sub.w	r3, r2, #20
 8006f06:	2b1e      	cmp	r3, #30
 8006f08:	bfd6      	itet	le
 8006f0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006f0e:	2201      	movgt	r2, #1
 8006f10:	40da      	lsrle	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	7ff00000 	.word	0x7ff00000

08006f20 <__b2d>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	6905      	ldr	r5, [r0, #16]
 8006f24:	f100 0714 	add.w	r7, r0, #20
 8006f28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f2c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f30:	1f2e      	subs	r6, r5, #4
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff fd5a 	bl	80069ec <__hi0bits>
 8006f38:	f1c0 0220 	rsb	r2, r0, #32
 8006f3c:	280a      	cmp	r0, #10
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006fac <__b2d+0x8c>
 8006f44:	600a      	str	r2, [r1, #0]
 8006f46:	dc12      	bgt.n	8006f6e <__b2d+0x4e>
 8006f48:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f4c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006f50:	42b7      	cmp	r7, r6
 8006f52:	ea42 010c 	orr.w	r1, r2, ip
 8006f56:	bf2c      	ite	cs
 8006f58:	2200      	movcs	r2, #0
 8006f5a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f5e:	3315      	adds	r3, #21
 8006f60:	fa04 f303 	lsl.w	r3, r4, r3
 8006f64:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6e:	42b7      	cmp	r7, r6
 8006f70:	bf2e      	itee	cs
 8006f72:	2200      	movcs	r2, #0
 8006f74:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f78:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f7c:	3b0b      	subs	r3, #11
 8006f7e:	d012      	beq.n	8006fa6 <__b2d+0x86>
 8006f80:	f1c3 0520 	rsb	r5, r3, #32
 8006f84:	fa22 f105 	lsr.w	r1, r2, r5
 8006f88:	409c      	lsls	r4, r3
 8006f8a:	430c      	orrs	r4, r1
 8006f8c:	42be      	cmp	r6, r7
 8006f8e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006f92:	bf94      	ite	ls
 8006f94:	2400      	movls	r4, #0
 8006f96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	40ec      	lsrs	r4, r5
 8006f9e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006fa2:	4322      	orrs	r2, r4
 8006fa4:	e7e1      	b.n	8006f6a <__b2d+0x4a>
 8006fa6:	ea44 010c 	orr.w	r1, r4, ip
 8006faa:	e7de      	b.n	8006f6a <__b2d+0x4a>
 8006fac:	3ff00000 	.word	0x3ff00000

08006fb0 <__d2b>:
 8006fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4617      	mov	r7, r2
 8006fb6:	461c      	mov	r4, r3
 8006fb8:	9e08      	ldr	r6, [sp, #32]
 8006fba:	f7ff fc25 	bl	8006808 <_Balloc>
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	b930      	cbnz	r0, 8006fd0 <__d2b+0x20>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	f240 310f 	movw	r1, #783	; 0x30f
 8006fc8:	4b22      	ldr	r3, [pc, #136]	; (8007054 <__d2b+0xa4>)
 8006fca:	4823      	ldr	r0, [pc, #140]	; (8007058 <__d2b+0xa8>)
 8006fcc:	f001 fa2c 	bl	8008428 <__assert_func>
 8006fd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006fd4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006fd8:	bb24      	cbnz	r4, 8007024 <__d2b+0x74>
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	d026      	beq.n	800702e <__d2b+0x7e>
 8006fe0:	4668      	mov	r0, sp
 8006fe2:	9700      	str	r7, [sp, #0]
 8006fe4:	f7ff fd22 	bl	8006a2c <__lo0bits>
 8006fe8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fec:	b1e8      	cbz	r0, 800702a <__d2b+0x7a>
 8006fee:	f1c0 0320 	rsb	r3, r0, #32
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	40c2      	lsrs	r2, r0
 8006ffa:	616b      	str	r3, [r5, #20]
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf14      	ite	ne
 8007004:	2102      	movne	r1, #2
 8007006:	2101      	moveq	r1, #1
 8007008:	61ab      	str	r3, [r5, #24]
 800700a:	6129      	str	r1, [r5, #16]
 800700c:	b1bc      	cbz	r4, 800703e <__d2b+0x8e>
 800700e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007012:	4404      	add	r4, r0
 8007014:	6034      	str	r4, [r6, #0]
 8007016:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	6018      	str	r0, [r3, #0]
 800701e:	4628      	mov	r0, r5
 8007020:	b003      	add	sp, #12
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007028:	e7d7      	b.n	8006fda <__d2b+0x2a>
 800702a:	6169      	str	r1, [r5, #20]
 800702c:	e7e7      	b.n	8006ffe <__d2b+0x4e>
 800702e:	a801      	add	r0, sp, #4
 8007030:	f7ff fcfc 	bl	8006a2c <__lo0bits>
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	2101      	movs	r1, #1
 8007038:	616b      	str	r3, [r5, #20]
 800703a:	3020      	adds	r0, #32
 800703c:	e7e5      	b.n	800700a <__d2b+0x5a>
 800703e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007042:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007046:	6030      	str	r0, [r6, #0]
 8007048:	6918      	ldr	r0, [r3, #16]
 800704a:	f7ff fccf 	bl	80069ec <__hi0bits>
 800704e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007052:	e7e2      	b.n	800701a <__d2b+0x6a>
 8007054:	0800902f 	.word	0x0800902f
 8007058:	08009040 	.word	0x08009040

0800705c <__ratio>:
 800705c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	4688      	mov	r8, r1
 8007062:	4669      	mov	r1, sp
 8007064:	4681      	mov	r9, r0
 8007066:	f7ff ff5b 	bl	8006f20 <__b2d>
 800706a:	460f      	mov	r7, r1
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	4640      	mov	r0, r8
 8007072:	a901      	add	r1, sp, #4
 8007074:	f7ff ff54 	bl	8006f20 <__b2d>
 8007078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800707c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007080:	468b      	mov	fp, r1
 8007082:	eba3 0c02 	sub.w	ip, r3, r2
 8007086:	e9dd 3200 	ldrd	r3, r2, [sp]
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfd5      	itete	le
 8007094:	460a      	movle	r2, r1
 8007096:	462a      	movgt	r2, r5
 8007098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800709c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070a0:	bfd8      	it	le
 80070a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070a6:	465b      	mov	r3, fp
 80070a8:	4602      	mov	r2, r0
 80070aa:	4639      	mov	r1, r7
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7f9 fba9 	bl	8000804 <__aeabi_ddiv>
 80070b2:	b003      	add	sp, #12
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070b8 <__copybits>:
 80070b8:	3901      	subs	r1, #1
 80070ba:	b570      	push	{r4, r5, r6, lr}
 80070bc:	1149      	asrs	r1, r1, #5
 80070be:	6914      	ldr	r4, [r2, #16]
 80070c0:	3101      	adds	r1, #1
 80070c2:	f102 0314 	add.w	r3, r2, #20
 80070c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070ce:	1f05      	subs	r5, r0, #4
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	d30c      	bcc.n	80070ee <__copybits+0x36>
 80070d4:	1aa3      	subs	r3, r4, r2
 80070d6:	3b11      	subs	r3, #17
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	3211      	adds	r2, #17
 80070de:	42a2      	cmp	r2, r4
 80070e0:	bf88      	it	hi
 80070e2:	2300      	movhi	r3, #0
 80070e4:	4418      	add	r0, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	4288      	cmp	r0, r1
 80070ea:	d305      	bcc.n	80070f8 <__copybits+0x40>
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80070f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80070f6:	e7eb      	b.n	80070d0 <__copybits+0x18>
 80070f8:	f840 3b04 	str.w	r3, [r0], #4
 80070fc:	e7f4      	b.n	80070e8 <__copybits+0x30>

080070fe <__any_on>:
 80070fe:	f100 0214 	add.w	r2, r0, #20
 8007102:	6900      	ldr	r0, [r0, #16]
 8007104:	114b      	asrs	r3, r1, #5
 8007106:	4298      	cmp	r0, r3
 8007108:	b510      	push	{r4, lr}
 800710a:	db11      	blt.n	8007130 <__any_on+0x32>
 800710c:	dd0a      	ble.n	8007124 <__any_on+0x26>
 800710e:	f011 011f 	ands.w	r1, r1, #31
 8007112:	d007      	beq.n	8007124 <__any_on+0x26>
 8007114:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007118:	fa24 f001 	lsr.w	r0, r4, r1
 800711c:	fa00 f101 	lsl.w	r1, r0, r1
 8007120:	428c      	cmp	r4, r1
 8007122:	d10b      	bne.n	800713c <__any_on+0x3e>
 8007124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007128:	4293      	cmp	r3, r2
 800712a:	d803      	bhi.n	8007134 <__any_on+0x36>
 800712c:	2000      	movs	r0, #0
 800712e:	bd10      	pop	{r4, pc}
 8007130:	4603      	mov	r3, r0
 8007132:	e7f7      	b.n	8007124 <__any_on+0x26>
 8007134:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007138:	2900      	cmp	r1, #0
 800713a:	d0f5      	beq.n	8007128 <__any_on+0x2a>
 800713c:	2001      	movs	r0, #1
 800713e:	e7f6      	b.n	800712e <__any_on+0x30>

08007140 <sulp>:
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	460f      	mov	r7, r1
 8007146:	4690      	mov	r8, r2
 8007148:	f7ff feca 	bl	8006ee0 <__ulp>
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	f1b8 0f00 	cmp.w	r8, #0
 8007154:	d011      	beq.n	800717a <sulp+0x3a>
 8007156:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800715a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd0b      	ble.n	800717a <sulp+0x3a>
 8007162:	2400      	movs	r4, #0
 8007164:	051b      	lsls	r3, r3, #20
 8007166:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800716a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800716e:	4622      	mov	r2, r4
 8007170:	462b      	mov	r3, r5
 8007172:	f7f9 fa1d 	bl	80005b0 <__aeabi_dmul>
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007182:	0000      	movs	r0, r0
 8007184:	0000      	movs	r0, r0
	...

08007188 <_strtod_l>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	b09f      	sub	sp, #124	; 0x7c
 800718e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007190:	2200      	movs	r2, #0
 8007192:	4604      	mov	r4, r0
 8007194:	921a      	str	r2, [sp, #104]	; 0x68
 8007196:	460d      	mov	r5, r1
 8007198:	f04f 0800 	mov.w	r8, #0
 800719c:	f04f 0900 	mov.w	r9, #0
 80071a0:	460a      	mov	r2, r1
 80071a2:	9219      	str	r2, [sp, #100]	; 0x64
 80071a4:	7811      	ldrb	r1, [r2, #0]
 80071a6:	292b      	cmp	r1, #43	; 0x2b
 80071a8:	d04a      	beq.n	8007240 <_strtod_l+0xb8>
 80071aa:	d838      	bhi.n	800721e <_strtod_l+0x96>
 80071ac:	290d      	cmp	r1, #13
 80071ae:	d832      	bhi.n	8007216 <_strtod_l+0x8e>
 80071b0:	2908      	cmp	r1, #8
 80071b2:	d832      	bhi.n	800721a <_strtod_l+0x92>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d03b      	beq.n	8007230 <_strtod_l+0xa8>
 80071b8:	2200      	movs	r2, #0
 80071ba:	920e      	str	r2, [sp, #56]	; 0x38
 80071bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80071be:	7832      	ldrb	r2, [r6, #0]
 80071c0:	2a30      	cmp	r2, #48	; 0x30
 80071c2:	f040 80b2 	bne.w	800732a <_strtod_l+0x1a2>
 80071c6:	7872      	ldrb	r2, [r6, #1]
 80071c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071cc:	2a58      	cmp	r2, #88	; 0x58
 80071ce:	d16e      	bne.n	80072ae <_strtod_l+0x126>
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d4:	4620      	mov	r0, r4
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	ab1a      	add	r3, sp, #104	; 0x68
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4a8c      	ldr	r2, [pc, #560]	; (8007410 <_strtod_l+0x288>)
 80071de:	ab1b      	add	r3, sp, #108	; 0x6c
 80071e0:	a919      	add	r1, sp, #100	; 0x64
 80071e2:	f001 f9bb 	bl	800855c <__gethex>
 80071e6:	f010 070f 	ands.w	r7, r0, #15
 80071ea:	4605      	mov	r5, r0
 80071ec:	d005      	beq.n	80071fa <_strtod_l+0x72>
 80071ee:	2f06      	cmp	r7, #6
 80071f0:	d128      	bne.n	8007244 <_strtod_l+0xbc>
 80071f2:	2300      	movs	r3, #0
 80071f4:	3601      	adds	r6, #1
 80071f6:	9619      	str	r6, [sp, #100]	; 0x64
 80071f8:	930e      	str	r3, [sp, #56]	; 0x38
 80071fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 85a0 	bne.w	8007d42 <_strtod_l+0xbba>
 8007202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007204:	b1cb      	cbz	r3, 800723a <_strtod_l+0xb2>
 8007206:	4642      	mov	r2, r8
 8007208:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	b01f      	add	sp, #124	; 0x7c
 8007212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	2920      	cmp	r1, #32
 8007218:	d1ce      	bne.n	80071b8 <_strtod_l+0x30>
 800721a:	3201      	adds	r2, #1
 800721c:	e7c1      	b.n	80071a2 <_strtod_l+0x1a>
 800721e:	292d      	cmp	r1, #45	; 0x2d
 8007220:	d1ca      	bne.n	80071b8 <_strtod_l+0x30>
 8007222:	2101      	movs	r1, #1
 8007224:	910e      	str	r1, [sp, #56]	; 0x38
 8007226:	1c51      	adds	r1, r2, #1
 8007228:	9119      	str	r1, [sp, #100]	; 0x64
 800722a:	7852      	ldrb	r2, [r2, #1]
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1c5      	bne.n	80071bc <_strtod_l+0x34>
 8007230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007232:	9519      	str	r5, [sp, #100]	; 0x64
 8007234:	2b00      	cmp	r3, #0
 8007236:	f040 8582 	bne.w	8007d3e <_strtod_l+0xbb6>
 800723a:	4642      	mov	r2, r8
 800723c:	464b      	mov	r3, r9
 800723e:	e7e5      	b.n	800720c <_strtod_l+0x84>
 8007240:	2100      	movs	r1, #0
 8007242:	e7ef      	b.n	8007224 <_strtod_l+0x9c>
 8007244:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007246:	b13a      	cbz	r2, 8007258 <_strtod_l+0xd0>
 8007248:	2135      	movs	r1, #53	; 0x35
 800724a:	a81c      	add	r0, sp, #112	; 0x70
 800724c:	f7ff ff34 	bl	80070b8 <__copybits>
 8007250:	4620      	mov	r0, r4
 8007252:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007254:	f7ff fb18 	bl	8006888 <_Bfree>
 8007258:	3f01      	subs	r7, #1
 800725a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800725c:	2f04      	cmp	r7, #4
 800725e:	d806      	bhi.n	800726e <_strtod_l+0xe6>
 8007260:	e8df f007 	tbb	[pc, r7]
 8007264:	201d0314 	.word	0x201d0314
 8007268:	14          	.byte	0x14
 8007269:	00          	.byte	0x00
 800726a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800726e:	05e9      	lsls	r1, r5, #23
 8007270:	bf48      	it	mi
 8007272:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800727a:	0d1b      	lsrs	r3, r3, #20
 800727c:	051b      	lsls	r3, r3, #20
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1bb      	bne.n	80071fa <_strtod_l+0x72>
 8007282:	f7fe fb17 	bl	80058b4 <__errno>
 8007286:	2322      	movs	r3, #34	; 0x22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	e7b6      	b.n	80071fa <_strtod_l+0x72>
 800728c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007290:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007294:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007298:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800729c:	e7e7      	b.n	800726e <_strtod_l+0xe6>
 800729e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007414 <_strtod_l+0x28c>
 80072a2:	e7e4      	b.n	800726e <_strtod_l+0xe6>
 80072a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80072a8:	f04f 38ff 	mov.w	r8, #4294967295
 80072ac:	e7df      	b.n	800726e <_strtod_l+0xe6>
 80072ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	9219      	str	r2, [sp, #100]	; 0x64
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b30      	cmp	r3, #48	; 0x30
 80072b8:	d0f9      	beq.n	80072ae <_strtod_l+0x126>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d09d      	beq.n	80071fa <_strtod_l+0x72>
 80072be:	2301      	movs	r3, #1
 80072c0:	f04f 0a00 	mov.w	sl, #0
 80072c4:	220a      	movs	r2, #10
 80072c6:	46d3      	mov	fp, sl
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072cc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80072d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80072d4:	7806      	ldrb	r6, [r0, #0]
 80072d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072da:	b2d9      	uxtb	r1, r3
 80072dc:	2909      	cmp	r1, #9
 80072de:	d926      	bls.n	800732e <_strtod_l+0x1a6>
 80072e0:	2201      	movs	r2, #1
 80072e2:	494d      	ldr	r1, [pc, #308]	; (8007418 <_strtod_l+0x290>)
 80072e4:	f001 f847 	bl	8008376 <strncmp>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d030      	beq.n	800734e <_strtod_l+0x1c6>
 80072ec:	2000      	movs	r0, #0
 80072ee:	4632      	mov	r2, r6
 80072f0:	4603      	mov	r3, r0
 80072f2:	465e      	mov	r6, fp
 80072f4:	9008      	str	r0, [sp, #32]
 80072f6:	2a65      	cmp	r2, #101	; 0x65
 80072f8:	d001      	beq.n	80072fe <_strtod_l+0x176>
 80072fa:	2a45      	cmp	r2, #69	; 0x45
 80072fc:	d113      	bne.n	8007326 <_strtod_l+0x19e>
 80072fe:	b91e      	cbnz	r6, 8007308 <_strtod_l+0x180>
 8007300:	9a05      	ldr	r2, [sp, #20]
 8007302:	4302      	orrs	r2, r0
 8007304:	d094      	beq.n	8007230 <_strtod_l+0xa8>
 8007306:	2600      	movs	r6, #0
 8007308:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800730a:	1c6a      	adds	r2, r5, #1
 800730c:	9219      	str	r2, [sp, #100]	; 0x64
 800730e:	786a      	ldrb	r2, [r5, #1]
 8007310:	2a2b      	cmp	r2, #43	; 0x2b
 8007312:	d074      	beq.n	80073fe <_strtod_l+0x276>
 8007314:	2a2d      	cmp	r2, #45	; 0x2d
 8007316:	d078      	beq.n	800740a <_strtod_l+0x282>
 8007318:	f04f 0c00 	mov.w	ip, #0
 800731c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007320:	2909      	cmp	r1, #9
 8007322:	d97f      	bls.n	8007424 <_strtod_l+0x29c>
 8007324:	9519      	str	r5, [sp, #100]	; 0x64
 8007326:	2700      	movs	r7, #0
 8007328:	e09e      	b.n	8007468 <_strtod_l+0x2e0>
 800732a:	2300      	movs	r3, #0
 800732c:	e7c8      	b.n	80072c0 <_strtod_l+0x138>
 800732e:	f1bb 0f08 	cmp.w	fp, #8
 8007332:	bfd8      	it	le
 8007334:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007336:	f100 0001 	add.w	r0, r0, #1
 800733a:	bfd6      	itet	le
 800733c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007340:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007344:	930a      	strle	r3, [sp, #40]	; 0x28
 8007346:	f10b 0b01 	add.w	fp, fp, #1
 800734a:	9019      	str	r0, [sp, #100]	; 0x64
 800734c:	e7c1      	b.n	80072d2 <_strtod_l+0x14a>
 800734e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	9219      	str	r2, [sp, #100]	; 0x64
 8007354:	785a      	ldrb	r2, [r3, #1]
 8007356:	f1bb 0f00 	cmp.w	fp, #0
 800735a:	d037      	beq.n	80073cc <_strtod_l+0x244>
 800735c:	465e      	mov	r6, fp
 800735e:	9008      	str	r0, [sp, #32]
 8007360:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007364:	2b09      	cmp	r3, #9
 8007366:	d912      	bls.n	800738e <_strtod_l+0x206>
 8007368:	2301      	movs	r3, #1
 800736a:	e7c4      	b.n	80072f6 <_strtod_l+0x16e>
 800736c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800736e:	3001      	adds	r0, #1
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	9219      	str	r2, [sp, #100]	; 0x64
 8007374:	785a      	ldrb	r2, [r3, #1]
 8007376:	2a30      	cmp	r2, #48	; 0x30
 8007378:	d0f8      	beq.n	800736c <_strtod_l+0x1e4>
 800737a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800737e:	2b08      	cmp	r3, #8
 8007380:	f200 84e4 	bhi.w	8007d4c <_strtod_l+0xbc4>
 8007384:	9008      	str	r0, [sp, #32]
 8007386:	2000      	movs	r0, #0
 8007388:	4606      	mov	r6, r0
 800738a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800738c:	930b      	str	r3, [sp, #44]	; 0x2c
 800738e:	3a30      	subs	r2, #48	; 0x30
 8007390:	f100 0301 	add.w	r3, r0, #1
 8007394:	d014      	beq.n	80073c0 <_strtod_l+0x238>
 8007396:	9908      	ldr	r1, [sp, #32]
 8007398:	eb00 0c06 	add.w	ip, r0, r6
 800739c:	4419      	add	r1, r3
 800739e:	9108      	str	r1, [sp, #32]
 80073a0:	4633      	mov	r3, r6
 80073a2:	210a      	movs	r1, #10
 80073a4:	4563      	cmp	r3, ip
 80073a6:	d113      	bne.n	80073d0 <_strtod_l+0x248>
 80073a8:	1833      	adds	r3, r6, r0
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	f106 0601 	add.w	r6, r6, #1
 80073b0:	4406      	add	r6, r0
 80073b2:	dc1a      	bgt.n	80073ea <_strtod_l+0x262>
 80073b4:	230a      	movs	r3, #10
 80073b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073b8:	fb03 2301 	mla	r3, r3, r1, r2
 80073bc:	930a      	str	r3, [sp, #40]	; 0x28
 80073be:	2300      	movs	r3, #0
 80073c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073c2:	4618      	mov	r0, r3
 80073c4:	1c51      	adds	r1, r2, #1
 80073c6:	9119      	str	r1, [sp, #100]	; 0x64
 80073c8:	7852      	ldrb	r2, [r2, #1]
 80073ca:	e7c9      	b.n	8007360 <_strtod_l+0x1d8>
 80073cc:	4658      	mov	r0, fp
 80073ce:	e7d2      	b.n	8007376 <_strtod_l+0x1ee>
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	f103 0301 	add.w	r3, r3, #1
 80073d6:	dc03      	bgt.n	80073e0 <_strtod_l+0x258>
 80073d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073da:	434f      	muls	r7, r1
 80073dc:	970a      	str	r7, [sp, #40]	; 0x28
 80073de:	e7e1      	b.n	80073a4 <_strtod_l+0x21c>
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	bfd8      	it	le
 80073e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073e8:	e7dc      	b.n	80073a4 <_strtod_l+0x21c>
 80073ea:	2e10      	cmp	r6, #16
 80073ec:	bfdc      	itt	le
 80073ee:	230a      	movle	r3, #10
 80073f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073f4:	e7e3      	b.n	80073be <_strtod_l+0x236>
 80073f6:	2300      	movs	r3, #0
 80073f8:	9308      	str	r3, [sp, #32]
 80073fa:	2301      	movs	r3, #1
 80073fc:	e780      	b.n	8007300 <_strtod_l+0x178>
 80073fe:	f04f 0c00 	mov.w	ip, #0
 8007402:	1caa      	adds	r2, r5, #2
 8007404:	9219      	str	r2, [sp, #100]	; 0x64
 8007406:	78aa      	ldrb	r2, [r5, #2]
 8007408:	e788      	b.n	800731c <_strtod_l+0x194>
 800740a:	f04f 0c01 	mov.w	ip, #1
 800740e:	e7f8      	b.n	8007402 <_strtod_l+0x27a>
 8007410:	080091a0 	.word	0x080091a0
 8007414:	7ff00000 	.word	0x7ff00000
 8007418:	0800919c 	.word	0x0800919c
 800741c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800741e:	1c51      	adds	r1, r2, #1
 8007420:	9119      	str	r1, [sp, #100]	; 0x64
 8007422:	7852      	ldrb	r2, [r2, #1]
 8007424:	2a30      	cmp	r2, #48	; 0x30
 8007426:	d0f9      	beq.n	800741c <_strtod_l+0x294>
 8007428:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800742c:	2908      	cmp	r1, #8
 800742e:	f63f af7a 	bhi.w	8007326 <_strtod_l+0x19e>
 8007432:	3a30      	subs	r2, #48	; 0x30
 8007434:	9209      	str	r2, [sp, #36]	; 0x24
 8007436:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007438:	920c      	str	r2, [sp, #48]	; 0x30
 800743a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800743c:	1c57      	adds	r7, r2, #1
 800743e:	9719      	str	r7, [sp, #100]	; 0x64
 8007440:	7852      	ldrb	r2, [r2, #1]
 8007442:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007446:	f1be 0f09 	cmp.w	lr, #9
 800744a:	d938      	bls.n	80074be <_strtod_l+0x336>
 800744c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800744e:	1a7f      	subs	r7, r7, r1
 8007450:	2f08      	cmp	r7, #8
 8007452:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007456:	dc03      	bgt.n	8007460 <_strtod_l+0x2d8>
 8007458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745a:	428f      	cmp	r7, r1
 800745c:	bfa8      	it	ge
 800745e:	460f      	movge	r7, r1
 8007460:	f1bc 0f00 	cmp.w	ip, #0
 8007464:	d000      	beq.n	8007468 <_strtod_l+0x2e0>
 8007466:	427f      	negs	r7, r7
 8007468:	2e00      	cmp	r6, #0
 800746a:	d14f      	bne.n	800750c <_strtod_l+0x384>
 800746c:	9905      	ldr	r1, [sp, #20]
 800746e:	4301      	orrs	r1, r0
 8007470:	f47f aec3 	bne.w	80071fa <_strtod_l+0x72>
 8007474:	2b00      	cmp	r3, #0
 8007476:	f47f aedb 	bne.w	8007230 <_strtod_l+0xa8>
 800747a:	2a69      	cmp	r2, #105	; 0x69
 800747c:	d029      	beq.n	80074d2 <_strtod_l+0x34a>
 800747e:	dc26      	bgt.n	80074ce <_strtod_l+0x346>
 8007480:	2a49      	cmp	r2, #73	; 0x49
 8007482:	d026      	beq.n	80074d2 <_strtod_l+0x34a>
 8007484:	2a4e      	cmp	r2, #78	; 0x4e
 8007486:	f47f aed3 	bne.w	8007230 <_strtod_l+0xa8>
 800748a:	499a      	ldr	r1, [pc, #616]	; (80076f4 <_strtod_l+0x56c>)
 800748c:	a819      	add	r0, sp, #100	; 0x64
 800748e:	f001 faa7 	bl	80089e0 <__match>
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f aecc 	beq.w	8007230 <_strtod_l+0xa8>
 8007498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b28      	cmp	r3, #40	; 0x28
 800749e:	d12f      	bne.n	8007500 <_strtod_l+0x378>
 80074a0:	4995      	ldr	r1, [pc, #596]	; (80076f8 <_strtod_l+0x570>)
 80074a2:	aa1c      	add	r2, sp, #112	; 0x70
 80074a4:	a819      	add	r0, sp, #100	; 0x64
 80074a6:	f001 faaf 	bl	8008a08 <__hexnan>
 80074aa:	2805      	cmp	r0, #5
 80074ac:	d128      	bne.n	8007500 <_strtod_l+0x378>
 80074ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80074b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80074b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80074bc:	e69d      	b.n	80071fa <_strtod_l+0x72>
 80074be:	210a      	movs	r1, #10
 80074c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074c2:	fb01 2107 	mla	r1, r1, r7, r2
 80074c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80074ca:	9209      	str	r2, [sp, #36]	; 0x24
 80074cc:	e7b5      	b.n	800743a <_strtod_l+0x2b2>
 80074ce:	2a6e      	cmp	r2, #110	; 0x6e
 80074d0:	e7d9      	b.n	8007486 <_strtod_l+0x2fe>
 80074d2:	498a      	ldr	r1, [pc, #552]	; (80076fc <_strtod_l+0x574>)
 80074d4:	a819      	add	r0, sp, #100	; 0x64
 80074d6:	f001 fa83 	bl	80089e0 <__match>
 80074da:	2800      	cmp	r0, #0
 80074dc:	f43f aea8 	beq.w	8007230 <_strtod_l+0xa8>
 80074e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074e2:	4987      	ldr	r1, [pc, #540]	; (8007700 <_strtod_l+0x578>)
 80074e4:	3b01      	subs	r3, #1
 80074e6:	a819      	add	r0, sp, #100	; 0x64
 80074e8:	9319      	str	r3, [sp, #100]	; 0x64
 80074ea:	f001 fa79 	bl	80089e0 <__match>
 80074ee:	b910      	cbnz	r0, 80074f6 <_strtod_l+0x36e>
 80074f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074f2:	3301      	adds	r3, #1
 80074f4:	9319      	str	r3, [sp, #100]	; 0x64
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007704 <_strtod_l+0x57c>
 80074fe:	e67c      	b.n	80071fa <_strtod_l+0x72>
 8007500:	4881      	ldr	r0, [pc, #516]	; (8007708 <_strtod_l+0x580>)
 8007502:	f000 ff8b 	bl	800841c <nan>
 8007506:	4680      	mov	r8, r0
 8007508:	4689      	mov	r9, r1
 800750a:	e676      	b.n	80071fa <_strtod_l+0x72>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	f1bb 0f00 	cmp.w	fp, #0
 8007512:	bf08      	it	eq
 8007514:	46b3      	moveq	fp, r6
 8007516:	1afb      	subs	r3, r7, r3
 8007518:	2e10      	cmp	r6, #16
 800751a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800751c:	4635      	mov	r5, r6
 800751e:	9309      	str	r3, [sp, #36]	; 0x24
 8007520:	bfa8      	it	ge
 8007522:	2510      	movge	r5, #16
 8007524:	f7f8 ffca 	bl	80004bc <__aeabi_ui2d>
 8007528:	2e09      	cmp	r6, #9
 800752a:	4680      	mov	r8, r0
 800752c:	4689      	mov	r9, r1
 800752e:	dd13      	ble.n	8007558 <_strtod_l+0x3d0>
 8007530:	4b76      	ldr	r3, [pc, #472]	; (800770c <_strtod_l+0x584>)
 8007532:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007536:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800753a:	f7f9 f839 	bl	80005b0 <__aeabi_dmul>
 800753e:	4680      	mov	r8, r0
 8007540:	4650      	mov	r0, sl
 8007542:	4689      	mov	r9, r1
 8007544:	f7f8 ffba 	bl	80004bc <__aeabi_ui2d>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f8 fe78 	bl	8000244 <__adddf3>
 8007554:	4680      	mov	r8, r0
 8007556:	4689      	mov	r9, r1
 8007558:	2e0f      	cmp	r6, #15
 800755a:	dc36      	bgt.n	80075ca <_strtod_l+0x442>
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	f43f ae4b 	beq.w	80071fa <_strtod_l+0x72>
 8007564:	dd22      	ble.n	80075ac <_strtod_l+0x424>
 8007566:	2b16      	cmp	r3, #22
 8007568:	dc09      	bgt.n	800757e <_strtod_l+0x3f6>
 800756a:	4968      	ldr	r1, [pc, #416]	; (800770c <_strtod_l+0x584>)
 800756c:	4642      	mov	r2, r8
 800756e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007572:	464b      	mov	r3, r9
 8007574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007578:	f7f9 f81a 	bl	80005b0 <__aeabi_dmul>
 800757c:	e7c3      	b.n	8007506 <_strtod_l+0x37e>
 800757e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007580:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007584:	4293      	cmp	r3, r2
 8007586:	db20      	blt.n	80075ca <_strtod_l+0x442>
 8007588:	4c60      	ldr	r4, [pc, #384]	; (800770c <_strtod_l+0x584>)
 800758a:	f1c6 060f 	rsb	r6, r6, #15
 800758e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007592:	4642      	mov	r2, r8
 8007594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007598:	464b      	mov	r3, r9
 800759a:	f7f9 f809 	bl	80005b0 <__aeabi_dmul>
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	1b9e      	subs	r6, r3, r6
 80075a2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80075a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075aa:	e7e5      	b.n	8007578 <_strtod_l+0x3f0>
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	3316      	adds	r3, #22
 80075b0:	db0b      	blt.n	80075ca <_strtod_l+0x442>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	4640      	mov	r0, r8
 80075b6:	1bdf      	subs	r7, r3, r7
 80075b8:	4b54      	ldr	r3, [pc, #336]	; (800770c <_strtod_l+0x584>)
 80075ba:	4649      	mov	r1, r9
 80075bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80075c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c4:	f7f9 f91e 	bl	8000804 <__aeabi_ddiv>
 80075c8:	e79d      	b.n	8007506 <_strtod_l+0x37e>
 80075ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075cc:	1b75      	subs	r5, r6, r5
 80075ce:	441d      	add	r5, r3
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	dd70      	ble.n	80076b6 <_strtod_l+0x52e>
 80075d4:	f015 030f 	ands.w	r3, r5, #15
 80075d8:	d00a      	beq.n	80075f0 <_strtod_l+0x468>
 80075da:	494c      	ldr	r1, [pc, #304]	; (800770c <_strtod_l+0x584>)
 80075dc:	4642      	mov	r2, r8
 80075de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e6:	464b      	mov	r3, r9
 80075e8:	f7f8 ffe2 	bl	80005b0 <__aeabi_dmul>
 80075ec:	4680      	mov	r8, r0
 80075ee:	4689      	mov	r9, r1
 80075f0:	f035 050f 	bics.w	r5, r5, #15
 80075f4:	d04d      	beq.n	8007692 <_strtod_l+0x50a>
 80075f6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075fa:	dd22      	ble.n	8007642 <_strtod_l+0x4ba>
 80075fc:	2600      	movs	r6, #0
 80075fe:	46b3      	mov	fp, r6
 8007600:	960b      	str	r6, [sp, #44]	; 0x2c
 8007602:	9608      	str	r6, [sp, #32]
 8007604:	2322      	movs	r3, #34	; 0x22
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007704 <_strtod_l+0x57c>
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f adf1 	beq.w	80071fa <_strtod_l+0x72>
 8007618:	4620      	mov	r0, r4
 800761a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800761c:	f7ff f934 	bl	8006888 <_Bfree>
 8007620:	4620      	mov	r0, r4
 8007622:	9908      	ldr	r1, [sp, #32]
 8007624:	f7ff f930 	bl	8006888 <_Bfree>
 8007628:	4659      	mov	r1, fp
 800762a:	4620      	mov	r0, r4
 800762c:	f7ff f92c 	bl	8006888 <_Bfree>
 8007630:	4620      	mov	r0, r4
 8007632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007634:	f7ff f928 	bl	8006888 <_Bfree>
 8007638:	4631      	mov	r1, r6
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff f924 	bl	8006888 <_Bfree>
 8007640:	e5db      	b.n	80071fa <_strtod_l+0x72>
 8007642:	4b33      	ldr	r3, [pc, #204]	; (8007710 <_strtod_l+0x588>)
 8007644:	4640      	mov	r0, r8
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	2300      	movs	r3, #0
 800764a:	4649      	mov	r1, r9
 800764c:	469a      	mov	sl, r3
 800764e:	112d      	asrs	r5, r5, #4
 8007650:	2d01      	cmp	r5, #1
 8007652:	dc21      	bgt.n	8007698 <_strtod_l+0x510>
 8007654:	b10b      	cbz	r3, 800765a <_strtod_l+0x4d2>
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	492d      	ldr	r1, [pc, #180]	; (8007710 <_strtod_l+0x588>)
 800765c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007660:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007664:	4642      	mov	r2, r8
 8007666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800766a:	464b      	mov	r3, r9
 800766c:	f7f8 ffa0 	bl	80005b0 <__aeabi_dmul>
 8007670:	4b24      	ldr	r3, [pc, #144]	; (8007704 <_strtod_l+0x57c>)
 8007672:	460a      	mov	r2, r1
 8007674:	400b      	ands	r3, r1
 8007676:	4927      	ldr	r1, [pc, #156]	; (8007714 <_strtod_l+0x58c>)
 8007678:	4680      	mov	r8, r0
 800767a:	428b      	cmp	r3, r1
 800767c:	d8be      	bhi.n	80075fc <_strtod_l+0x474>
 800767e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007682:	428b      	cmp	r3, r1
 8007684:	bf86      	itte	hi
 8007686:	f04f 38ff 	movhi.w	r8, #4294967295
 800768a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007718 <_strtod_l+0x590>
 800768e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007692:	2300      	movs	r3, #0
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	e07b      	b.n	8007790 <_strtod_l+0x608>
 8007698:	07ea      	lsls	r2, r5, #31
 800769a:	d505      	bpl.n	80076a8 <_strtod_l+0x520>
 800769c:	9b05      	ldr	r3, [sp, #20]
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 ff85 	bl	80005b0 <__aeabi_dmul>
 80076a6:	2301      	movs	r3, #1
 80076a8:	9a05      	ldr	r2, [sp, #20]
 80076aa:	f10a 0a01 	add.w	sl, sl, #1
 80076ae:	3208      	adds	r2, #8
 80076b0:	106d      	asrs	r5, r5, #1
 80076b2:	9205      	str	r2, [sp, #20]
 80076b4:	e7cc      	b.n	8007650 <_strtod_l+0x4c8>
 80076b6:	d0ec      	beq.n	8007692 <_strtod_l+0x50a>
 80076b8:	426d      	negs	r5, r5
 80076ba:	f015 020f 	ands.w	r2, r5, #15
 80076be:	d00a      	beq.n	80076d6 <_strtod_l+0x54e>
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <_strtod_l+0x584>)
 80076c2:	4640      	mov	r0, r8
 80076c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c8:	4649      	mov	r1, r9
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f9 f899 	bl	8000804 <__aeabi_ddiv>
 80076d2:	4680      	mov	r8, r0
 80076d4:	4689      	mov	r9, r1
 80076d6:	112d      	asrs	r5, r5, #4
 80076d8:	d0db      	beq.n	8007692 <_strtod_l+0x50a>
 80076da:	2d1f      	cmp	r5, #31
 80076dc:	dd1e      	ble.n	800771c <_strtod_l+0x594>
 80076de:	2600      	movs	r6, #0
 80076e0:	46b3      	mov	fp, r6
 80076e2:	960b      	str	r6, [sp, #44]	; 0x2c
 80076e4:	9608      	str	r6, [sp, #32]
 80076e6:	2322      	movs	r3, #34	; 0x22
 80076e8:	f04f 0800 	mov.w	r8, #0
 80076ec:	f04f 0900 	mov.w	r9, #0
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	e78d      	b.n	8007610 <_strtod_l+0x488>
 80076f4:	08008f87 	.word	0x08008f87
 80076f8:	080091b4 	.word	0x080091b4
 80076fc:	08008f7f 	.word	0x08008f7f
 8007700:	08008fb6 	.word	0x08008fb6
 8007704:	7ff00000 	.word	0x7ff00000
 8007708:	08009345 	.word	0x08009345
 800770c:	080090c8 	.word	0x080090c8
 8007710:	080090a0 	.word	0x080090a0
 8007714:	7ca00000 	.word	0x7ca00000
 8007718:	7fefffff 	.word	0x7fefffff
 800771c:	f015 0310 	ands.w	r3, r5, #16
 8007720:	bf18      	it	ne
 8007722:	236a      	movne	r3, #106	; 0x6a
 8007724:	4640      	mov	r0, r8
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	4649      	mov	r1, r9
 800772a:	2300      	movs	r3, #0
 800772c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80079f8 <_strtod_l+0x870>
 8007730:	07ea      	lsls	r2, r5, #31
 8007732:	d504      	bpl.n	800773e <_strtod_l+0x5b6>
 8007734:	e9da 2300 	ldrd	r2, r3, [sl]
 8007738:	f7f8 ff3a 	bl	80005b0 <__aeabi_dmul>
 800773c:	2301      	movs	r3, #1
 800773e:	106d      	asrs	r5, r5, #1
 8007740:	f10a 0a08 	add.w	sl, sl, #8
 8007744:	d1f4      	bne.n	8007730 <_strtod_l+0x5a8>
 8007746:	b10b      	cbz	r3, 800774c <_strtod_l+0x5c4>
 8007748:	4680      	mov	r8, r0
 800774a:	4689      	mov	r9, r1
 800774c:	9b05      	ldr	r3, [sp, #20]
 800774e:	b1bb      	cbz	r3, 8007780 <_strtod_l+0x5f8>
 8007750:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007754:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007758:	2b00      	cmp	r3, #0
 800775a:	4649      	mov	r1, r9
 800775c:	dd10      	ble.n	8007780 <_strtod_l+0x5f8>
 800775e:	2b1f      	cmp	r3, #31
 8007760:	f340 8128 	ble.w	80079b4 <_strtod_l+0x82c>
 8007764:	2b34      	cmp	r3, #52	; 0x34
 8007766:	bfd8      	it	le
 8007768:	f04f 33ff 	movle.w	r3, #4294967295
 800776c:	f04f 0800 	mov.w	r8, #0
 8007770:	bfcf      	iteee	gt
 8007772:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007776:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800777a:	4093      	lslle	r3, r2
 800777c:	ea03 0901 	andle.w	r9, r3, r1
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f9 f97a 	bl	8000a80 <__aeabi_dcmpeq>
 800778c:	2800      	cmp	r0, #0
 800778e:	d1a6      	bne.n	80076de <_strtod_l+0x556>
 8007790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007792:	465a      	mov	r2, fp
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4620      	mov	r0, r4
 8007798:	4633      	mov	r3, r6
 800779a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800779c:	f7ff f8dc 	bl	8006958 <__s2b>
 80077a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f af2a 	beq.w	80075fc <_strtod_l+0x474>
 80077a8:	2600      	movs	r6, #0
 80077aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ac:	9b08      	ldr	r3, [sp, #32]
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	eba3 0307 	sub.w	r3, r3, r7
 80077b4:	bfa8      	it	ge
 80077b6:	2300      	movge	r3, #0
 80077b8:	46b3      	mov	fp, r6
 80077ba:	9312      	str	r3, [sp, #72]	; 0x48
 80077bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077c0:	9316      	str	r3, [sp, #88]	; 0x58
 80077c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c4:	4620      	mov	r0, r4
 80077c6:	6859      	ldr	r1, [r3, #4]
 80077c8:	f7ff f81e 	bl	8006808 <_Balloc>
 80077cc:	9008      	str	r0, [sp, #32]
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f43f af18 	beq.w	8007604 <_strtod_l+0x47c>
 80077d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d6:	300c      	adds	r0, #12
 80077d8:	691a      	ldr	r2, [r3, #16]
 80077da:	f103 010c 	add.w	r1, r3, #12
 80077de:	3202      	adds	r2, #2
 80077e0:	0092      	lsls	r2, r2, #2
 80077e2:	f000 fe0d 	bl	8008400 <memcpy>
 80077e6:	ab1c      	add	r3, sp, #112	; 0x70
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4642      	mov	r2, r8
 80077f0:	464b      	mov	r3, r9
 80077f2:	4620      	mov	r0, r4
 80077f4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80077f8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80077fc:	f7ff fbd8 	bl	8006fb0 <__d2b>
 8007800:	901a      	str	r0, [sp, #104]	; 0x68
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f aefe 	beq.w	8007604 <_strtod_l+0x47c>
 8007808:	2101      	movs	r1, #1
 800780a:	4620      	mov	r0, r4
 800780c:	f7ff f93c 	bl	8006a88 <__i2b>
 8007810:	4683      	mov	fp, r0
 8007812:	2800      	cmp	r0, #0
 8007814:	f43f aef6 	beq.w	8007604 <_strtod_l+0x47c>
 8007818:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800781a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800781c:	2f00      	cmp	r7, #0
 800781e:	bfab      	itete	ge
 8007820:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007822:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007824:	eb07 0a03 	addge.w	sl, r7, r3
 8007828:	1bdd      	sublt	r5, r3, r7
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	bfa8      	it	ge
 800782e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007830:	eba7 0703 	sub.w	r7, r7, r3
 8007834:	4417      	add	r7, r2
 8007836:	4b71      	ldr	r3, [pc, #452]	; (80079fc <_strtod_l+0x874>)
 8007838:	f107 37ff 	add.w	r7, r7, #4294967295
 800783c:	bfb8      	it	lt
 800783e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007842:	429f      	cmp	r7, r3
 8007844:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007848:	f280 80c7 	bge.w	80079da <_strtod_l+0x852>
 800784c:	1bdb      	subs	r3, r3, r7
 800784e:	2b1f      	cmp	r3, #31
 8007850:	f04f 0101 	mov.w	r1, #1
 8007854:	eba2 0203 	sub.w	r2, r2, r3
 8007858:	f300 80b3 	bgt.w	80079c2 <_strtod_l+0x83a>
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	9313      	str	r3, [sp, #76]	; 0x4c
 8007862:	2300      	movs	r3, #0
 8007864:	9310      	str	r3, [sp, #64]	; 0x40
 8007866:	eb0a 0702 	add.w	r7, sl, r2
 800786a:	9b05      	ldr	r3, [sp, #20]
 800786c:	45ba      	cmp	sl, r7
 800786e:	4415      	add	r5, r2
 8007870:	441d      	add	r5, r3
 8007872:	4653      	mov	r3, sl
 8007874:	bfa8      	it	ge
 8007876:	463b      	movge	r3, r7
 8007878:	42ab      	cmp	r3, r5
 800787a:	bfa8      	it	ge
 800787c:	462b      	movge	r3, r5
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfc2      	ittt	gt
 8007882:	1aff      	subgt	r7, r7, r3
 8007884:	1aed      	subgt	r5, r5, r3
 8007886:	ebaa 0a03 	subgt.w	sl, sl, r3
 800788a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd17      	ble.n	80078c0 <_strtod_l+0x738>
 8007890:	4659      	mov	r1, fp
 8007892:	461a      	mov	r2, r3
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff f9b5 	bl	8006c04 <__pow5mult>
 800789a:	4683      	mov	fp, r0
 800789c:	2800      	cmp	r0, #0
 800789e:	f43f aeb1 	beq.w	8007604 <_strtod_l+0x47c>
 80078a2:	4601      	mov	r1, r0
 80078a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7ff f904 	bl	8006ab4 <__multiply>
 80078ac:	900a      	str	r0, [sp, #40]	; 0x28
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f aea8 	beq.w	8007604 <_strtod_l+0x47c>
 80078b4:	4620      	mov	r0, r4
 80078b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078b8:	f7fe ffe6 	bl	8006888 <_Bfree>
 80078bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078be:	931a      	str	r3, [sp, #104]	; 0x68
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	f300 808f 	bgt.w	80079e4 <_strtod_l+0x85c>
 80078c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dd08      	ble.n	80078de <_strtod_l+0x756>
 80078cc:	4620      	mov	r0, r4
 80078ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078d0:	9908      	ldr	r1, [sp, #32]
 80078d2:	f7ff f997 	bl	8006c04 <__pow5mult>
 80078d6:	9008      	str	r0, [sp, #32]
 80078d8:	2800      	cmp	r0, #0
 80078da:	f43f ae93 	beq.w	8007604 <_strtod_l+0x47c>
 80078de:	2d00      	cmp	r5, #0
 80078e0:	dd08      	ble.n	80078f4 <_strtod_l+0x76c>
 80078e2:	462a      	mov	r2, r5
 80078e4:	4620      	mov	r0, r4
 80078e6:	9908      	ldr	r1, [sp, #32]
 80078e8:	f7ff f9e6 	bl	8006cb8 <__lshift>
 80078ec:	9008      	str	r0, [sp, #32]
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f ae88 	beq.w	8007604 <_strtod_l+0x47c>
 80078f4:	f1ba 0f00 	cmp.w	sl, #0
 80078f8:	dd08      	ble.n	800790c <_strtod_l+0x784>
 80078fa:	4659      	mov	r1, fp
 80078fc:	4652      	mov	r2, sl
 80078fe:	4620      	mov	r0, r4
 8007900:	f7ff f9da 	bl	8006cb8 <__lshift>
 8007904:	4683      	mov	fp, r0
 8007906:	2800      	cmp	r0, #0
 8007908:	f43f ae7c 	beq.w	8007604 <_strtod_l+0x47c>
 800790c:	4620      	mov	r0, r4
 800790e:	9a08      	ldr	r2, [sp, #32]
 8007910:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007912:	f7ff fa59 	bl	8006dc8 <__mdiff>
 8007916:	4606      	mov	r6, r0
 8007918:	2800      	cmp	r0, #0
 800791a:	f43f ae73 	beq.w	8007604 <_strtod_l+0x47c>
 800791e:	2500      	movs	r5, #0
 8007920:	68c3      	ldr	r3, [r0, #12]
 8007922:	4659      	mov	r1, fp
 8007924:	60c5      	str	r5, [r0, #12]
 8007926:	930a      	str	r3, [sp, #40]	; 0x28
 8007928:	f7ff fa32 	bl	8006d90 <__mcmp>
 800792c:	42a8      	cmp	r0, r5
 800792e:	da6b      	bge.n	8007a08 <_strtod_l+0x880>
 8007930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007932:	ea53 0308 	orrs.w	r3, r3, r8
 8007936:	f040 808f 	bne.w	8007a58 <_strtod_l+0x8d0>
 800793a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 808a 	bne.w	8007a58 <_strtod_l+0x8d0>
 8007944:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007948:	0d1b      	lsrs	r3, r3, #20
 800794a:	051b      	lsls	r3, r3, #20
 800794c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007950:	f240 8082 	bls.w	8007a58 <_strtod_l+0x8d0>
 8007954:	6973      	ldr	r3, [r6, #20]
 8007956:	b913      	cbnz	r3, 800795e <_strtod_l+0x7d6>
 8007958:	6933      	ldr	r3, [r6, #16]
 800795a:	2b01      	cmp	r3, #1
 800795c:	dd7c      	ble.n	8007a58 <_strtod_l+0x8d0>
 800795e:	4631      	mov	r1, r6
 8007960:	2201      	movs	r2, #1
 8007962:	4620      	mov	r0, r4
 8007964:	f7ff f9a8 	bl	8006cb8 <__lshift>
 8007968:	4659      	mov	r1, fp
 800796a:	4606      	mov	r6, r0
 800796c:	f7ff fa10 	bl	8006d90 <__mcmp>
 8007970:	2800      	cmp	r0, #0
 8007972:	dd71      	ble.n	8007a58 <_strtod_l+0x8d0>
 8007974:	9905      	ldr	r1, [sp, #20]
 8007976:	464b      	mov	r3, r9
 8007978:	4a21      	ldr	r2, [pc, #132]	; (8007a00 <_strtod_l+0x878>)
 800797a:	2900      	cmp	r1, #0
 800797c:	f000 808d 	beq.w	8007a9a <_strtod_l+0x912>
 8007980:	ea02 0109 	and.w	r1, r2, r9
 8007984:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007988:	f300 8087 	bgt.w	8007a9a <_strtod_l+0x912>
 800798c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007990:	f77f aea9 	ble.w	80076e6 <_strtod_l+0x55e>
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	4b1a      	ldr	r3, [pc, #104]	; (8007a04 <_strtod_l+0x87c>)
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fe08 	bl	80005b0 <__aeabi_dmul>
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <_strtod_l+0x878>)
 80079a2:	4680      	mov	r8, r0
 80079a4:	400b      	ands	r3, r1
 80079a6:	4689      	mov	r9, r1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f47f ae35 	bne.w	8007618 <_strtod_l+0x490>
 80079ae:	2322      	movs	r3, #34	; 0x22
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	e631      	b.n	8007618 <_strtod_l+0x490>
 80079b4:	f04f 32ff 	mov.w	r2, #4294967295
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	ea03 0808 	and.w	r8, r3, r8
 80079c0:	e6de      	b.n	8007780 <_strtod_l+0x5f8>
 80079c2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80079c6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80079ca:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80079ce:	37e2      	adds	r7, #226	; 0xe2
 80079d0:	fa01 f307 	lsl.w	r3, r1, r7
 80079d4:	9310      	str	r3, [sp, #64]	; 0x40
 80079d6:	9113      	str	r1, [sp, #76]	; 0x4c
 80079d8:	e745      	b.n	8007866 <_strtod_l+0x6de>
 80079da:	2300      	movs	r3, #0
 80079dc:	9310      	str	r3, [sp, #64]	; 0x40
 80079de:	2301      	movs	r3, #1
 80079e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079e2:	e740      	b.n	8007866 <_strtod_l+0x6de>
 80079e4:	463a      	mov	r2, r7
 80079e6:	4620      	mov	r0, r4
 80079e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079ea:	f7ff f965 	bl	8006cb8 <__lshift>
 80079ee:	901a      	str	r0, [sp, #104]	; 0x68
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f47f af68 	bne.w	80078c6 <_strtod_l+0x73e>
 80079f6:	e605      	b.n	8007604 <_strtod_l+0x47c>
 80079f8:	080091c8 	.word	0x080091c8
 80079fc:	fffffc02 	.word	0xfffffc02
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	39500000 	.word	0x39500000
 8007a08:	46ca      	mov	sl, r9
 8007a0a:	d165      	bne.n	8007ad8 <_strtod_l+0x950>
 8007a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a12:	b352      	cbz	r2, 8007a6a <_strtod_l+0x8e2>
 8007a14:	4a9e      	ldr	r2, [pc, #632]	; (8007c90 <_strtod_l+0xb08>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d12a      	bne.n	8007a70 <_strtod_l+0x8e8>
 8007a1a:	9b05      	ldr	r3, [sp, #20]
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	b1fb      	cbz	r3, 8007a60 <_strtod_l+0x8d8>
 8007a20:	4b9c      	ldr	r3, [pc, #624]	; (8007c94 <_strtod_l+0xb0c>)
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	ea09 0303 	and.w	r3, r9, r3
 8007a2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a2e:	d81a      	bhi.n	8007a66 <_strtod_l+0x8de>
 8007a30:	0d1b      	lsrs	r3, r3, #20
 8007a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	d118      	bne.n	8007a70 <_strtod_l+0x8e8>
 8007a3e:	4b96      	ldr	r3, [pc, #600]	; (8007c98 <_strtod_l+0xb10>)
 8007a40:	459a      	cmp	sl, r3
 8007a42:	d102      	bne.n	8007a4a <_strtod_l+0x8c2>
 8007a44:	3101      	adds	r1, #1
 8007a46:	f43f addd 	beq.w	8007604 <_strtod_l+0x47c>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	4b91      	ldr	r3, [pc, #580]	; (8007c94 <_strtod_l+0xb0c>)
 8007a50:	ea0a 0303 	and.w	r3, sl, r3
 8007a54:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d19a      	bne.n	8007994 <_strtod_l+0x80c>
 8007a5e:	e5db      	b.n	8007618 <_strtod_l+0x490>
 8007a60:	f04f 33ff 	mov.w	r3, #4294967295
 8007a64:	e7e9      	b.n	8007a3a <_strtod_l+0x8b2>
 8007a66:	4613      	mov	r3, r2
 8007a68:	e7e7      	b.n	8007a3a <_strtod_l+0x8b2>
 8007a6a:	ea53 0308 	orrs.w	r3, r3, r8
 8007a6e:	d081      	beq.n	8007974 <_strtod_l+0x7ec>
 8007a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a72:	b1e3      	cbz	r3, 8007aae <_strtod_l+0x926>
 8007a74:	ea13 0f0a 	tst.w	r3, sl
 8007a78:	d0ee      	beq.n	8007a58 <_strtod_l+0x8d0>
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	4649      	mov	r1, r9
 8007a80:	9a05      	ldr	r2, [sp, #20]
 8007a82:	b1c3      	cbz	r3, 8007ab6 <_strtod_l+0x92e>
 8007a84:	f7ff fb5c 	bl	8007140 <sulp>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a90:	f7f8 fbd8 	bl	8000244 <__adddf3>
 8007a94:	4680      	mov	r8, r0
 8007a96:	4689      	mov	r9, r1
 8007a98:	e7de      	b.n	8007a58 <_strtod_l+0x8d0>
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007aa0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007aa4:	f04f 38ff 	mov.w	r8, #4294967295
 8007aa8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007aac:	e7d4      	b.n	8007a58 <_strtod_l+0x8d0>
 8007aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ab0:	ea13 0f08 	tst.w	r3, r8
 8007ab4:	e7e0      	b.n	8007a78 <_strtod_l+0x8f0>
 8007ab6:	f7ff fb43 	bl	8007140 <sulp>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ac0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ac2:	f7f8 fbbd 	bl	8000240 <__aeabi_dsub>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	f7f8 ffd7 	bl	8000a80 <__aeabi_dcmpeq>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d0c0      	beq.n	8007a58 <_strtod_l+0x8d0>
 8007ad6:	e606      	b.n	80076e6 <_strtod_l+0x55e>
 8007ad8:	4659      	mov	r1, fp
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff fabe 	bl	800705c <__ratio>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aee:	f7f8 ffdb 	bl	8000aa8 <__aeabi_dcmple>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d06f      	beq.n	8007bd6 <_strtod_l+0xa4e>
 8007af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d17c      	bne.n	8007bf6 <_strtod_l+0xa6e>
 8007afc:	f1b8 0f00 	cmp.w	r8, #0
 8007b00:	d159      	bne.n	8007bb6 <_strtod_l+0xa2e>
 8007b02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d17b      	bne.n	8007c02 <_strtod_l+0xa7a>
 8007b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4b62      	ldr	r3, [pc, #392]	; (8007c9c <_strtod_l+0xb14>)
 8007b12:	f7f8 ffbf 	bl	8000a94 <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d15a      	bne.n	8007bd0 <_strtod_l+0xa48>
 8007b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4b5f      	ldr	r3, [pc, #380]	; (8007ca0 <_strtod_l+0xb18>)
 8007b22:	f7f8 fd45 	bl	80005b0 <__aeabi_dmul>
 8007b26:	4605      	mov	r5, r0
 8007b28:	460f      	mov	r7, r1
 8007b2a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b2e:	9506      	str	r5, [sp, #24]
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b3a:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <_strtod_l+0xb0c>)
 8007b3c:	4a55      	ldr	r2, [pc, #340]	; (8007c94 <_strtod_l+0xb0c>)
 8007b3e:	ea0a 0303 	and.w	r3, sl, r3
 8007b42:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b44:	4b57      	ldr	r3, [pc, #348]	; (8007ca4 <_strtod_l+0xb1c>)
 8007b46:	ea0a 0202 	and.w	r2, sl, r2
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	f040 80b0 	bne.w	8007cb0 <_strtod_l+0xb28>
 8007b50:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	f7ff f9c2 	bl	8006ee0 <__ulp>
 8007b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b60:	f7f8 fd26 	bl	80005b0 <__aeabi_dmul>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f7f8 fb6c 	bl	8000244 <__adddf3>
 8007b6c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c94 <_strtod_l+0xb0c>
 8007b70:	4a4d      	ldr	r2, [pc, #308]	; (8007ca8 <_strtod_l+0xb20>)
 8007b72:	ea01 0a0a 	and.w	sl, r1, sl
 8007b76:	4592      	cmp	sl, r2
 8007b78:	4680      	mov	r8, r0
 8007b7a:	d948      	bls.n	8007c0e <_strtod_l+0xa86>
 8007b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b7e:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <_strtod_l+0xb10>)
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d103      	bne.n	8007b8c <_strtod_l+0xa04>
 8007b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b86:	3301      	adds	r3, #1
 8007b88:	f43f ad3c 	beq.w	8007604 <_strtod_l+0x47c>
 8007b8c:	f04f 38ff 	mov.w	r8, #4294967295
 8007b90:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c98 <_strtod_l+0xb10>
 8007b94:	4620      	mov	r0, r4
 8007b96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b98:	f7fe fe76 	bl	8006888 <_Bfree>
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	9908      	ldr	r1, [sp, #32]
 8007ba0:	f7fe fe72 	bl	8006888 <_Bfree>
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7fe fe6e 	bl	8006888 <_Bfree>
 8007bac:	4631      	mov	r1, r6
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7fe fe6a 	bl	8006888 <_Bfree>
 8007bb4:	e605      	b.n	80077c2 <_strtod_l+0x63a>
 8007bb6:	f1b8 0f01 	cmp.w	r8, #1
 8007bba:	d103      	bne.n	8007bc4 <_strtod_l+0xa3c>
 8007bbc:	f1b9 0f00 	cmp.w	r9, #0
 8007bc0:	f43f ad91 	beq.w	80076e6 <_strtod_l+0x55e>
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4b39      	ldr	r3, [pc, #228]	; (8007cac <_strtod_l+0xb24>)
 8007bc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bce:	e016      	b.n	8007bfe <_strtod_l+0xa76>
 8007bd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bd2:	4f33      	ldr	r7, [pc, #204]	; (8007ca0 <_strtod_l+0xb18>)
 8007bd4:	e7a9      	b.n	8007b2a <_strtod_l+0x9a2>
 8007bd6:	4b32      	ldr	r3, [pc, #200]	; (8007ca0 <_strtod_l+0xb18>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bde:	f7f8 fce7 	bl	80005b0 <__aeabi_dmul>
 8007be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be4:	4605      	mov	r5, r0
 8007be6:	460f      	mov	r7, r1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d09e      	beq.n	8007b2a <_strtod_l+0x9a2>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bf4:	e79d      	b.n	8007b32 <_strtod_l+0x9aa>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4b28      	ldr	r3, [pc, #160]	; (8007c9c <_strtod_l+0xb14>)
 8007bfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bfe:	4f27      	ldr	r7, [pc, #156]	; (8007c9c <_strtod_l+0xb14>)
 8007c00:	e797      	b.n	8007b32 <_strtod_l+0x9aa>
 8007c02:	2200      	movs	r2, #0
 8007c04:	4b29      	ldr	r3, [pc, #164]	; (8007cac <_strtod_l+0xb24>)
 8007c06:	4645      	mov	r5, r8
 8007c08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c0c:	e7f7      	b.n	8007bfe <_strtod_l+0xa76>
 8007c0e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	46ca      	mov	sl, r9
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1bc      	bne.n	8007b94 <_strtod_l+0xa0c>
 8007c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c20:	0d1b      	lsrs	r3, r3, #20
 8007c22:	051b      	lsls	r3, r3, #20
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d1b5      	bne.n	8007b94 <_strtod_l+0xa0c>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f9 fa8c 	bl	8001148 <__aeabi_d2lz>
 8007c30:	f7f8 fc90 	bl	8000554 <__aeabi_l2d>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fb00 	bl	8000240 <__aeabi_dsub>
 8007c40:	460b      	mov	r3, r1
 8007c42:	4602      	mov	r2, r0
 8007c44:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007c48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007c52:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007c56:	d06c      	beq.n	8007d32 <_strtod_l+0xbaa>
 8007c58:	a309      	add	r3, pc, #36	; (adr r3, 8007c80 <_strtod_l+0xaf8>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 ff19 	bl	8000a94 <__aeabi_dcmplt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f47f acd8 	bne.w	8007618 <_strtod_l+0x490>
 8007c68:	a307      	add	r3, pc, #28	; (adr r3, 8007c88 <_strtod_l+0xb00>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c72:	f7f8 ff2d 	bl	8000ad0 <__aeabi_dcmpgt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d08c      	beq.n	8007b94 <_strtod_l+0xa0c>
 8007c7a:	e4cd      	b.n	8007618 <_strtod_l+0x490>
 8007c7c:	f3af 8000 	nop.w
 8007c80:	94a03595 	.word	0x94a03595
 8007c84:	3fdfffff 	.word	0x3fdfffff
 8007c88:	35afe535 	.word	0x35afe535
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	000fffff 	.word	0x000fffff
 8007c94:	7ff00000 	.word	0x7ff00000
 8007c98:	7fefffff 	.word	0x7fefffff
 8007c9c:	3ff00000 	.word	0x3ff00000
 8007ca0:	3fe00000 	.word	0x3fe00000
 8007ca4:	7fe00000 	.word	0x7fe00000
 8007ca8:	7c9fffff 	.word	0x7c9fffff
 8007cac:	bff00000 	.word	0xbff00000
 8007cb0:	9b05      	ldr	r3, [sp, #20]
 8007cb2:	b333      	cbz	r3, 8007d02 <_strtod_l+0xb7a>
 8007cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cba:	d822      	bhi.n	8007d02 <_strtod_l+0xb7a>
 8007cbc:	a328      	add	r3, pc, #160	; (adr r3, 8007d60 <_strtod_l+0xbd8>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 feef 	bl	8000aa8 <__aeabi_dcmple>
 8007cca:	b1a0      	cbz	r0, 8007cf6 <_strtod_l+0xb6e>
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7f8 ff46 	bl	8000b60 <__aeabi_d2uiz>
 8007cd4:	2801      	cmp	r0, #1
 8007cd6:	bf38      	it	cc
 8007cd8:	2001      	movcc	r0, #1
 8007cda:	f7f8 fbef 	bl	80004bc <__aeabi_ui2d>
 8007cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	460f      	mov	r7, r1
 8007ce4:	bb03      	cbnz	r3, 8007d28 <_strtod_l+0xba0>
 8007ce6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cea:	9014      	str	r0, [sp, #80]	; 0x50
 8007cec:	9315      	str	r3, [sp, #84]	; 0x54
 8007cee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007cf2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cfa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	9311      	str	r3, [sp, #68]	; 0x44
 8007d02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d06:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007d0a:	f7ff f8e9 	bl	8006ee0 <__ulp>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fc4b 	bl	80005b0 <__aeabi_dmul>
 8007d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d1e:	f7f8 fa91 	bl	8000244 <__adddf3>
 8007d22:	4680      	mov	r8, r0
 8007d24:	4689      	mov	r9, r1
 8007d26:	e774      	b.n	8007c12 <_strtod_l+0xa8a>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d30:	e7dd      	b.n	8007cee <_strtod_l+0xb66>
 8007d32:	a30d      	add	r3, pc, #52	; (adr r3, 8007d68 <_strtod_l+0xbe0>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f7f8 feac 	bl	8000a94 <__aeabi_dcmplt>
 8007d3c:	e79b      	b.n	8007c76 <_strtod_l+0xaee>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	930e      	str	r3, [sp, #56]	; 0x38
 8007d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	f7ff ba5b 	b.w	8007202 <_strtod_l+0x7a>
 8007d4c:	2a65      	cmp	r2, #101	; 0x65
 8007d4e:	f43f ab52 	beq.w	80073f6 <_strtod_l+0x26e>
 8007d52:	2a45      	cmp	r2, #69	; 0x45
 8007d54:	f43f ab4f 	beq.w	80073f6 <_strtod_l+0x26e>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f7ff bb87 	b.w	800746c <_strtod_l+0x2e4>
 8007d5e:	bf00      	nop
 8007d60:	ffc00000 	.word	0xffc00000
 8007d64:	41dfffff 	.word	0x41dfffff
 8007d68:	94a03595 	.word	0x94a03595
 8007d6c:	3fcfffff 	.word	0x3fcfffff

08007d70 <_strtod_r>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <_strtod_r+0x8>)
 8007d72:	f7ff ba09 	b.w	8007188 <_strtod_l>
 8007d76:	bf00      	nop
 8007d78:	2000006c 	.word	0x2000006c

08007d7c <_strtol_l.constprop.0>:
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d82:	4686      	mov	lr, r0
 8007d84:	4690      	mov	r8, r2
 8007d86:	d001      	beq.n	8007d8c <_strtol_l.constprop.0+0x10>
 8007d88:	2b24      	cmp	r3, #36	; 0x24
 8007d8a:	d906      	bls.n	8007d9a <_strtol_l.constprop.0+0x1e>
 8007d8c:	f7fd fd92 	bl	80058b4 <__errno>
 8007d90:	2316      	movs	r3, #22
 8007d92:	6003      	str	r3, [r0, #0]
 8007d94:	2000      	movs	r0, #0
 8007d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	4835      	ldr	r0, [pc, #212]	; (8007e74 <_strtol_l.constprop.0+0xf8>)
 8007d9e:	462a      	mov	r2, r5
 8007da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da4:	5d06      	ldrb	r6, [r0, r4]
 8007da6:	f016 0608 	ands.w	r6, r6, #8
 8007daa:	d1f8      	bne.n	8007d9e <_strtol_l.constprop.0+0x22>
 8007dac:	2c2d      	cmp	r4, #45	; 0x2d
 8007dae:	d12e      	bne.n	8007e0e <_strtol_l.constprop.0+0x92>
 8007db0:	2601      	movs	r6, #1
 8007db2:	782c      	ldrb	r4, [r5, #0]
 8007db4:	1c95      	adds	r5, r2, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d057      	beq.n	8007e6a <_strtol_l.constprop.0+0xee>
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d109      	bne.n	8007dd2 <_strtol_l.constprop.0+0x56>
 8007dbe:	2c30      	cmp	r4, #48	; 0x30
 8007dc0:	d107      	bne.n	8007dd2 <_strtol_l.constprop.0+0x56>
 8007dc2:	782a      	ldrb	r2, [r5, #0]
 8007dc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007dc8:	2a58      	cmp	r2, #88	; 0x58
 8007dca:	d149      	bne.n	8007e60 <_strtol_l.constprop.0+0xe4>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	786c      	ldrb	r4, [r5, #1]
 8007dd0:	3502      	adds	r5, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007dd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ddc:	fbbc f9f3 	udiv	r9, ip, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	fb03 ca19 	mls	sl, r3, r9, ip
 8007de6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007dea:	2f09      	cmp	r7, #9
 8007dec:	d814      	bhi.n	8007e18 <_strtol_l.constprop.0+0x9c>
 8007dee:	463c      	mov	r4, r7
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	dd20      	ble.n	8007e36 <_strtol_l.constprop.0+0xba>
 8007df4:	1c57      	adds	r7, r2, #1
 8007df6:	d007      	beq.n	8007e08 <_strtol_l.constprop.0+0x8c>
 8007df8:	4581      	cmp	r9, r0
 8007dfa:	d319      	bcc.n	8007e30 <_strtol_l.constprop.0+0xb4>
 8007dfc:	d101      	bne.n	8007e02 <_strtol_l.constprop.0+0x86>
 8007dfe:	45a2      	cmp	sl, r4
 8007e00:	db16      	blt.n	8007e30 <_strtol_l.constprop.0+0xb4>
 8007e02:	2201      	movs	r2, #1
 8007e04:	fb00 4003 	mla	r0, r0, r3, r4
 8007e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e0c:	e7eb      	b.n	8007de6 <_strtol_l.constprop.0+0x6a>
 8007e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e10:	bf04      	itt	eq
 8007e12:	782c      	ldrbeq	r4, [r5, #0]
 8007e14:	1c95      	addeq	r5, r2, #2
 8007e16:	e7ce      	b.n	8007db6 <_strtol_l.constprop.0+0x3a>
 8007e18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007e1c:	2f19      	cmp	r7, #25
 8007e1e:	d801      	bhi.n	8007e24 <_strtol_l.constprop.0+0xa8>
 8007e20:	3c37      	subs	r4, #55	; 0x37
 8007e22:	e7e5      	b.n	8007df0 <_strtol_l.constprop.0+0x74>
 8007e24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007e28:	2f19      	cmp	r7, #25
 8007e2a:	d804      	bhi.n	8007e36 <_strtol_l.constprop.0+0xba>
 8007e2c:	3c57      	subs	r4, #87	; 0x57
 8007e2e:	e7df      	b.n	8007df0 <_strtol_l.constprop.0+0x74>
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	e7e8      	b.n	8007e08 <_strtol_l.constprop.0+0x8c>
 8007e36:	1c53      	adds	r3, r2, #1
 8007e38:	d108      	bne.n	8007e4c <_strtol_l.constprop.0+0xd0>
 8007e3a:	2322      	movs	r3, #34	; 0x22
 8007e3c:	4660      	mov	r0, ip
 8007e3e:	f8ce 3000 	str.w	r3, [lr]
 8007e42:	f1b8 0f00 	cmp.w	r8, #0
 8007e46:	d0a6      	beq.n	8007d96 <_strtol_l.constprop.0+0x1a>
 8007e48:	1e69      	subs	r1, r5, #1
 8007e4a:	e006      	b.n	8007e5a <_strtol_l.constprop.0+0xde>
 8007e4c:	b106      	cbz	r6, 8007e50 <_strtol_l.constprop.0+0xd4>
 8007e4e:	4240      	negs	r0, r0
 8007e50:	f1b8 0f00 	cmp.w	r8, #0
 8007e54:	d09f      	beq.n	8007d96 <_strtol_l.constprop.0+0x1a>
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	d1f6      	bne.n	8007e48 <_strtol_l.constprop.0+0xcc>
 8007e5a:	f8c8 1000 	str.w	r1, [r8]
 8007e5e:	e79a      	b.n	8007d96 <_strtol_l.constprop.0+0x1a>
 8007e60:	2430      	movs	r4, #48	; 0x30
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1b5      	bne.n	8007dd2 <_strtol_l.constprop.0+0x56>
 8007e66:	2308      	movs	r3, #8
 8007e68:	e7b3      	b.n	8007dd2 <_strtol_l.constprop.0+0x56>
 8007e6a:	2c30      	cmp	r4, #48	; 0x30
 8007e6c:	d0a9      	beq.n	8007dc2 <_strtol_l.constprop.0+0x46>
 8007e6e:	230a      	movs	r3, #10
 8007e70:	e7af      	b.n	8007dd2 <_strtol_l.constprop.0+0x56>
 8007e72:	bf00      	nop
 8007e74:	080091f1 	.word	0x080091f1

08007e78 <_strtol_r>:
 8007e78:	f7ff bf80 	b.w	8007d7c <_strtol_l.constprop.0>

08007e7c <__ssputs_r>:
 8007e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	461f      	mov	r7, r3
 8007e82:	688e      	ldr	r6, [r1, #8]
 8007e84:	4682      	mov	sl, r0
 8007e86:	42be      	cmp	r6, r7
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4690      	mov	r8, r2
 8007e8c:	680b      	ldr	r3, [r1, #0]
 8007e8e:	d82c      	bhi.n	8007eea <__ssputs_r+0x6e>
 8007e90:	898a      	ldrh	r2, [r1, #12]
 8007e92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e96:	d026      	beq.n	8007ee6 <__ssputs_r+0x6a>
 8007e98:	6965      	ldr	r5, [r4, #20]
 8007e9a:	6909      	ldr	r1, [r1, #16]
 8007e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ea0:	eba3 0901 	sub.w	r9, r3, r1
 8007ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ea8:	1c7b      	adds	r3, r7, #1
 8007eaa:	444b      	add	r3, r9
 8007eac:	106d      	asrs	r5, r5, #1
 8007eae:	429d      	cmp	r5, r3
 8007eb0:	bf38      	it	cc
 8007eb2:	461d      	movcc	r5, r3
 8007eb4:	0553      	lsls	r3, r2, #21
 8007eb6:	d527      	bpl.n	8007f08 <__ssputs_r+0x8c>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	f7fe fc19 	bl	80066f0 <_malloc_r>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	b360      	cbz	r0, 8007f1c <__ssputs_r+0xa0>
 8007ec2:	464a      	mov	r2, r9
 8007ec4:	6921      	ldr	r1, [r4, #16]
 8007ec6:	f000 fa9b 	bl	8008400 <memcpy>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	6126      	str	r6, [r4, #16]
 8007ed8:	444e      	add	r6, r9
 8007eda:	6026      	str	r6, [r4, #0]
 8007edc:	463e      	mov	r6, r7
 8007ede:	6165      	str	r5, [r4, #20]
 8007ee0:	eba5 0509 	sub.w	r5, r5, r9
 8007ee4:	60a5      	str	r5, [r4, #8]
 8007ee6:	42be      	cmp	r6, r7
 8007ee8:	d900      	bls.n	8007eec <__ssputs_r+0x70>
 8007eea:	463e      	mov	r6, r7
 8007eec:	4632      	mov	r2, r6
 8007eee:	4641      	mov	r1, r8
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	f000 fa26 	bl	8008342 <memmove>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	1b9b      	subs	r3, r3, r6
 8007efc:	60a3      	str	r3, [r4, #8]
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	4433      	add	r3, r6
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f08:	462a      	mov	r2, r5
 8007f0a:	f000 fe2a 	bl	8008b62 <_realloc_r>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1e0      	bne.n	8007ed6 <__ssputs_r+0x5a>
 8007f14:	4650      	mov	r0, sl
 8007f16:	6921      	ldr	r1, [r4, #16]
 8007f18:	f7fe fb7a 	bl	8006610 <_free_r>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	f8ca 3000 	str.w	r3, [sl]
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	e7e9      	b.n	8007f04 <__ssputs_r+0x88>

08007f30 <_svfiprintf_r>:
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	4698      	mov	r8, r3
 8007f36:	898b      	ldrh	r3, [r1, #12]
 8007f38:	4607      	mov	r7, r0
 8007f3a:	061b      	lsls	r3, r3, #24
 8007f3c:	460d      	mov	r5, r1
 8007f3e:	4614      	mov	r4, r2
 8007f40:	b09d      	sub	sp, #116	; 0x74
 8007f42:	d50e      	bpl.n	8007f62 <_svfiprintf_r+0x32>
 8007f44:	690b      	ldr	r3, [r1, #16]
 8007f46:	b963      	cbnz	r3, 8007f62 <_svfiprintf_r+0x32>
 8007f48:	2140      	movs	r1, #64	; 0x40
 8007f4a:	f7fe fbd1 	bl	80066f0 <_malloc_r>
 8007f4e:	6028      	str	r0, [r5, #0]
 8007f50:	6128      	str	r0, [r5, #16]
 8007f52:	b920      	cbnz	r0, 8007f5e <_svfiprintf_r+0x2e>
 8007f54:	230c      	movs	r3, #12
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e0d0      	b.n	8008100 <_svfiprintf_r+0x1d0>
 8007f5e:	2340      	movs	r3, #64	; 0x40
 8007f60:	616b      	str	r3, [r5, #20]
 8007f62:	2300      	movs	r3, #0
 8007f64:	9309      	str	r3, [sp, #36]	; 0x24
 8007f66:	2320      	movs	r3, #32
 8007f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6c:	2330      	movs	r3, #48	; 0x30
 8007f6e:	f04f 0901 	mov.w	r9, #1
 8007f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008118 <_svfiprintf_r+0x1e8>
 8007f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f7e:	4623      	mov	r3, r4
 8007f80:	469a      	mov	sl, r3
 8007f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f86:	b10a      	cbz	r2, 8007f8c <_svfiprintf_r+0x5c>
 8007f88:	2a25      	cmp	r2, #37	; 0x25
 8007f8a:	d1f9      	bne.n	8007f80 <_svfiprintf_r+0x50>
 8007f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f90:	d00b      	beq.n	8007faa <_svfiprintf_r+0x7a>
 8007f92:	465b      	mov	r3, fp
 8007f94:	4622      	mov	r2, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff ff6f 	bl	8007e7c <__ssputs_r>
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f000 80a9 	beq.w	80080f6 <_svfiprintf_r+0x1c6>
 8007fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa6:	445a      	add	r2, fp
 8007fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8007faa:	f89a 3000 	ldrb.w	r3, [sl]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80a1 	beq.w	80080f6 <_svfiprintf_r+0x1c6>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fbe:	f10a 0a01 	add.w	sl, sl, #1
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	9307      	str	r3, [sp, #28]
 8007fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fca:	931a      	str	r3, [sp, #104]	; 0x68
 8007fcc:	4654      	mov	r4, sl
 8007fce:	2205      	movs	r2, #5
 8007fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd4:	4850      	ldr	r0, [pc, #320]	; (8008118 <_svfiprintf_r+0x1e8>)
 8007fd6:	f7fd fc9a 	bl	800590e <memchr>
 8007fda:	9a04      	ldr	r2, [sp, #16]
 8007fdc:	b9d8      	cbnz	r0, 8008016 <_svfiprintf_r+0xe6>
 8007fde:	06d0      	lsls	r0, r2, #27
 8007fe0:	bf44      	itt	mi
 8007fe2:	2320      	movmi	r3, #32
 8007fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe8:	0711      	lsls	r1, r2, #28
 8007fea:	bf44      	itt	mi
 8007fec:	232b      	movmi	r3, #43	; 0x2b
 8007fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff8:	d015      	beq.n	8008026 <_svfiprintf_r+0xf6>
 8007ffa:	4654      	mov	r4, sl
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f04f 0c0a 	mov.w	ip, #10
 8008002:	9a07      	ldr	r2, [sp, #28]
 8008004:	4621      	mov	r1, r4
 8008006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800800a:	3b30      	subs	r3, #48	; 0x30
 800800c:	2b09      	cmp	r3, #9
 800800e:	d94d      	bls.n	80080ac <_svfiprintf_r+0x17c>
 8008010:	b1b0      	cbz	r0, 8008040 <_svfiprintf_r+0x110>
 8008012:	9207      	str	r2, [sp, #28]
 8008014:	e014      	b.n	8008040 <_svfiprintf_r+0x110>
 8008016:	eba0 0308 	sub.w	r3, r0, r8
 800801a:	fa09 f303 	lsl.w	r3, r9, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	46a2      	mov	sl, r4
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	e7d2      	b.n	8007fcc <_svfiprintf_r+0x9c>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	1d19      	adds	r1, r3, #4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	9103      	str	r1, [sp, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfbb      	ittet	lt
 8008032:	425b      	neglt	r3, r3
 8008034:	f042 0202 	orrlt.w	r2, r2, #2
 8008038:	9307      	strge	r3, [sp, #28]
 800803a:	9307      	strlt	r3, [sp, #28]
 800803c:	bfb8      	it	lt
 800803e:	9204      	strlt	r2, [sp, #16]
 8008040:	7823      	ldrb	r3, [r4, #0]
 8008042:	2b2e      	cmp	r3, #46	; 0x2e
 8008044:	d10c      	bne.n	8008060 <_svfiprintf_r+0x130>
 8008046:	7863      	ldrb	r3, [r4, #1]
 8008048:	2b2a      	cmp	r3, #42	; 0x2a
 800804a:	d134      	bne.n	80080b6 <_svfiprintf_r+0x186>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	3402      	adds	r4, #2
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9203      	str	r2, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	f04f 33ff 	movlt.w	r3, #4294967295
 800805e:	9305      	str	r3, [sp, #20]
 8008060:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800811c <_svfiprintf_r+0x1ec>
 8008064:	2203      	movs	r2, #3
 8008066:	4650      	mov	r0, sl
 8008068:	7821      	ldrb	r1, [r4, #0]
 800806a:	f7fd fc50 	bl	800590e <memchr>
 800806e:	b138      	cbz	r0, 8008080 <_svfiprintf_r+0x150>
 8008070:	2240      	movs	r2, #64	; 0x40
 8008072:	9b04      	ldr	r3, [sp, #16]
 8008074:	eba0 000a 	sub.w	r0, r0, sl
 8008078:	4082      	lsls	r2, r0
 800807a:	4313      	orrs	r3, r2
 800807c:	3401      	adds	r4, #1
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008084:	2206      	movs	r2, #6
 8008086:	4826      	ldr	r0, [pc, #152]	; (8008120 <_svfiprintf_r+0x1f0>)
 8008088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808c:	f7fd fc3f 	bl	800590e <memchr>
 8008090:	2800      	cmp	r0, #0
 8008092:	d038      	beq.n	8008106 <_svfiprintf_r+0x1d6>
 8008094:	4b23      	ldr	r3, [pc, #140]	; (8008124 <_svfiprintf_r+0x1f4>)
 8008096:	bb1b      	cbnz	r3, 80080e0 <_svfiprintf_r+0x1b0>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	3307      	adds	r3, #7
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	3308      	adds	r3, #8
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	4433      	add	r3, r6
 80080a8:	9309      	str	r3, [sp, #36]	; 0x24
 80080aa:	e768      	b.n	8007f7e <_svfiprintf_r+0x4e>
 80080ac:	460c      	mov	r4, r1
 80080ae:	2001      	movs	r0, #1
 80080b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b4:	e7a6      	b.n	8008004 <_svfiprintf_r+0xd4>
 80080b6:	2300      	movs	r3, #0
 80080b8:	f04f 0c0a 	mov.w	ip, #10
 80080bc:	4619      	mov	r1, r3
 80080be:	3401      	adds	r4, #1
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	4620      	mov	r0, r4
 80080c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c8:	3a30      	subs	r2, #48	; 0x30
 80080ca:	2a09      	cmp	r2, #9
 80080cc:	d903      	bls.n	80080d6 <_svfiprintf_r+0x1a6>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0c6      	beq.n	8008060 <_svfiprintf_r+0x130>
 80080d2:	9105      	str	r1, [sp, #20]
 80080d4:	e7c4      	b.n	8008060 <_svfiprintf_r+0x130>
 80080d6:	4604      	mov	r4, r0
 80080d8:	2301      	movs	r3, #1
 80080da:	fb0c 2101 	mla	r1, ip, r1, r2
 80080de:	e7f0      	b.n	80080c2 <_svfiprintf_r+0x192>
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4638      	mov	r0, r7
 80080e8:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <_svfiprintf_r+0x1f8>)
 80080ea:	a904      	add	r1, sp, #16
 80080ec:	f7fc fbaa 	bl	8004844 <_printf_float>
 80080f0:	1c42      	adds	r2, r0, #1
 80080f2:	4606      	mov	r6, r0
 80080f4:	d1d6      	bne.n	80080a4 <_svfiprintf_r+0x174>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	065b      	lsls	r3, r3, #25
 80080fa:	f53f af2d 	bmi.w	8007f58 <_svfiprintf_r+0x28>
 80080fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008100:	b01d      	add	sp, #116	; 0x74
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	ab03      	add	r3, sp, #12
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	462a      	mov	r2, r5
 800810c:	4638      	mov	r0, r7
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <_svfiprintf_r+0x1f8>)
 8008110:	a904      	add	r1, sp, #16
 8008112:	f7fc fe37 	bl	8004d84 <_printf_i>
 8008116:	e7eb      	b.n	80080f0 <_svfiprintf_r+0x1c0>
 8008118:	080092f1 	.word	0x080092f1
 800811c:	080092f7 	.word	0x080092f7
 8008120:	080092fb 	.word	0x080092fb
 8008124:	08004845 	.word	0x08004845
 8008128:	08007e7d 	.word	0x08007e7d

0800812c <__sflush_r>:
 800812c:	898a      	ldrh	r2, [r1, #12]
 800812e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008130:	4605      	mov	r5, r0
 8008132:	0710      	lsls	r0, r2, #28
 8008134:	460c      	mov	r4, r1
 8008136:	d457      	bmi.n	80081e8 <__sflush_r+0xbc>
 8008138:	684b      	ldr	r3, [r1, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc04      	bgt.n	8008148 <__sflush_r+0x1c>
 800813e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc01      	bgt.n	8008148 <__sflush_r+0x1c>
 8008144:	2000      	movs	r0, #0
 8008146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814a:	2e00      	cmp	r6, #0
 800814c:	d0fa      	beq.n	8008144 <__sflush_r+0x18>
 800814e:	2300      	movs	r3, #0
 8008150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008154:	682f      	ldr	r7, [r5, #0]
 8008156:	6a21      	ldr	r1, [r4, #32]
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	d032      	beq.n	80081c2 <__sflush_r+0x96>
 800815c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	075a      	lsls	r2, r3, #29
 8008162:	d505      	bpl.n	8008170 <__sflush_r+0x44>
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	1ac0      	subs	r0, r0, r3
 8008168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800816a:	b10b      	cbz	r3, 8008170 <__sflush_r+0x44>
 800816c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816e:	1ac0      	subs	r0, r0, r3
 8008170:	2300      	movs	r3, #0
 8008172:	4602      	mov	r2, r0
 8008174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008176:	4628      	mov	r0, r5
 8008178:	6a21      	ldr	r1, [r4, #32]
 800817a:	47b0      	blx	r6
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	d106      	bne.n	8008190 <__sflush_r+0x64>
 8008182:	6829      	ldr	r1, [r5, #0]
 8008184:	291d      	cmp	r1, #29
 8008186:	d82b      	bhi.n	80081e0 <__sflush_r+0xb4>
 8008188:	4a28      	ldr	r2, [pc, #160]	; (800822c <__sflush_r+0x100>)
 800818a:	410a      	asrs	r2, r1
 800818c:	07d6      	lsls	r6, r2, #31
 800818e:	d427      	bmi.n	80081e0 <__sflush_r+0xb4>
 8008190:	2200      	movs	r2, #0
 8008192:	6062      	str	r2, [r4, #4]
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	04d9      	lsls	r1, r3, #19
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	d504      	bpl.n	80081a6 <__sflush_r+0x7a>
 800819c:	1c42      	adds	r2, r0, #1
 800819e:	d101      	bne.n	80081a4 <__sflush_r+0x78>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b903      	cbnz	r3, 80081a6 <__sflush_r+0x7a>
 80081a4:	6560      	str	r0, [r4, #84]	; 0x54
 80081a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a8:	602f      	str	r7, [r5, #0]
 80081aa:	2900      	cmp	r1, #0
 80081ac:	d0ca      	beq.n	8008144 <__sflush_r+0x18>
 80081ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b2:	4299      	cmp	r1, r3
 80081b4:	d002      	beq.n	80081bc <__sflush_r+0x90>
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7fe fa2a 	bl	8006610 <_free_r>
 80081bc:	2000      	movs	r0, #0
 80081be:	6360      	str	r0, [r4, #52]	; 0x34
 80081c0:	e7c1      	b.n	8008146 <__sflush_r+0x1a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b0      	blx	r6
 80081c8:	1c41      	adds	r1, r0, #1
 80081ca:	d1c8      	bne.n	800815e <__sflush_r+0x32>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c5      	beq.n	800815e <__sflush_r+0x32>
 80081d2:	2b1d      	cmp	r3, #29
 80081d4:	d001      	beq.n	80081da <__sflush_r+0xae>
 80081d6:	2b16      	cmp	r3, #22
 80081d8:	d101      	bne.n	80081de <__sflush_r+0xb2>
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	e7b2      	b.n	8008144 <__sflush_r+0x18>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e7ae      	b.n	8008146 <__sflush_r+0x1a>
 80081e8:	690f      	ldr	r7, [r1, #16]
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d0aa      	beq.n	8008144 <__sflush_r+0x18>
 80081ee:	0793      	lsls	r3, r2, #30
 80081f0:	bf18      	it	ne
 80081f2:	2300      	movne	r3, #0
 80081f4:	680e      	ldr	r6, [r1, #0]
 80081f6:	bf08      	it	eq
 80081f8:	694b      	ldreq	r3, [r1, #20]
 80081fa:	1bf6      	subs	r6, r6, r7
 80081fc:	600f      	str	r7, [r1, #0]
 80081fe:	608b      	str	r3, [r1, #8]
 8008200:	2e00      	cmp	r6, #0
 8008202:	dd9f      	ble.n	8008144 <__sflush_r+0x18>
 8008204:	4633      	mov	r3, r6
 8008206:	463a      	mov	r2, r7
 8008208:	4628      	mov	r0, r5
 800820a:	6a21      	ldr	r1, [r4, #32]
 800820c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008210:	47e0      	blx	ip
 8008212:	2800      	cmp	r0, #0
 8008214:	dc06      	bgt.n	8008224 <__sflush_r+0xf8>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	e790      	b.n	8008146 <__sflush_r+0x1a>
 8008224:	4407      	add	r7, r0
 8008226:	1a36      	subs	r6, r6, r0
 8008228:	e7ea      	b.n	8008200 <__sflush_r+0xd4>
 800822a:	bf00      	nop
 800822c:	dfbffffe 	.word	0xdfbffffe

08008230 <_fflush_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b913      	cbnz	r3, 8008240 <_fflush_r+0x10>
 800823a:	2500      	movs	r5, #0
 800823c:	4628      	mov	r0, r5
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	b118      	cbz	r0, 800824a <_fflush_r+0x1a>
 8008242:	6a03      	ldr	r3, [r0, #32]
 8008244:	b90b      	cbnz	r3, 800824a <_fflush_r+0x1a>
 8008246:	f7fd f959 	bl	80054fc <__sinit>
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f3      	beq.n	800823a <_fflush_r+0xa>
 8008252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d404      	bmi.n	8008262 <_fflush_r+0x32>
 8008258:	0599      	lsls	r1, r3, #22
 800825a:	d402      	bmi.n	8008262 <_fflush_r+0x32>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f7fd fb54 	bl	800590a <__retarget_lock_acquire_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	4621      	mov	r1, r4
 8008266:	f7ff ff61 	bl	800812c <__sflush_r>
 800826a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826c:	4605      	mov	r5, r0
 800826e:	07da      	lsls	r2, r3, #31
 8008270:	d4e4      	bmi.n	800823c <_fflush_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d4e1      	bmi.n	800823c <_fflush_r+0xc>
 8008278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827a:	f7fd fb47 	bl	800590c <__retarget_lock_release_recursive>
 800827e:	e7dd      	b.n	800823c <_fflush_r+0xc>

08008280 <__swhatbuf_r>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	460c      	mov	r4, r1
 8008284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008288:	4615      	mov	r5, r2
 800828a:	2900      	cmp	r1, #0
 800828c:	461e      	mov	r6, r3
 800828e:	b096      	sub	sp, #88	; 0x58
 8008290:	da0c      	bge.n	80082ac <__swhatbuf_r+0x2c>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	2100      	movs	r1, #0
 8008296:	f013 0f80 	tst.w	r3, #128	; 0x80
 800829a:	bf0c      	ite	eq
 800829c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082a0:	2340      	movne	r3, #64	; 0x40
 80082a2:	2000      	movs	r0, #0
 80082a4:	6031      	str	r1, [r6, #0]
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	b016      	add	sp, #88	; 0x58
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	466a      	mov	r2, sp
 80082ae:	f000 f875 	bl	800839c <_fstat_r>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dbed      	blt.n	8008292 <__swhatbuf_r+0x12>
 80082b6:	9901      	ldr	r1, [sp, #4]
 80082b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80082bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80082c0:	4259      	negs	r1, r3
 80082c2:	4159      	adcs	r1, r3
 80082c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c8:	e7eb      	b.n	80082a2 <__swhatbuf_r+0x22>

080082ca <__smakebuf_r>:
 80082ca:	898b      	ldrh	r3, [r1, #12]
 80082cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082ce:	079d      	lsls	r5, r3, #30
 80082d0:	4606      	mov	r6, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	d507      	bpl.n	80082e6 <__smakebuf_r+0x1c>
 80082d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	2301      	movs	r3, #1
 80082e0:	6163      	str	r3, [r4, #20]
 80082e2:	b002      	add	sp, #8
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	466a      	mov	r2, sp
 80082e8:	ab01      	add	r3, sp, #4
 80082ea:	f7ff ffc9 	bl	8008280 <__swhatbuf_r>
 80082ee:	9900      	ldr	r1, [sp, #0]
 80082f0:	4605      	mov	r5, r0
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7fe f9fc 	bl	80066f0 <_malloc_r>
 80082f8:	b948      	cbnz	r0, 800830e <__smakebuf_r+0x44>
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	059a      	lsls	r2, r3, #22
 8008300:	d4ef      	bmi.n	80082e2 <__smakebuf_r+0x18>
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	f043 0302 	orr.w	r3, r3, #2
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	e7e3      	b.n	80082d6 <__smakebuf_r+0xc>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	6020      	str	r0, [r4, #0]
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	6120      	str	r0, [r4, #16]
 800831c:	6163      	str	r3, [r4, #20]
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	b15b      	cbz	r3, 800833a <__smakebuf_r+0x70>
 8008322:	4630      	mov	r0, r6
 8008324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008328:	f000 f84a 	bl	80083c0 <_isatty_r>
 800832c:	b128      	cbz	r0, 800833a <__smakebuf_r+0x70>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	431d      	orrs	r5, r3
 800833e:	81a5      	strh	r5, [r4, #12]
 8008340:	e7cf      	b.n	80082e2 <__smakebuf_r+0x18>

08008342 <memmove>:
 8008342:	4288      	cmp	r0, r1
 8008344:	b510      	push	{r4, lr}
 8008346:	eb01 0402 	add.w	r4, r1, r2
 800834a:	d902      	bls.n	8008352 <memmove+0x10>
 800834c:	4284      	cmp	r4, r0
 800834e:	4623      	mov	r3, r4
 8008350:	d807      	bhi.n	8008362 <memmove+0x20>
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	42a1      	cmp	r1, r4
 8008356:	d008      	beq.n	800836a <memmove+0x28>
 8008358:	f811 2b01 	ldrb.w	r2, [r1], #1
 800835c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008360:	e7f8      	b.n	8008354 <memmove+0x12>
 8008362:	4601      	mov	r1, r0
 8008364:	4402      	add	r2, r0
 8008366:	428a      	cmp	r2, r1
 8008368:	d100      	bne.n	800836c <memmove+0x2a>
 800836a:	bd10      	pop	{r4, pc}
 800836c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008370:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008374:	e7f7      	b.n	8008366 <memmove+0x24>

08008376 <strncmp>:
 8008376:	b510      	push	{r4, lr}
 8008378:	b16a      	cbz	r2, 8008396 <strncmp+0x20>
 800837a:	3901      	subs	r1, #1
 800837c:	1884      	adds	r4, r0, r2
 800837e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008382:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008386:	429a      	cmp	r2, r3
 8008388:	d103      	bne.n	8008392 <strncmp+0x1c>
 800838a:	42a0      	cmp	r0, r4
 800838c:	d001      	beq.n	8008392 <strncmp+0x1c>
 800838e:	2a00      	cmp	r2, #0
 8008390:	d1f5      	bne.n	800837e <strncmp+0x8>
 8008392:	1ad0      	subs	r0, r2, r3
 8008394:	bd10      	pop	{r4, pc}
 8008396:	4610      	mov	r0, r2
 8008398:	e7fc      	b.n	8008394 <strncmp+0x1e>
	...

0800839c <_fstat_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	2300      	movs	r3, #0
 80083a0:	4d06      	ldr	r5, [pc, #24]	; (80083bc <_fstat_r+0x20>)
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	f7f9 fafa 	bl	80019a2 <_fstat>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d102      	bne.n	80083b8 <_fstat_r+0x1c>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b103      	cbz	r3, 80083b8 <_fstat_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
 80083ba:	bf00      	nop
 80083bc:	20000440 	.word	0x20000440

080083c0 <_isatty_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	2300      	movs	r3, #0
 80083c4:	4d05      	ldr	r5, [pc, #20]	; (80083dc <_isatty_r+0x1c>)
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f9 faf8 	bl	80019c0 <_isatty>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_isatty_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_isatty_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000440 	.word	0x20000440

080083e0 <_sbrk_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	2300      	movs	r3, #0
 80083e4:	4d05      	ldr	r5, [pc, #20]	; (80083fc <_sbrk_r+0x1c>)
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7f9 fafe 	bl	80019ec <_sbrk>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_sbrk_r+0x1a>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_sbrk_r+0x1a>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20000440 	.word	0x20000440

08008400 <memcpy>:
 8008400:	440a      	add	r2, r1
 8008402:	4291      	cmp	r1, r2
 8008404:	f100 33ff 	add.w	r3, r0, #4294967295
 8008408:	d100      	bne.n	800840c <memcpy+0xc>
 800840a:	4770      	bx	lr
 800840c:	b510      	push	{r4, lr}
 800840e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008412:	4291      	cmp	r1, r2
 8008414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008418:	d1f9      	bne.n	800840e <memcpy+0xe>
 800841a:	bd10      	pop	{r4, pc}

0800841c <nan>:
 800841c:	2000      	movs	r0, #0
 800841e:	4901      	ldr	r1, [pc, #4]	; (8008424 <nan+0x8>)
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	7ff80000 	.word	0x7ff80000

08008428 <__assert_func>:
 8008428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800842a:	4614      	mov	r4, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <__assert_func+0x2c>)
 8008430:	4605      	mov	r5, r0
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68d8      	ldr	r0, [r3, #12]
 8008436:	b14c      	cbz	r4, 800844c <__assert_func+0x24>
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <__assert_func+0x30>)
 800843a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800843e:	9100      	str	r1, [sp, #0]
 8008440:	462b      	mov	r3, r5
 8008442:	4906      	ldr	r1, [pc, #24]	; (800845c <__assert_func+0x34>)
 8008444:	f000 fbca 	bl	8008bdc <fiprintf>
 8008448:	f000 fbda 	bl	8008c00 <abort>
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <__assert_func+0x38>)
 800844e:	461c      	mov	r4, r3
 8008450:	e7f3      	b.n	800843a <__assert_func+0x12>
 8008452:	bf00      	nop
 8008454:	20000068 	.word	0x20000068
 8008458:	0800930a 	.word	0x0800930a
 800845c:	08009317 	.word	0x08009317
 8008460:	08009345 	.word	0x08009345

08008464 <_calloc_r>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	fba1 5402 	umull	r5, r4, r1, r2
 800846a:	b934      	cbnz	r4, 800847a <_calloc_r+0x16>
 800846c:	4629      	mov	r1, r5
 800846e:	f7fe f93f 	bl	80066f0 <_malloc_r>
 8008472:	4606      	mov	r6, r0
 8008474:	b928      	cbnz	r0, 8008482 <_calloc_r+0x1e>
 8008476:	4630      	mov	r0, r6
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	220c      	movs	r2, #12
 800847c:	2600      	movs	r6, #0
 800847e:	6002      	str	r2, [r0, #0]
 8008480:	e7f9      	b.n	8008476 <_calloc_r+0x12>
 8008482:	462a      	mov	r2, r5
 8008484:	4621      	mov	r1, r4
 8008486:	f7fd f9c3 	bl	8005810 <memset>
 800848a:	e7f4      	b.n	8008476 <_calloc_r+0x12>

0800848c <rshift>:
 800848c:	6903      	ldr	r3, [r0, #16]
 800848e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008492:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008496:	f100 0414 	add.w	r4, r0, #20
 800849a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800849e:	dd46      	ble.n	800852e <rshift+0xa2>
 80084a0:	f011 011f 	ands.w	r1, r1, #31
 80084a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084ac:	d10c      	bne.n	80084c8 <rshift+0x3c>
 80084ae:	4629      	mov	r1, r5
 80084b0:	f100 0710 	add.w	r7, r0, #16
 80084b4:	42b1      	cmp	r1, r6
 80084b6:	d335      	bcc.n	8008524 <rshift+0x98>
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	1eea      	subs	r2, r5, #3
 80084be:	4296      	cmp	r6, r2
 80084c0:	bf38      	it	cc
 80084c2:	2300      	movcc	r3, #0
 80084c4:	4423      	add	r3, r4
 80084c6:	e015      	b.n	80084f4 <rshift+0x68>
 80084c8:	46a1      	mov	r9, r4
 80084ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084ce:	f1c1 0820 	rsb	r8, r1, #32
 80084d2:	40cf      	lsrs	r7, r1
 80084d4:	f105 0e04 	add.w	lr, r5, #4
 80084d8:	4576      	cmp	r6, lr
 80084da:	46f4      	mov	ip, lr
 80084dc:	d816      	bhi.n	800850c <rshift+0x80>
 80084de:	1a9a      	subs	r2, r3, r2
 80084e0:	0092      	lsls	r2, r2, #2
 80084e2:	3a04      	subs	r2, #4
 80084e4:	3501      	adds	r5, #1
 80084e6:	42ae      	cmp	r6, r5
 80084e8:	bf38      	it	cc
 80084ea:	2200      	movcc	r2, #0
 80084ec:	18a3      	adds	r3, r4, r2
 80084ee:	50a7      	str	r7, [r4, r2]
 80084f0:	b107      	cbz	r7, 80084f4 <rshift+0x68>
 80084f2:	3304      	adds	r3, #4
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	eba3 0204 	sub.w	r2, r3, r4
 80084fa:	bf08      	it	eq
 80084fc:	2300      	moveq	r3, #0
 80084fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008502:	6102      	str	r2, [r0, #16]
 8008504:	bf08      	it	eq
 8008506:	6143      	streq	r3, [r0, #20]
 8008508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800850c:	f8dc c000 	ldr.w	ip, [ip]
 8008510:	fa0c fc08 	lsl.w	ip, ip, r8
 8008514:	ea4c 0707 	orr.w	r7, ip, r7
 8008518:	f849 7b04 	str.w	r7, [r9], #4
 800851c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008520:	40cf      	lsrs	r7, r1
 8008522:	e7d9      	b.n	80084d8 <rshift+0x4c>
 8008524:	f851 cb04 	ldr.w	ip, [r1], #4
 8008528:	f847 cf04 	str.w	ip, [r7, #4]!
 800852c:	e7c2      	b.n	80084b4 <rshift+0x28>
 800852e:	4623      	mov	r3, r4
 8008530:	e7e0      	b.n	80084f4 <rshift+0x68>

08008532 <__hexdig_fun>:
 8008532:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008536:	2b09      	cmp	r3, #9
 8008538:	d802      	bhi.n	8008540 <__hexdig_fun+0xe>
 800853a:	3820      	subs	r0, #32
 800853c:	b2c0      	uxtb	r0, r0
 800853e:	4770      	bx	lr
 8008540:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008544:	2b05      	cmp	r3, #5
 8008546:	d801      	bhi.n	800854c <__hexdig_fun+0x1a>
 8008548:	3847      	subs	r0, #71	; 0x47
 800854a:	e7f7      	b.n	800853c <__hexdig_fun+0xa>
 800854c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008550:	2b05      	cmp	r3, #5
 8008552:	d801      	bhi.n	8008558 <__hexdig_fun+0x26>
 8008554:	3827      	subs	r0, #39	; 0x27
 8008556:	e7f1      	b.n	800853c <__hexdig_fun+0xa>
 8008558:	2000      	movs	r0, #0
 800855a:	4770      	bx	lr

0800855c <__gethex>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	4681      	mov	r9, r0
 8008562:	468a      	mov	sl, r1
 8008564:	4617      	mov	r7, r2
 8008566:	680a      	ldr	r2, [r1, #0]
 8008568:	b085      	sub	sp, #20
 800856a:	f102 0b02 	add.w	fp, r2, #2
 800856e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008572:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	32fe      	adds	r2, #254	; 0xfe
 800857a:	eb02 030b 	add.w	r3, r2, fp
 800857e:	46d8      	mov	r8, fp
 8008580:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	2830      	cmp	r0, #48	; 0x30
 8008588:	d0f7      	beq.n	800857a <__gethex+0x1e>
 800858a:	f7ff ffd2 	bl	8008532 <__hexdig_fun>
 800858e:	4604      	mov	r4, r0
 8008590:	2800      	cmp	r0, #0
 8008592:	d138      	bne.n	8008606 <__gethex+0xaa>
 8008594:	2201      	movs	r2, #1
 8008596:	4640      	mov	r0, r8
 8008598:	49a7      	ldr	r1, [pc, #668]	; (8008838 <__gethex+0x2dc>)
 800859a:	f7ff feec 	bl	8008376 <strncmp>
 800859e:	4606      	mov	r6, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d169      	bne.n	8008678 <__gethex+0x11c>
 80085a4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80085a8:	465d      	mov	r5, fp
 80085aa:	f7ff ffc2 	bl	8008532 <__hexdig_fun>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d064      	beq.n	800867c <__gethex+0x120>
 80085b2:	465a      	mov	r2, fp
 80085b4:	7810      	ldrb	r0, [r2, #0]
 80085b6:	4690      	mov	r8, r2
 80085b8:	2830      	cmp	r0, #48	; 0x30
 80085ba:	f102 0201 	add.w	r2, r2, #1
 80085be:	d0f9      	beq.n	80085b4 <__gethex+0x58>
 80085c0:	f7ff ffb7 	bl	8008532 <__hexdig_fun>
 80085c4:	2301      	movs	r3, #1
 80085c6:	fab0 f480 	clz	r4, r0
 80085ca:	465e      	mov	r6, fp
 80085cc:	0964      	lsrs	r4, r4, #5
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	4642      	mov	r2, r8
 80085d2:	4615      	mov	r5, r2
 80085d4:	7828      	ldrb	r0, [r5, #0]
 80085d6:	3201      	adds	r2, #1
 80085d8:	f7ff ffab 	bl	8008532 <__hexdig_fun>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1f8      	bne.n	80085d2 <__gethex+0x76>
 80085e0:	2201      	movs	r2, #1
 80085e2:	4628      	mov	r0, r5
 80085e4:	4994      	ldr	r1, [pc, #592]	; (8008838 <__gethex+0x2dc>)
 80085e6:	f7ff fec6 	bl	8008376 <strncmp>
 80085ea:	b978      	cbnz	r0, 800860c <__gethex+0xb0>
 80085ec:	b946      	cbnz	r6, 8008600 <__gethex+0xa4>
 80085ee:	1c6e      	adds	r6, r5, #1
 80085f0:	4632      	mov	r2, r6
 80085f2:	4615      	mov	r5, r2
 80085f4:	7828      	ldrb	r0, [r5, #0]
 80085f6:	3201      	adds	r2, #1
 80085f8:	f7ff ff9b 	bl	8008532 <__hexdig_fun>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1f8      	bne.n	80085f2 <__gethex+0x96>
 8008600:	1b73      	subs	r3, r6, r5
 8008602:	009e      	lsls	r6, r3, #2
 8008604:	e004      	b.n	8008610 <__gethex+0xb4>
 8008606:	2400      	movs	r4, #0
 8008608:	4626      	mov	r6, r4
 800860a:	e7e1      	b.n	80085d0 <__gethex+0x74>
 800860c:	2e00      	cmp	r6, #0
 800860e:	d1f7      	bne.n	8008600 <__gethex+0xa4>
 8008610:	782b      	ldrb	r3, [r5, #0]
 8008612:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008616:	2b50      	cmp	r3, #80	; 0x50
 8008618:	d13d      	bne.n	8008696 <__gethex+0x13a>
 800861a:	786b      	ldrb	r3, [r5, #1]
 800861c:	2b2b      	cmp	r3, #43	; 0x2b
 800861e:	d02f      	beq.n	8008680 <__gethex+0x124>
 8008620:	2b2d      	cmp	r3, #45	; 0x2d
 8008622:	d031      	beq.n	8008688 <__gethex+0x12c>
 8008624:	f04f 0b00 	mov.w	fp, #0
 8008628:	1c69      	adds	r1, r5, #1
 800862a:	7808      	ldrb	r0, [r1, #0]
 800862c:	f7ff ff81 	bl	8008532 <__hexdig_fun>
 8008630:	1e42      	subs	r2, r0, #1
 8008632:	b2d2      	uxtb	r2, r2
 8008634:	2a18      	cmp	r2, #24
 8008636:	d82e      	bhi.n	8008696 <__gethex+0x13a>
 8008638:	f1a0 0210 	sub.w	r2, r0, #16
 800863c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008640:	f7ff ff77 	bl	8008532 <__hexdig_fun>
 8008644:	f100 3cff 	add.w	ip, r0, #4294967295
 8008648:	fa5f fc8c 	uxtb.w	ip, ip
 800864c:	f1bc 0f18 	cmp.w	ip, #24
 8008650:	d91d      	bls.n	800868e <__gethex+0x132>
 8008652:	f1bb 0f00 	cmp.w	fp, #0
 8008656:	d000      	beq.n	800865a <__gethex+0xfe>
 8008658:	4252      	negs	r2, r2
 800865a:	4416      	add	r6, r2
 800865c:	f8ca 1000 	str.w	r1, [sl]
 8008660:	b1dc      	cbz	r4, 800869a <__gethex+0x13e>
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf14      	ite	ne
 8008668:	f04f 0800 	movne.w	r8, #0
 800866c:	f04f 0806 	moveq.w	r8, #6
 8008670:	4640      	mov	r0, r8
 8008672:	b005      	add	sp, #20
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	4645      	mov	r5, r8
 800867a:	4626      	mov	r6, r4
 800867c:	2401      	movs	r4, #1
 800867e:	e7c7      	b.n	8008610 <__gethex+0xb4>
 8008680:	f04f 0b00 	mov.w	fp, #0
 8008684:	1ca9      	adds	r1, r5, #2
 8008686:	e7d0      	b.n	800862a <__gethex+0xce>
 8008688:	f04f 0b01 	mov.w	fp, #1
 800868c:	e7fa      	b.n	8008684 <__gethex+0x128>
 800868e:	230a      	movs	r3, #10
 8008690:	fb03 0002 	mla	r0, r3, r2, r0
 8008694:	e7d0      	b.n	8008638 <__gethex+0xdc>
 8008696:	4629      	mov	r1, r5
 8008698:	e7e0      	b.n	800865c <__gethex+0x100>
 800869a:	4621      	mov	r1, r4
 800869c:	eba5 0308 	sub.w	r3, r5, r8
 80086a0:	3b01      	subs	r3, #1
 80086a2:	2b07      	cmp	r3, #7
 80086a4:	dc0a      	bgt.n	80086bc <__gethex+0x160>
 80086a6:	4648      	mov	r0, r9
 80086a8:	f7fe f8ae 	bl	8006808 <_Balloc>
 80086ac:	4604      	mov	r4, r0
 80086ae:	b940      	cbnz	r0, 80086c2 <__gethex+0x166>
 80086b0:	4602      	mov	r2, r0
 80086b2:	21e4      	movs	r1, #228	; 0xe4
 80086b4:	4b61      	ldr	r3, [pc, #388]	; (800883c <__gethex+0x2e0>)
 80086b6:	4862      	ldr	r0, [pc, #392]	; (8008840 <__gethex+0x2e4>)
 80086b8:	f7ff feb6 	bl	8008428 <__assert_func>
 80086bc:	3101      	adds	r1, #1
 80086be:	105b      	asrs	r3, r3, #1
 80086c0:	e7ef      	b.n	80086a2 <__gethex+0x146>
 80086c2:	2300      	movs	r3, #0
 80086c4:	469b      	mov	fp, r3
 80086c6:	f100 0a14 	add.w	sl, r0, #20
 80086ca:	f8cd a004 	str.w	sl, [sp, #4]
 80086ce:	45a8      	cmp	r8, r5
 80086d0:	d344      	bcc.n	800875c <__gethex+0x200>
 80086d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086d6:	4658      	mov	r0, fp
 80086d8:	f848 bb04 	str.w	fp, [r8], #4
 80086dc:	eba8 080a 	sub.w	r8, r8, sl
 80086e0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80086e4:	6122      	str	r2, [r4, #16]
 80086e6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80086ea:	f7fe f97f 	bl	80069ec <__hi0bits>
 80086ee:	683d      	ldr	r5, [r7, #0]
 80086f0:	eba8 0800 	sub.w	r8, r8, r0
 80086f4:	45a8      	cmp	r8, r5
 80086f6:	dd59      	ble.n	80087ac <__gethex+0x250>
 80086f8:	eba8 0805 	sub.w	r8, r8, r5
 80086fc:	4641      	mov	r1, r8
 80086fe:	4620      	mov	r0, r4
 8008700:	f7fe fcfd 	bl	80070fe <__any_on>
 8008704:	4683      	mov	fp, r0
 8008706:	b1b8      	cbz	r0, 8008738 <__gethex+0x1dc>
 8008708:	f04f 0b01 	mov.w	fp, #1
 800870c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008710:	1159      	asrs	r1, r3, #5
 8008712:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008716:	f003 021f 	and.w	r2, r3, #31
 800871a:	fa0b f202 	lsl.w	r2, fp, r2
 800871e:	420a      	tst	r2, r1
 8008720:	d00a      	beq.n	8008738 <__gethex+0x1dc>
 8008722:	455b      	cmp	r3, fp
 8008724:	dd06      	ble.n	8008734 <__gethex+0x1d8>
 8008726:	4620      	mov	r0, r4
 8008728:	f1a8 0102 	sub.w	r1, r8, #2
 800872c:	f7fe fce7 	bl	80070fe <__any_on>
 8008730:	2800      	cmp	r0, #0
 8008732:	d138      	bne.n	80087a6 <__gethex+0x24a>
 8008734:	f04f 0b02 	mov.w	fp, #2
 8008738:	4641      	mov	r1, r8
 800873a:	4620      	mov	r0, r4
 800873c:	f7ff fea6 	bl	800848c <rshift>
 8008740:	4446      	add	r6, r8
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	42b3      	cmp	r3, r6
 8008746:	da41      	bge.n	80087cc <__gethex+0x270>
 8008748:	4621      	mov	r1, r4
 800874a:	4648      	mov	r0, r9
 800874c:	f7fe f89c 	bl	8006888 <_Bfree>
 8008750:	2300      	movs	r3, #0
 8008752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008754:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e789      	b.n	8008670 <__gethex+0x114>
 800875c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008760:	2a2e      	cmp	r2, #46	; 0x2e
 8008762:	d014      	beq.n	800878e <__gethex+0x232>
 8008764:	2b20      	cmp	r3, #32
 8008766:	d106      	bne.n	8008776 <__gethex+0x21a>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	f843 bb04 	str.w	fp, [r3], #4
 800876e:	f04f 0b00 	mov.w	fp, #0
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	465b      	mov	r3, fp
 8008776:	7828      	ldrb	r0, [r5, #0]
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	f7ff feda 	bl	8008532 <__hexdig_fun>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	f000 000f 	and.w	r0, r0, #15
 8008784:	4098      	lsls	r0, r3
 8008786:	ea4b 0b00 	orr.w	fp, fp, r0
 800878a:	3304      	adds	r3, #4
 800878c:	e79f      	b.n	80086ce <__gethex+0x172>
 800878e:	45a8      	cmp	r8, r5
 8008790:	d8e8      	bhi.n	8008764 <__gethex+0x208>
 8008792:	2201      	movs	r2, #1
 8008794:	4628      	mov	r0, r5
 8008796:	4928      	ldr	r1, [pc, #160]	; (8008838 <__gethex+0x2dc>)
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	f7ff fdec 	bl	8008376 <strncmp>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d1df      	bne.n	8008764 <__gethex+0x208>
 80087a4:	e793      	b.n	80086ce <__gethex+0x172>
 80087a6:	f04f 0b03 	mov.w	fp, #3
 80087aa:	e7c5      	b.n	8008738 <__gethex+0x1dc>
 80087ac:	da0b      	bge.n	80087c6 <__gethex+0x26a>
 80087ae:	eba5 0808 	sub.w	r8, r5, r8
 80087b2:	4621      	mov	r1, r4
 80087b4:	4642      	mov	r2, r8
 80087b6:	4648      	mov	r0, r9
 80087b8:	f7fe fa7e 	bl	8006cb8 <__lshift>
 80087bc:	4604      	mov	r4, r0
 80087be:	eba6 0608 	sub.w	r6, r6, r8
 80087c2:	f100 0a14 	add.w	sl, r0, #20
 80087c6:	f04f 0b00 	mov.w	fp, #0
 80087ca:	e7ba      	b.n	8008742 <__gethex+0x1e6>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	42b3      	cmp	r3, r6
 80087d0:	dd74      	ble.n	80088bc <__gethex+0x360>
 80087d2:	1b9e      	subs	r6, r3, r6
 80087d4:	42b5      	cmp	r5, r6
 80087d6:	dc35      	bgt.n	8008844 <__gethex+0x2e8>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d023      	beq.n	8008826 <__gethex+0x2ca>
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d025      	beq.n	800882e <__gethex+0x2d2>
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d115      	bne.n	8008812 <__gethex+0x2b6>
 80087e6:	42b5      	cmp	r5, r6
 80087e8:	d113      	bne.n	8008812 <__gethex+0x2b6>
 80087ea:	2d01      	cmp	r5, #1
 80087ec:	d10b      	bne.n	8008806 <__gethex+0x2aa>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	9a02      	ldr	r2, [sp, #8]
 80087f2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	2301      	movs	r3, #1
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	f8ca 3000 	str.w	r3, [sl]
 8008800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008802:	601c      	str	r4, [r3, #0]
 8008804:	e734      	b.n	8008670 <__gethex+0x114>
 8008806:	4620      	mov	r0, r4
 8008808:	1e69      	subs	r1, r5, #1
 800880a:	f7fe fc78 	bl	80070fe <__any_on>
 800880e:	2800      	cmp	r0, #0
 8008810:	d1ed      	bne.n	80087ee <__gethex+0x292>
 8008812:	4621      	mov	r1, r4
 8008814:	4648      	mov	r0, r9
 8008816:	f7fe f837 	bl	8006888 <_Bfree>
 800881a:	2300      	movs	r3, #0
 800881c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e724      	b.n	8008670 <__gethex+0x114>
 8008826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f2      	bne.n	8008812 <__gethex+0x2b6>
 800882c:	e7df      	b.n	80087ee <__gethex+0x292>
 800882e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1dc      	bne.n	80087ee <__gethex+0x292>
 8008834:	e7ed      	b.n	8008812 <__gethex+0x2b6>
 8008836:	bf00      	nop
 8008838:	0800919c 	.word	0x0800919c
 800883c:	0800902f 	.word	0x0800902f
 8008840:	08009346 	.word	0x08009346
 8008844:	f106 38ff 	add.w	r8, r6, #4294967295
 8008848:	f1bb 0f00 	cmp.w	fp, #0
 800884c:	d133      	bne.n	80088b6 <__gethex+0x35a>
 800884e:	f1b8 0f00 	cmp.w	r8, #0
 8008852:	d004      	beq.n	800885e <__gethex+0x302>
 8008854:	4641      	mov	r1, r8
 8008856:	4620      	mov	r0, r4
 8008858:	f7fe fc51 	bl	80070fe <__any_on>
 800885c:	4683      	mov	fp, r0
 800885e:	2301      	movs	r3, #1
 8008860:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008864:	f008 081f 	and.w	r8, r8, #31
 8008868:	fa03 f308 	lsl.w	r3, r3, r8
 800886c:	f04f 0802 	mov.w	r8, #2
 8008870:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008874:	4631      	mov	r1, r6
 8008876:	4213      	tst	r3, r2
 8008878:	4620      	mov	r0, r4
 800887a:	bf18      	it	ne
 800887c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008880:	1bad      	subs	r5, r5, r6
 8008882:	f7ff fe03 	bl	800848c <rshift>
 8008886:	687e      	ldr	r6, [r7, #4]
 8008888:	f1bb 0f00 	cmp.w	fp, #0
 800888c:	d04a      	beq.n	8008924 <__gethex+0x3c8>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d016      	beq.n	80088c2 <__gethex+0x366>
 8008894:	2b03      	cmp	r3, #3
 8008896:	d018      	beq.n	80088ca <__gethex+0x36e>
 8008898:	2b01      	cmp	r3, #1
 800889a:	d109      	bne.n	80088b0 <__gethex+0x354>
 800889c:	f01b 0f02 	tst.w	fp, #2
 80088a0:	d006      	beq.n	80088b0 <__gethex+0x354>
 80088a2:	f8da 3000 	ldr.w	r3, [sl]
 80088a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80088aa:	f01b 0f01 	tst.w	fp, #1
 80088ae:	d10f      	bne.n	80088d0 <__gethex+0x374>
 80088b0:	f048 0810 	orr.w	r8, r8, #16
 80088b4:	e036      	b.n	8008924 <__gethex+0x3c8>
 80088b6:	f04f 0b01 	mov.w	fp, #1
 80088ba:	e7d0      	b.n	800885e <__gethex+0x302>
 80088bc:	f04f 0801 	mov.w	r8, #1
 80088c0:	e7e2      	b.n	8008888 <__gethex+0x32c>
 80088c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c4:	f1c3 0301 	rsb	r3, r3, #1
 80088c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0ef      	beq.n	80088b0 <__gethex+0x354>
 80088d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088d4:	f104 0214 	add.w	r2, r4, #20
 80088d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	2300      	movs	r3, #0
 80088e0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80088e4:	4694      	mov	ip, r2
 80088e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80088ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80088ee:	d01e      	beq.n	800892e <__gethex+0x3d2>
 80088f0:	3101      	adds	r1, #1
 80088f2:	f8cc 1000 	str.w	r1, [ip]
 80088f6:	f1b8 0f02 	cmp.w	r8, #2
 80088fa:	f104 0214 	add.w	r2, r4, #20
 80088fe:	d13d      	bne.n	800897c <__gethex+0x420>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	3b01      	subs	r3, #1
 8008904:	42ab      	cmp	r3, r5
 8008906:	d10b      	bne.n	8008920 <__gethex+0x3c4>
 8008908:	2301      	movs	r3, #1
 800890a:	1169      	asrs	r1, r5, #5
 800890c:	f005 051f 	and.w	r5, r5, #31
 8008910:	fa03 f505 	lsl.w	r5, r3, r5
 8008914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008918:	421d      	tst	r5, r3
 800891a:	bf18      	it	ne
 800891c:	f04f 0801 	movne.w	r8, #1
 8008920:	f048 0820 	orr.w	r8, r8, #32
 8008924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008926:	601c      	str	r4, [r3, #0]
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	601e      	str	r6, [r3, #0]
 800892c:	e6a0      	b.n	8008670 <__gethex+0x114>
 800892e:	4290      	cmp	r0, r2
 8008930:	f842 3c04 	str.w	r3, [r2, #-4]
 8008934:	d8d6      	bhi.n	80088e4 <__gethex+0x388>
 8008936:	68a2      	ldr	r2, [r4, #8]
 8008938:	4593      	cmp	fp, r2
 800893a:	db17      	blt.n	800896c <__gethex+0x410>
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4648      	mov	r0, r9
 8008940:	3101      	adds	r1, #1
 8008942:	f7fd ff61 	bl	8006808 <_Balloc>
 8008946:	4682      	mov	sl, r0
 8008948:	b918      	cbnz	r0, 8008952 <__gethex+0x3f6>
 800894a:	4602      	mov	r2, r0
 800894c:	2184      	movs	r1, #132	; 0x84
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <__gethex+0x45c>)
 8008950:	e6b1      	b.n	80086b6 <__gethex+0x15a>
 8008952:	6922      	ldr	r2, [r4, #16]
 8008954:	f104 010c 	add.w	r1, r4, #12
 8008958:	3202      	adds	r2, #2
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	300c      	adds	r0, #12
 800895e:	f7ff fd4f 	bl	8008400 <memcpy>
 8008962:	4621      	mov	r1, r4
 8008964:	4648      	mov	r0, r9
 8008966:	f7fd ff8f 	bl	8006888 <_Bfree>
 800896a:	4654      	mov	r4, sl
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	1c51      	adds	r1, r2, #1
 8008970:	6121      	str	r1, [r4, #16]
 8008972:	2101      	movs	r1, #1
 8008974:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008978:	6151      	str	r1, [r2, #20]
 800897a:	e7bc      	b.n	80088f6 <__gethex+0x39a>
 800897c:	6921      	ldr	r1, [r4, #16]
 800897e:	4559      	cmp	r1, fp
 8008980:	dd0b      	ble.n	800899a <__gethex+0x43e>
 8008982:	2101      	movs	r1, #1
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff fd81 	bl	800848c <rshift>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3601      	adds	r6, #1
 800898e:	42b3      	cmp	r3, r6
 8008990:	f6ff aeda 	blt.w	8008748 <__gethex+0x1ec>
 8008994:	f04f 0801 	mov.w	r8, #1
 8008998:	e7c2      	b.n	8008920 <__gethex+0x3c4>
 800899a:	f015 051f 	ands.w	r5, r5, #31
 800899e:	d0f9      	beq.n	8008994 <__gethex+0x438>
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	f1c5 0520 	rsb	r5, r5, #32
 80089a6:	441a      	add	r2, r3
 80089a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80089ac:	f7fe f81e 	bl	80069ec <__hi0bits>
 80089b0:	42a8      	cmp	r0, r5
 80089b2:	dbe6      	blt.n	8008982 <__gethex+0x426>
 80089b4:	e7ee      	b.n	8008994 <__gethex+0x438>
 80089b6:	bf00      	nop
 80089b8:	0800902f 	.word	0x0800902f

080089bc <L_shift>:
 80089bc:	f1c2 0208 	rsb	r2, r2, #8
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	b570      	push	{r4, r5, r6, lr}
 80089c4:	f1c2 0620 	rsb	r6, r2, #32
 80089c8:	6843      	ldr	r3, [r0, #4]
 80089ca:	6804      	ldr	r4, [r0, #0]
 80089cc:	fa03 f506 	lsl.w	r5, r3, r6
 80089d0:	432c      	orrs	r4, r5
 80089d2:	40d3      	lsrs	r3, r2
 80089d4:	6004      	str	r4, [r0, #0]
 80089d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80089da:	4288      	cmp	r0, r1
 80089dc:	d3f4      	bcc.n	80089c8 <L_shift+0xc>
 80089de:	bd70      	pop	{r4, r5, r6, pc}

080089e0 <__match>:
 80089e0:	b530      	push	{r4, r5, lr}
 80089e2:	6803      	ldr	r3, [r0, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ea:	b914      	cbnz	r4, 80089f2 <__match+0x12>
 80089ec:	6003      	str	r3, [r0, #0]
 80089ee:	2001      	movs	r0, #1
 80089f0:	bd30      	pop	{r4, r5, pc}
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089fa:	2d19      	cmp	r5, #25
 80089fc:	bf98      	it	ls
 80089fe:	3220      	addls	r2, #32
 8008a00:	42a2      	cmp	r2, r4
 8008a02:	d0f0      	beq.n	80089e6 <__match+0x6>
 8008a04:	2000      	movs	r0, #0
 8008a06:	e7f3      	b.n	80089f0 <__match+0x10>

08008a08 <__hexnan>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	680b      	ldr	r3, [r1, #0]
 8008a10:	4682      	mov	sl, r0
 8008a12:	115e      	asrs	r6, r3, #5
 8008a14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a18:	f013 031f 	ands.w	r3, r3, #31
 8008a1c:	bf18      	it	ne
 8008a1e:	3604      	addne	r6, #4
 8008a20:	1f37      	subs	r7, r6, #4
 8008a22:	4690      	mov	r8, r2
 8008a24:	46b9      	mov	r9, r7
 8008a26:	463c      	mov	r4, r7
 8008a28:	46ab      	mov	fp, r5
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	6801      	ldr	r1, [r0, #0]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a34:	9502      	str	r5, [sp, #8]
 8008a36:	784a      	ldrb	r2, [r1, #1]
 8008a38:	1c4b      	adds	r3, r1, #1
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	b342      	cbz	r2, 8008a90 <__hexnan+0x88>
 8008a3e:	4610      	mov	r0, r2
 8008a40:	9105      	str	r1, [sp, #20]
 8008a42:	9204      	str	r2, [sp, #16]
 8008a44:	f7ff fd75 	bl	8008532 <__hexdig_fun>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d14f      	bne.n	8008aec <__hexnan+0xe4>
 8008a4c:	9a04      	ldr	r2, [sp, #16]
 8008a4e:	9905      	ldr	r1, [sp, #20]
 8008a50:	2a20      	cmp	r2, #32
 8008a52:	d818      	bhi.n	8008a86 <__hexnan+0x7e>
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	459b      	cmp	fp, r3
 8008a58:	dd13      	ble.n	8008a82 <__hexnan+0x7a>
 8008a5a:	454c      	cmp	r4, r9
 8008a5c:	d206      	bcs.n	8008a6c <__hexnan+0x64>
 8008a5e:	2d07      	cmp	r5, #7
 8008a60:	dc04      	bgt.n	8008a6c <__hexnan+0x64>
 8008a62:	462a      	mov	r2, r5
 8008a64:	4649      	mov	r1, r9
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff ffa8 	bl	80089bc <L_shift>
 8008a6c:	4544      	cmp	r4, r8
 8008a6e:	d950      	bls.n	8008b12 <__hexnan+0x10a>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f1a4 0904 	sub.w	r9, r4, #4
 8008a76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	464c      	mov	r4, r9
 8008a7e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a82:	9903      	ldr	r1, [sp, #12]
 8008a84:	e7d7      	b.n	8008a36 <__hexnan+0x2e>
 8008a86:	2a29      	cmp	r2, #41	; 0x29
 8008a88:	d155      	bne.n	8008b36 <__hexnan+0x12e>
 8008a8a:	3102      	adds	r1, #2
 8008a8c:	f8ca 1000 	str.w	r1, [sl]
 8008a90:	f1bb 0f00 	cmp.w	fp, #0
 8008a94:	d04f      	beq.n	8008b36 <__hexnan+0x12e>
 8008a96:	454c      	cmp	r4, r9
 8008a98:	d206      	bcs.n	8008aa8 <__hexnan+0xa0>
 8008a9a:	2d07      	cmp	r5, #7
 8008a9c:	dc04      	bgt.n	8008aa8 <__hexnan+0xa0>
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff ff8a 	bl	80089bc <L_shift>
 8008aa8:	4544      	cmp	r4, r8
 8008aaa:	d934      	bls.n	8008b16 <__hexnan+0x10e>
 8008aac:	4623      	mov	r3, r4
 8008aae:	f1a8 0204 	sub.w	r2, r8, #4
 8008ab2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ab6:	429f      	cmp	r7, r3
 8008ab8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008abc:	d2f9      	bcs.n	8008ab2 <__hexnan+0xaa>
 8008abe:	1b3b      	subs	r3, r7, r4
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	3e03      	subs	r6, #3
 8008ac8:	3401      	adds	r4, #1
 8008aca:	42a6      	cmp	r6, r4
 8008acc:	bf38      	it	cc
 8008ace:	2304      	movcc	r3, #4
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4443      	add	r3, r8
 8008ad4:	f843 2b04 	str.w	r2, [r3], #4
 8008ad8:	429f      	cmp	r7, r3
 8008ada:	d2fb      	bcs.n	8008ad4 <__hexnan+0xcc>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	b91b      	cbnz	r3, 8008ae8 <__hexnan+0xe0>
 8008ae0:	4547      	cmp	r7, r8
 8008ae2:	d126      	bne.n	8008b32 <__hexnan+0x12a>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	2005      	movs	r0, #5
 8008aea:	e025      	b.n	8008b38 <__hexnan+0x130>
 8008aec:	3501      	adds	r5, #1
 8008aee:	2d08      	cmp	r5, #8
 8008af0:	f10b 0b01 	add.w	fp, fp, #1
 8008af4:	dd06      	ble.n	8008b04 <__hexnan+0xfc>
 8008af6:	4544      	cmp	r4, r8
 8008af8:	d9c3      	bls.n	8008a82 <__hexnan+0x7a>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2501      	movs	r5, #1
 8008afe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b02:	3c04      	subs	r4, #4
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	f000 000f 	and.w	r0, r0, #15
 8008b0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b0e:	6020      	str	r0, [r4, #0]
 8008b10:	e7b7      	b.n	8008a82 <__hexnan+0x7a>
 8008b12:	2508      	movs	r5, #8
 8008b14:	e7b5      	b.n	8008a82 <__hexnan+0x7a>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0df      	beq.n	8008adc <__hexnan+0xd4>
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	f1c3 0320 	rsb	r3, r3, #32
 8008b24:	40da      	lsrs	r2, r3
 8008b26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b30:	e7d4      	b.n	8008adc <__hexnan+0xd4>
 8008b32:	3f04      	subs	r7, #4
 8008b34:	e7d2      	b.n	8008adc <__hexnan+0xd4>
 8008b36:	2004      	movs	r0, #4
 8008b38:	b007      	add	sp, #28
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b3e <__ascii_mbtowc>:
 8008b3e:	b082      	sub	sp, #8
 8008b40:	b901      	cbnz	r1, 8008b44 <__ascii_mbtowc+0x6>
 8008b42:	a901      	add	r1, sp, #4
 8008b44:	b142      	cbz	r2, 8008b58 <__ascii_mbtowc+0x1a>
 8008b46:	b14b      	cbz	r3, 8008b5c <__ascii_mbtowc+0x1e>
 8008b48:	7813      	ldrb	r3, [r2, #0]
 8008b4a:	600b      	str	r3, [r1, #0]
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	1e10      	subs	r0, r2, #0
 8008b50:	bf18      	it	ne
 8008b52:	2001      	movne	r0, #1
 8008b54:	b002      	add	sp, #8
 8008b56:	4770      	bx	lr
 8008b58:	4610      	mov	r0, r2
 8008b5a:	e7fb      	b.n	8008b54 <__ascii_mbtowc+0x16>
 8008b5c:	f06f 0001 	mvn.w	r0, #1
 8008b60:	e7f8      	b.n	8008b54 <__ascii_mbtowc+0x16>

08008b62 <_realloc_r>:
 8008b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	4680      	mov	r8, r0
 8008b68:	4614      	mov	r4, r2
 8008b6a:	460e      	mov	r6, r1
 8008b6c:	b921      	cbnz	r1, 8008b78 <_realloc_r+0x16>
 8008b6e:	4611      	mov	r1, r2
 8008b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	f7fd bdbc 	b.w	80066f0 <_malloc_r>
 8008b78:	b92a      	cbnz	r2, 8008b86 <_realloc_r+0x24>
 8008b7a:	f7fd fd49 	bl	8006610 <_free_r>
 8008b7e:	4625      	mov	r5, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b86:	f000 f842 	bl	8008c0e <_malloc_usable_size_r>
 8008b8a:	4284      	cmp	r4, r0
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	d802      	bhi.n	8008b96 <_realloc_r+0x34>
 8008b90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b94:	d812      	bhi.n	8008bbc <_realloc_r+0x5a>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4640      	mov	r0, r8
 8008b9a:	f7fd fda9 	bl	80066f0 <_malloc_r>
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d0ed      	beq.n	8008b80 <_realloc_r+0x1e>
 8008ba4:	42bc      	cmp	r4, r7
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4631      	mov	r1, r6
 8008baa:	bf28      	it	cs
 8008bac:	463a      	movcs	r2, r7
 8008bae:	f7ff fc27 	bl	8008400 <memcpy>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	f7fd fd2b 	bl	8006610 <_free_r>
 8008bba:	e7e1      	b.n	8008b80 <_realloc_r+0x1e>
 8008bbc:	4635      	mov	r5, r6
 8008bbe:	e7df      	b.n	8008b80 <_realloc_r+0x1e>

08008bc0 <__ascii_wctomb>:
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	b141      	cbz	r1, 8008bd8 <__ascii_wctomb+0x18>
 8008bc6:	2aff      	cmp	r2, #255	; 0xff
 8008bc8:	d904      	bls.n	8008bd4 <__ascii_wctomb+0x14>
 8008bca:	228a      	movs	r2, #138	; 0x8a
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	4770      	bx	lr
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	700a      	strb	r2, [r1, #0]
 8008bd8:	4770      	bx	lr
	...

08008bdc <fiprintf>:
 8008bdc:	b40e      	push	{r1, r2, r3}
 8008bde:	b503      	push	{r0, r1, lr}
 8008be0:	4601      	mov	r1, r0
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	4805      	ldr	r0, [pc, #20]	; (8008bfc <fiprintf+0x20>)
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f000 f83d 	bl	8008c6c <_vfiprintf_r>
 8008bf2:	b002      	add	sp, #8
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	20000068 	.word	0x20000068

08008c00 <abort>:
 8008c00:	2006      	movs	r0, #6
 8008c02:	b508      	push	{r3, lr}
 8008c04:	f000 f974 	bl	8008ef0 <raise>
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7f8 fe7c 	bl	8001906 <_exit>

08008c0e <_malloc_usable_size_r>:
 8008c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c12:	1f18      	subs	r0, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfbc      	itt	lt
 8008c18:	580b      	ldrlt	r3, [r1, r0]
 8008c1a:	18c0      	addlt	r0, r0, r3
 8008c1c:	4770      	bx	lr

08008c1e <__sfputc_r>:
 8008c1e:	6893      	ldr	r3, [r2, #8]
 8008c20:	b410      	push	{r4}
 8008c22:	3b01      	subs	r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	6093      	str	r3, [r2, #8]
 8008c28:	da07      	bge.n	8008c3a <__sfputc_r+0x1c>
 8008c2a:	6994      	ldr	r4, [r2, #24]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	db01      	blt.n	8008c34 <__sfputc_r+0x16>
 8008c30:	290a      	cmp	r1, #10
 8008c32:	d102      	bne.n	8008c3a <__sfputc_r+0x1c>
 8008c34:	bc10      	pop	{r4}
 8008c36:	f7fc bd56 	b.w	80056e6 <__swbuf_r>
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	1c58      	adds	r0, r3, #1
 8008c3e:	6010      	str	r0, [r2, #0]
 8008c40:	7019      	strb	r1, [r3, #0]
 8008c42:	4608      	mov	r0, r1
 8008c44:	bc10      	pop	{r4}
 8008c46:	4770      	bx	lr

08008c48 <__sfputs_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	4614      	mov	r4, r2
 8008c50:	18d5      	adds	r5, r2, r3
 8008c52:	42ac      	cmp	r4, r5
 8008c54:	d101      	bne.n	8008c5a <__sfputs_r+0x12>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e007      	b.n	8008c6a <__sfputs_r+0x22>
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c62:	f7ff ffdc 	bl	8008c1e <__sfputc_r>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d1f3      	bne.n	8008c52 <__sfputs_r+0xa>
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c6c <_vfiprintf_r>:
 8008c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	460d      	mov	r5, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	4698      	mov	r8, r3
 8008c76:	4606      	mov	r6, r0
 8008c78:	b09d      	sub	sp, #116	; 0x74
 8008c7a:	b118      	cbz	r0, 8008c84 <_vfiprintf_r+0x18>
 8008c7c:	6a03      	ldr	r3, [r0, #32]
 8008c7e:	b90b      	cbnz	r3, 8008c84 <_vfiprintf_r+0x18>
 8008c80:	f7fc fc3c 	bl	80054fc <__sinit>
 8008c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c86:	07d9      	lsls	r1, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_vfiprintf_r+0x2a>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	059a      	lsls	r2, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_vfiprintf_r+0x2a>
 8008c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c92:	f7fc fe3a 	bl	800590a <__retarget_lock_acquire_recursive>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <_vfiprintf_r+0x34>
 8008c9c:	692b      	ldr	r3, [r5, #16]
 8008c9e:	b99b      	cbnz	r3, 8008cc8 <_vfiprintf_r+0x5c>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7fc fd5c 	bl	8005760 <__swsetup_r>
 8008ca8:	b170      	cbz	r0, 8008cc8 <_vfiprintf_r+0x5c>
 8008caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cac:	07dc      	lsls	r4, r3, #31
 8008cae:	d504      	bpl.n	8008cba <_vfiprintf_r+0x4e>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b01d      	add	sp, #116	; 0x74
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	0598      	lsls	r0, r3, #22
 8008cbe:	d4f7      	bmi.n	8008cb0 <_vfiprintf_r+0x44>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc2:	f7fc fe23 	bl	800590c <__retarget_lock_release_recursive>
 8008cc6:	e7f3      	b.n	8008cb0 <_vfiprintf_r+0x44>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	2320      	movs	r3, #32
 8008cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd2:	2330      	movs	r3, #48	; 0x30
 8008cd4:	f04f 0901 	mov.w	r9, #1
 8008cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008e8c <_vfiprintf_r+0x220>
 8008ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	469a      	mov	sl, r3
 8008ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cec:	b10a      	cbz	r2, 8008cf2 <_vfiprintf_r+0x86>
 8008cee:	2a25      	cmp	r2, #37	; 0x25
 8008cf0:	d1f9      	bne.n	8008ce6 <_vfiprintf_r+0x7a>
 8008cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf6:	d00b      	beq.n	8008d10 <_vfiprintf_r+0xa4>
 8008cf8:	465b      	mov	r3, fp
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ffa2 	bl	8008c48 <__sfputs_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	f000 80a9 	beq.w	8008e5c <_vfiprintf_r+0x1f0>
 8008d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0c:	445a      	add	r2, fp
 8008d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d10:	f89a 3000 	ldrb.w	r3, [sl]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80a1 	beq.w	8008e5c <_vfiprintf_r+0x1f0>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d24:	f10a 0a01 	add.w	sl, sl, #1
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d30:	931a      	str	r3, [sp, #104]	; 0x68
 8008d32:	4654      	mov	r4, sl
 8008d34:	2205      	movs	r2, #5
 8008d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3a:	4854      	ldr	r0, [pc, #336]	; (8008e8c <_vfiprintf_r+0x220>)
 8008d3c:	f7fc fde7 	bl	800590e <memchr>
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	b9d8      	cbnz	r0, 8008d7c <_vfiprintf_r+0x110>
 8008d44:	06d1      	lsls	r1, r2, #27
 8008d46:	bf44      	itt	mi
 8008d48:	2320      	movmi	r3, #32
 8008d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4e:	0713      	lsls	r3, r2, #28
 8008d50:	bf44      	itt	mi
 8008d52:	232b      	movmi	r3, #43	; 0x2b
 8008d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d58:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5e:	d015      	beq.n	8008d8c <_vfiprintf_r+0x120>
 8008d60:	4654      	mov	r4, sl
 8008d62:	2000      	movs	r0, #0
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	9a07      	ldr	r2, [sp, #28]
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d70:	3b30      	subs	r3, #48	; 0x30
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	d94d      	bls.n	8008e12 <_vfiprintf_r+0x1a6>
 8008d76:	b1b0      	cbz	r0, 8008da6 <_vfiprintf_r+0x13a>
 8008d78:	9207      	str	r2, [sp, #28]
 8008d7a:	e014      	b.n	8008da6 <_vfiprintf_r+0x13a>
 8008d7c:	eba0 0308 	sub.w	r3, r0, r8
 8008d80:	fa09 f303 	lsl.w	r3, r9, r3
 8008d84:	4313      	orrs	r3, r2
 8008d86:	46a2      	mov	sl, r4
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	e7d2      	b.n	8008d32 <_vfiprintf_r+0xc6>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	1d19      	adds	r1, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	9103      	str	r1, [sp, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bfbb      	ittet	lt
 8008d98:	425b      	neglt	r3, r3
 8008d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9e:	9307      	strge	r3, [sp, #28]
 8008da0:	9307      	strlt	r3, [sp, #28]
 8008da2:	bfb8      	it	lt
 8008da4:	9204      	strlt	r2, [sp, #16]
 8008da6:	7823      	ldrb	r3, [r4, #0]
 8008da8:	2b2e      	cmp	r3, #46	; 0x2e
 8008daa:	d10c      	bne.n	8008dc6 <_vfiprintf_r+0x15a>
 8008dac:	7863      	ldrb	r3, [r4, #1]
 8008dae:	2b2a      	cmp	r3, #42	; 0x2a
 8008db0:	d134      	bne.n	8008e1c <_vfiprintf_r+0x1b0>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	3402      	adds	r4, #2
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9203      	str	r2, [sp, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	bfb8      	it	lt
 8008dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e90 <_vfiprintf_r+0x224>
 8008dca:	2203      	movs	r2, #3
 8008dcc:	4650      	mov	r0, sl
 8008dce:	7821      	ldrb	r1, [r4, #0]
 8008dd0:	f7fc fd9d 	bl	800590e <memchr>
 8008dd4:	b138      	cbz	r0, 8008de6 <_vfiprintf_r+0x17a>
 8008dd6:	2240      	movs	r2, #64	; 0x40
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	eba0 000a 	sub.w	r0, r0, sl
 8008dde:	4082      	lsls	r2, r0
 8008de0:	4313      	orrs	r3, r2
 8008de2:	3401      	adds	r4, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	2206      	movs	r2, #6
 8008dec:	4829      	ldr	r0, [pc, #164]	; (8008e94 <_vfiprintf_r+0x228>)
 8008dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df2:	f7fc fd8c 	bl	800590e <memchr>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d03f      	beq.n	8008e7a <_vfiprintf_r+0x20e>
 8008dfa:	4b27      	ldr	r3, [pc, #156]	; (8008e98 <_vfiprintf_r+0x22c>)
 8008dfc:	bb1b      	cbnz	r3, 8008e46 <_vfiprintf_r+0x1da>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	3307      	adds	r3, #7
 8008e02:	f023 0307 	bic.w	r3, r3, #7
 8008e06:	3308      	adds	r3, #8
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0c:	443b      	add	r3, r7
 8008e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e10:	e768      	b.n	8008ce4 <_vfiprintf_r+0x78>
 8008e12:	460c      	mov	r4, r1
 8008e14:	2001      	movs	r0, #1
 8008e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1a:	e7a6      	b.n	8008d6a <_vfiprintf_r+0xfe>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4619      	mov	r1, r3
 8008e24:	3401      	adds	r4, #1
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2e:	3a30      	subs	r2, #48	; 0x30
 8008e30:	2a09      	cmp	r2, #9
 8008e32:	d903      	bls.n	8008e3c <_vfiprintf_r+0x1d0>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0c6      	beq.n	8008dc6 <_vfiprintf_r+0x15a>
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	e7c4      	b.n	8008dc6 <_vfiprintf_r+0x15a>
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	2301      	movs	r3, #1
 8008e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e44:	e7f0      	b.n	8008e28 <_vfiprintf_r+0x1bc>
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <_vfiprintf_r+0x230>)
 8008e50:	a904      	add	r1, sp, #16
 8008e52:	f7fb fcf7 	bl	8004844 <_printf_float>
 8008e56:	4607      	mov	r7, r0
 8008e58:	1c78      	adds	r0, r7, #1
 8008e5a:	d1d6      	bne.n	8008e0a <_vfiprintf_r+0x19e>
 8008e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e5e:	07d9      	lsls	r1, r3, #31
 8008e60:	d405      	bmi.n	8008e6e <_vfiprintf_r+0x202>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d402      	bmi.n	8008e6e <_vfiprintf_r+0x202>
 8008e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6a:	f7fc fd4f 	bl	800590c <__retarget_lock_release_recursive>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	065b      	lsls	r3, r3, #25
 8008e72:	f53f af1d 	bmi.w	8008cb0 <_vfiprintf_r+0x44>
 8008e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e78:	e71c      	b.n	8008cb4 <_vfiprintf_r+0x48>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <_vfiprintf_r+0x230>)
 8008e84:	a904      	add	r1, sp, #16
 8008e86:	f7fb ff7d 	bl	8004d84 <_printf_i>
 8008e8a:	e7e4      	b.n	8008e56 <_vfiprintf_r+0x1ea>
 8008e8c:	080092f1 	.word	0x080092f1
 8008e90:	080092f7 	.word	0x080092f7
 8008e94:	080092fb 	.word	0x080092fb
 8008e98:	08004845 	.word	0x08004845
 8008e9c:	08008c49 	.word	0x08008c49

08008ea0 <_raise_r>:
 8008ea0:	291f      	cmp	r1, #31
 8008ea2:	b538      	push	{r3, r4, r5, lr}
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	d904      	bls.n	8008eb4 <_raise_r+0x14>
 8008eaa:	2316      	movs	r3, #22
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008eb6:	b112      	cbz	r2, 8008ebe <_raise_r+0x1e>
 8008eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ebc:	b94b      	cbnz	r3, 8008ed2 <_raise_r+0x32>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 f830 	bl	8008f24 <_getpid_r>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4620      	mov	r0, r4
 8008eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ece:	f000 b817 	b.w	8008f00 <_kill_r>
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d00a      	beq.n	8008eec <_raise_r+0x4c>
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	d103      	bne.n	8008ee2 <_raise_r+0x42>
 8008eda:	2316      	movs	r3, #22
 8008edc:	6003      	str	r3, [r0, #0]
 8008ede:	2001      	movs	r0, #1
 8008ee0:	e7e7      	b.n	8008eb2 <_raise_r+0x12>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eea:	4798      	blx	r3
 8008eec:	2000      	movs	r0, #0
 8008eee:	e7e0      	b.n	8008eb2 <_raise_r+0x12>

08008ef0 <raise>:
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <raise+0xc>)
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f7ff bfd3 	b.w	8008ea0 <_raise_r>
 8008efa:	bf00      	nop
 8008efc:	20000068 	.word	0x20000068

08008f00 <_kill_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	2300      	movs	r3, #0
 8008f04:	4d06      	ldr	r5, [pc, #24]	; (8008f20 <_kill_r+0x20>)
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	f7f8 fcea 	bl	80018e6 <_kill>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_kill_r+0x1c>
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_kill_r+0x1c>
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000440 	.word	0x20000440

08008f24 <_getpid_r>:
 8008f24:	f7f8 bcd8 	b.w	80018d8 <_getpid>

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
