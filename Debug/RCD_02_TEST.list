
RCD_02_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008ef0  08008ef0  00018ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009358  08009358  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009358  08009358  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009358  08009358  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800935c  0800935c  0001935c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001d8  08009538  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08009538  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df5a  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002717  00000000  00000000  0002e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a91  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b58c  00000000  00000000  00032101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001141e  00000000  00000000  0004d68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bdcf  00000000  00000000  0005eaab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  000fa87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000ff5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008ed8 	.word	0x08008ed8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08008ed8 	.word	0x08008ed8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4605      	mov	r5, r0
 800114c:	460c      	mov	r4, r1
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4628      	mov	r0, r5
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc9d 	bl	8000a94 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff fa13 	bl	80005b0 <__aeabi_dmul>
 800118a:	f7ff fce9 	bl	8000b60 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f994 	bl	80004bc <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff fa0a 	bl	80005b0 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f84c 	bl	8000240 <__aeabi_dsub>
 80011a8:	f7ff fcda 	bl	8000b60 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_DAC_Init+0x4c>)
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_DAC_Init+0x50>)
 80011ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_DAC_Init+0x4c>)
 80011ce:	f001 f948 	bl	8002462 <HAL_DAC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d8:	f000 fb0b 	bl	80017f2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_DAC_Init+0x4c>)
 80011ec:	f001 f9da 	bl	80025a4 <HAL_DAC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f6:	f000 fafc 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001f4 	.word	0x200001f4
 8001208:	40007400 	.word	0x40007400

0800120c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_DAC_MspInit+0x6c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d121      	bne.n	8001270 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_DAC_MspInit+0x70>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_DAC_MspInit+0x70>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_DAC_MspInit+0x70>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_DAC_MspInit+0x70>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = TEST_IN_Pin;
 800125c:	2310      	movs	r3, #16
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(TEST_IN_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_DAC_MspInit+0x74>)
 800126c:	f001 f9f2 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40007400 	.word	0x40007400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x124>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <MX_GPIO_Init+0x124>)
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3c      	ldr	r2, [pc, #240]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0x124>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Calibration_RED_Pin|Calibration_GREEN_Pin|Calibration_BLUE_Pin|HEART_RED_Pin
 80012f8:	2201      	movs	r2, #1
 80012fa:	21ce      	movs	r1, #206	; 0xce
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <MX_GPIO_Init+0x128>)
 80012fe:	f001 fb54 	bl	80029aa <HAL_GPIO_WritePin>
                          |HEART_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_BLUE_GPIO_Port, HEART_BLUE_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2110      	movs	r1, #16
 8001306:	482a      	ldr	r0, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x12c>)
 8001308:	f001 fb4f 	bl	80029aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TEST_IN_RED_Pin
 800130c:	2201      	movs	r2, #1
 800130e:	f647 4104 	movw	r1, #31748	; 0x7c04
 8001312:	4828      	ldr	r0, [pc, #160]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001314:	f001 fb49 	bl	80029aa <HAL_GPIO_WritePin>
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Calibration_RED_Pin|Calibration_GREEN_Pin|Calibration_BLUE_Pin|HEART_RED_Pin
 8001318:	23ce      	movs	r3, #206	; 0xce
 800131a:	613b      	str	r3, [r7, #16]
                          |HEART_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <MX_GPIO_Init+0x128>)
 8001330:	f001 f990 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEART_BLUE_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEART_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4819      	ldr	r0, [pc, #100]	; (80013b0 <MX_GPIO_Init+0x12c>)
 800134c:	f001 f982 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TRIP_RED_Pin|TRIP_GREEN_Pin|TRIP_BLUE_Pin|TEST_IN_RED_Pin
 8001350:	f647 4304 	movw	r3, #31748	; 0x7c04
 8001354:	613b      	str	r3, [r7, #16]
                          |TEST_IN_GREEN_Pin|TEST_IN_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_GPIO_Init+0x130>)
 800136a:	f001 f973 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIP_INPUT_Pin;
 800136e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIP_INPUT_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <MX_GPIO_Init+0x128>)
 8001384:	f001 f966 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Calibration_START_Pin;
 8001388:	2308      	movs	r3, #8
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Calibration_START_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_GPIO_Init+0x130>)
 800139c:	f001 f95a 	bl	8002654 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fee2 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f978 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f7ff ff5e 	bl	8001284 <MX_GPIO_Init>
  MX_DAC_Init();
 80013c8:	f7ff fef6 	bl	80011b8 <MX_DAC_Init>
  MX_TIM1_Init();
 80013cc:	f000 fb4a 	bl	8001a64 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013d0:	f000 fc94 	bl	8001cfc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013d4:	f000 fbe4 	bl	8001ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	48a9      	ldr	r0, [pc, #676]	; (8001680 <main+0x2c8>)
 80013dc:	f002 f816 	bl	800340c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	48a7      	ldr	r0, [pc, #668]	; (8001680 <main+0x2c8>)
 80013e4:	f002 f812 	bl	800340c <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT (&htim1,TIM_CHANNEL_4);
 80013e8:	210c      	movs	r1, #12
 80013ea:	48a5      	ldr	r0, [pc, #660]	; (8001680 <main+0x2c8>)
 80013ec:	f002 f80e 	bl	800340c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	48a4      	ldr	r0, [pc, #656]	; (8001684 <main+0x2cc>)
 80013f2:	f001 ff53 	bl	800329c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	48a3      	ldr	r0, [pc, #652]	; (8001688 <main+0x2d0>)
 80013fa:	f001 f854 	bl	80024a6 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("init success\r\n");
 80013fe:	48a3      	ldr	r0, [pc, #652]	; (800168c <main+0x2d4>)
 8001400:	f004 f8dc 	bl	80055bc <puts>
  while (1)
  {
	if(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0 && work_normol == 1)	//校准控制
 8001404:	2108      	movs	r1, #8
 8001406:	48a2      	ldr	r0, [pc, #648]	; (8001690 <main+0x2d8>)
 8001408:	f001 fab8 	bl	800297c <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d144      	bne.n	800149c <main+0xe4>
 8001412:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <main+0x2dc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d140      	bne.n	800149c <main+0xe4>
	{
		HAL_msDelay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f000 f9d0 	bl	80017c0 <HAL_msDelay>
		while(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0);	//校准控制
 8001420:	bf00      	nop
 8001422:	2108      	movs	r1, #8
 8001424:	489a      	ldr	r0, [pc, #616]	; (8001690 <main+0x2d8>)
 8001426:	f001 faa9 	bl	800297c <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f8      	beq.n	8001422 <main+0x6a>

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8001430:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4893      	ldr	r0, [pc, #588]	; (8001688 <main+0x2d0>)
 800143a:	f001 f88a 	bl	8002552 <HAL_DAC_SetValue>
		HAL_msDelay(200);
 800143e:	20c8      	movs	r0, #200	; 0xc8
 8001440:	f000 f9be 	bl	80017c0 <HAL_msDelay>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001444:	2300      	movs	r3, #0
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	488f      	ldr	r0, [pc, #572]	; (8001688 <main+0x2d0>)
 800144c:	f001 f881 	bl	8002552 <HAL_DAC_SetValue>

		test_in_flag = 1;
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <main+0x2e0>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]

		SelectLedLight(TestLed,Red,0);
 8001456:	2200      	movs	r2, #0
 8001458:	2101      	movs	r1, #1
 800145a:	2004      	movs	r0, #4
 800145c:	f000 fcfc 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,0);
 8001460:	2200      	movs	r2, #0
 8001462:	2102      	movs	r1, #2
 8001464:	2004      	movs	r0, #4
 8001466:	f000 fcf7 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Blue,0);
 800146a:	2200      	movs	r2, #0
 800146c:	2103      	movs	r1, #3
 800146e:	2004      	movs	r0, #4
 8001470:	f000 fcf2 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,1);
 8001474:	2201      	movs	r2, #1
 8001476:	2102      	movs	r1, #2
 8001478:	2004      	movs	r0, #4
 800147a:	f000 fced 	bl	8001e58 <SelectLedLight>

		SelectLedLight(CalibrateLed,Red,0);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	2001      	movs	r0, #1
 8001484:	f000 fce8 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Green,0);
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	2001      	movs	r0, #1
 800148e:	f000 fce3 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Blue,0);
 8001492:	2200      	movs	r2, #0
 8001494:	2103      	movs	r1, #3
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fcde 	bl	8001e58 <SelectLedLight>
	}

	 if(end_flag)
 800149c:	4b7f      	ldr	r3, [pc, #508]	; (800169c <main+0x2e4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <main+0xf2>
	 {
//		printf ("Cap_val1 is :%ld ,  Cap_val2 is : %ld \r\n",Cap_val1 ,Cap_val2 );
//		printf ("Duty is :%0.2f%% Frequency is : %0.2f\r\n",Duty  ,Frequency  );
		end_flag=0;
 80014a4:	4b7d      	ldr	r3, [pc, #500]	; (800169c <main+0x2e4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	 }

	if(((int)Frequency >= 940 && (int)Frequency <= 1060) && ((int)Duty >= 49 && (int)Duty <= 51))//Heart beat信�?�
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <main+0x2e8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe24 	bl	80010fc <__aeabi_f2iz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f5b3 7f6b 	cmp.w	r3, #940	; 0x3ac
 80014ba:	db31      	blt.n	8001520 <main+0x168>
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <main+0x2e8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe1b 	bl	80010fc <__aeabi_f2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f240 4224 	movw	r2, #1060	; 0x424
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dc27      	bgt.n	8001520 <main+0x168>
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <main+0x2ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe11 	bl	80010fc <__aeabi_f2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b30      	cmp	r3, #48	; 0x30
 80014de:	dd1f      	ble.n	8001520 <main+0x168>
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <main+0x2ec>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe09 	bl	80010fc <__aeabi_f2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b33      	cmp	r3, #51	; 0x33
 80014ee:	dc17      	bgt.n	8001520 <main+0x168>
	{
		SelectLedLight(HeartLed,Red,0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 fcaf 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 fcaa 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Blue,0);
 8001504:	2200      	movs	r2, #0
 8001506:	2103      	movs	r1, #3
 8001508:	2002      	movs	r0, #2
 800150a:	f000 fca5 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,1);
 800150e:	2201      	movs	r2, #1
 8001510:	2102      	movs	r1, #2
 8001512:	2002      	movs	r0, #2
 8001514:	f000 fca0 	bl	8001e58 <SelectLedLight>
		work_normol = 1;
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <main+0x2dc>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e029      	b.n	8001574 <main+0x1bc>
	}
	else if(test_in_flag == 0)
 8001520:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <main+0x2e0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d125      	bne.n	8001574 <main+0x1bc>
	{
		SelectLedLight(CalibrateLed,Red,0);
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	2001      	movs	r0, #1
 800152e:	f000 fc93 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Green,0);
 8001532:	2200      	movs	r2, #0
 8001534:	2102      	movs	r1, #2
 8001536:	2001      	movs	r0, #1
 8001538:	f000 fc8e 	bl	8001e58 <SelectLedLight>
		SelectLedLight(CalibrateLed,Blue,0);
 800153c:	2200      	movs	r2, #0
 800153e:	2103      	movs	r1, #3
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fc89 	bl	8001e58 <SelectLedLight>

		SelectLedLight(HeartLed,Red,0);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	2002      	movs	r0, #2
 800154c:	f000 fc84 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Green,0);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	2002      	movs	r0, #2
 8001556:	f000 fc7f 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Blue,0);
 800155a:	2200      	movs	r2, #0
 800155c:	2103      	movs	r1, #3
 800155e:	2002      	movs	r0, #2
 8001560:	f000 fc7a 	bl	8001e58 <SelectLedLight>
		SelectLedLight(HeartLed,Red,1);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	2002      	movs	r0, #2
 800156a:	f000 fc75 	bl	8001e58 <SelectLedLight>
		work_normol = 0;
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <main+0x2dc>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	}

	if(test_in_flag == 2)
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <main+0x2e0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d162      	bne.n	8001642 <main+0x28a>
	{
		trip_time = 0;
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <main+0x2f0>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
		HAL_msDelay(1700);
 8001582:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001586:	f000 f91b 	bl	80017c0 <HAL_msDelay>
		if(((int)trip_time > 120 && (int)trip_time < 140) && work_normol == 1)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <main+0x2f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b78      	cmp	r3, #120	; 0x78
 8001590:	dd1c      	ble.n	80015cc <main+0x214>
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <main+0x2f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b8b      	cmp	r3, #139	; 0x8b
 8001598:	dc18      	bgt.n	80015cc <main+0x214>
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <main+0x2dc>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d114      	bne.n	80015cc <main+0x214>
		{
			SelectLedLight(CalibrateLed,Red,0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 fc56 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2102      	movs	r1, #2
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 fc51 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Blue,0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2103      	movs	r1, #3
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fc4c 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2102      	movs	r1, #2
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 fc47 	bl	8001e58 <SelectLedLight>
 80015ca:	e013      	b.n	80015f4 <main+0x23c>
		}
		else
		{
			SelectLedLight(CalibrateLed,Red,0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fc41 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Green,0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fc3c 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Blue,0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2103      	movs	r1, #3
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 fc37 	bl	8001e58 <SelectLedLight>
			SelectLedLight(CalibrateLed,Red,1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fc32 	bl	8001e58 <SelectLedLight>
		}
		test_in_flag = 0;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <main+0x2e0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		trip_time = 0;
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x2f0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
		trip_flag = 0;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <main+0x2f4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		SelectLedLight(TestLed,Red,0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	2004      	movs	r0, #4
 800160c:	f000 fc24 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Green,0);
 8001610:	2200      	movs	r2, #0
 8001612:	2102      	movs	r1, #2
 8001614:	2004      	movs	r0, #4
 8001616:	f000 fc1f 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TestLed,Blue,0);
 800161a:	2200      	movs	r2, #0
 800161c:	2103      	movs	r1, #3
 800161e:	2004      	movs	r0, #4
 8001620:	f000 fc1a 	bl	8001e58 <SelectLedLight>

		SelectLedLight(TripLed,Red,0);
 8001624:	2200      	movs	r2, #0
 8001626:	2101      	movs	r1, #1
 8001628:	2003      	movs	r0, #3
 800162a:	f000 fc15 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Green,0);
 800162e:	2200      	movs	r2, #0
 8001630:	2102      	movs	r1, #2
 8001632:	2003      	movs	r0, #3
 8001634:	f000 fc10 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Blue,0);
 8001638:	2200      	movs	r2, #0
 800163a:	2103      	movs	r1, #3
 800163c:	2003      	movs	r0, #3
 800163e:	f000 fc0b 	bl	8001e58 <SelectLedLight>

	}

	if(trip_flag == 1 && test_in_flag == 0)
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <main+0x2f4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	f47f aedc 	bne.w	8001404 <main+0x4c>
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <main+0x2e0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f aed7 	bne.w	8001404 <main+0x4c>
	{
		HAL_msDelay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f000 f8b1 	bl	80017c0 <HAL_msDelay>
		if(HAL_GPIO_ReadPin(GPIOA, TRIP_INPUT_Pin) == 0)
 800165e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <main+0x2f8>)
 8001664:	f001 f98a 	bl	800297c <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f aeca 	bne.w	8001404 <main+0x4c>
		{
			trip_flag = 0;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <main+0x2f4>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			trip_time = 0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <main+0x2f0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB, Calibration_START_Pin) == 0 && work_normol == 1)	//校准控制
 800167c:	e6c2      	b.n	8001404 <main+0x4c>
 800167e:	bf00      	nop
 8001680:	20000210 	.word	0x20000210
 8001684:	20000258 	.word	0x20000258
 8001688:	200001f4 	.word	0x200001f4
 800168c:	08008ef0 	.word	0x08008ef0
 8001690:	40010c00 	.word	0x40010c00
 8001694:	20000209 	.word	0x20000209
 8001698:	20000208 	.word	0x20000208
 800169c:	200002f8 	.word	0x200002f8
 80016a0:	200002f0 	.word	0x200002f0
 80016a4:	200002f4 	.word	0x200002f4
 80016a8:	200002fc 	.word	0x200002fc
 80016ac:	200002f9 	.word	0x200002f9
 80016b0:	40010800 	.word	0x40010800

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b090      	sub	sp, #64	; 0x40
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f87a 	bl	80057bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 f96d 	bl	80029dc <HAL_RCC_OscConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001708:	f000 f873 	bl	80017f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2102      	movs	r1, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fbda 	bl	8002ee0 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001732:	f000 f85e 	bl	80017f2 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_usDelay>:

/* USER CODE BEGIN 4 */
void HAL_usDelay(uint32_t udelay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_usDelay+0x7c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 800174e:	f000 fd71 	bl	8002234 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

  delays =udelay * 72;
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	d915      	bls.n	8001794 <HAL_usDelay+0x54>
  {
    while(HAL_GetTick() == tickn);
 8001768:	bf00      	nop
 800176a:	f000 fd63 	bl	8002234 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4293      	cmp	r3, r2
 8001774:	d0f9      	beq.n	800176a <HAL_usDelay+0x2a>
    wait = 72000 + startval - delays;
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001780:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001784:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL);
 8001786:	bf00      	nop
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_usDelay+0x7c>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3fa      	bcc.n	8001788 <HAL_usDelay+0x48>
  else
  {
    wait = startval - delays;
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
  }
}
 8001792:	e00f      	b.n	80017b4 <HAL_usDelay+0x74>
    wait = startval - delays;
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
 800179c:	bf00      	nop
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_usDelay+0x7c>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d205      	bcs.n	80017b4 <HAL_usDelay+0x74>
 80017a8:	f000 fd44 	bl	8002234 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d0f4      	beq.n	800179e <HAL_usDelay+0x5e>
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_msDelay>:

void HAL_msDelay(uint32_t udelay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	81fb      	strh	r3, [r7, #14]
	for(i = 0;i < udelay;i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e006      	b.n	80017e0 <HAL_msDelay+0x20>
	{
		HAL_usDelay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d6:	f7ff ffb3 	bl	8001740 <HAL_usDelay>
	for(i = 0;i < udelay;i++)
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	3301      	adds	r3, #1
 80017de:	81fb      	strh	r3, [r7, #14]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f4      	bhi.n	80017d2 <HAL_msDelay+0x12>
	}
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f6:	b672      	cpsid	i
}
 80017f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fa:	e7fe      	b.n	80017fa <Error_Handler+0x8>

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <HAL_MspInit+0x5c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_MspInit+0x5c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_MspInit+0x60>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_MspInit+0x60>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 fcb3 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM1_CC_IRQHandler+0x10>)
 80018b6:	f001 fec3 	bl	8003640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000210 	.word	0x20000210

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f001 feb9 	bl	8003640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000258 	.word	0x20000258

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <_kill>:

int _kill(int pid, int sig)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f0:	f003 ffb6 	bl	8005860 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2216      	movs	r2, #22
 80018f8:	601a      	str	r2, [r3, #0]
  return -1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_exit>:

void _exit (int status)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190e:	f04f 31ff 	mov.w	r1, #4294967295
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffe7 	bl	80018e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001918:	e7fe      	b.n	8001918 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fa3a 	bl	8001de8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_isatty>:

int _isatty(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f003 ff20 	bl	8005860 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000c000 	.word	0x2000c000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	2000020c 	.word	0x2000020c
 8001a54:	20000450 	.word	0x20000450

08001a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b090      	sub	sp, #64	; 0x40
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <MX_TIM1_Init+0x138>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aa6:	2247      	movs	r2, #71	; 0x47
 8001aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aca:	4833      	ldr	r0, [pc, #204]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001acc:	f001 fb96 	bl	80031fc <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ad6:	f7ff fe8c 	bl	80017f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	482c      	ldr	r0, [pc, #176]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001ae8:	f001 ff4e 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001af2:	f7ff fe7e 	bl	80017f2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001af8:	f001 fc30 	bl	800335c <HAL_TIM_IC_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001b02:	f7ff fe76 	bl	80017f2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b06:	2304      	movs	r3, #4
 8001b08:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b0a:	2350      	movs	r3, #80	; 0x50
 8001b0c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481e      	ldr	r0, [pc, #120]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b1e:	f001 fffa 	bl	8003b16 <HAL_TIM_SlaveConfigSynchro>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b28:	f7ff fe63 	bl	80017f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b3c:	f002 fb6e 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8001b46:	f7ff fe54 	bl	80017f2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b62:	f001 fe75 	bl	8003850 <HAL_TIM_IC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001b6c:	f7ff fe41 	bl	80017f2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM1_Init+0x134>)
 8001b80:	f001 fe66 	bl	8003850 <HAL_TIM_IC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b8a:	f7ff fe32 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3740      	adds	r7, #64	; 0x40
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000210 	.word	0x20000210
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bc6:	2248      	movs	r2, #72	; 0x48
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be6:	f001 fb09 	bl	80031fc <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f7ff fdff 	bl	80017f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c02:	f001 fec1 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f7ff fdf1 	bl	80017f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c1e:	f002 fafd 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f7ff fde3 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000258 	.word	0x20000258

08001c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d12d      	bne.n	8001cb4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEART_BEAT_Pin;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c92:	2302      	movs	r3, #2
 8001c94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HEART_BEAT_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <HAL_TIM_Base_MspInit+0xc0>)
 8001c9e:	f000 fcd9 	bl	8002654 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	201b      	movs	r0, #27
 8001ca8:	f000 fba5 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cac:	201b      	movs	r0, #27
 8001cae:	f000 fbbe 	bl	800242e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cb2:	e018      	b.n	8001ce6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d113      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f000 fb8b 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce0:	201c      	movs	r0, #28
 8001ce2:	f000 fba4 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010800 	.word	0x40010800

08001cfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <MX_USART1_UART_Init+0x50>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART1_UART_Init+0x4c>)
 8001d34:	f002 faf0 	bl	8004318 <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d3e:	f7ff fd58 	bl	80017f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002a0 	.word	0x200002a0
 8001d4c:	40013800 	.word	0x40013800

08001d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_UART_MspInit+0x8c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d131      	bne.n	8001dd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_UART_MspInit+0x90>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_UART_MspInit+0x94>)
 8001db6:	f000 fc4d 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_UART_MspInit+0x94>)
 8001dd0:	f000 fc40 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010800 	.word	0x40010800

08001de8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001df0:	1d39      	adds	r1, r7, #4
 8001df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df6:	2201      	movs	r2, #1
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <__io_putchar+0x20>)
 8001dfa:	f002 fadd 	bl	80043b8 <HAL_UART_Transmit>
	return ch;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002a0 	.word	0x200002a0

08001e0c <Reset_Handler>:
 8001e0c:	f7ff fe24 	bl	8001a58 <SystemInit>
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0xe>)
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <LoopFillZerobss+0x12>)
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LoopFillZerobss+0x16>)
 8001e16:	2300      	movs	r3, #0
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:
 8001e1a:	58d4      	ldr	r4, [r2, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:
 8001e20:	18c4      	adds	r4, r0, r3
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <LoopFillZerobss+0x1a>)
 8001e28:	4c09      	ldr	r4, [pc, #36]	; (8001e50 <LoopFillZerobss+0x1e>)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:
 8001e32:	42a2      	cmp	r2, r4
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>
 8001e36:	f003 fd19 	bl	800586c <__libc_init_array>
 8001e3a:	f7ff fabd 	bl	80013b8 <main>
 8001e3e:	4770      	bx	lr
 8001e40:	20000000 	.word	0x20000000
 8001e44:	200001d8 	.word	0x200001d8
 8001e48:	08009360 	.word	0x08009360
 8001e4c:	200001d8 	.word	0x200001d8
 8001e50:	20000450 	.word	0x20000450

08001e54 <ADC1_2_IRQHandler>:
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <SelectLedLight>:
#include "led.h"



void SelectLedLight(unsigned char signal,unsigned char color,unsigned char state)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
 8001e62:	460b      	mov	r3, r1
 8001e64:	71bb      	strb	r3, [r7, #6]
 8001e66:	4613      	mov	r3, r2
 8001e68:	717b      	strb	r3, [r7, #5]
	if(state)
 8001e6a:	797b      	ldrb	r3, [r7, #5]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <SelectLedLight+0x1e>
		state = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	717b      	strb	r3, [r7, #5]
 8001e74:	e001      	b.n	8001e7a <SelectLedLight+0x22>
	else
		state = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	717b      	strb	r3, [r7, #5]
	switch(signal)
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 8098 	bhi.w	8001fb4 <SelectLedLight+0x15c>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <SelectLedLight+0x34>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001edd 	.word	0x08001edd
 8001e94:	08001f1d 	.word	0x08001f1d
 8001e98:	08001f61 	.word	0x08001f61
	{
	case CalibrateLed:
		switch(color)
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d014      	beq.n	8001ecc <SelectLedLight+0x74>
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	dc7f      	bgt.n	8001fa6 <SelectLedLight+0x14e>
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <SelectLedLight+0x58>
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d007      	beq.n	8001ebe <SelectLedLight+0x66>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOA, Calibration_BLUE_Pin, state);
			break;
		}
		break;
 8001eae:	e07a      	b.n	8001fa6 <SelectLedLight+0x14e>
			HAL_GPIO_WritePin(GPIOA, Calibration_RED_Pin, state);
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4841      	ldr	r0, [pc, #260]	; (8001fbc <SelectLedLight+0x164>)
 8001eb8:	f000 fd77 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001ebc:	e00d      	b.n	8001eda <SelectLedLight+0x82>
			HAL_GPIO_WritePin(GPIOA, Calibration_GREEN_Pin, state);
 8001ebe:	797b      	ldrb	r3, [r7, #5]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	483d      	ldr	r0, [pc, #244]	; (8001fbc <SelectLedLight+0x164>)
 8001ec6:	f000 fd70 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001eca:	e006      	b.n	8001eda <SelectLedLight+0x82>
			HAL_GPIO_WritePin(GPIOA, Calibration_BLUE_Pin, state);
 8001ecc:	797b      	ldrb	r3, [r7, #5]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <SelectLedLight+0x164>)
 8001ed4:	f000 fd69 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001ed8:	bf00      	nop
		break;
 8001eda:	e064      	b.n	8001fa6 <SelectLedLight+0x14e>
	case HeartLed:
		switch(color)
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d014      	beq.n	8001f0c <SelectLedLight+0xb4>
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	dc61      	bgt.n	8001faa <SelectLedLight+0x152>
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <SelectLedLight+0x98>
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d007      	beq.n	8001efe <SelectLedLight+0xa6>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOC, HEART_BLUE_Pin, state);
			break;
		}
		break;
 8001eee:	e05c      	b.n	8001faa <SelectLedLight+0x152>
			HAL_GPIO_WritePin(GPIOA, HEART_RED_Pin, state);
 8001ef0:	797b      	ldrb	r3, [r7, #5]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <SelectLedLight+0x164>)
 8001ef8:	f000 fd57 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001efc:	e00d      	b.n	8001f1a <SelectLedLight+0xc2>
			HAL_GPIO_WritePin(GPIOA, HEART_GREEN_Pin, state);
 8001efe:	797b      	ldrb	r3, [r7, #5]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	482d      	ldr	r0, [pc, #180]	; (8001fbc <SelectLedLight+0x164>)
 8001f06:	f000 fd50 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001f0a:	e006      	b.n	8001f1a <SelectLedLight+0xc2>
			HAL_GPIO_WritePin(GPIOC, HEART_BLUE_Pin, state);
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2110      	movs	r1, #16
 8001f12:	482b      	ldr	r0, [pc, #172]	; (8001fc0 <SelectLedLight+0x168>)
 8001f14:	f000 fd49 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001f18:	bf00      	nop
		break;
 8001f1a:	e046      	b.n	8001faa <SelectLedLight+0x152>
	case TripLed:
		switch(color)
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d015      	beq.n	8001f4e <SelectLedLight+0xf6>
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	dc43      	bgt.n	8001fae <SelectLedLight+0x156>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <SelectLedLight+0xd8>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d007      	beq.n	8001f3e <SelectLedLight+0xe6>
			break;
		case Blue:
			HAL_GPIO_WritePin(GPIOB, TRIP_BLUE_Pin, state);
			break;
		}
		break;
 8001f2e:	e03e      	b.n	8001fae <SelectLedLight+0x156>
			HAL_GPIO_WritePin(GPIOB, TRIP_RED_Pin, state);
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	461a      	mov	r2, r3
 8001f34:	2104      	movs	r1, #4
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f38:	f000 fd37 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001f3c:	e00f      	b.n	8001f5e <SelectLedLight+0x106>
			HAL_GPIO_WritePin(GPIOB, TRIP_GREEN_Pin, state);
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f48:	f000 fd2f 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001f4c:	e007      	b.n	8001f5e <SelectLedLight+0x106>
			HAL_GPIO_WritePin(GPIOB, TRIP_BLUE_Pin, state);
 8001f4e:	797b      	ldrb	r3, [r7, #5]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f56:	481b      	ldr	r0, [pc, #108]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f58:	f000 fd27 	bl	80029aa <HAL_GPIO_WritePin>
			break;
 8001f5c:	bf00      	nop
		break;
 8001f5e:	e026      	b.n	8001fae <SelectLedLight+0x156>
	case TestLed:
			switch(color)
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d016      	beq.n	8001f94 <SelectLedLight+0x13c>
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	dc23      	bgt.n	8001fb2 <SelectLedLight+0x15a>
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d002      	beq.n	8001f74 <SelectLedLight+0x11c>
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d008      	beq.n	8001f84 <SelectLedLight+0x12c>
				break;
			case Blue:
				HAL_GPIO_WritePin(GPIOB, TEST_IN_BLUE_Pin, state);
				break;
			}
			break;
 8001f72:	e01e      	b.n	8001fb2 <SelectLedLight+0x15a>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_RED_Pin, state);
 8001f74:	797b      	ldrb	r3, [r7, #5]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f7e:	f000 fd14 	bl	80029aa <HAL_GPIO_WritePin>
				break;
 8001f82:	e00f      	b.n	8001fa4 <SelectLedLight+0x14c>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_GREEN_Pin, state);
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f8e:	f000 fd0c 	bl	80029aa <HAL_GPIO_WritePin>
				break;
 8001f92:	e007      	b.n	8001fa4 <SelectLedLight+0x14c>
				HAL_GPIO_WritePin(GPIOB, TEST_IN_BLUE_Pin, state);
 8001f94:	797b      	ldrb	r3, [r7, #5]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <SelectLedLight+0x16c>)
 8001f9e:	f000 fd04 	bl	80029aa <HAL_GPIO_WritePin>
				break;
 8001fa2:	bf00      	nop
			break;
 8001fa4:	e005      	b.n	8001fb2 <SelectLedLight+0x15a>
		break;
 8001fa6:	bf00      	nop
 8001fa8:	e004      	b.n	8001fb4 <SelectLedLight+0x15c>
		break;
 8001faa:	bf00      	nop
 8001fac:	e002      	b.n	8001fb4 <SelectLedLight+0x15c>
		break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <SelectLedLight+0x15c>
			break;
 8001fb2:	bf00      	nop
	}

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <HAL_TIM_IC_CaptureCallback>:
unsigned char end_flag = 0;
unsigned char trip_flag = 0;
unsigned int trip_time = 0;
/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

/*判断中断来源*/
	if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7f1b      	ldrb	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d148      	bne.n	800206a <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Cap_val1=HAL_TIM_ReadCapturedValue (&htim1 ,TIM_CHANNEL_1 );
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4826      	ldr	r0, [pc, #152]	; (8002074 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001fdc:	f001 fdde 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001fe4:	6013      	str	r3, [r2, #0]

		if(Cap_val1!=0)
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d035      	beq.n	800205a <HAL_TIM_IC_CaptureCallback+0x92>
		{
			Cap_val2=HAL_TIM_ReadCapturedValue (&htim1 ,TIM_CHANNEL_2 );
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ff2:	f001 fdd3 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001ffa:	6013      	str	r3, [r2, #0]
			Frequency=(float)(72000000 / 72)/(Cap_val1+1);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fed2 	bl	8000dac <__aeabi_ui2f>
 8002008:	4603      	mov	r3, r0
 800200a:	4619      	mov	r1, r3
 800200c:	481c      	ldr	r0, [pc, #112]	; (8002080 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800200e:	f7fe ffd9 	bl	8000fc4 <__aeabi_fdiv>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002018:	601a      	str	r2, [r3, #0]
			Duty=(float)(Cap_val2+1)*100/(Cap_val1+1);
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fec3 	bl	8000dac <__aeabi_ui2f>
 8002026:	4603      	mov	r3, r0
 8002028:	4917      	ldr	r1, [pc, #92]	; (8002088 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff16 	bl	8000e5c <__aeabi_fmul>
 8002030:	4603      	mov	r3, r0
 8002032:	461c      	mov	r4, r3
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe feb6 	bl	8000dac <__aeabi_ui2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe ffbd 	bl	8000fc4 <__aeabi_fdiv>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002050:	601a      	str	r2, [r3, #0]
			end_flag=1;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
		{
			Frequency=0;
			Duty=0;
		}
	}
}
 8002058:	e007      	b.n	800206a <HAL_TIM_IC_CaptureCallback+0xa2>
			Frequency=0;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
			Duty=0;
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000210 	.word	0x20000210
 8002078:	200002e8 	.word	0x200002e8
 800207c:	200002ec 	.word	0x200002ec
 8002080:	49742400 	.word	0x49742400
 8002084:	200002f0 	.word	0x200002f0
 8002088:	42c80000 	.word	0x42c80000
 800208c:	200002f4 	.word	0x200002f4
 8002090:	200002f8 	.word	0x200002f8

08002094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //10mm
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	static unsigned char delay_tim = 10;
	if(htim == &htim2  && work_normol)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d14b      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0xa8>
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d047      	beq.n	800213c <HAL_TIM_PeriodElapsedCallback+0xa8>
	{
		if(HAL_GPIO_ReadPin(GPIOA, TRIP_INPUT_Pin) == 1)		//Trip信�?�
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	482f      	ldr	r0, [pc, #188]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80020b2:	f000 fc63 	bl	800297c <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			trip_time++;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020c4:	6013      	str	r3, [r2, #0]
			trip_flag = 1;
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
//		{
//			Frequency=0;
//			Duty=0;
//		}

		if(trip_time > 0)
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			SelectLedLight(TripLed,Red,0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	2003      	movs	r0, #3
 80020da:	f7ff febd 	bl	8001e58 <SelectLedLight>
//			SelectLedLight(TripLed,Green,0);
			SelectLedLight(TripLed,Blue,0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2103      	movs	r1, #3
 80020e2:	2003      	movs	r0, #3
 80020e4:	f7ff feb8 	bl	8001e58 <SelectLedLight>
			delay_tim--;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80020f2:	701a      	strb	r2, [r3, #0]
			if(delay_tim == 0)
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_TIM_PeriodElapsedCallback+0x78>
			{
				SelectLedLight(TripLed,Green,1);
 80020fc:	2201      	movs	r2, #1
 80020fe:	2102      	movs	r1, #2
 8002100:	2003      	movs	r0, #3
 8002102:	f7ff fea9 	bl	8001e58 <SelectLedLight>
				delay_tim = 5;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002108:	2205      	movs	r2, #5
 800210a:	701a      	strb	r2, [r3, #0]
			}

			if(test_in_flag == 1)
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d123      	bne.n	800215c <HAL_TIM_PeriodElapsedCallback+0xc8>
				test_in_flag = 2;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
		if(trip_time > 0)
 800211a:	e01f      	b.n	800215c <HAL_TIM_PeriodElapsedCallback+0xc8>
		}

		else
		{
			SelectLedLight(TripLed,Red,0);
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	2003      	movs	r0, #3
 8002122:	f7ff fe99 	bl	8001e58 <SelectLedLight>
			SelectLedLight(TripLed,Green,0);
 8002126:	2200      	movs	r2, #0
 8002128:	2102      	movs	r1, #2
 800212a:	2003      	movs	r0, #3
 800212c:	f7ff fe94 	bl	8001e58 <SelectLedLight>
			SelectLedLight(TripLed,Blue,0);
 8002130:	2200      	movs	r2, #0
 8002132:	2103      	movs	r1, #3
 8002134:	2003      	movs	r0, #3
 8002136:	f7ff fe8f 	bl	8001e58 <SelectLedLight>
		if(trip_time > 0)
 800213a:	e00f      	b.n	800215c <HAL_TIM_PeriodElapsedCallback+0xc8>
//			test_in_flag = 2;
//		}
	}
	else
	{
		SelectLedLight(TripLed,Red,0);
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	2003      	movs	r0, #3
 8002142:	f7ff fe89 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Green,0);
 8002146:	2200      	movs	r2, #0
 8002148:	2102      	movs	r1, #2
 800214a:	2003      	movs	r0, #3
 800214c:	f7ff fe84 	bl	8001e58 <SelectLedLight>
		SelectLedLight(TripLed,Blue,0);
 8002150:	2200      	movs	r2, #0
 8002152:	2103      	movs	r1, #3
 8002154:	2003      	movs	r0, #3
 8002156:	f7ff fe7f 	bl	8001e58 <SelectLedLight>
	}
}
 800215a:	e000      	b.n	800215e <HAL_TIM_PeriodElapsedCallback+0xca>
		if(trip_time > 0)
 800215c:	bf00      	nop
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000258 	.word	0x20000258
 800216c:	20000209 	.word	0x20000209
 8002170:	40010800 	.word	0x40010800
 8002174:	200002fc 	.word	0x200002fc
 8002178:	200002f9 	.word	0x200002f9
 800217c:	20000004 	.word	0x20000004
 8002180:	20000208 	.word	0x20000208

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_Init+0x28>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x28>)
 800218e:	f043 0310 	orr.w	r3, r3, #16
 8002192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f923 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	200f      	movs	r0, #15
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fb2c 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f93b 	bl	800244a <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 f903 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000000 	.word	0x20000000
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000008 	.word	0x20000008

08002210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_IncTick+0x1c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x20>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_IncTick+0x20>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000300 	.word	0x20000300

08002234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_GetTick+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000300 	.word	0x20000300

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff90 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff2d 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff42 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff90 	bl	8002338 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5f 	bl	80022e4 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e014      	b.n	800249e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe fec1 	bl	800120c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e046      	b.n	8002548 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	795b      	ldrb	r3, [r3, #5]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_DAC_Start+0x20>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e040      	b.n	8002548 <HAL_DAC_Start+0xa2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2201      	movs	r2, #1
 80024e0:	409a      	lsls	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80024fa:	2b3c      	cmp	r3, #60	; 0x3c
 80024fc:	d11d      	bne.n	800253a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e014      	b.n	800253a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	213c      	movs	r1, #60	; 0x3c
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	429a      	cmp	r2, r3
 8002528:	d107      	bne.n	800253a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0202 	orr.w	r2, r2, #2
 8002538:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e015      	b.n	800259a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3308      	adds	r3, #8
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e004      	b.n	8002590 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3314      	adds	r3, #20
 800258e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_DAC_ConfigChannel+0x1c>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e042      	b.n	800264a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_DAC_ConfigChannel+0x2c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e03c      	b.n	800264a <HAL_DAC_ConfigChannel+0xa6>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	22c0      	movs	r2, #192	; 0xc0
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	; 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e179      	b.n	800295c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8168 	bne.w	8002956 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a96      	ldr	r2, [pc, #600]	; (80028e4 <HAL_GPIO_Init+0x290>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 8002690:	4a94      	ldr	r2, [pc, #592]	; (80028e4 <HAL_GPIO_Init+0x290>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d875      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 8002696:	4a94      	ldr	r2, [pc, #592]	; (80028e8 <HAL_GPIO_Init+0x294>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d058      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 800269c:	4a92      	ldr	r2, [pc, #584]	; (80028e8 <HAL_GPIO_Init+0x294>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d86f      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026a2:	4a92      	ldr	r2, [pc, #584]	; (80028ec <HAL_GPIO_Init+0x298>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d052      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026a8:	4a90      	ldr	r2, [pc, #576]	; (80028ec <HAL_GPIO_Init+0x298>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ae:	4a90      	ldr	r2, [pc, #576]	; (80028f0 <HAL_GPIO_Init+0x29c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04c      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026b4:	4a8e      	ldr	r2, [pc, #568]	; (80028f0 <HAL_GPIO_Init+0x29c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d863      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ba:	4a8e      	ldr	r2, [pc, #568]	; (80028f4 <HAL_GPIO_Init+0x2a0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d046      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026c0:	4a8c      	ldr	r2, [pc, #560]	; (80028f4 <HAL_GPIO_Init+0x2a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d85d      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d82a      	bhi.n	8002720 <HAL_GPIO_Init+0xcc>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d859      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_GPIO_Init+0x80>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002729 	.word	0x08002729
 80026dc:	0800273b 	.word	0x0800273b
 80026e0:	0800277d 	.word	0x0800277d
 80026e4:	08002783 	.word	0x08002783
 80026e8:	08002783 	.word	0x08002783
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002783 	.word	0x08002783
 80026f4:	08002783 	.word	0x08002783
 80026f8:	08002783 	.word	0x08002783
 80026fc:	08002783 	.word	0x08002783
 8002700:	08002783 	.word	0x08002783
 8002704:	08002783 	.word	0x08002783
 8002708:	08002783 	.word	0x08002783
 800270c:	08002783 	.word	0x08002783
 8002710:	08002783 	.word	0x08002783
 8002714:	08002783 	.word	0x08002783
 8002718:	08002731 	.word	0x08002731
 800271c:	08002745 	.word	0x08002745
 8002720:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <HAL_GPIO_Init+0x2a4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002726:	e02c      	b.n	8002782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e029      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e024      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3308      	adds	r3, #8
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e01f      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	330c      	adds	r3, #12
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e01a      	b.n	8002784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002756:	2304      	movs	r3, #4
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e013      	b.n	8002784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	611a      	str	r2, [r3, #16]
          break;
 800276e:	e009      	b.n	8002784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]
          break;
 800277a:	e003      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x130>
          break;
 8002782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d801      	bhi.n	800278e <HAL_GPIO_Init+0x13a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_Init+0x13e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d802      	bhi.n	80027a0 <HAL_GPIO_Init+0x14c>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x152>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	210f      	movs	r1, #15
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80c1 	beq.w	8002956 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d4:	4b49      	ldr	r3, [pc, #292]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ec:	4a44      	ldr	r2, [pc, #272]	; (8002900 <HAL_GPIO_Init+0x2ac>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d01f      	beq.n	8002858 <HAL_GPIO_Init+0x204>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <HAL_GPIO_Init+0x2b4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d019      	beq.n	8002854 <HAL_GPIO_Init+0x200>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_GPIO_Init+0x2b8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_GPIO_Init+0x1fc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a39      	ldr	r2, [pc, #228]	; (8002910 <HAL_GPIO_Init+0x2bc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00d      	beq.n	800284c <HAL_GPIO_Init+0x1f8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x1f4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_GPIO_Init+0x2c4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_GPIO_Init+0x1f0>
 8002840:	2305      	movs	r3, #5
 8002842:	e00a      	b.n	800285a <HAL_GPIO_Init+0x206>
 8002844:	2306      	movs	r3, #6
 8002846:	e008      	b.n	800285a <HAL_GPIO_Init+0x206>
 8002848:	2304      	movs	r3, #4
 800284a:	e006      	b.n	800285a <HAL_GPIO_Init+0x206>
 800284c:	2303      	movs	r3, #3
 800284e:	e004      	b.n	800285a <HAL_GPIO_Init+0x206>
 8002850:	2302      	movs	r3, #2
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0x206>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_GPIO_Init+0x206>
 8002858:	2300      	movs	r3, #0
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	4093      	lsls	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800286a:	4925      	ldr	r1, [pc, #148]	; (8002900 <HAL_GPIO_Init+0x2ac>)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_GPIO_Init+0x2c8>)
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4924      	ldr	r1, [pc, #144]	; (800291c <HAL_GPIO_Init+0x2c8>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_GPIO_Init+0x2c8>)
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	43db      	mvns	r3, r3
 800289a:	4920      	ldr	r1, [pc, #128]	; (800291c <HAL_GPIO_Init+0x2c8>)
 800289c:	4013      	ands	r3, r2
 800289e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	491a      	ldr	r1, [pc, #104]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4916      	ldr	r1, [pc, #88]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d025      	beq.n	8002920 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4910      	ldr	r1, [pc, #64]	; (800291c <HAL_GPIO_Init+0x2c8>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e025      	b.n	800292e <HAL_GPIO_Init+0x2da>
 80028e2:	bf00      	nop
 80028e4:	10320000 	.word	0x10320000
 80028e8:	10310000 	.word	0x10310000
 80028ec:	10220000 	.word	0x10220000
 80028f0:	10210000 	.word	0x10210000
 80028f4:	10120000 	.word	0x10120000
 80028f8:	10110000 	.word	0x10110000
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000
 8002904:	40010800 	.word	0x40010800
 8002908:	40010c00 	.word	0x40010c00
 800290c:	40011000 	.word	0x40011000
 8002910:	40011400 	.word	0x40011400
 8002914:	40011800 	.word	0x40011800
 8002918:	40011c00 	.word	0x40011c00
 800291c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	43db      	mvns	r3, r3
 8002928:	4913      	ldr	r1, [pc, #76]	; (8002978 <HAL_GPIO_Init+0x324>)
 800292a:	4013      	ands	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_GPIO_Init+0x324>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	490e      	ldr	r1, [pc, #56]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
 8002946:	e006      	b.n	8002956 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_GPIO_Init+0x324>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	43db      	mvns	r3, r3
 8002950:	4909      	ldr	r1, [pc, #36]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002952:	4013      	ands	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae7e 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	372c      	adds	r7, #44	; 0x2c
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	807b      	strh	r3, [r7, #2]
 80029b6:	4613      	mov	r3, r2
 80029b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ba:	787b      	ldrb	r3, [r7, #1]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c0:	887a      	ldrh	r2, [r7, #2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029c6:	e003      	b.n	80029d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	041a      	lsls	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e272      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8087 	beq.w	8002b0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029fc:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a08:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
 8002a14:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x12c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d168      	bne.n	8002b08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e24c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x76>
 8002a44:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7f      	ldr	r2, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x98>
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7a      	ldr	r2, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b78      	ldr	r3, [pc, #480]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a77      	ldr	r2, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0xbc>
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a71      	ldr	r2, [pc, #452]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a98:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7ff fbbc 	bl	8002234 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7ff fbb8 	bl	8002234 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e200      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe4>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fba8 	bl	8002234 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff fba4 	bl	8002234 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1ec      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x10c>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1c0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4939      	ldr	r1, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7ff fb5d 	bl	8002234 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7ff fb59 	bl	8002234 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1a1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4927      	ldr	r1, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fb3c 	bl	8002234 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7ff fb38 	bl	8002234 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e180      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03a      	beq.n	8002c60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d019      	beq.n	8002c26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7ff fb1c 	bl	8002234 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff fb18 	bl	8002234 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e160      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f000 face 	bl	80031c0 <RCC_Delay>
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff fb02 	bl	8002234 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff fafe 	bl	8002234 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d908      	bls.n	8002c54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e146      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	42420000 	.word	0x42420000
 8002c50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e9      	bne.n	8002c34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a6 	beq.w	8002dba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	61d3      	str	r3, [r2, #28]
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b82      	ldr	r3, [pc, #520]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7ff fabf 	bl	8002234 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7ff fabb 	bl	8002234 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e103      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x312>
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e02d      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x334>
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a66      	ldr	r2, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	e01c      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCC_OscConfig+0x356>
 8002d18:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	e00b      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a5a      	ldr	r2, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d015      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7ff fa6f 	bl	8002234 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7ff fa6b 	bl	8002234 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0b1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ee      	beq.n	8002d5a <HAL_RCC_OscConfig+0x37e>
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff fa59 	bl	8002234 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7ff fa55 	bl	8002234 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e09b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dae:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8087 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d061      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d146      	bne.n	8002e66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7ff fa29 	bl	8002234 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7ff fa25 	bl	8002234 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e06d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a19      	ldr	r1, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	430b      	orrs	r3, r1
 8002e32:	491b      	ldr	r1, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7ff f9f9 	bl	8002234 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7ff f9f5 	bl	8002234 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46a>
 8002e64:	e035      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7ff f9e2 	bl	8002234 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7ff f9de 	bl	8002234 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e026      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x498>
 8002e92:	e01e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e019      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x500>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d0      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4965      	ldr	r1, [pc, #404]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d040      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d115      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e073      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4936      	ldr	r1, [pc, #216]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7ff f930 	bl	8002234 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7ff f92c 	bl	8002234 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e053      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1cc>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f88e 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08008f00 	.word	0x08008f00
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000008 	.word	0x20000008

080030b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x30>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x36>
 80030e2:	e027      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	613b      	str	r3, [r7, #16]
      break;
 80030e8:	e027      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	4a17      	ldr	r2, [pc, #92]	; (8003150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_GetSysClockFreq+0x94>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c5b      	lsrs	r3, r3, #17
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_RCC_GetSysClockFreq+0xa0>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 8003116:	fb03 f202 	mul.w	r2, r3, r2
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e004      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0c      	ldr	r2, [pc, #48]	; (8003158 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 8003136:	613b      	str	r3, [r7, #16]
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	693b      	ldr	r3, [r7, #16]
}
 800313c:	4618      	mov	r0, r3
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	007a1200 	.word	0x007a1200
 8003150:	08008f18 	.word	0x08008f18
 8003154:	08008f28 	.word	0x08008f28
 8003158:	003d0900 	.word	0x003d0900

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <HAL_RCC_GetHCLKFreq+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff2 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	08008f10 	.word	0x08008f10

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800319c:	f7ff ffde 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0adb      	lsrs	r3, r3, #11
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08008f10 	.word	0x08008f10

080031c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <RCC_Delay+0x34>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <RCC_Delay+0x38>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031dc:	bf00      	nop
  }
  while (Delay --);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <RCC_Delay+0x1c>
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000000 	.word	0x20000000
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e041      	b.n	8003292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe fd08 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 fd0e 	bl	8003c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d001      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e044      	b.n	800333e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_TIM_Base_Start_IT+0xac>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_TIM_Base_Start_IT+0xb0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_TIM_Base_Start_IT+0xb4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_TIM_Base_Start_IT+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_TIM_Base_Start_IT+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d010      	beq.n	800333c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	e007      	b.n	800333c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40013400 	.word	0x40013400
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00

0800335c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e041      	b.n	80033f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f839 	bl	80033fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f000 fc5e 	bl	8003c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_TIM_IC_Start_IT+0x1e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e013      	b.n	8003452 <HAL_TIM_IC_Start_IT+0x46>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d104      	bne.n	800343a <HAL_TIM_IC_Start_IT+0x2e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e00b      	b.n	8003452 <HAL_TIM_IC_Start_IT+0x46>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Start_IT+0x3e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e003      	b.n	8003452 <HAL_TIM_IC_Start_IT+0x46>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_TIM_IC_Start_IT+0x58>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e013      	b.n	800348c <HAL_TIM_IC_Start_IT+0x80>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d104      	bne.n	8003474 <HAL_TIM_IC_Start_IT+0x68>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e00b      	b.n	800348c <HAL_TIM_IC_Start_IT+0x80>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d104      	bne.n	8003484 <HAL_TIM_IC_Start_IT+0x78>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e003      	b.n	800348c <HAL_TIM_IC_Start_IT+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348a:	b2db      	uxtb	r3, r3
 800348c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003494:	7b7b      	ldrb	r3, [r7, #13]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0c2      	b.n	8003624 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_IC_Start_IT+0xa2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	e013      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0xca>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d104      	bne.n	80034be <HAL_TIM_IC_Start_IT+0xb2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034bc:	e00b      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0xca>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_IC_Start_IT+0xc2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	e003      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0xca>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_IC_Start_IT+0xda>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e4:	e013      	b.n	800350e <HAL_TIM_IC_Start_IT+0x102>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_IC_Start_IT+0xea>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f4:	e00b      	b.n	800350e <HAL_TIM_IC_Start_IT+0x102>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_IC_Start_IT+0xfa>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003504:	e003      	b.n	800350e <HAL_TIM_IC_Start_IT+0x102>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d841      	bhi.n	8003598 <HAL_TIM_IC_Start_IT+0x18c>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_TIM_IC_Start_IT+0x110>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003551 	.word	0x08003551
 8003520:	08003599 	.word	0x08003599
 8003524:	08003599 	.word	0x08003599
 8003528:	08003599 	.word	0x08003599
 800352c:	08003563 	.word	0x08003563
 8003530:	08003599 	.word	0x08003599
 8003534:	08003599 	.word	0x08003599
 8003538:	08003599 	.word	0x08003599
 800353c:	08003575 	.word	0x08003575
 8003540:	08003599 	.word	0x08003599
 8003544:	08003599 	.word	0x08003599
 8003548:	08003599 	.word	0x08003599
 800354c:	08003587 	.word	0x08003587
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0202 	orr.w	r2, r2, #2
 800355e:	60da      	str	r2, [r3, #12]
      break;
 8003560:	e01d      	b.n	800359e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0204 	orr.w	r2, r2, #4
 8003570:	60da      	str	r2, [r3, #12]
      break;
 8003572:	e014      	b.n	800359e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	60da      	str	r2, [r3, #12]
      break;
 8003584:	e00b      	b.n	800359e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0210 	orr.w	r2, r2, #16
 8003594:	60da      	str	r2, [r3, #12]
      break;
 8003596:	e002      	b.n	800359e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	bf00      	nop
  }

  if (status == HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d13e      	bne.n	8003622 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	6839      	ldr	r1, [r7, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fe10 	bl	80041d2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_TIM_IC_Start_IT+0x220>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_TIM_IC_Start_IT+0x1e2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIM_IC_Start_IT+0x224>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIM_IC_Start_IT+0x1e2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d00e      	beq.n	80035ee <HAL_TIM_IC_Start_IT+0x1e2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <HAL_TIM_IC_Start_IT+0x228>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIM_IC_Start_IT+0x1e2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <HAL_TIM_IC_Start_IT+0x22c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_IC_Start_IT+0x1e2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <HAL_TIM_IC_Start_IT+0x230>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d010      	beq.n	8003622 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	e007      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00

08003640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0202 	mvn.w	r2, #2
 800366c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fca0 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 faca 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fad0 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0204 	mvn.w	r2, #4
 80036c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe fc76 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 faa0 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 faa6 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0208 	mvn.w	r2, #8
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2204      	movs	r2, #4
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fc4c 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa76 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fa7c 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b10      	cmp	r3, #16
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0210 	mvn.w	r2, #16
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2208      	movs	r2, #8
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fc22 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa4c 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa52 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10e      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0201 	mvn.w	r2, #1
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fc68 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d107      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fd8b 	bl	8004306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa16 	bl	8003c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b20      	cmp	r3, #32
 8003828:	d10e      	bne.n	8003848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b20      	cmp	r3, #32
 8003836:	d107      	bne.n	8003848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0220 	mvn.w	r2, #32
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fd56 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_TIM_IC_ConfigChannel+0x1e>
 800386a:	2302      	movs	r3, #2
 800386c:	e088      	b.n	8003980 <HAL_TIM_IC_ConfigChannel+0x130>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800388c:	f000 faf2 	bl	8003e74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 020c 	bic.w	r2, r2, #12
 800389e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6999      	ldr	r1, [r3, #24]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
 80038b2:	e060      	b.n	8003976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d11c      	bne.n	80038f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80038ca:	f000 fb67 	bl	8003f9c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
 80038f2:	e040      	b.n	8003976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11b      	bne.n	8003932 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800390a:	f000 fbb2 	bl	8004072 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 020c 	bic.w	r2, r2, #12
 800391c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	61da      	str	r2, [r3, #28]
 8003930:	e021      	b.n	8003976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d11c      	bne.n	8003972 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003948:	f000 fbce 	bl	80040e8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800395a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69d9      	ldr	r1, [r3, #28]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
 8003970:	e001      	b.n	8003976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x1c>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0b4      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x186>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d03e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xd4>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e2:	f200 8087 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ea:	f000 8086 	beq.w	8003afa <HAL_TIM_ConfigClockSource+0x172>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d87f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d01a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xa6>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d87b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d050      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d877      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d03c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xfa>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d873      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d058      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d86f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d064      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d86b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d060      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d867      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05c      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d05a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	e062      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	f000 fba9 	bl	8004194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      break;
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6c:	f000 fb92 	bl	8004194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fa56 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2150      	movs	r1, #80	; 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb60 	bl	8004160 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e02c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fab0 	bl	8004014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2160      	movs	r1, #96	; 0x60
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb50 	bl	8004160 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e01c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa36 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fb40 	bl	8004160 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fb37 	bl	8004160 <TIM_ITRx_SetConfig>
      break;
 8003af2:	e003      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e031      	b.n	8003b92 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f905 	bl	8003d50 <TIM_SlaveTimer_SetConfig>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e018      	b.n	8003b92 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d831      	bhi.n	8003c14 <HAL_TIM_ReadCapturedValue+0x78>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	60fb      	str	r3, [r7, #12]

      break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	60fb      	str	r3, [r7, #12]

      break;
 8003bfe:	e00a      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	60fb      	str	r3, [r7, #12]

      break;
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	60fb      	str	r3, [r7, #12]

      break;
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c14:	bf00      	nop
  }

  return tmpreg;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
	...

08003c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a33      	ldr	r2, [pc, #204]	; (8003d3c <TIM_Base_SetConfig+0xe0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a32      	ldr	r2, [pc, #200]	; (8003d40 <TIM_Base_SetConfig+0xe4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00f      	beq.n	8003c9c <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a2f      	ldr	r2, [pc, #188]	; (8003d44 <TIM_Base_SetConfig+0xe8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <TIM_Base_SetConfig+0xec>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <TIM_Base_SetConfig+0xf0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <TIM_Base_SetConfig+0xe0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0x82>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <TIM_Base_SetConfig+0xe4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <TIM_Base_SetConfig+0xe8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0x82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <TIM_Base_SetConfig+0xec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0x82>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <TIM_Base_SetConfig+0xf0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <TIM_Base_SetConfig+0xe0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xc8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <TIM_Base_SetConfig+0xe4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40013400 	.word	0x40013400
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00

08003d50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b70      	cmp	r3, #112	; 0x70
 8003d98:	d01a      	beq.n	8003dd0 <TIM_SlaveTimer_SetConfig+0x80>
 8003d9a:	2b70      	cmp	r3, #112	; 0x70
 8003d9c:	d860      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003d9e:	2b60      	cmp	r3, #96	; 0x60
 8003da0:	d054      	beq.n	8003e4c <TIM_SlaveTimer_SetConfig+0xfc>
 8003da2:	2b60      	cmp	r3, #96	; 0x60
 8003da4:	d85c      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003da6:	2b50      	cmp	r3, #80	; 0x50
 8003da8:	d046      	beq.n	8003e38 <TIM_SlaveTimer_SetConfig+0xe8>
 8003daa:	2b50      	cmp	r3, #80	; 0x50
 8003dac:	d858      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d019      	beq.n	8003de6 <TIM_SlaveTimer_SetConfig+0x96>
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d854      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003db6:	2b30      	cmp	r3, #48	; 0x30
 8003db8:	d055      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x116>
 8003dba:	2b30      	cmp	r3, #48	; 0x30
 8003dbc:	d850      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d051      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x116>
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d84c      	bhi.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04d      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x116>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d04b      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x116>
 8003dce:	e047      	b.n	8003e60 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	f000 f9d8 	bl	8004194 <TIM_ETR_SetConfig>
      break;
 8003de4:	e040      	b.n	8003e68 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d101      	bne.n	8003df2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e03b      	b.n	8003e6a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	621a      	str	r2, [r3, #32]
      break;
 8003e36:	e017      	b.n	8003e68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 f87b 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      break;
 8003e4a:	e00d      	b.n	8003e68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f000 f8db 	bl	8004014 <TIM_TI2_ConfigInputStage>
      break;
 8003e5e:	e003      	b.n	8003e68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
      break;
 8003e64:	e000      	b.n	8003e68 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e66:	bf00      	nop
  }

  return status;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 0201 	bic.w	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <TIM_TI1_SetConfig+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_TI1_SetConfig+0x56>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <TIM_TI1_SetConfig+0xbc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_TI1_SetConfig+0x56>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d00b      	beq.n	8003eca <TIM_TI1_SetConfig+0x56>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <TIM_TI1_SetConfig+0xc0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_TI1_SetConfig+0x56>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <TIM_TI1_SetConfig+0xc4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_TI1_SetConfig+0x56>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <TIM_TI1_SetConfig+0xc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <TIM_TI1_SetConfig+0x5a>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <TIM_TI1_SetConfig+0x5c>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e003      	b.n	8003eee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f023 030a 	bic.w	r3, r3, #10
 8003f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 030a 	and.w	r3, r3, #10
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00

08003f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 030a 	bic.w	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0210 	bic.w	r2, r3, #16
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	031b      	lsls	r3, r3, #12
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004126:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	031b      	lsls	r3, r3, #12
 800412c:	b29b      	uxth	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	f043 0307 	orr.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	021a      	lsls	r2, r3, #8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2201      	movs	r2, #1
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	401a      	ands	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
	...

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e050      	b.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d00e      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10c      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40013400 	.word	0x40013400
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e042      	b.n	80043b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fd06 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800435a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f91d 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d16d      	bne.n	80044b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit+0x2c>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e066      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2221      	movs	r2, #33	; 0x21
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fd ff1d 	bl	8002234 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004410:	d108      	bne.n	8004424 <HAL_UART_Transmit+0x6c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e003      	b.n	800442c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800442c:	e02a      	b.n	8004484 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f840 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e036      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3302      	adds	r3, #2
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e007      	b.n	8004476 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cf      	bne.n	800442e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2140      	movs	r1, #64	; 0x40
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f810 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e006      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b090      	sub	sp, #64	; 0x40
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	e050      	b.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d04c      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x30>
 80044de:	f7fd fea9 	bl	8002234 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d241      	bcs.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450e:	637a      	str	r2, [r7, #52]	; 0x34
 8004510:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004542:	623a      	str	r2, [r7, #32]
 8004544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e00f      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	d09f      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3740      	adds	r7, #64	; 0x40
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <UART_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe fdc8 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe fdb0 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8004610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	; 0x32
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013800 	.word	0x40013800
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <__cvt>:
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046be:	461f      	mov	r7, r3
 80046c0:	bfbb      	ittet	lt
 80046c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	461f      	movlt	r7, r3
 80046c8:	2300      	movge	r3, #0
 80046ca:	232d      	movlt	r3, #45	; 0x2d
 80046cc:	b088      	sub	sp, #32
 80046ce:	4614      	mov	r4, r2
 80046d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046d4:	7013      	strb	r3, [r2, #0]
 80046d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046dc:	f023 0820 	bic.w	r8, r3, #32
 80046e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046e4:	d005      	beq.n	80046f2 <__cvt+0x3a>
 80046e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046ea:	d100      	bne.n	80046ee <__cvt+0x36>
 80046ec:	3501      	adds	r5, #1
 80046ee:	2302      	movs	r3, #2
 80046f0:	e000      	b.n	80046f4 <__cvt+0x3c>
 80046f2:	2303      	movs	r3, #3
 80046f4:	aa07      	add	r2, sp, #28
 80046f6:	9204      	str	r2, [sp, #16]
 80046f8:	aa06      	add	r2, sp, #24
 80046fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046fe:	e9cd 3500 	strd	r3, r5, [sp]
 8004702:	4622      	mov	r2, r4
 8004704:	463b      	mov	r3, r7
 8004706:	f001 f977 	bl	80059f8 <_dtoa_r>
 800470a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800470e:	4606      	mov	r6, r0
 8004710:	d102      	bne.n	8004718 <__cvt+0x60>
 8004712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004714:	07db      	lsls	r3, r3, #31
 8004716:	d522      	bpl.n	800475e <__cvt+0xa6>
 8004718:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800471c:	eb06 0905 	add.w	r9, r6, r5
 8004720:	d110      	bne.n	8004744 <__cvt+0x8c>
 8004722:	7833      	ldrb	r3, [r6, #0]
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d10a      	bne.n	800473e <__cvt+0x86>
 8004728:	2200      	movs	r2, #0
 800472a:	2300      	movs	r3, #0
 800472c:	4620      	mov	r0, r4
 800472e:	4639      	mov	r1, r7
 8004730:	f7fc f9a6 	bl	8000a80 <__aeabi_dcmpeq>
 8004734:	b918      	cbnz	r0, 800473e <__cvt+0x86>
 8004736:	f1c5 0501 	rsb	r5, r5, #1
 800473a:	f8ca 5000 	str.w	r5, [sl]
 800473e:	f8da 3000 	ldr.w	r3, [sl]
 8004742:	4499      	add	r9, r3
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	4620      	mov	r0, r4
 800474a:	4639      	mov	r1, r7
 800474c:	f7fc f998 	bl	8000a80 <__aeabi_dcmpeq>
 8004750:	b108      	cbz	r0, 8004756 <__cvt+0x9e>
 8004752:	f8cd 901c 	str.w	r9, [sp, #28]
 8004756:	2230      	movs	r2, #48	; 0x30
 8004758:	9b07      	ldr	r3, [sp, #28]
 800475a:	454b      	cmp	r3, r9
 800475c:	d307      	bcc.n	800476e <__cvt+0xb6>
 800475e:	4630      	mov	r0, r6
 8004760:	9b07      	ldr	r3, [sp, #28]
 8004762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004764:	1b9b      	subs	r3, r3, r6
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	b008      	add	sp, #32
 800476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	9107      	str	r1, [sp, #28]
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e7f0      	b.n	8004758 <__cvt+0xa0>

08004776 <__exponent>:
 8004776:	4603      	mov	r3, r0
 8004778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800477a:	2900      	cmp	r1, #0
 800477c:	f803 2b02 	strb.w	r2, [r3], #2
 8004780:	bfb6      	itet	lt
 8004782:	222d      	movlt	r2, #45	; 0x2d
 8004784:	222b      	movge	r2, #43	; 0x2b
 8004786:	4249      	neglt	r1, r1
 8004788:	2909      	cmp	r1, #9
 800478a:	7042      	strb	r2, [r0, #1]
 800478c:	dd2a      	ble.n	80047e4 <__exponent+0x6e>
 800478e:	f10d 0207 	add.w	r2, sp, #7
 8004792:	4617      	mov	r7, r2
 8004794:	260a      	movs	r6, #10
 8004796:	fb91 f5f6 	sdiv	r5, r1, r6
 800479a:	4694      	mov	ip, r2
 800479c:	fb06 1415 	mls	r4, r6, r5, r1
 80047a0:	3430      	adds	r4, #48	; 0x30
 80047a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80047a6:	460c      	mov	r4, r1
 80047a8:	2c63      	cmp	r4, #99	; 0x63
 80047aa:	4629      	mov	r1, r5
 80047ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80047b0:	dcf1      	bgt.n	8004796 <__exponent+0x20>
 80047b2:	3130      	adds	r1, #48	; 0x30
 80047b4:	f1ac 0402 	sub.w	r4, ip, #2
 80047b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047bc:	4622      	mov	r2, r4
 80047be:	1c41      	adds	r1, r0, #1
 80047c0:	42ba      	cmp	r2, r7
 80047c2:	d30a      	bcc.n	80047da <__exponent+0x64>
 80047c4:	f10d 0209 	add.w	r2, sp, #9
 80047c8:	eba2 020c 	sub.w	r2, r2, ip
 80047cc:	42bc      	cmp	r4, r7
 80047ce:	bf88      	it	hi
 80047d0:	2200      	movhi	r2, #0
 80047d2:	4413      	add	r3, r2
 80047d4:	1a18      	subs	r0, r3, r0
 80047d6:	b003      	add	sp, #12
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80047de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80047e2:	e7ed      	b.n	80047c0 <__exponent+0x4a>
 80047e4:	2330      	movs	r3, #48	; 0x30
 80047e6:	3130      	adds	r1, #48	; 0x30
 80047e8:	7083      	strb	r3, [r0, #2]
 80047ea:	70c1      	strb	r1, [r0, #3]
 80047ec:	1d03      	adds	r3, r0, #4
 80047ee:	e7f1      	b.n	80047d4 <__exponent+0x5e>

080047f0 <_printf_float>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	b091      	sub	sp, #68	; 0x44
 80047f6:	460c      	mov	r4, r1
 80047f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80047fc:	4616      	mov	r6, r2
 80047fe:	461f      	mov	r7, r3
 8004800:	4605      	mov	r5, r0
 8004802:	f000 ffe3 	bl	80057cc <_localeconv_r>
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	9309      	str	r3, [sp, #36]	; 0x24
 800480c:	f7fb fd0c 	bl	8000228 <strlen>
 8004810:	2300      	movs	r3, #0
 8004812:	930e      	str	r3, [sp, #56]	; 0x38
 8004814:	f8d8 3000 	ldr.w	r3, [r8]
 8004818:	900a      	str	r0, [sp, #40]	; 0x28
 800481a:	3307      	adds	r3, #7
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	f103 0208 	add.w	r2, r3, #8
 8004824:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004828:	f8d4 b000 	ldr.w	fp, [r4]
 800482c:	f8c8 2000 	str.w	r2, [r8]
 8004830:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004834:	4652      	mov	r2, sl
 8004836:	4643      	mov	r3, r8
 8004838:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800483c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004840:	930b      	str	r3, [sp, #44]	; 0x2c
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	4650      	mov	r0, sl
 8004848:	4b9c      	ldr	r3, [pc, #624]	; (8004abc <_printf_float+0x2cc>)
 800484a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800484c:	f7fc f94a 	bl	8000ae4 <__aeabi_dcmpun>
 8004850:	bb70      	cbnz	r0, 80048b0 <_printf_float+0xc0>
 8004852:	f04f 32ff 	mov.w	r2, #4294967295
 8004856:	4650      	mov	r0, sl
 8004858:	4b98      	ldr	r3, [pc, #608]	; (8004abc <_printf_float+0x2cc>)
 800485a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485c:	f7fc f924 	bl	8000aa8 <__aeabi_dcmple>
 8004860:	bb30      	cbnz	r0, 80048b0 <_printf_float+0xc0>
 8004862:	2200      	movs	r2, #0
 8004864:	2300      	movs	r3, #0
 8004866:	4650      	mov	r0, sl
 8004868:	4641      	mov	r1, r8
 800486a:	f7fc f913 	bl	8000a94 <__aeabi_dcmplt>
 800486e:	b110      	cbz	r0, 8004876 <_printf_float+0x86>
 8004870:	232d      	movs	r3, #45	; 0x2d
 8004872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004876:	4a92      	ldr	r2, [pc, #584]	; (8004ac0 <_printf_float+0x2d0>)
 8004878:	4b92      	ldr	r3, [pc, #584]	; (8004ac4 <_printf_float+0x2d4>)
 800487a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800487e:	bf94      	ite	ls
 8004880:	4690      	movls	r8, r2
 8004882:	4698      	movhi	r8, r3
 8004884:	2303      	movs	r3, #3
 8004886:	f04f 0a00 	mov.w	sl, #0
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	f02b 0304 	bic.w	r3, fp, #4
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	4633      	mov	r3, r6
 8004894:	4621      	mov	r1, r4
 8004896:	4628      	mov	r0, r5
 8004898:	9700      	str	r7, [sp, #0]
 800489a:	aa0f      	add	r2, sp, #60	; 0x3c
 800489c:	f000 f9d6 	bl	8004c4c <_printf_common>
 80048a0:	3001      	adds	r0, #1
 80048a2:	f040 8090 	bne.w	80049c6 <_printf_float+0x1d6>
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	b011      	add	sp, #68	; 0x44
 80048ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b0:	4652      	mov	r2, sl
 80048b2:	4643      	mov	r3, r8
 80048b4:	4650      	mov	r0, sl
 80048b6:	4641      	mov	r1, r8
 80048b8:	f7fc f914 	bl	8000ae4 <__aeabi_dcmpun>
 80048bc:	b148      	cbz	r0, 80048d2 <_printf_float+0xe2>
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	bfb8      	it	lt
 80048c4:	232d      	movlt	r3, #45	; 0x2d
 80048c6:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <_printf_float+0x2d8>)
 80048c8:	bfb8      	it	lt
 80048ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ce:	4b7f      	ldr	r3, [pc, #508]	; (8004acc <_printf_float+0x2dc>)
 80048d0:	e7d3      	b.n	800487a <_printf_float+0x8a>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	d142      	bne.n	8004962 <_printf_float+0x172>
 80048dc:	2306      	movs	r3, #6
 80048de:	6063      	str	r3, [r4, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	9206      	str	r2, [sp, #24]
 80048e4:	aa0e      	add	r2, sp, #56	; 0x38
 80048e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80048ea:	aa0d      	add	r2, sp, #52	; 0x34
 80048ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80048f0:	9203      	str	r2, [sp, #12]
 80048f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80048f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	4652      	mov	r2, sl
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4628      	mov	r0, r5
 8004904:	4643      	mov	r3, r8
 8004906:	910b      	str	r1, [sp, #44]	; 0x2c
 8004908:	f7ff fed6 	bl	80046b8 <__cvt>
 800490c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800490e:	4680      	mov	r8, r0
 8004910:	2947      	cmp	r1, #71	; 0x47
 8004912:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004914:	d108      	bne.n	8004928 <_printf_float+0x138>
 8004916:	1cc8      	adds	r0, r1, #3
 8004918:	db02      	blt.n	8004920 <_printf_float+0x130>
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	4299      	cmp	r1, r3
 800491e:	dd40      	ble.n	80049a2 <_printf_float+0x1b2>
 8004920:	f1a9 0902 	sub.w	r9, r9, #2
 8004924:	fa5f f989 	uxtb.w	r9, r9
 8004928:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800492c:	d81f      	bhi.n	800496e <_printf_float+0x17e>
 800492e:	464a      	mov	r2, r9
 8004930:	3901      	subs	r1, #1
 8004932:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004936:	910d      	str	r1, [sp, #52]	; 0x34
 8004938:	f7ff ff1d 	bl	8004776 <__exponent>
 800493c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800493e:	4682      	mov	sl, r0
 8004940:	1813      	adds	r3, r2, r0
 8004942:	2a01      	cmp	r2, #1
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	dc02      	bgt.n	800494e <_printf_float+0x15e>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	07d2      	lsls	r2, r2, #31
 800494c:	d501      	bpl.n	8004952 <_printf_float+0x162>
 800494e:	3301      	adds	r3, #1
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004956:	2b00      	cmp	r3, #0
 8004958:	d09b      	beq.n	8004892 <_printf_float+0xa2>
 800495a:	232d      	movs	r3, #45	; 0x2d
 800495c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004960:	e797      	b.n	8004892 <_printf_float+0xa2>
 8004962:	2947      	cmp	r1, #71	; 0x47
 8004964:	d1bc      	bne.n	80048e0 <_printf_float+0xf0>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ba      	bne.n	80048e0 <_printf_float+0xf0>
 800496a:	2301      	movs	r3, #1
 800496c:	e7b7      	b.n	80048de <_printf_float+0xee>
 800496e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004972:	d118      	bne.n	80049a6 <_printf_float+0x1b6>
 8004974:	2900      	cmp	r1, #0
 8004976:	6863      	ldr	r3, [r4, #4]
 8004978:	dd0b      	ble.n	8004992 <_printf_float+0x1a2>
 800497a:	6121      	str	r1, [r4, #16]
 800497c:	b913      	cbnz	r3, 8004984 <_printf_float+0x194>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	07d0      	lsls	r0, r2, #31
 8004982:	d502      	bpl.n	800498a <_printf_float+0x19a>
 8004984:	3301      	adds	r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	f04f 0a00 	mov.w	sl, #0
 800498e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004990:	e7df      	b.n	8004952 <_printf_float+0x162>
 8004992:	b913      	cbnz	r3, 800499a <_printf_float+0x1aa>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	07d2      	lsls	r2, r2, #31
 8004998:	d501      	bpl.n	800499e <_printf_float+0x1ae>
 800499a:	3302      	adds	r3, #2
 800499c:	e7f4      	b.n	8004988 <_printf_float+0x198>
 800499e:	2301      	movs	r3, #1
 80049a0:	e7f2      	b.n	8004988 <_printf_float+0x198>
 80049a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049a8:	4299      	cmp	r1, r3
 80049aa:	db05      	blt.n	80049b8 <_printf_float+0x1c8>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	6121      	str	r1, [r4, #16]
 80049b0:	07d8      	lsls	r0, r3, #31
 80049b2:	d5ea      	bpl.n	800498a <_printf_float+0x19a>
 80049b4:	1c4b      	adds	r3, r1, #1
 80049b6:	e7e7      	b.n	8004988 <_printf_float+0x198>
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bfcc      	ite	gt
 80049bc:	2201      	movgt	r2, #1
 80049be:	f1c1 0202 	rsble	r2, r1, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	e7e0      	b.n	8004988 <_printf_float+0x198>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	055a      	lsls	r2, r3, #21
 80049ca:	d407      	bmi.n	80049dc <_printf_float+0x1ec>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	d12b      	bne.n	8004a32 <_printf_float+0x242>
 80049da:	e764      	b.n	80048a6 <_printf_float+0xb6>
 80049dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049e0:	f240 80dd 	bls.w	8004b9e <_printf_float+0x3ae>
 80049e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049e8:	2200      	movs	r2, #0
 80049ea:	2300      	movs	r3, #0
 80049ec:	f7fc f848 	bl	8000a80 <__aeabi_dcmpeq>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d033      	beq.n	8004a5c <_printf_float+0x26c>
 80049f4:	2301      	movs	r3, #1
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	4a35      	ldr	r2, [pc, #212]	; (8004ad0 <_printf_float+0x2e0>)
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af51 	beq.w	80048a6 <_printf_float+0xb6>
 8004a04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	db02      	blt.n	8004a12 <_printf_float+0x222>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	07d8      	lsls	r0, r3, #31
 8004a10:	d50f      	bpl.n	8004a32 <_printf_float+0x242>
 8004a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f43f af42 	beq.w	80048a6 <_printf_float+0xb6>
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	f104 091a 	add.w	r9, r4, #26
 8004a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4543      	cmp	r3, r8
 8004a30:	dc09      	bgt.n	8004a46 <_printf_float+0x256>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	079b      	lsls	r3, r3, #30
 8004a36:	f100 8104 	bmi.w	8004c42 <_printf_float+0x452>
 8004a3a:	68e0      	ldr	r0, [r4, #12]
 8004a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	bfb8      	it	lt
 8004a42:	4618      	movlt	r0, r3
 8004a44:	e731      	b.n	80048aa <_printf_float+0xba>
 8004a46:	2301      	movs	r3, #1
 8004a48:	464a      	mov	r2, r9
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f af28 	beq.w	80048a6 <_printf_float+0xb6>
 8004a56:	f108 0801 	add.w	r8, r8, #1
 8004a5a:	e7e6      	b.n	8004a2a <_printf_float+0x23a>
 8004a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dc38      	bgt.n	8004ad4 <_printf_float+0x2e4>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <_printf_float+0x2e0>)
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f43f af1a 	beq.w	80048a6 <_printf_float+0xb6>
 8004a72:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a76:	4313      	orrs	r3, r2
 8004a78:	d102      	bne.n	8004a80 <_printf_float+0x290>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	07d9      	lsls	r1, r3, #31
 8004a7e:	d5d8      	bpl.n	8004a32 <_printf_float+0x242>
 8004a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f43f af0b 	beq.w	80048a6 <_printf_float+0xb6>
 8004a90:	f04f 0900 	mov.w	r9, #0
 8004a94:	f104 0a1a 	add.w	sl, r4, #26
 8004a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a9a:	425b      	negs	r3, r3
 8004a9c:	454b      	cmp	r3, r9
 8004a9e:	dc01      	bgt.n	8004aa4 <_printf_float+0x2b4>
 8004aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa2:	e794      	b.n	80049ce <_printf_float+0x1de>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4652      	mov	r2, sl
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f aef9 	beq.w	80048a6 <_printf_float+0xb6>
 8004ab4:	f109 0901 	add.w	r9, r9, #1
 8004ab8:	e7ee      	b.n	8004a98 <_printf_float+0x2a8>
 8004aba:	bf00      	nop
 8004abc:	7fefffff 	.word	0x7fefffff
 8004ac0:	08008f2a 	.word	0x08008f2a
 8004ac4:	08008f2e 	.word	0x08008f2e
 8004ac8:	08008f32 	.word	0x08008f32
 8004acc:	08008f36 	.word	0x08008f36
 8004ad0:	08008f3a 	.word	0x08008f3a
 8004ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	bfa8      	it	ge
 8004adc:	461a      	movge	r2, r3
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	dc37      	bgt.n	8004b54 <_printf_float+0x364>
 8004ae4:	f04f 0b00 	mov.w	fp, #0
 8004ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aec:	f104 021a 	add.w	r2, r4, #26
 8004af0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004af4:	ebaa 0309 	sub.w	r3, sl, r9
 8004af8:	455b      	cmp	r3, fp
 8004afa:	dc33      	bgt.n	8004b64 <_printf_float+0x374>
 8004afc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b00:	429a      	cmp	r2, r3
 8004b02:	db3b      	blt.n	8004b7c <_printf_float+0x38c>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	07da      	lsls	r2, r3, #31
 8004b08:	d438      	bmi.n	8004b7c <_printf_float+0x38c>
 8004b0a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b0e:	eba2 0903 	sub.w	r9, r2, r3
 8004b12:	eba2 020a 	sub.w	r2, r2, sl
 8004b16:	4591      	cmp	r9, r2
 8004b18:	bfa8      	it	ge
 8004b1a:	4691      	movge	r9, r2
 8004b1c:	f1b9 0f00 	cmp.w	r9, #0
 8004b20:	dc34      	bgt.n	8004b8c <_printf_float+0x39c>
 8004b22:	f04f 0800 	mov.w	r8, #0
 8004b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b2a:	f104 0a1a 	add.w	sl, r4, #26
 8004b2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	eba3 0309 	sub.w	r3, r3, r9
 8004b38:	4543      	cmp	r3, r8
 8004b3a:	f77f af7a 	ble.w	8004a32 <_printf_float+0x242>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4652      	mov	r2, sl
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f aeac 	beq.w	80048a6 <_printf_float+0xb6>
 8004b4e:	f108 0801 	add.w	r8, r8, #1
 8004b52:	e7ec      	b.n	8004b2e <_printf_float+0x33e>
 8004b54:	4613      	mov	r3, r2
 8004b56:	4631      	mov	r1, r6
 8004b58:	4642      	mov	r2, r8
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d1c0      	bne.n	8004ae4 <_printf_float+0x2f4>
 8004b62:	e6a0      	b.n	80048a6 <_printf_float+0xb6>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f43f ae99 	beq.w	80048a6 <_printf_float+0xb6>
 8004b74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b76:	f10b 0b01 	add.w	fp, fp, #1
 8004b7a:	e7b9      	b.n	8004af0 <_printf_float+0x300>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d1bf      	bne.n	8004b0a <_printf_float+0x31a>
 8004b8a:	e68c      	b.n	80048a6 <_printf_float+0xb6>
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	eb08 020a 	add.w	r2, r8, sl
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d1c2      	bne.n	8004b22 <_printf_float+0x332>
 8004b9c:	e683      	b.n	80048a6 <_printf_float+0xb6>
 8004b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ba0:	2a01      	cmp	r2, #1
 8004ba2:	dc01      	bgt.n	8004ba8 <_printf_float+0x3b8>
 8004ba4:	07db      	lsls	r3, r3, #31
 8004ba6:	d539      	bpl.n	8004c1c <_printf_float+0x42c>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4642      	mov	r2, r8
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	f43f ae77 	beq.w	80048a6 <_printf_float+0xb6>
 8004bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f ae6f 	beq.w	80048a6 <_printf_float+0xb6>
 8004bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004bd4:	f7fb ff54 	bl	8000a80 <__aeabi_dcmpeq>
 8004bd8:	b9d8      	cbnz	r0, 8004c12 <_printf_float+0x422>
 8004bda:	f109 33ff 	add.w	r3, r9, #4294967295
 8004bde:	f108 0201 	add.w	r2, r8, #1
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	d10e      	bne.n	8004c0a <_printf_float+0x41a>
 8004bec:	e65b      	b.n	80048a6 <_printf_float+0xb6>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	464a      	mov	r2, r9
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f ae54 	beq.w	80048a6 <_printf_float+0xb6>
 8004bfe:	f108 0801 	add.w	r8, r8, #1
 8004c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4543      	cmp	r3, r8
 8004c08:	dcf1      	bgt.n	8004bee <_printf_float+0x3fe>
 8004c0a:	4653      	mov	r3, sl
 8004c0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c10:	e6de      	b.n	80049d0 <_printf_float+0x1e0>
 8004c12:	f04f 0800 	mov.w	r8, #0
 8004c16:	f104 091a 	add.w	r9, r4, #26
 8004c1a:	e7f2      	b.n	8004c02 <_printf_float+0x412>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4642      	mov	r2, r8
 8004c20:	e7df      	b.n	8004be2 <_printf_float+0x3f2>
 8004c22:	2301      	movs	r3, #1
 8004c24:	464a      	mov	r2, r9
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae3a 	beq.w	80048a6 <_printf_float+0xb6>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c3a:	1a5b      	subs	r3, r3, r1
 8004c3c:	4543      	cmp	r3, r8
 8004c3e:	dcf0      	bgt.n	8004c22 <_printf_float+0x432>
 8004c40:	e6fb      	b.n	8004a3a <_printf_float+0x24a>
 8004c42:	f04f 0800 	mov.w	r8, #0
 8004c46:	f104 0919 	add.w	r9, r4, #25
 8004c4a:	e7f4      	b.n	8004c36 <_printf_float+0x446>

08004c4c <_printf_common>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	4616      	mov	r6, r2
 8004c52:	4699      	mov	r9, r3
 8004c54:	688a      	ldr	r2, [r1, #8]
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	4607      	mov	r7, r0
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bfb8      	it	lt
 8004c5e:	4613      	movlt	r3, r2
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c66:	460c      	mov	r4, r1
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	b10a      	cbz	r2, 8004c72 <_printf_common+0x26>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0699      	lsls	r1, r3, #26
 8004c76:	bf42      	ittt	mi
 8004c78:	6833      	ldrmi	r3, [r6, #0]
 8004c7a:	3302      	addmi	r3, #2
 8004c7c:	6033      	strmi	r3, [r6, #0]
 8004c7e:	6825      	ldr	r5, [r4, #0]
 8004c80:	f015 0506 	ands.w	r5, r5, #6
 8004c84:	d106      	bne.n	8004c94 <_printf_common+0x48>
 8004c86:	f104 0a19 	add.w	sl, r4, #25
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dc2b      	bgt.n	8004cec <_printf_common+0xa0>
 8004c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c98:	1e13      	subs	r3, r2, #0
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	0692      	lsls	r2, r2, #26
 8004ca2:	d430      	bmi.n	8004d06 <_printf_common+0xba>
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cac:	47c0      	blx	r8
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d023      	beq.n	8004cfa <_printf_common+0xae>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	6922      	ldr	r2, [r4, #16]
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf14      	ite	ne
 8004cbe:	2500      	movne	r5, #0
 8004cc0:	6833      	ldreq	r3, [r6, #0]
 8004cc2:	f04f 0600 	mov.w	r6, #0
 8004cc6:	bf08      	it	eq
 8004cc8:	68e5      	ldreq	r5, [r4, #12]
 8004cca:	f104 041a 	add.w	r4, r4, #26
 8004cce:	bf08      	it	eq
 8004cd0:	1aed      	subeq	r5, r5, r3
 8004cd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cd6:	bf08      	it	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	bfc4      	itt	gt
 8004ce0:	1a9b      	subgt	r3, r3, r2
 8004ce2:	18ed      	addgt	r5, r5, r3
 8004ce4:	42b5      	cmp	r5, r6
 8004ce6:	d11a      	bne.n	8004d1e <_printf_common+0xd2>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e008      	b.n	8004cfe <_printf_common+0xb2>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4652      	mov	r2, sl
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	47c0      	blx	r8
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d103      	bne.n	8004d02 <_printf_common+0xb6>
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d02:	3501      	adds	r5, #1
 8004d04:	e7c1      	b.n	8004c8a <_printf_common+0x3e>
 8004d06:	2030      	movs	r0, #48	; 0x30
 8004d08:	18e1      	adds	r1, r4, r3
 8004d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d14:	4422      	add	r2, r4
 8004d16:	3302      	adds	r3, #2
 8004d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d1c:	e7c2      	b.n	8004ca4 <_printf_common+0x58>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4622      	mov	r2, r4
 8004d22:	4649      	mov	r1, r9
 8004d24:	4638      	mov	r0, r7
 8004d26:	47c0      	blx	r8
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0e6      	beq.n	8004cfa <_printf_common+0xae>
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7d9      	b.n	8004ce4 <_printf_common+0x98>

08004d30 <_printf_i>:
 8004d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	7e0f      	ldrb	r7, [r1, #24]
 8004d36:	4691      	mov	r9, r2
 8004d38:	2f78      	cmp	r7, #120	; 0x78
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	469a      	mov	sl, r3
 8004d40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d46:	d807      	bhi.n	8004d58 <_printf_i+0x28>
 8004d48:	2f62      	cmp	r7, #98	; 0x62
 8004d4a:	d80a      	bhi.n	8004d62 <_printf_i+0x32>
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	f000 80d5 	beq.w	8004efc <_printf_i+0x1cc>
 8004d52:	2f58      	cmp	r7, #88	; 0x58
 8004d54:	f000 80c1 	beq.w	8004eda <_printf_i+0x1aa>
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d60:	e03a      	b.n	8004dd8 <_printf_i+0xa8>
 8004d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d66:	2b15      	cmp	r3, #21
 8004d68:	d8f6      	bhi.n	8004d58 <_printf_i+0x28>
 8004d6a:	a101      	add	r1, pc, #4	; (adr r1, 8004d70 <_printf_i+0x40>)
 8004d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004d59 	.word	0x08004d59
 8004d7c:	08004d59 	.word	0x08004d59
 8004d80:	08004d59 	.word	0x08004d59
 8004d84:	08004d59 	.word	0x08004d59
 8004d88:	08004ddd 	.word	0x08004ddd
 8004d8c:	08004d59 	.word	0x08004d59
 8004d90:	08004d59 	.word	0x08004d59
 8004d94:	08004d59 	.word	0x08004d59
 8004d98:	08004d59 	.word	0x08004d59
 8004d9c:	08004ee3 	.word	0x08004ee3
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e9d 	.word	0x08004e9d
 8004da8:	08004d59 	.word	0x08004d59
 8004dac:	08004d59 	.word	0x08004d59
 8004db0:	08004f05 	.word	0x08004f05
 8004db4:	08004d59 	.word	0x08004d59
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004d59 	.word	0x08004d59
 8004dc0:	08004d59 	.word	0x08004d59
 8004dc4:	08004ea5 	.word	0x08004ea5
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0a0      	b.n	8004f1e <_printf_i+0x1ee>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	0607      	lsls	r7, r0, #24
 8004de2:	f103 0104 	add.w	r1, r3, #4
 8004de6:	6029      	str	r1, [r5, #0]
 8004de8:	d501      	bpl.n	8004dee <_printf_i+0xbe>
 8004dea:	681e      	ldr	r6, [r3, #0]
 8004dec:	e003      	b.n	8004df6 <_printf_i+0xc6>
 8004dee:	0646      	lsls	r6, r0, #25
 8004df0:	d5fb      	bpl.n	8004dea <_printf_i+0xba>
 8004df2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	da03      	bge.n	8004e02 <_printf_i+0xd2>
 8004dfa:	232d      	movs	r3, #45	; 0x2d
 8004dfc:	4276      	negs	r6, r6
 8004dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e02:	230a      	movs	r3, #10
 8004e04:	4859      	ldr	r0, [pc, #356]	; (8004f6c <_printf_i+0x23c>)
 8004e06:	e012      	b.n	8004e2e <_printf_i+0xfe>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	1d19      	adds	r1, r3, #4
 8004e0e:	6029      	str	r1, [r5, #0]
 8004e10:	0605      	lsls	r5, r0, #24
 8004e12:	d501      	bpl.n	8004e18 <_printf_i+0xe8>
 8004e14:	681e      	ldr	r6, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <_printf_i+0xee>
 8004e18:	0641      	lsls	r1, r0, #25
 8004e1a:	d5fb      	bpl.n	8004e14 <_printf_i+0xe4>
 8004e1c:	881e      	ldrh	r6, [r3, #0]
 8004e1e:	2f6f      	cmp	r7, #111	; 0x6f
 8004e20:	bf0c      	ite	eq
 8004e22:	2308      	moveq	r3, #8
 8004e24:	230a      	movne	r3, #10
 8004e26:	4851      	ldr	r0, [pc, #324]	; (8004f6c <_printf_i+0x23c>)
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e2e:	6865      	ldr	r5, [r4, #4]
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	bfa8      	it	ge
 8004e34:	6821      	ldrge	r1, [r4, #0]
 8004e36:	60a5      	str	r5, [r4, #8]
 8004e38:	bfa4      	itt	ge
 8004e3a:	f021 0104 	bicge.w	r1, r1, #4
 8004e3e:	6021      	strge	r1, [r4, #0]
 8004e40:	b90e      	cbnz	r6, 8004e46 <_printf_i+0x116>
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	d04b      	beq.n	8004ede <_printf_i+0x1ae>
 8004e46:	4615      	mov	r5, r2
 8004e48:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e4c:	fb03 6711 	mls	r7, r3, r1, r6
 8004e50:	5dc7      	ldrb	r7, [r0, r7]
 8004e52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e56:	4637      	mov	r7, r6
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	d9f4      	bls.n	8004e48 <_printf_i+0x118>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d10b      	bne.n	8004e7a <_printf_i+0x14a>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	07de      	lsls	r6, r3, #31
 8004e66:	d508      	bpl.n	8004e7a <_printf_i+0x14a>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	6861      	ldr	r1, [r4, #4]
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	bfde      	ittt	le
 8004e70:	2330      	movle	r3, #48	; 0x30
 8004e72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e7a:	1b52      	subs	r2, r2, r5
 8004e7c:	6122      	str	r2, [r4, #16]
 8004e7e:	464b      	mov	r3, r9
 8004e80:	4621      	mov	r1, r4
 8004e82:	4640      	mov	r0, r8
 8004e84:	f8cd a000 	str.w	sl, [sp]
 8004e88:	aa03      	add	r2, sp, #12
 8004e8a:	f7ff fedf 	bl	8004c4c <_printf_common>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d14a      	bne.n	8004f28 <_printf_i+0x1f8>
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295
 8004e96:	b004      	add	sp, #16
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	2778      	movs	r7, #120	; 0x78
 8004ea6:	4832      	ldr	r0, [pc, #200]	; (8004f70 <_printf_i+0x240>)
 8004ea8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	061f      	lsls	r7, r3, #24
 8004eb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb6:	d402      	bmi.n	8004ebe <_printf_i+0x18e>
 8004eb8:	065f      	lsls	r7, r3, #25
 8004eba:	bf48      	it	mi
 8004ebc:	b2b6      	uxthmi	r6, r6
 8004ebe:	07df      	lsls	r7, r3, #31
 8004ec0:	bf48      	it	mi
 8004ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec6:	6029      	str	r1, [r5, #0]
 8004ec8:	bf48      	it	mi
 8004eca:	6023      	strmi	r3, [r4, #0]
 8004ecc:	b91e      	cbnz	r6, 8004ed6 <_printf_i+0x1a6>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f023 0320 	bic.w	r3, r3, #32
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	e7a6      	b.n	8004e28 <_printf_i+0xf8>
 8004eda:	4824      	ldr	r0, [pc, #144]	; (8004f6c <_printf_i+0x23c>)
 8004edc:	e7e4      	b.n	8004ea8 <_printf_i+0x178>
 8004ede:	4615      	mov	r5, r2
 8004ee0:	e7bd      	b.n	8004e5e <_printf_i+0x12e>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	6826      	ldr	r6, [r4, #0]
 8004ee6:	1d18      	adds	r0, r3, #4
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	6028      	str	r0, [r5, #0]
 8004eec:	0635      	lsls	r5, r6, #24
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	d501      	bpl.n	8004ef6 <_printf_i+0x1c6>
 8004ef2:	6019      	str	r1, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <_printf_i+0x1cc>
 8004ef6:	0670      	lsls	r0, r6, #25
 8004ef8:	d5fb      	bpl.n	8004ef2 <_printf_i+0x1c2>
 8004efa:	8019      	strh	r1, [r3, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	4615      	mov	r5, r2
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	e7bc      	b.n	8004e7e <_printf_i+0x14e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2100      	movs	r1, #0
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	602a      	str	r2, [r5, #0]
 8004f0c:	681d      	ldr	r5, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	4628      	mov	r0, r5
 8004f12:	f000 fcd2 	bl	80058ba <memchr>
 8004f16:	b108      	cbz	r0, 8004f1c <_printf_i+0x1ec>
 8004f18:	1b40      	subs	r0, r0, r5
 8004f1a:	6060      	str	r0, [r4, #4]
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	2300      	movs	r3, #0
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f26:	e7aa      	b.n	8004e7e <_printf_i+0x14e>
 8004f28:	462a      	mov	r2, r5
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	47d0      	blx	sl
 8004f32:	3001      	adds	r0, #1
 8004f34:	d0ad      	beq.n	8004e92 <_printf_i+0x162>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	079b      	lsls	r3, r3, #30
 8004f3a:	d413      	bmi.n	8004f64 <_printf_i+0x234>
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	4298      	cmp	r0, r3
 8004f42:	bfb8      	it	lt
 8004f44:	4618      	movlt	r0, r3
 8004f46:	e7a6      	b.n	8004e96 <_printf_i+0x166>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4640      	mov	r0, r8
 8004f50:	47d0      	blx	sl
 8004f52:	3001      	adds	r0, #1
 8004f54:	d09d      	beq.n	8004e92 <_printf_i+0x162>
 8004f56:	3501      	adds	r5, #1
 8004f58:	68e3      	ldr	r3, [r4, #12]
 8004f5a:	9903      	ldr	r1, [sp, #12]
 8004f5c:	1a5b      	subs	r3, r3, r1
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	dcf2      	bgt.n	8004f48 <_printf_i+0x218>
 8004f62:	e7eb      	b.n	8004f3c <_printf_i+0x20c>
 8004f64:	2500      	movs	r5, #0
 8004f66:	f104 0619 	add.w	r6, r4, #25
 8004f6a:	e7f5      	b.n	8004f58 <_printf_i+0x228>
 8004f6c:	08008f3c 	.word	0x08008f3c
 8004f70:	08008f4d 	.word	0x08008f4d

08004f74 <_scanf_float>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	688b      	ldr	r3, [r1, #8]
 8004f7e:	4617      	mov	r7, r2
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f86:	bf85      	ittet	hi
 8004f88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f8c:	195b      	addhi	r3, r3, r5
 8004f8e:	2300      	movls	r3, #0
 8004f90:	9302      	strhi	r3, [sp, #8]
 8004f92:	bf88      	it	hi
 8004f94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f98:	468b      	mov	fp, r1
 8004f9a:	f04f 0500 	mov.w	r5, #0
 8004f9e:	bf8c      	ite	hi
 8004fa0:	608b      	strhi	r3, [r1, #8]
 8004fa2:	9302      	strls	r3, [sp, #8]
 8004fa4:	680b      	ldr	r3, [r1, #0]
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fac:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	465e      	mov	r6, fp
 8004fb4:	46aa      	mov	sl, r5
 8004fb6:	46a9      	mov	r9, r5
 8004fb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fbc:	9501      	str	r5, [sp, #4]
 8004fbe:	68a2      	ldr	r2, [r4, #8]
 8004fc0:	b152      	cbz	r2, 8004fd8 <_scanf_float+0x64>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b4e      	cmp	r3, #78	; 0x4e
 8004fc8:	d864      	bhi.n	8005094 <_scanf_float+0x120>
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d83c      	bhi.n	8005048 <_scanf_float+0xd4>
 8004fce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004fd2:	b2c8      	uxtb	r0, r1
 8004fd4:	280e      	cmp	r0, #14
 8004fd6:	d93a      	bls.n	800504e <_scanf_float+0xda>
 8004fd8:	f1b9 0f00 	cmp.w	r9, #0
 8004fdc:	d003      	beq.n	8004fe6 <_scanf_float+0x72>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fea:	f1ba 0f01 	cmp.w	sl, #1
 8004fee:	f200 8113 	bhi.w	8005218 <_scanf_float+0x2a4>
 8004ff2:	455e      	cmp	r6, fp
 8004ff4:	f200 8105 	bhi.w	8005202 <_scanf_float+0x28e>
 8004ff8:	2501      	movs	r5, #1
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	b007      	add	sp, #28
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005002:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005006:	2a0d      	cmp	r2, #13
 8005008:	d8e6      	bhi.n	8004fd8 <_scanf_float+0x64>
 800500a:	a101      	add	r1, pc, #4	; (adr r1, 8005010 <_scanf_float+0x9c>)
 800500c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005010:	0800514f 	.word	0x0800514f
 8005014:	08004fd9 	.word	0x08004fd9
 8005018:	08004fd9 	.word	0x08004fd9
 800501c:	08004fd9 	.word	0x08004fd9
 8005020:	080051af 	.word	0x080051af
 8005024:	08005187 	.word	0x08005187
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004fd9 	.word	0x08004fd9
 8005030:	0800515d 	.word	0x0800515d
 8005034:	08004fd9 	.word	0x08004fd9
 8005038:	08004fd9 	.word	0x08004fd9
 800503c:	08004fd9 	.word	0x08004fd9
 8005040:	08004fd9 	.word	0x08004fd9
 8005044:	08005115 	.word	0x08005115
 8005048:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800504c:	e7db      	b.n	8005006 <_scanf_float+0x92>
 800504e:	290e      	cmp	r1, #14
 8005050:	d8c2      	bhi.n	8004fd8 <_scanf_float+0x64>
 8005052:	a001      	add	r0, pc, #4	; (adr r0, 8005058 <_scanf_float+0xe4>)
 8005054:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005058:	08005107 	.word	0x08005107
 800505c:	08004fd9 	.word	0x08004fd9
 8005060:	08005107 	.word	0x08005107
 8005064:	0800519b 	.word	0x0800519b
 8005068:	08004fd9 	.word	0x08004fd9
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050f1 	.word	0x080050f1
 8005074:	080050f1 	.word	0x080050f1
 8005078:	080050f1 	.word	0x080050f1
 800507c:	080050f1 	.word	0x080050f1
 8005080:	080050f1 	.word	0x080050f1
 8005084:	080050f1 	.word	0x080050f1
 8005088:	080050f1 	.word	0x080050f1
 800508c:	080050f1 	.word	0x080050f1
 8005090:	080050f1 	.word	0x080050f1
 8005094:	2b6e      	cmp	r3, #110	; 0x6e
 8005096:	d809      	bhi.n	80050ac <_scanf_float+0x138>
 8005098:	2b60      	cmp	r3, #96	; 0x60
 800509a:	d8b2      	bhi.n	8005002 <_scanf_float+0x8e>
 800509c:	2b54      	cmp	r3, #84	; 0x54
 800509e:	d077      	beq.n	8005190 <_scanf_float+0x21c>
 80050a0:	2b59      	cmp	r3, #89	; 0x59
 80050a2:	d199      	bne.n	8004fd8 <_scanf_float+0x64>
 80050a4:	2d07      	cmp	r5, #7
 80050a6:	d197      	bne.n	8004fd8 <_scanf_float+0x64>
 80050a8:	2508      	movs	r5, #8
 80050aa:	e029      	b.n	8005100 <_scanf_float+0x18c>
 80050ac:	2b74      	cmp	r3, #116	; 0x74
 80050ae:	d06f      	beq.n	8005190 <_scanf_float+0x21c>
 80050b0:	2b79      	cmp	r3, #121	; 0x79
 80050b2:	e7f6      	b.n	80050a2 <_scanf_float+0x12e>
 80050b4:	6821      	ldr	r1, [r4, #0]
 80050b6:	05c8      	lsls	r0, r1, #23
 80050b8:	d51a      	bpl.n	80050f0 <_scanf_float+0x17c>
 80050ba:	9b02      	ldr	r3, [sp, #8]
 80050bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050c0:	6021      	str	r1, [r4, #0]
 80050c2:	f109 0901 	add.w	r9, r9, #1
 80050c6:	b11b      	cbz	r3, 80050d0 <_scanf_float+0x15c>
 80050c8:	3b01      	subs	r3, #1
 80050ca:	3201      	adds	r2, #1
 80050cc:	9302      	str	r3, [sp, #8]
 80050ce:	60a2      	str	r2, [r4, #8]
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	60a3      	str	r3, [r4, #8]
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	f340 8084 	ble.w	80051f0 <_scanf_float+0x27c>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	e766      	b.n	8004fbe <_scanf_float+0x4a>
 80050f0:	eb1a 0f05 	cmn.w	sl, r5
 80050f4:	f47f af70 	bne.w	8004fd8 <_scanf_float+0x64>
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80050fe:	6022      	str	r2, [r4, #0]
 8005100:	f806 3b01 	strb.w	r3, [r6], #1
 8005104:	e7e4      	b.n	80050d0 <_scanf_float+0x15c>
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	0610      	lsls	r0, r2, #24
 800510a:	f57f af65 	bpl.w	8004fd8 <_scanf_float+0x64>
 800510e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005112:	e7f4      	b.n	80050fe <_scanf_float+0x18a>
 8005114:	f1ba 0f00 	cmp.w	sl, #0
 8005118:	d10e      	bne.n	8005138 <_scanf_float+0x1c4>
 800511a:	f1b9 0f00 	cmp.w	r9, #0
 800511e:	d10e      	bne.n	800513e <_scanf_float+0x1ca>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005126:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800512a:	d108      	bne.n	800513e <_scanf_float+0x1ca>
 800512c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005130:	f04f 0a01 	mov.w	sl, #1
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	e7e3      	b.n	8005100 <_scanf_float+0x18c>
 8005138:	f1ba 0f02 	cmp.w	sl, #2
 800513c:	d055      	beq.n	80051ea <_scanf_float+0x276>
 800513e:	2d01      	cmp	r5, #1
 8005140:	d002      	beq.n	8005148 <_scanf_float+0x1d4>
 8005142:	2d04      	cmp	r5, #4
 8005144:	f47f af48 	bne.w	8004fd8 <_scanf_float+0x64>
 8005148:	3501      	adds	r5, #1
 800514a:	b2ed      	uxtb	r5, r5
 800514c:	e7d8      	b.n	8005100 <_scanf_float+0x18c>
 800514e:	f1ba 0f01 	cmp.w	sl, #1
 8005152:	f47f af41 	bne.w	8004fd8 <_scanf_float+0x64>
 8005156:	f04f 0a02 	mov.w	sl, #2
 800515a:	e7d1      	b.n	8005100 <_scanf_float+0x18c>
 800515c:	b97d      	cbnz	r5, 800517e <_scanf_float+0x20a>
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	f47f af3c 	bne.w	8004fde <_scanf_float+0x6a>
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800516c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005170:	f47f af39 	bne.w	8004fe6 <_scanf_float+0x72>
 8005174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005178:	2501      	movs	r5, #1
 800517a:	6022      	str	r2, [r4, #0]
 800517c:	e7c0      	b.n	8005100 <_scanf_float+0x18c>
 800517e:	2d03      	cmp	r5, #3
 8005180:	d0e2      	beq.n	8005148 <_scanf_float+0x1d4>
 8005182:	2d05      	cmp	r5, #5
 8005184:	e7de      	b.n	8005144 <_scanf_float+0x1d0>
 8005186:	2d02      	cmp	r5, #2
 8005188:	f47f af26 	bne.w	8004fd8 <_scanf_float+0x64>
 800518c:	2503      	movs	r5, #3
 800518e:	e7b7      	b.n	8005100 <_scanf_float+0x18c>
 8005190:	2d06      	cmp	r5, #6
 8005192:	f47f af21 	bne.w	8004fd8 <_scanf_float+0x64>
 8005196:	2507      	movs	r5, #7
 8005198:	e7b2      	b.n	8005100 <_scanf_float+0x18c>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	0591      	lsls	r1, r2, #22
 800519e:	f57f af1b 	bpl.w	8004fd8 <_scanf_float+0x64>
 80051a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051a6:	6022      	str	r2, [r4, #0]
 80051a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051ac:	e7a8      	b.n	8005100 <_scanf_float+0x18c>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051b8:	d006      	beq.n	80051c8 <_scanf_float+0x254>
 80051ba:	0550      	lsls	r0, r2, #21
 80051bc:	f57f af0c 	bpl.w	8004fd8 <_scanf_float+0x64>
 80051c0:	f1b9 0f00 	cmp.w	r9, #0
 80051c4:	f43f af0f 	beq.w	8004fe6 <_scanf_float+0x72>
 80051c8:	0591      	lsls	r1, r2, #22
 80051ca:	bf58      	it	pl
 80051cc:	9901      	ldrpl	r1, [sp, #4]
 80051ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051d2:	bf58      	it	pl
 80051d4:	eba9 0101 	subpl.w	r1, r9, r1
 80051d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051dc:	f04f 0900 	mov.w	r9, #0
 80051e0:	bf58      	it	pl
 80051e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051e6:	6022      	str	r2, [r4, #0]
 80051e8:	e78a      	b.n	8005100 <_scanf_float+0x18c>
 80051ea:	f04f 0a03 	mov.w	sl, #3
 80051ee:	e787      	b.n	8005100 <_scanf_float+0x18c>
 80051f0:	4639      	mov	r1, r7
 80051f2:	4640      	mov	r0, r8
 80051f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051f8:	4798      	blx	r3
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f43f aedf 	beq.w	8004fbe <_scanf_float+0x4a>
 8005200:	e6ea      	b.n	8004fd8 <_scanf_float+0x64>
 8005202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005206:	463a      	mov	r2, r7
 8005208:	4640      	mov	r0, r8
 800520a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800520e:	4798      	blx	r3
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	3b01      	subs	r3, #1
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	e6ec      	b.n	8004ff2 <_scanf_float+0x7e>
 8005218:	1e6b      	subs	r3, r5, #1
 800521a:	2b06      	cmp	r3, #6
 800521c:	d825      	bhi.n	800526a <_scanf_float+0x2f6>
 800521e:	2d02      	cmp	r5, #2
 8005220:	d836      	bhi.n	8005290 <_scanf_float+0x31c>
 8005222:	455e      	cmp	r6, fp
 8005224:	f67f aee8 	bls.w	8004ff8 <_scanf_float+0x84>
 8005228:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800522c:	463a      	mov	r2, r7
 800522e:	4640      	mov	r0, r8
 8005230:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005234:	4798      	blx	r3
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	3b01      	subs	r3, #1
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	e7f1      	b.n	8005222 <_scanf_float+0x2ae>
 800523e:	9802      	ldr	r0, [sp, #8]
 8005240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005244:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005248:	463a      	mov	r2, r7
 800524a:	9002      	str	r0, [sp, #8]
 800524c:	4640      	mov	r0, r8
 800524e:	4798      	blx	r3
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800525a:	fa5f fa8a 	uxtb.w	sl, sl
 800525e:	f1ba 0f02 	cmp.w	sl, #2
 8005262:	d1ec      	bne.n	800523e <_scanf_float+0x2ca>
 8005264:	3d03      	subs	r5, #3
 8005266:	b2ed      	uxtb	r5, r5
 8005268:	1b76      	subs	r6, r6, r5
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	05da      	lsls	r2, r3, #23
 800526e:	d52f      	bpl.n	80052d0 <_scanf_float+0x35c>
 8005270:	055b      	lsls	r3, r3, #21
 8005272:	d510      	bpl.n	8005296 <_scanf_float+0x322>
 8005274:	455e      	cmp	r6, fp
 8005276:	f67f aebf 	bls.w	8004ff8 <_scanf_float+0x84>
 800527a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800527e:	463a      	mov	r2, r7
 8005280:	4640      	mov	r0, r8
 8005282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005286:	4798      	blx	r3
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	3b01      	subs	r3, #1
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	e7f1      	b.n	8005274 <_scanf_float+0x300>
 8005290:	46aa      	mov	sl, r5
 8005292:	9602      	str	r6, [sp, #8]
 8005294:	e7df      	b.n	8005256 <_scanf_float+0x2e2>
 8005296:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800529a:	6923      	ldr	r3, [r4, #16]
 800529c:	2965      	cmp	r1, #101	; 0x65
 800529e:	f103 33ff 	add.w	r3, r3, #4294967295
 80052a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80052a6:	6123      	str	r3, [r4, #16]
 80052a8:	d00c      	beq.n	80052c4 <_scanf_float+0x350>
 80052aa:	2945      	cmp	r1, #69	; 0x45
 80052ac:	d00a      	beq.n	80052c4 <_scanf_float+0x350>
 80052ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052b2:	463a      	mov	r2, r7
 80052b4:	4640      	mov	r0, r8
 80052b6:	4798      	blx	r3
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052be:	3b01      	subs	r3, #1
 80052c0:	1eb5      	subs	r5, r6, #2
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	463a      	mov	r2, r7
 80052c6:	4640      	mov	r0, r8
 80052c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052cc:	4798      	blx	r3
 80052ce:	462e      	mov	r6, r5
 80052d0:	6825      	ldr	r5, [r4, #0]
 80052d2:	f015 0510 	ands.w	r5, r5, #16
 80052d6:	d155      	bne.n	8005384 <_scanf_float+0x410>
 80052d8:	7035      	strb	r5, [r6, #0]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d11d      	bne.n	8005322 <_scanf_float+0x3ae>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	454b      	cmp	r3, r9
 80052ea:	eba3 0209 	sub.w	r2, r3, r9
 80052ee:	d125      	bne.n	800533c <_scanf_float+0x3c8>
 80052f0:	2200      	movs	r2, #0
 80052f2:	4659      	mov	r1, fp
 80052f4:	4640      	mov	r0, r8
 80052f6:	f002 fd13 	bl	8007d20 <_strtod_r>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	f8d4 c000 	ldr.w	ip, [r4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f01c 0f02 	tst.w	ip, #2
 8005306:	4606      	mov	r6, r0
 8005308:	460f      	mov	r7, r1
 800530a:	f103 0204 	add.w	r2, r3, #4
 800530e:	d020      	beq.n	8005352 <_scanf_float+0x3de>
 8005310:	9903      	ldr	r1, [sp, #12]
 8005312:	600a      	str	r2, [r1, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	e9c3 6700 	strd	r6, r7, [r3]
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60e3      	str	r3, [r4, #12]
 8005320:	e66b      	b.n	8004ffa <_scanf_float+0x86>
 8005322:	9b04      	ldr	r3, [sp, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0e3      	beq.n	80052f0 <_scanf_float+0x37c>
 8005328:	9905      	ldr	r1, [sp, #20]
 800532a:	230a      	movs	r3, #10
 800532c:	462a      	mov	r2, r5
 800532e:	4640      	mov	r0, r8
 8005330:	3101      	adds	r1, #1
 8005332:	f002 fd79 	bl	8007e28 <_strtol_r>
 8005336:	9b04      	ldr	r3, [sp, #16]
 8005338:	9e05      	ldr	r6, [sp, #20]
 800533a:	1ac2      	subs	r2, r0, r3
 800533c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005340:	429e      	cmp	r6, r3
 8005342:	bf28      	it	cs
 8005344:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005348:	4630      	mov	r0, r6
 800534a:	490f      	ldr	r1, [pc, #60]	; (8005388 <_scanf_float+0x414>)
 800534c:	f000 f93e 	bl	80055cc <siprintf>
 8005350:	e7ce      	b.n	80052f0 <_scanf_float+0x37c>
 8005352:	f01c 0f04 	tst.w	ip, #4
 8005356:	d1db      	bne.n	8005310 <_scanf_float+0x39c>
 8005358:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800535c:	f8cc 2000 	str.w	r2, [ip]
 8005360:	f8d3 8000 	ldr.w	r8, [r3]
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	f7fb fbbc 	bl	8000ae4 <__aeabi_dcmpun>
 800536c:	b128      	cbz	r0, 800537a <_scanf_float+0x406>
 800536e:	4807      	ldr	r0, [pc, #28]	; (800538c <_scanf_float+0x418>)
 8005370:	f000 fab2 	bl	80058d8 <nanf>
 8005374:	f8c8 0000 	str.w	r0, [r8]
 8005378:	e7cf      	b.n	800531a <_scanf_float+0x3a6>
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f7fb fc0f 	bl	8000ba0 <__aeabi_d2f>
 8005382:	e7f7      	b.n	8005374 <_scanf_float+0x400>
 8005384:	2500      	movs	r5, #0
 8005386:	e638      	b.n	8004ffa <_scanf_float+0x86>
 8005388:	08008f5e 	.word	0x08008f5e
 800538c:	080092f5 	.word	0x080092f5

08005390 <std>:
 8005390:	2300      	movs	r3, #0
 8005392:	b510      	push	{r4, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	e9c0 3300 	strd	r3, r3, [r0]
 800539a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800539e:	6083      	str	r3, [r0, #8]
 80053a0:	8181      	strh	r1, [r0, #12]
 80053a2:	6643      	str	r3, [r0, #100]	; 0x64
 80053a4:	81c2      	strh	r2, [r0, #14]
 80053a6:	6183      	str	r3, [r0, #24]
 80053a8:	4619      	mov	r1, r3
 80053aa:	2208      	movs	r2, #8
 80053ac:	305c      	adds	r0, #92	; 0x5c
 80053ae:	f000 fa05 	bl	80057bc <memset>
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <std+0x58>)
 80053b4:	6224      	str	r4, [r4, #32]
 80053b6:	6263      	str	r3, [r4, #36]	; 0x24
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <std+0x5c>)
 80053ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <std+0x60>)
 80053be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <std+0x64>)
 80053c2:	6323      	str	r3, [r4, #48]	; 0x30
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <std+0x68>)
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d006      	beq.n	80053d8 <std+0x48>
 80053ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053ce:	4294      	cmp	r4, r2
 80053d0:	d002      	beq.n	80053d8 <std+0x48>
 80053d2:	33d0      	adds	r3, #208	; 0xd0
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d105      	bne.n	80053e4 <std+0x54>
 80053d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e0:	f000 ba68 	b.w	80058b4 <__retarget_lock_init_recursive>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	bf00      	nop
 80053e8:	0800560d 	.word	0x0800560d
 80053ec:	0800562f 	.word	0x0800562f
 80053f0:	08005667 	.word	0x08005667
 80053f4:	0800568b 	.word	0x0800568b
 80053f8:	20000304 	.word	0x20000304

080053fc <stdio_exit_handler>:
 80053fc:	4a02      	ldr	r2, [pc, #8]	; (8005408 <stdio_exit_handler+0xc>)
 80053fe:	4903      	ldr	r1, [pc, #12]	; (800540c <stdio_exit_handler+0x10>)
 8005400:	4803      	ldr	r0, [pc, #12]	; (8005410 <stdio_exit_handler+0x14>)
 8005402:	f000 b869 	b.w	80054d8 <_fwalk_sglue>
 8005406:	bf00      	nop
 8005408:	20000010 	.word	0x20000010
 800540c:	080081e1 	.word	0x080081e1
 8005410:	2000001c 	.word	0x2000001c

08005414 <cleanup_stdio>:
 8005414:	6841      	ldr	r1, [r0, #4]
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <cleanup_stdio+0x34>)
 8005418:	b510      	push	{r4, lr}
 800541a:	4299      	cmp	r1, r3
 800541c:	4604      	mov	r4, r0
 800541e:	d001      	beq.n	8005424 <cleanup_stdio+0x10>
 8005420:	f002 fede 	bl	80081e0 <_fflush_r>
 8005424:	68a1      	ldr	r1, [r4, #8]
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <cleanup_stdio+0x38>)
 8005428:	4299      	cmp	r1, r3
 800542a:	d002      	beq.n	8005432 <cleanup_stdio+0x1e>
 800542c:	4620      	mov	r0, r4
 800542e:	f002 fed7 	bl	80081e0 <_fflush_r>
 8005432:	68e1      	ldr	r1, [r4, #12]
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <cleanup_stdio+0x3c>)
 8005436:	4299      	cmp	r1, r3
 8005438:	d004      	beq.n	8005444 <cleanup_stdio+0x30>
 800543a:	4620      	mov	r0, r4
 800543c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005440:	f002 bece 	b.w	80081e0 <_fflush_r>
 8005444:	bd10      	pop	{r4, pc}
 8005446:	bf00      	nop
 8005448:	20000304 	.word	0x20000304
 800544c:	2000036c 	.word	0x2000036c
 8005450:	200003d4 	.word	0x200003d4

08005454 <global_stdio_init.part.0>:
 8005454:	b510      	push	{r4, lr}
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <global_stdio_init.part.0+0x30>)
 8005458:	4c0b      	ldr	r4, [pc, #44]	; (8005488 <global_stdio_init.part.0+0x34>)
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <global_stdio_init.part.0+0x38>)
 800545c:	4620      	mov	r0, r4
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	2104      	movs	r1, #4
 8005462:	2200      	movs	r2, #0
 8005464:	f7ff ff94 	bl	8005390 <std>
 8005468:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800546c:	2201      	movs	r2, #1
 800546e:	2109      	movs	r1, #9
 8005470:	f7ff ff8e 	bl	8005390 <std>
 8005474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005478:	2202      	movs	r2, #2
 800547a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547e:	2112      	movs	r1, #18
 8005480:	f7ff bf86 	b.w	8005390 <std>
 8005484:	2000043c 	.word	0x2000043c
 8005488:	20000304 	.word	0x20000304
 800548c:	080053fd 	.word	0x080053fd

08005490 <__sfp_lock_acquire>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__sfp_lock_acquire+0x8>)
 8005492:	f000 ba10 	b.w	80058b6 <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	20000445 	.word	0x20000445

0800549c <__sfp_lock_release>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__sfp_lock_release+0x8>)
 800549e:	f000 ba0b 	b.w	80058b8 <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	20000445 	.word	0x20000445

080054a8 <__sinit>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	f7ff fff0 	bl	8005490 <__sfp_lock_acquire>
 80054b0:	6a23      	ldr	r3, [r4, #32]
 80054b2:	b11b      	cbz	r3, 80054bc <__sinit+0x14>
 80054b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b8:	f7ff bff0 	b.w	800549c <__sfp_lock_release>
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <__sinit+0x28>)
 80054be:	6223      	str	r3, [r4, #32]
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <__sinit+0x2c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f5      	bne.n	80054b4 <__sinit+0xc>
 80054c8:	f7ff ffc4 	bl	8005454 <global_stdio_init.part.0>
 80054cc:	e7f2      	b.n	80054b4 <__sinit+0xc>
 80054ce:	bf00      	nop
 80054d0:	08005415 	.word	0x08005415
 80054d4:	2000043c 	.word	0x2000043c

080054d8 <_fwalk_sglue>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	4607      	mov	r7, r0
 80054de:	4688      	mov	r8, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	2600      	movs	r6, #0
 80054e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054e8:	f1b9 0901 	subs.w	r9, r9, #1
 80054ec:	d505      	bpl.n	80054fa <_fwalk_sglue+0x22>
 80054ee:	6824      	ldr	r4, [r4, #0]
 80054f0:	2c00      	cmp	r4, #0
 80054f2:	d1f7      	bne.n	80054e4 <_fwalk_sglue+0xc>
 80054f4:	4630      	mov	r0, r6
 80054f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d907      	bls.n	8005510 <_fwalk_sglue+0x38>
 8005500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005504:	3301      	adds	r3, #1
 8005506:	d003      	beq.n	8005510 <_fwalk_sglue+0x38>
 8005508:	4629      	mov	r1, r5
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	4306      	orrs	r6, r0
 8005510:	3568      	adds	r5, #104	; 0x68
 8005512:	e7e9      	b.n	80054e8 <_fwalk_sglue+0x10>

08005514 <_puts_r>:
 8005514:	6a03      	ldr	r3, [r0, #32]
 8005516:	b570      	push	{r4, r5, r6, lr}
 8005518:	4605      	mov	r5, r0
 800551a:	460e      	mov	r6, r1
 800551c:	6884      	ldr	r4, [r0, #8]
 800551e:	b90b      	cbnz	r3, 8005524 <_puts_r+0x10>
 8005520:	f7ff ffc2 	bl	80054a8 <__sinit>
 8005524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005526:	07db      	lsls	r3, r3, #31
 8005528:	d405      	bmi.n	8005536 <_puts_r+0x22>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	0598      	lsls	r0, r3, #22
 800552e:	d402      	bmi.n	8005536 <_puts_r+0x22>
 8005530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005532:	f000 f9c0 	bl	80058b6 <__retarget_lock_acquire_recursive>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	0719      	lsls	r1, r3, #28
 800553a:	d513      	bpl.n	8005564 <_puts_r+0x50>
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	b18b      	cbz	r3, 8005564 <_puts_r+0x50>
 8005540:	3e01      	subs	r6, #1
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005548:	3b01      	subs	r3, #1
 800554a:	60a3      	str	r3, [r4, #8]
 800554c:	b9e9      	cbnz	r1, 800558a <_puts_r+0x76>
 800554e:	2b00      	cmp	r3, #0
 8005550:	da2e      	bge.n	80055b0 <_puts_r+0x9c>
 8005552:	4622      	mov	r2, r4
 8005554:	210a      	movs	r1, #10
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f89b 	bl	8005692 <__swbuf_r>
 800555c:	3001      	adds	r0, #1
 800555e:	d007      	beq.n	8005570 <_puts_r+0x5c>
 8005560:	250a      	movs	r5, #10
 8005562:	e007      	b.n	8005574 <_puts_r+0x60>
 8005564:	4621      	mov	r1, r4
 8005566:	4628      	mov	r0, r5
 8005568:	f000 f8d0 	bl	800570c <__swsetup_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	d0e7      	beq.n	8005540 <_puts_r+0x2c>
 8005570:	f04f 35ff 	mov.w	r5, #4294967295
 8005574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005576:	07da      	lsls	r2, r3, #31
 8005578:	d405      	bmi.n	8005586 <_puts_r+0x72>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	059b      	lsls	r3, r3, #22
 800557e:	d402      	bmi.n	8005586 <_puts_r+0x72>
 8005580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005582:	f000 f999 	bl	80058b8 <__retarget_lock_release_recursive>
 8005586:	4628      	mov	r0, r5
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	2b00      	cmp	r3, #0
 800558c:	da04      	bge.n	8005598 <_puts_r+0x84>
 800558e:	69a2      	ldr	r2, [r4, #24]
 8005590:	429a      	cmp	r2, r3
 8005592:	dc06      	bgt.n	80055a2 <_puts_r+0x8e>
 8005594:	290a      	cmp	r1, #10
 8005596:	d004      	beq.n	80055a2 <_puts_r+0x8e>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	7019      	strb	r1, [r3, #0]
 80055a0:	e7cf      	b.n	8005542 <_puts_r+0x2e>
 80055a2:	4622      	mov	r2, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f874 	bl	8005692 <__swbuf_r>
 80055aa:	3001      	adds	r0, #1
 80055ac:	d1c9      	bne.n	8005542 <_puts_r+0x2e>
 80055ae:	e7df      	b.n	8005570 <_puts_r+0x5c>
 80055b0:	250a      	movs	r5, #10
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	701d      	strb	r5, [r3, #0]
 80055ba:	e7db      	b.n	8005574 <_puts_r+0x60>

080055bc <puts>:
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <puts+0xc>)
 80055be:	4601      	mov	r1, r0
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	f7ff bfa7 	b.w	8005514 <_puts_r>
 80055c6:	bf00      	nop
 80055c8:	20000068 	.word	0x20000068

080055cc <siprintf>:
 80055cc:	b40e      	push	{r1, r2, r3}
 80055ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055d2:	b500      	push	{lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	9107      	str	r1, [sp, #28]
 80055de:	9104      	str	r1, [sp, #16]
 80055e0:	4808      	ldr	r0, [pc, #32]	; (8005604 <siprintf+0x38>)
 80055e2:	4909      	ldr	r1, [pc, #36]	; (8005608 <siprintf+0x3c>)
 80055e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e8:	9105      	str	r1, [sp, #20]
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	a902      	add	r1, sp, #8
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f002 fc76 	bl	8007ee0 <_svfiprintf_r>
 80055f4:	2200      	movs	r2, #0
 80055f6:	9b02      	ldr	r3, [sp, #8]
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	b01c      	add	sp, #112	; 0x70
 80055fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005600:	b003      	add	sp, #12
 8005602:	4770      	bx	lr
 8005604:	20000068 	.word	0x20000068
 8005608:	ffff0208 	.word	0xffff0208

0800560c <__sread>:
 800560c:	b510      	push	{r4, lr}
 800560e:	460c      	mov	r4, r1
 8005610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005614:	f000 f900 	bl	8005818 <_read_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	bfab      	itete	ge
 800561c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800561e:	89a3      	ldrhlt	r3, [r4, #12]
 8005620:	181b      	addge	r3, r3, r0
 8005622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005626:	bfac      	ite	ge
 8005628:	6563      	strge	r3, [r4, #84]	; 0x54
 800562a:	81a3      	strhlt	r3, [r4, #12]
 800562c:	bd10      	pop	{r4, pc}

0800562e <__swrite>:
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	461f      	mov	r7, r3
 8005634:	898b      	ldrh	r3, [r1, #12]
 8005636:	4605      	mov	r5, r0
 8005638:	05db      	lsls	r3, r3, #23
 800563a:	460c      	mov	r4, r1
 800563c:	4616      	mov	r6, r2
 800563e:	d505      	bpl.n	800564c <__swrite+0x1e>
 8005640:	2302      	movs	r3, #2
 8005642:	2200      	movs	r2, #0
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f000 f8d4 	bl	80057f4 <_lseek_r>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	4632      	mov	r2, r6
 8005650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	4628      	mov	r0, r5
 8005658:	463b      	mov	r3, r7
 800565a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005662:	f000 b8eb 	b.w	800583c <_write_r>

08005666 <__sseek>:
 8005666:	b510      	push	{r4, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566e:	f000 f8c1 	bl	80057f4 <_lseek_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	bf15      	itete	ne
 8005678:	6560      	strne	r0, [r4, #84]	; 0x54
 800567a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800567e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005682:	81a3      	strheq	r3, [r4, #12]
 8005684:	bf18      	it	ne
 8005686:	81a3      	strhne	r3, [r4, #12]
 8005688:	bd10      	pop	{r4, pc}

0800568a <__sclose>:
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 b8a1 	b.w	80057d4 <_close_r>

08005692 <__swbuf_r>:
 8005692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005694:	460e      	mov	r6, r1
 8005696:	4614      	mov	r4, r2
 8005698:	4605      	mov	r5, r0
 800569a:	b118      	cbz	r0, 80056a4 <__swbuf_r+0x12>
 800569c:	6a03      	ldr	r3, [r0, #32]
 800569e:	b90b      	cbnz	r3, 80056a4 <__swbuf_r+0x12>
 80056a0:	f7ff ff02 	bl	80054a8 <__sinit>
 80056a4:	69a3      	ldr	r3, [r4, #24]
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	071a      	lsls	r2, r3, #28
 80056ac:	d525      	bpl.n	80056fa <__swbuf_r+0x68>
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	b31b      	cbz	r3, 80056fa <__swbuf_r+0x68>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	6922      	ldr	r2, [r4, #16]
 80056b6:	b2f6      	uxtb	r6, r6
 80056b8:	1a98      	subs	r0, r3, r2
 80056ba:	6963      	ldr	r3, [r4, #20]
 80056bc:	4637      	mov	r7, r6
 80056be:	4283      	cmp	r3, r0
 80056c0:	dc04      	bgt.n	80056cc <__swbuf_r+0x3a>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f002 fd8b 	bl	80081e0 <_fflush_r>
 80056ca:	b9e0      	cbnz	r0, 8005706 <__swbuf_r+0x74>
 80056cc:	68a3      	ldr	r3, [r4, #8]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60a3      	str	r3, [r4, #8]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	6022      	str	r2, [r4, #0]
 80056d8:	701e      	strb	r6, [r3, #0]
 80056da:	6962      	ldr	r2, [r4, #20]
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	429a      	cmp	r2, r3
 80056e0:	d004      	beq.n	80056ec <__swbuf_r+0x5a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	07db      	lsls	r3, r3, #31
 80056e6:	d506      	bpl.n	80056f6 <__swbuf_r+0x64>
 80056e8:	2e0a      	cmp	r6, #10
 80056ea:	d104      	bne.n	80056f6 <__swbuf_r+0x64>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f002 fd76 	bl	80081e0 <_fflush_r>
 80056f4:	b938      	cbnz	r0, 8005706 <__swbuf_r+0x74>
 80056f6:	4638      	mov	r0, r7
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f805 	bl	800570c <__swsetup_r>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0d5      	beq.n	80056b2 <__swbuf_r+0x20>
 8005706:	f04f 37ff 	mov.w	r7, #4294967295
 800570a:	e7f4      	b.n	80056f6 <__swbuf_r+0x64>

0800570c <__swsetup_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <__swsetup_r+0xac>)
 8005710:	4605      	mov	r5, r0
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	460c      	mov	r4, r1
 8005716:	b118      	cbz	r0, 8005720 <__swsetup_r+0x14>
 8005718:	6a03      	ldr	r3, [r0, #32]
 800571a:	b90b      	cbnz	r3, 8005720 <__swsetup_r+0x14>
 800571c:	f7ff fec4 	bl	80054a8 <__sinit>
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005726:	0718      	lsls	r0, r3, #28
 8005728:	d422      	bmi.n	8005770 <__swsetup_r+0x64>
 800572a:	06d9      	lsls	r1, r3, #27
 800572c:	d407      	bmi.n	800573e <__swsetup_r+0x32>
 800572e:	2309      	movs	r3, #9
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005736:	f04f 30ff 	mov.w	r0, #4294967295
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	e034      	b.n	80057a8 <__swsetup_r+0x9c>
 800573e:	0758      	lsls	r0, r3, #29
 8005740:	d512      	bpl.n	8005768 <__swsetup_r+0x5c>
 8005742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005744:	b141      	cbz	r1, 8005758 <__swsetup_r+0x4c>
 8005746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800574a:	4299      	cmp	r1, r3
 800574c:	d002      	beq.n	8005754 <__swsetup_r+0x48>
 800574e:	4628      	mov	r0, r5
 8005750:	f000 ff36 	bl	80065c0 <_free_r>
 8005754:	2300      	movs	r3, #0
 8005756:	6363      	str	r3, [r4, #52]	; 0x34
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	2300      	movs	r3, #0
 8005762:	6063      	str	r3, [r4, #4]
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0308 	orr.w	r3, r3, #8
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	b94b      	cbnz	r3, 8005788 <__swsetup_r+0x7c>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800577a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577e:	d003      	beq.n	8005788 <__swsetup_r+0x7c>
 8005780:	4621      	mov	r1, r4
 8005782:	4628      	mov	r0, r5
 8005784:	f002 fd79 	bl	800827a <__smakebuf_r>
 8005788:	89a0      	ldrh	r0, [r4, #12]
 800578a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800578e:	f010 0301 	ands.w	r3, r0, #1
 8005792:	d00a      	beq.n	80057aa <__swsetup_r+0x9e>
 8005794:	2300      	movs	r3, #0
 8005796:	60a3      	str	r3, [r4, #8]
 8005798:	6963      	ldr	r3, [r4, #20]
 800579a:	425b      	negs	r3, r3
 800579c:	61a3      	str	r3, [r4, #24]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	b943      	cbnz	r3, 80057b4 <__swsetup_r+0xa8>
 80057a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a6:	d1c4      	bne.n	8005732 <__swsetup_r+0x26>
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	0781      	lsls	r1, r0, #30
 80057ac:	bf58      	it	pl
 80057ae:	6963      	ldrpl	r3, [r4, #20]
 80057b0:	60a3      	str	r3, [r4, #8]
 80057b2:	e7f4      	b.n	800579e <__swsetup_r+0x92>
 80057b4:	2000      	movs	r0, #0
 80057b6:	e7f7      	b.n	80057a8 <__swsetup_r+0x9c>
 80057b8:	20000068 	.word	0x20000068

080057bc <memset>:
 80057bc:	4603      	mov	r3, r0
 80057be:	4402      	add	r2, r0
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d100      	bne.n	80057c6 <memset+0xa>
 80057c4:	4770      	bx	lr
 80057c6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ca:	e7f9      	b.n	80057c0 <memset+0x4>

080057cc <_localeconv_r>:
 80057cc:	4800      	ldr	r0, [pc, #0]	; (80057d0 <_localeconv_r+0x4>)
 80057ce:	4770      	bx	lr
 80057d0:	2000015c 	.word	0x2000015c

080057d4 <_close_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	2300      	movs	r3, #0
 80057d8:	4d05      	ldr	r5, [pc, #20]	; (80057f0 <_close_r+0x1c>)
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fc f8d4 	bl	800198c <_close>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_close_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_close_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000440 	.word	0x20000440

080057f4 <_lseek_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	2200      	movs	r2, #0
 80057fe:	4d05      	ldr	r5, [pc, #20]	; (8005814 <_lseek_r+0x20>)
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fc f8e6 	bl	80019d4 <_lseek>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_lseek_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_lseek_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000440 	.word	0x20000440

08005818 <_read_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	2200      	movs	r2, #0
 8005822:	4d05      	ldr	r5, [pc, #20]	; (8005838 <_read_r+0x20>)
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fc f877 	bl	800191a <_read>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_read_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_read_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000440 	.word	0x20000440

0800583c <_write_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	4611      	mov	r1, r2
 8005844:	2200      	movs	r2, #0
 8005846:	4d05      	ldr	r5, [pc, #20]	; (800585c <_write_r+0x20>)
 8005848:	602a      	str	r2, [r5, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f7fc f882 	bl	8001954 <_write>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_write_r+0x1e>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_write_r+0x1e>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000440 	.word	0x20000440

08005860 <__errno>:
 8005860:	4b01      	ldr	r3, [pc, #4]	; (8005868 <__errno+0x8>)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000068 	.word	0x20000068

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	2600      	movs	r6, #0
 8005870:	4d0c      	ldr	r5, [pc, #48]	; (80058a4 <__libc_init_array+0x38>)
 8005872:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	f003 fb2c 	bl	8008ed8 <_init>
 8005880:	2600      	movs	r6, #0
 8005882:	4d0a      	ldr	r5, [pc, #40]	; (80058ac <__libc_init_array+0x40>)
 8005884:	4c0a      	ldr	r4, [pc, #40]	; (80058b0 <__libc_init_array+0x44>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f855 3b04 	ldr.w	r3, [r5], #4
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f855 3b04 	ldr.w	r3, [r5], #4
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	08009358 	.word	0x08009358
 80058a8:	08009358 	.word	0x08009358
 80058ac:	08009358 	.word	0x08009358
 80058b0:	0800935c 	.word	0x0800935c

080058b4 <__retarget_lock_init_recursive>:
 80058b4:	4770      	bx	lr

080058b6 <__retarget_lock_acquire_recursive>:
 80058b6:	4770      	bx	lr

080058b8 <__retarget_lock_release_recursive>:
 80058b8:	4770      	bx	lr

080058ba <memchr>:
 80058ba:	4603      	mov	r3, r0
 80058bc:	b510      	push	{r4, lr}
 80058be:	b2c9      	uxtb	r1, r1
 80058c0:	4402      	add	r2, r0
 80058c2:	4293      	cmp	r3, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	d101      	bne.n	80058cc <memchr+0x12>
 80058c8:	2000      	movs	r0, #0
 80058ca:	e003      	b.n	80058d4 <memchr+0x1a>
 80058cc:	7804      	ldrb	r4, [r0, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	428c      	cmp	r4, r1
 80058d2:	d1f6      	bne.n	80058c2 <memchr+0x8>
 80058d4:	bd10      	pop	{r4, pc}
	...

080058d8 <nanf>:
 80058d8:	4800      	ldr	r0, [pc, #0]	; (80058dc <nanf+0x4>)
 80058da:	4770      	bx	lr
 80058dc:	7fc00000 	.word	0x7fc00000

080058e0 <quorem>:
 80058e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	6903      	ldr	r3, [r0, #16]
 80058e6:	690c      	ldr	r4, [r1, #16]
 80058e8:	4607      	mov	r7, r0
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	db7f      	blt.n	80059ee <quorem+0x10e>
 80058ee:	3c01      	subs	r4, #1
 80058f0:	f100 0514 	add.w	r5, r0, #20
 80058f4:	f101 0814 	add.w	r8, r1, #20
 80058f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005906:	3301      	adds	r3, #1
 8005908:	429a      	cmp	r2, r3
 800590a:	fbb2 f6f3 	udiv	r6, r2, r3
 800590e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005916:	d331      	bcc.n	800597c <quorem+0x9c>
 8005918:	f04f 0e00 	mov.w	lr, #0
 800591c:	4640      	mov	r0, r8
 800591e:	46ac      	mov	ip, r5
 8005920:	46f2      	mov	sl, lr
 8005922:	f850 2b04 	ldr.w	r2, [r0], #4
 8005926:	b293      	uxth	r3, r2
 8005928:	fb06 e303 	mla	r3, r6, r3, lr
 800592c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005930:	0c1a      	lsrs	r2, r3, #16
 8005932:	b29b      	uxth	r3, r3
 8005934:	fb06 220e 	mla	r2, r6, lr, r2
 8005938:	ebaa 0303 	sub.w	r3, sl, r3
 800593c:	f8dc a000 	ldr.w	sl, [ip]
 8005940:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005944:	fa1f fa8a 	uxth.w	sl, sl
 8005948:	4453      	add	r3, sl
 800594a:	f8dc a000 	ldr.w	sl, [ip]
 800594e:	b292      	uxth	r2, r2
 8005950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800595e:	4581      	cmp	r9, r0
 8005960:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005964:	f84c 3b04 	str.w	r3, [ip], #4
 8005968:	d2db      	bcs.n	8005922 <quorem+0x42>
 800596a:	f855 300b 	ldr.w	r3, [r5, fp]
 800596e:	b92b      	cbnz	r3, 800597c <quorem+0x9c>
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	3b04      	subs	r3, #4
 8005974:	429d      	cmp	r5, r3
 8005976:	461a      	mov	r2, r3
 8005978:	d32d      	bcc.n	80059d6 <quorem+0xf6>
 800597a:	613c      	str	r4, [r7, #16]
 800597c:	4638      	mov	r0, r7
 800597e:	f001 f9df 	bl	8006d40 <__mcmp>
 8005982:	2800      	cmp	r0, #0
 8005984:	db23      	blt.n	80059ce <quorem+0xee>
 8005986:	4629      	mov	r1, r5
 8005988:	2000      	movs	r0, #0
 800598a:	3601      	adds	r6, #1
 800598c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005990:	f8d1 c000 	ldr.w	ip, [r1]
 8005994:	b293      	uxth	r3, r2
 8005996:	1ac3      	subs	r3, r0, r3
 8005998:	0c12      	lsrs	r2, r2, #16
 800599a:	fa1f f08c 	uxth.w	r0, ip
 800599e:	4403      	add	r3, r0
 80059a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ae:	45c1      	cmp	r9, r8
 80059b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059b4:	f841 3b04 	str.w	r3, [r1], #4
 80059b8:	d2e8      	bcs.n	800598c <quorem+0xac>
 80059ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059c2:	b922      	cbnz	r2, 80059ce <quorem+0xee>
 80059c4:	3b04      	subs	r3, #4
 80059c6:	429d      	cmp	r5, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	d30a      	bcc.n	80059e2 <quorem+0x102>
 80059cc:	613c      	str	r4, [r7, #16]
 80059ce:	4630      	mov	r0, r6
 80059d0:	b003      	add	sp, #12
 80059d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	3b04      	subs	r3, #4
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d1cd      	bne.n	800597a <quorem+0x9a>
 80059de:	3c01      	subs	r4, #1
 80059e0:	e7c8      	b.n	8005974 <quorem+0x94>
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	3b04      	subs	r3, #4
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	d1f0      	bne.n	80059cc <quorem+0xec>
 80059ea:	3c01      	subs	r4, #1
 80059ec:	e7eb      	b.n	80059c6 <quorem+0xe6>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e7ee      	b.n	80059d0 <quorem+0xf0>
 80059f2:	0000      	movs	r0, r0
 80059f4:	0000      	movs	r0, r0
	...

080059f8 <_dtoa_r>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	4616      	mov	r6, r2
 80059fe:	461f      	mov	r7, r3
 8005a00:	69c4      	ldr	r4, [r0, #28]
 8005a02:	b099      	sub	sp, #100	; 0x64
 8005a04:	4605      	mov	r5, r0
 8005a06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a0e:	b974      	cbnz	r4, 8005a2e <_dtoa_r+0x36>
 8005a10:	2010      	movs	r0, #16
 8005a12:	f000 fe1d 	bl	8006650 <malloc>
 8005a16:	4602      	mov	r2, r0
 8005a18:	61e8      	str	r0, [r5, #28]
 8005a1a:	b920      	cbnz	r0, 8005a26 <_dtoa_r+0x2e>
 8005a1c:	21ef      	movs	r1, #239	; 0xef
 8005a1e:	4bac      	ldr	r3, [pc, #688]	; (8005cd0 <_dtoa_r+0x2d8>)
 8005a20:	48ac      	ldr	r0, [pc, #688]	; (8005cd4 <_dtoa_r+0x2dc>)
 8005a22:	f002 fcd9 	bl	80083d8 <__assert_func>
 8005a26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a2a:	6004      	str	r4, [r0, #0]
 8005a2c:	60c4      	str	r4, [r0, #12]
 8005a2e:	69eb      	ldr	r3, [r5, #28]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	b151      	cbz	r1, 8005a4a <_dtoa_r+0x52>
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	2301      	movs	r3, #1
 8005a38:	4093      	lsls	r3, r2
 8005a3a:	604a      	str	r2, [r1, #4]
 8005a3c:	608b      	str	r3, [r1, #8]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fefa 	bl	8006838 <_Bfree>
 8005a44:	2200      	movs	r2, #0
 8005a46:	69eb      	ldr	r3, [r5, #28]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	1e3b      	subs	r3, r7, #0
 8005a4c:	bfaf      	iteee	ge
 8005a4e:	2300      	movge	r3, #0
 8005a50:	2201      	movlt	r2, #1
 8005a52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	9305      	strlt	r3, [sp, #20]
 8005a58:	bfa8      	it	ge
 8005a5a:	f8c8 3000 	strge.w	r3, [r8]
 8005a5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a62:	4b9d      	ldr	r3, [pc, #628]	; (8005cd8 <_dtoa_r+0x2e0>)
 8005a64:	bfb8      	it	lt
 8005a66:	f8c8 2000 	strlt.w	r2, [r8]
 8005a6a:	ea33 0309 	bics.w	r3, r3, r9
 8005a6e:	d119      	bne.n	8005aa4 <_dtoa_r+0xac>
 8005a70:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a7c:	4333      	orrs	r3, r6
 8005a7e:	f000 8589 	beq.w	8006594 <_dtoa_r+0xb9c>
 8005a82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a84:	b953      	cbnz	r3, 8005a9c <_dtoa_r+0xa4>
 8005a86:	4b95      	ldr	r3, [pc, #596]	; (8005cdc <_dtoa_r+0x2e4>)
 8005a88:	e023      	b.n	8005ad2 <_dtoa_r+0xda>
 8005a8a:	4b95      	ldr	r3, [pc, #596]	; (8005ce0 <_dtoa_r+0x2e8>)
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	9803      	ldr	r0, [sp, #12]
 8005a96:	b019      	add	sp, #100	; 0x64
 8005a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9c:	4b8f      	ldr	r3, [pc, #572]	; (8005cdc <_dtoa_r+0x2e4>)
 8005a9e:	9303      	str	r3, [sp, #12]
 8005aa0:	3303      	adds	r3, #3
 8005aa2:	e7f5      	b.n	8005a90 <_dtoa_r+0x98>
 8005aa4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005aa8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005aac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f7fa ffe4 	bl	8000a80 <__aeabi_dcmpeq>
 8005ab8:	4680      	mov	r8, r0
 8005aba:	b160      	cbz	r0, 8005ad6 <_dtoa_r+0xde>
 8005abc:	2301      	movs	r3, #1
 8005abe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8562 	beq.w	800658e <_dtoa_r+0xb96>
 8005aca:	4b86      	ldr	r3, [pc, #536]	; (8005ce4 <_dtoa_r+0x2ec>)
 8005acc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	e7de      	b.n	8005a94 <_dtoa_r+0x9c>
 8005ad6:	ab16      	add	r3, sp, #88	; 0x58
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	ab17      	add	r3, sp, #92	; 0x5c
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ae4:	f001 fa3c 	bl	8006f60 <__d2b>
 8005ae8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005aec:	4682      	mov	sl, r0
 8005aee:	2c00      	cmp	r4, #0
 8005af0:	d07e      	beq.n	8005bf0 <_dtoa_r+0x1f8>
 8005af2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <_dtoa_r+0x2f0>)
 8005b12:	f7fa fb95 	bl	8000240 <__aeabi_dsub>
 8005b16:	a368      	add	r3, pc, #416	; (adr r3, 8005cb8 <_dtoa_r+0x2c0>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f7fa fd48 	bl	80005b0 <__aeabi_dmul>
 8005b20:	a367      	add	r3, pc, #412	; (adr r3, 8005cc0 <_dtoa_r+0x2c8>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fb8d 	bl	8000244 <__adddf3>
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	460f      	mov	r7, r1
 8005b30:	f7fa fcd4 	bl	80004dc <__aeabi_i2d>
 8005b34:	a364      	add	r3, pc, #400	; (adr r3, 8005cc8 <_dtoa_r+0x2d0>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fd39 	bl	80005b0 <__aeabi_dmul>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fb7d 	bl	8000244 <__adddf3>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	460f      	mov	r7, r1
 8005b4e:	f7fa ffdf 	bl	8000b10 <__aeabi_d2iz>
 8005b52:	2200      	movs	r2, #0
 8005b54:	4683      	mov	fp, r0
 8005b56:	2300      	movs	r3, #0
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa ff9a 	bl	8000a94 <__aeabi_dcmplt>
 8005b60:	b148      	cbz	r0, 8005b76 <_dtoa_r+0x17e>
 8005b62:	4658      	mov	r0, fp
 8005b64:	f7fa fcba 	bl	80004dc <__aeabi_i2d>
 8005b68:	4632      	mov	r2, r6
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	f7fa ff88 	bl	8000a80 <__aeabi_dcmpeq>
 8005b70:	b908      	cbnz	r0, 8005b76 <_dtoa_r+0x17e>
 8005b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b76:	f1bb 0f16 	cmp.w	fp, #22
 8005b7a:	d857      	bhi.n	8005c2c <_dtoa_r+0x234>
 8005b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b80:	4b5a      	ldr	r3, [pc, #360]	; (8005cec <_dtoa_r+0x2f4>)
 8005b82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa ff83 	bl	8000a94 <__aeabi_dcmplt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d04e      	beq.n	8005c30 <_dtoa_r+0x238>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b9c:	1b1b      	subs	r3, r3, r4
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	bf46      	itte	mi
 8005ba2:	f1c3 0901 	rsbmi	r9, r3, #1
 8005ba6:	2300      	movmi	r3, #0
 8005ba8:	f04f 0900 	movpl.w	r9, #0
 8005bac:	9209      	str	r2, [sp, #36]	; 0x24
 8005bae:	bf48      	it	mi
 8005bb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005bb2:	f1bb 0f00 	cmp.w	fp, #0
 8005bb6:	db3d      	blt.n	8005c34 <_dtoa_r+0x23c>
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005bbe:	445b      	add	r3, fp
 8005bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8005bc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bc8:	2b09      	cmp	r3, #9
 8005bca:	d867      	bhi.n	8005c9c <_dtoa_r+0x2a4>
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	bfc4      	itt	gt
 8005bd0:	3b04      	subgt	r3, #4
 8005bd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd6:	bfc8      	it	gt
 8005bd8:	2400      	movgt	r4, #0
 8005bda:	f1a3 0302 	sub.w	r3, r3, #2
 8005bde:	bfd8      	it	le
 8005be0:	2401      	movle	r4, #1
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	f200 8086 	bhi.w	8005cf4 <_dtoa_r+0x2fc>
 8005be8:	e8df f003 	tbb	[pc, r3]
 8005bec:	5637392c 	.word	0x5637392c
 8005bf0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005bf4:	441c      	add	r4, r3
 8005bf6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	bfc1      	itttt	gt
 8005bfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c02:	fa09 f903 	lslgt.w	r9, r9, r3
 8005c06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005c0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c0e:	bfd6      	itet	le
 8005c10:	f1c3 0320 	rsble	r3, r3, #32
 8005c14:	ea49 0003 	orrgt.w	r0, r9, r3
 8005c18:	fa06 f003 	lslle.w	r0, r6, r3
 8005c1c:	f7fa fc4e 	bl	80004bc <__aeabi_ui2d>
 8005c20:	2201      	movs	r2, #1
 8005c22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c26:	3c01      	subs	r4, #1
 8005c28:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c2a:	e76f      	b.n	8005b0c <_dtoa_r+0x114>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e7b3      	b.n	8005b98 <_dtoa_r+0x1a0>
 8005c30:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c32:	e7b2      	b.n	8005b9a <_dtoa_r+0x1a2>
 8005c34:	f1cb 0300 	rsb	r3, fp, #0
 8005c38:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	eba9 090b 	sub.w	r9, r9, fp
 8005c40:	930e      	str	r3, [sp, #56]	; 0x38
 8005c42:	e7c0      	b.n	8005bc6 <_dtoa_r+0x1ce>
 8005c44:	2300      	movs	r3, #0
 8005c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dc55      	bgt.n	8005cfa <_dtoa_r+0x302>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	461a      	mov	r2, r3
 8005c52:	9306      	str	r3, [sp, #24]
 8005c54:	9308      	str	r3, [sp, #32]
 8005c56:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c58:	e00b      	b.n	8005c72 <_dtoa_r+0x27a>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e7f3      	b.n	8005c46 <_dtoa_r+0x24e>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c64:	445b      	add	r3, fp
 8005c66:	9306      	str	r3, [sp, #24]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	9308      	str	r3, [sp, #32]
 8005c6e:	bfb8      	it	lt
 8005c70:	2301      	movlt	r3, #1
 8005c72:	2100      	movs	r1, #0
 8005c74:	2204      	movs	r2, #4
 8005c76:	69e8      	ldr	r0, [r5, #28]
 8005c78:	f102 0614 	add.w	r6, r2, #20
 8005c7c:	429e      	cmp	r6, r3
 8005c7e:	d940      	bls.n	8005d02 <_dtoa_r+0x30a>
 8005c80:	6041      	str	r1, [r0, #4]
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fd98 	bl	80067b8 <_Balloc>
 8005c88:	9003      	str	r0, [sp, #12]
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d13c      	bne.n	8005d08 <_dtoa_r+0x310>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f240 11af 	movw	r1, #431	; 0x1af
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <_dtoa_r+0x2f8>)
 8005c96:	e6c3      	b.n	8005a20 <_dtoa_r+0x28>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7e1      	b.n	8005c60 <_dtoa_r+0x268>
 8005c9c:	2401      	movs	r4, #1
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	2200      	movs	r2, #0
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	9308      	str	r3, [sp, #32]
 8005cae:	2312      	movs	r3, #18
 8005cb0:	e7d1      	b.n	8005c56 <_dtoa_r+0x25e>
 8005cb2:	bf00      	nop
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	636f4361 	.word	0x636f4361
 8005cbc:	3fd287a7 	.word	0x3fd287a7
 8005cc0:	8b60c8b3 	.word	0x8b60c8b3
 8005cc4:	3fc68a28 	.word	0x3fc68a28
 8005cc8:	509f79fb 	.word	0x509f79fb
 8005ccc:	3fd34413 	.word	0x3fd34413
 8005cd0:	08008f70 	.word	0x08008f70
 8005cd4:	08008f87 	.word	0x08008f87
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	08008f6c 	.word	0x08008f6c
 8005ce0:	08008f63 	.word	0x08008f63
 8005ce4:	08008f3b 	.word	0x08008f3b
 8005ce8:	3ff80000 	.word	0x3ff80000
 8005cec:	08009078 	.word	0x08009078
 8005cf0:	08008fdf 	.word	0x08008fdf
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	e7d4      	b.n	8005ca4 <_dtoa_r+0x2ac>
 8005cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cfc:	9306      	str	r3, [sp, #24]
 8005cfe:	9308      	str	r3, [sp, #32]
 8005d00:	e7b7      	b.n	8005c72 <_dtoa_r+0x27a>
 8005d02:	3101      	adds	r1, #1
 8005d04:	0052      	lsls	r2, r2, #1
 8005d06:	e7b7      	b.n	8005c78 <_dtoa_r+0x280>
 8005d08:	69eb      	ldr	r3, [r5, #28]
 8005d0a:	9a03      	ldr	r2, [sp, #12]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	2b0e      	cmp	r3, #14
 8005d12:	f200 80a8 	bhi.w	8005e66 <_dtoa_r+0x46e>
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	f000 80a5 	beq.w	8005e66 <_dtoa_r+0x46e>
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	dd34      	ble.n	8005d8c <_dtoa_r+0x394>
 8005d22:	4b9a      	ldr	r3, [pc, #616]	; (8005f8c <_dtoa_r+0x594>)
 8005d24:	f00b 020f 	and.w	r2, fp, #15
 8005d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d38:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005d3c:	d016      	beq.n	8005d6c <_dtoa_r+0x374>
 8005d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d42:	4b93      	ldr	r3, [pc, #588]	; (8005f90 <_dtoa_r+0x598>)
 8005d44:	2703      	movs	r7, #3
 8005d46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d4a:	f7fa fd5b 	bl	8000804 <__aeabi_ddiv>
 8005d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d52:	f004 040f 	and.w	r4, r4, #15
 8005d56:	4e8e      	ldr	r6, [pc, #568]	; (8005f90 <_dtoa_r+0x598>)
 8005d58:	b954      	cbnz	r4, 8005d70 <_dtoa_r+0x378>
 8005d5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d62:	f7fa fd4f 	bl	8000804 <__aeabi_ddiv>
 8005d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d6a:	e029      	b.n	8005dc0 <_dtoa_r+0x3c8>
 8005d6c:	2702      	movs	r7, #2
 8005d6e:	e7f2      	b.n	8005d56 <_dtoa_r+0x35e>
 8005d70:	07e1      	lsls	r1, r4, #31
 8005d72:	d508      	bpl.n	8005d86 <_dtoa_r+0x38e>
 8005d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d7c:	f7fa fc18 	bl	80005b0 <__aeabi_dmul>
 8005d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d84:	3701      	adds	r7, #1
 8005d86:	1064      	asrs	r4, r4, #1
 8005d88:	3608      	adds	r6, #8
 8005d8a:	e7e5      	b.n	8005d58 <_dtoa_r+0x360>
 8005d8c:	f000 80a5 	beq.w	8005eda <_dtoa_r+0x4e2>
 8005d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d94:	f1cb 0400 	rsb	r4, fp, #0
 8005d98:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <_dtoa_r+0x594>)
 8005d9a:	f004 020f 	and.w	r2, r4, #15
 8005d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fc03 	bl	80005b0 <__aeabi_dmul>
 8005daa:	2702      	movs	r7, #2
 8005dac:	2300      	movs	r3, #0
 8005dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db2:	4e77      	ldr	r6, [pc, #476]	; (8005f90 <_dtoa_r+0x598>)
 8005db4:	1124      	asrs	r4, r4, #4
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	f040 8084 	bne.w	8005ec4 <_dtoa_r+0x4cc>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1d2      	bne.n	8005d66 <_dtoa_r+0x36e>
 8005dc0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8087 	beq.w	8005ede <_dtoa_r+0x4e6>
 8005dd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <_dtoa_r+0x59c>)
 8005dd8:	f7fa fe5c 	bl	8000a94 <__aeabi_dcmplt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d07e      	beq.n	8005ede <_dtoa_r+0x4e6>
 8005de0:	9b08      	ldr	r3, [sp, #32]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d07b      	beq.n	8005ede <_dtoa_r+0x4e6>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd38      	ble.n	8005e5e <_dtoa_r+0x466>
 8005dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005df0:	2200      	movs	r2, #0
 8005df2:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <_dtoa_r+0x5a0>)
 8005df4:	f7fa fbdc 	bl	80005b0 <__aeabi_dmul>
 8005df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfc:	9c06      	ldr	r4, [sp, #24]
 8005dfe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005e02:	3701      	adds	r7, #1
 8005e04:	4638      	mov	r0, r7
 8005e06:	f7fa fb69 	bl	80004dc <__aeabi_i2d>
 8005e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e0e:	f7fa fbcf 	bl	80005b0 <__aeabi_dmul>
 8005e12:	2200      	movs	r2, #0
 8005e14:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <_dtoa_r+0x5a4>)
 8005e16:	f7fa fa15 	bl	8000244 <__adddf3>
 8005e1a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e22:	9611      	str	r6, [sp, #68]	; 0x44
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	d15d      	bne.n	8005ee4 <_dtoa_r+0x4ec>
 8005e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <_dtoa_r+0x5a8>)
 8005e30:	f7fa fa06 	bl	8000240 <__aeabi_dsub>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e3c:	4633      	mov	r3, r6
 8005e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e40:	f7fa fe46 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f040 8295 	bne.w	8006374 <_dtoa_r+0x97c>
 8005e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e54:	f7fa fe1e 	bl	8000a94 <__aeabi_dcmplt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 8289 	bne.w	8006370 <_dtoa_r+0x978>
 8005e5e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f2c0 8151 	blt.w	8006110 <_dtoa_r+0x718>
 8005e6e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e72:	f300 814d 	bgt.w	8006110 <_dtoa_r+0x718>
 8005e76:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <_dtoa_r+0x594>)
 8005e78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f280 80da 	bge.w	8006040 <_dtoa_r+0x648>
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f300 80d6 	bgt.w	8006040 <_dtoa_r+0x648>
 8005e94:	f040 826b 	bne.w	800636e <_dtoa_r+0x976>
 8005e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <_dtoa_r+0x5a8>)
 8005ea0:	f7fa fb86 	bl	80005b0 <__aeabi_dmul>
 8005ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea8:	f7fa fe08 	bl	8000abc <__aeabi_dcmpge>
 8005eac:	9c08      	ldr	r4, [sp, #32]
 8005eae:	4626      	mov	r6, r4
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 8241 	bne.w	8006338 <_dtoa_r+0x940>
 8005eb6:	2331      	movs	r3, #49	; 0x31
 8005eb8:	9f03      	ldr	r7, [sp, #12]
 8005eba:	f10b 0b01 	add.w	fp, fp, #1
 8005ebe:	f807 3b01 	strb.w	r3, [r7], #1
 8005ec2:	e23d      	b.n	8006340 <_dtoa_r+0x948>
 8005ec4:	07e2      	lsls	r2, r4, #31
 8005ec6:	d505      	bpl.n	8005ed4 <_dtoa_r+0x4dc>
 8005ec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ecc:	f7fa fb70 	bl	80005b0 <__aeabi_dmul>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	3701      	adds	r7, #1
 8005ed4:	1064      	asrs	r4, r4, #1
 8005ed6:	3608      	adds	r6, #8
 8005ed8:	e76d      	b.n	8005db6 <_dtoa_r+0x3be>
 8005eda:	2702      	movs	r7, #2
 8005edc:	e770      	b.n	8005dc0 <_dtoa_r+0x3c8>
 8005ede:	46d8      	mov	r8, fp
 8005ee0:	9c08      	ldr	r4, [sp, #32]
 8005ee2:	e78f      	b.n	8005e04 <_dtoa_r+0x40c>
 8005ee4:	9903      	ldr	r1, [sp, #12]
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <_dtoa_r+0x594>)
 8005ee8:	4421      	add	r1, r4
 8005eea:	9112      	str	r1, [sp, #72]	; 0x48
 8005eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d054      	beq.n	8005fa8 <_dtoa_r+0x5b0>
 8005efe:	2000      	movs	r0, #0
 8005f00:	4928      	ldr	r1, [pc, #160]	; (8005fa4 <_dtoa_r+0x5ac>)
 8005f02:	f7fa fc7f 	bl	8000804 <__aeabi_ddiv>
 8005f06:	463b      	mov	r3, r7
 8005f08:	4632      	mov	r2, r6
 8005f0a:	f7fa f999 	bl	8000240 <__aeabi_dsub>
 8005f0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f12:	9f03      	ldr	r7, [sp, #12]
 8005f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f18:	f7fa fdfa 	bl	8000b10 <__aeabi_d2iz>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	f7fa fadd 	bl	80004dc <__aeabi_i2d>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2a:	f7fa f989 	bl	8000240 <__aeabi_dsub>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	3430      	adds	r4, #48	; 0x30
 8005f34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f3c:	f807 4b01 	strb.w	r4, [r7], #1
 8005f40:	f7fa fda8 	bl	8000a94 <__aeabi_dcmplt>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d173      	bne.n	8006030 <_dtoa_r+0x638>
 8005f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	4911      	ldr	r1, [pc, #68]	; (8005f94 <_dtoa_r+0x59c>)
 8005f50:	f7fa f976 	bl	8000240 <__aeabi_dsub>
 8005f54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f58:	f7fa fd9c 	bl	8000a94 <__aeabi_dcmplt>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f040 80b6 	bne.w	80060ce <_dtoa_r+0x6d6>
 8005f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f64:	429f      	cmp	r7, r3
 8005f66:	f43f af7a 	beq.w	8005e5e <_dtoa_r+0x466>
 8005f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <_dtoa_r+0x5a0>)
 8005f72:	f7fa fb1d 	bl	80005b0 <__aeabi_dmul>
 8005f76:	2200      	movs	r2, #0
 8005f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <_dtoa_r+0x5a0>)
 8005f82:	f7fa fb15 	bl	80005b0 <__aeabi_dmul>
 8005f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f8a:	e7c3      	b.n	8005f14 <_dtoa_r+0x51c>
 8005f8c:	08009078 	.word	0x08009078
 8005f90:	08009050 	.word	0x08009050
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	401c0000 	.word	0x401c0000
 8005fa0:	40140000 	.word	0x40140000
 8005fa4:	3fe00000 	.word	0x3fe00000
 8005fa8:	4630      	mov	r0, r6
 8005faa:	4639      	mov	r1, r7
 8005fac:	f7fa fb00 	bl	80005b0 <__aeabi_dmul>
 8005fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fb6:	9c03      	ldr	r4, [sp, #12]
 8005fb8:	9314      	str	r3, [sp, #80]	; 0x50
 8005fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fbe:	f7fa fda7 	bl	8000b10 <__aeabi_d2iz>
 8005fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8005fc4:	f7fa fa8a 	bl	80004dc <__aeabi_i2d>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd0:	f7fa f936 	bl	8000240 <__aeabi_dsub>
 8005fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	3330      	adds	r3, #48	; 0x30
 8005fda:	f804 3b01 	strb.w	r3, [r4], #1
 8005fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	d124      	bne.n	8006034 <_dtoa_r+0x63c>
 8005fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fee:	4baf      	ldr	r3, [pc, #700]	; (80062ac <_dtoa_r+0x8b4>)
 8005ff0:	f7fa f928 	bl	8000244 <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa fd68 	bl	8000ad0 <__aeabi_dcmpgt>
 8006000:	2800      	cmp	r0, #0
 8006002:	d163      	bne.n	80060cc <_dtoa_r+0x6d4>
 8006004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006008:	2000      	movs	r0, #0
 800600a:	49a8      	ldr	r1, [pc, #672]	; (80062ac <_dtoa_r+0x8b4>)
 800600c:	f7fa f918 	bl	8000240 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fd3c 	bl	8000a94 <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f af1e 	beq.w	8005e5e <_dtoa_r+0x466>
 8006022:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006024:	1e7b      	subs	r3, r7, #1
 8006026:	9314      	str	r3, [sp, #80]	; 0x50
 8006028:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d0f8      	beq.n	8006022 <_dtoa_r+0x62a>
 8006030:	46c3      	mov	fp, r8
 8006032:	e03b      	b.n	80060ac <_dtoa_r+0x6b4>
 8006034:	4b9e      	ldr	r3, [pc, #632]	; (80062b0 <_dtoa_r+0x8b8>)
 8006036:	f7fa fabb 	bl	80005b0 <__aeabi_dmul>
 800603a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800603e:	e7bc      	b.n	8005fba <_dtoa_r+0x5c2>
 8006040:	9f03      	ldr	r7, [sp, #12]
 8006042:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa fbd9 	bl	8000804 <__aeabi_ddiv>
 8006052:	f7fa fd5d 	bl	8000b10 <__aeabi_d2iz>
 8006056:	4604      	mov	r4, r0
 8006058:	f7fa fa40 	bl	80004dc <__aeabi_i2d>
 800605c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006060:	f7fa faa6 	bl	80005b0 <__aeabi_dmul>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	f7fa f8e8 	bl	8000240 <__aeabi_dsub>
 8006070:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006074:	f807 6b01 	strb.w	r6, [r7], #1
 8006078:	9e03      	ldr	r6, [sp, #12]
 800607a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800607e:	1bbe      	subs	r6, r7, r6
 8006080:	45b4      	cmp	ip, r6
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	d136      	bne.n	80060f6 <_dtoa_r+0x6fe>
 8006088:	f7fa f8dc 	bl	8000244 <__adddf3>
 800608c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006090:	4680      	mov	r8, r0
 8006092:	4689      	mov	r9, r1
 8006094:	f7fa fd1c 	bl	8000ad0 <__aeabi_dcmpgt>
 8006098:	bb58      	cbnz	r0, 80060f2 <_dtoa_r+0x6fa>
 800609a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fced 	bl	8000a80 <__aeabi_dcmpeq>
 80060a6:	b108      	cbz	r0, 80060ac <_dtoa_r+0x6b4>
 80060a8:	07e3      	lsls	r3, r4, #31
 80060aa:	d422      	bmi.n	80060f2 <_dtoa_r+0x6fa>
 80060ac:	4651      	mov	r1, sl
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 fbc2 	bl	8006838 <_Bfree>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060b8:	703b      	strb	r3, [r7, #0]
 80060ba:	f10b 0301 	add.w	r3, fp, #1
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f43f ace6 	beq.w	8005a94 <_dtoa_r+0x9c>
 80060c8:	601f      	str	r7, [r3, #0]
 80060ca:	e4e3      	b.n	8005a94 <_dtoa_r+0x9c>
 80060cc:	4627      	mov	r7, r4
 80060ce:	463b      	mov	r3, r7
 80060d0:	461f      	mov	r7, r3
 80060d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060d6:	2a39      	cmp	r2, #57	; 0x39
 80060d8:	d107      	bne.n	80060ea <_dtoa_r+0x6f2>
 80060da:	9a03      	ldr	r2, [sp, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1f7      	bne.n	80060d0 <_dtoa_r+0x6d8>
 80060e0:	2230      	movs	r2, #48	; 0x30
 80060e2:	9903      	ldr	r1, [sp, #12]
 80060e4:	f108 0801 	add.w	r8, r8, #1
 80060e8:	700a      	strb	r2, [r1, #0]
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	3201      	adds	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e79e      	b.n	8006030 <_dtoa_r+0x638>
 80060f2:	46d8      	mov	r8, fp
 80060f4:	e7eb      	b.n	80060ce <_dtoa_r+0x6d6>
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b6d      	ldr	r3, [pc, #436]	; (80062b0 <_dtoa_r+0x8b8>)
 80060fa:	f7fa fa59 	bl	80005b0 <__aeabi_dmul>
 80060fe:	2200      	movs	r2, #0
 8006100:	2300      	movs	r3, #0
 8006102:	4680      	mov	r8, r0
 8006104:	4689      	mov	r9, r1
 8006106:	f7fa fcbb 	bl	8000a80 <__aeabi_dcmpeq>
 800610a:	2800      	cmp	r0, #0
 800610c:	d09b      	beq.n	8006046 <_dtoa_r+0x64e>
 800610e:	e7cd      	b.n	80060ac <_dtoa_r+0x6b4>
 8006110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006112:	2a00      	cmp	r2, #0
 8006114:	f000 80c4 	beq.w	80062a0 <_dtoa_r+0x8a8>
 8006118:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800611a:	2a01      	cmp	r2, #1
 800611c:	f300 80a8 	bgt.w	8006270 <_dtoa_r+0x878>
 8006120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006122:	2a00      	cmp	r2, #0
 8006124:	f000 80a0 	beq.w	8006268 <_dtoa_r+0x870>
 8006128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800612c:	464f      	mov	r7, r9
 800612e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006132:	2101      	movs	r1, #1
 8006134:	441a      	add	r2, r3
 8006136:	4628      	mov	r0, r5
 8006138:	4499      	add	r9, r3
 800613a:	9209      	str	r2, [sp, #36]	; 0x24
 800613c:	f000 fc7c 	bl	8006a38 <__i2b>
 8006140:	4606      	mov	r6, r0
 8006142:	b15f      	cbz	r7, 800615c <_dtoa_r+0x764>
 8006144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd08      	ble.n	800615c <_dtoa_r+0x764>
 800614a:	42bb      	cmp	r3, r7
 800614c:	bfa8      	it	ge
 800614e:	463b      	movge	r3, r7
 8006150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006152:	eba9 0903 	sub.w	r9, r9, r3
 8006156:	1aff      	subs	r7, r7, r3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	b1f3      	cbz	r3, 800619e <_dtoa_r+0x7a6>
 8006160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80a0 	beq.w	80062a8 <_dtoa_r+0x8b0>
 8006168:	2c00      	cmp	r4, #0
 800616a:	dd10      	ble.n	800618e <_dtoa_r+0x796>
 800616c:	4631      	mov	r1, r6
 800616e:	4622      	mov	r2, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 fd1f 	bl	8006bb4 <__pow5mult>
 8006176:	4652      	mov	r2, sl
 8006178:	4601      	mov	r1, r0
 800617a:	4606      	mov	r6, r0
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fc71 	bl	8006a64 <__multiply>
 8006182:	4680      	mov	r8, r0
 8006184:	4651      	mov	r1, sl
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fb56 	bl	8006838 <_Bfree>
 800618c:	46c2      	mov	sl, r8
 800618e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006190:	1b1a      	subs	r2, r3, r4
 8006192:	d004      	beq.n	800619e <_dtoa_r+0x7a6>
 8006194:	4651      	mov	r1, sl
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fd0c 	bl	8006bb4 <__pow5mult>
 800619c:	4682      	mov	sl, r0
 800619e:	2101      	movs	r1, #1
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fc49 	bl	8006a38 <__i2b>
 80061a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a8:	4604      	mov	r4, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f340 8082 	ble.w	80062b4 <_dtoa_r+0x8bc>
 80061b0:	461a      	mov	r2, r3
 80061b2:	4601      	mov	r1, r0
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 fcfd 	bl	8006bb4 <__pow5mult>
 80061ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061bc:	4604      	mov	r4, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	dd7b      	ble.n	80062ba <_dtoa_r+0x8c2>
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061cc:	6918      	ldr	r0, [r3, #16]
 80061ce:	f000 fbe5 	bl	800699c <__hi0bits>
 80061d2:	f1c0 0020 	rsb	r0, r0, #32
 80061d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d8:	4418      	add	r0, r3
 80061da:	f010 001f 	ands.w	r0, r0, #31
 80061de:	f000 8092 	beq.w	8006306 <_dtoa_r+0x90e>
 80061e2:	f1c0 0320 	rsb	r3, r0, #32
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	f340 8085 	ble.w	80062f6 <_dtoa_r+0x8fe>
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	f1c0 001c 	rsb	r0, r0, #28
 80061f2:	4403      	add	r3, r0
 80061f4:	4481      	add	r9, r0
 80061f6:	4407      	add	r7, r0
 80061f8:	9309      	str	r3, [sp, #36]	; 0x24
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	dd05      	ble.n	800620c <_dtoa_r+0x814>
 8006200:	4651      	mov	r1, sl
 8006202:	464a      	mov	r2, r9
 8006204:	4628      	mov	r0, r5
 8006206:	f000 fd2f 	bl	8006c68 <__lshift>
 800620a:	4682      	mov	sl, r0
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	dd05      	ble.n	800621e <_dtoa_r+0x826>
 8006212:	4621      	mov	r1, r4
 8006214:	461a      	mov	r2, r3
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fd26 	bl	8006c68 <__lshift>
 800621c:	4604      	mov	r4, r0
 800621e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d072      	beq.n	800630a <_dtoa_r+0x912>
 8006224:	4621      	mov	r1, r4
 8006226:	4650      	mov	r0, sl
 8006228:	f000 fd8a 	bl	8006d40 <__mcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	da6c      	bge.n	800630a <_dtoa_r+0x912>
 8006230:	2300      	movs	r3, #0
 8006232:	4651      	mov	r1, sl
 8006234:	220a      	movs	r2, #10
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fb20 	bl	800687c <__multadd>
 800623c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623e:	4682      	mov	sl, r0
 8006240:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 81ac 	beq.w	80065a2 <_dtoa_r+0xbaa>
 800624a:	2300      	movs	r3, #0
 800624c:	4631      	mov	r1, r6
 800624e:	220a      	movs	r2, #10
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fb13 	bl	800687c <__multadd>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	4606      	mov	r6, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f300 8093 	bgt.w	8006386 <_dtoa_r+0x98e>
 8006260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006262:	2b02      	cmp	r3, #2
 8006264:	dc59      	bgt.n	800631a <_dtoa_r+0x922>
 8006266:	e08e      	b.n	8006386 <_dtoa_r+0x98e>
 8006268:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800626a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800626e:	e75d      	b.n	800612c <_dtoa_r+0x734>
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	1e5c      	subs	r4, r3, #1
 8006274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006276:	42a3      	cmp	r3, r4
 8006278:	bfbf      	itttt	lt
 800627a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800627c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800627e:	1ae3      	sublt	r3, r4, r3
 8006280:	18d2      	addlt	r2, r2, r3
 8006282:	bfa8      	it	ge
 8006284:	1b1c      	subge	r4, r3, r4
 8006286:	9b08      	ldr	r3, [sp, #32]
 8006288:	bfbe      	ittt	lt
 800628a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800628c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800628e:	2400      	movlt	r4, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfb5      	itete	lt
 8006294:	eba9 0703 	sublt.w	r7, r9, r3
 8006298:	464f      	movge	r7, r9
 800629a:	2300      	movlt	r3, #0
 800629c:	9b08      	ldrge	r3, [sp, #32]
 800629e:	e747      	b.n	8006130 <_dtoa_r+0x738>
 80062a0:	464f      	mov	r7, r9
 80062a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062a6:	e74c      	b.n	8006142 <_dtoa_r+0x74a>
 80062a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062aa:	e773      	b.n	8006194 <_dtoa_r+0x79c>
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	40240000 	.word	0x40240000
 80062b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	dc18      	bgt.n	80062ec <_dtoa_r+0x8f4>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	b9b3      	cbnz	r3, 80062ec <_dtoa_r+0x8f4>
 80062be:	9b05      	ldr	r3, [sp, #20]
 80062c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c4:	b993      	cbnz	r3, 80062ec <_dtoa_r+0x8f4>
 80062c6:	9b05      	ldr	r3, [sp, #20]
 80062c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	0d1b      	lsrs	r3, r3, #20
 80062ce:	051b      	lsls	r3, r3, #20
 80062d0:	b17b      	cbz	r3, 80062f2 <_dtoa_r+0x8fa>
 80062d2:	f04f 0801 	mov.w	r8, #1
 80062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d8:	f109 0901 	add.w	r9, r9, #1
 80062dc:	3301      	adds	r3, #1
 80062de:	9309      	str	r3, [sp, #36]	; 0x24
 80062e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f47f af6f 	bne.w	80061c6 <_dtoa_r+0x7ce>
 80062e8:	2001      	movs	r0, #1
 80062ea:	e774      	b.n	80061d6 <_dtoa_r+0x7de>
 80062ec:	f04f 0800 	mov.w	r8, #0
 80062f0:	e7f6      	b.n	80062e0 <_dtoa_r+0x8e8>
 80062f2:	4698      	mov	r8, r3
 80062f4:	e7f4      	b.n	80062e0 <_dtoa_r+0x8e8>
 80062f6:	d080      	beq.n	80061fa <_dtoa_r+0x802>
 80062f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fa:	331c      	adds	r3, #28
 80062fc:	441a      	add	r2, r3
 80062fe:	4499      	add	r9, r3
 8006300:	441f      	add	r7, r3
 8006302:	9209      	str	r2, [sp, #36]	; 0x24
 8006304:	e779      	b.n	80061fa <_dtoa_r+0x802>
 8006306:	4603      	mov	r3, r0
 8006308:	e7f6      	b.n	80062f8 <_dtoa_r+0x900>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dc34      	bgt.n	800637a <_dtoa_r+0x982>
 8006310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006312:	2b02      	cmp	r3, #2
 8006314:	dd31      	ble.n	800637a <_dtoa_r+0x982>
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	9306      	str	r3, [sp, #24]
 800631a:	9b06      	ldr	r3, [sp, #24]
 800631c:	b963      	cbnz	r3, 8006338 <_dtoa_r+0x940>
 800631e:	4621      	mov	r1, r4
 8006320:	2205      	movs	r2, #5
 8006322:	4628      	mov	r0, r5
 8006324:	f000 faaa 	bl	800687c <__multadd>
 8006328:	4601      	mov	r1, r0
 800632a:	4604      	mov	r4, r0
 800632c:	4650      	mov	r0, sl
 800632e:	f000 fd07 	bl	8006d40 <__mcmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	f73f adbf 	bgt.w	8005eb6 <_dtoa_r+0x4be>
 8006338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800633a:	9f03      	ldr	r7, [sp, #12]
 800633c:	ea6f 0b03 	mvn.w	fp, r3
 8006340:	f04f 0800 	mov.w	r8, #0
 8006344:	4621      	mov	r1, r4
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fa76 	bl	8006838 <_Bfree>
 800634c:	2e00      	cmp	r6, #0
 800634e:	f43f aead 	beq.w	80060ac <_dtoa_r+0x6b4>
 8006352:	f1b8 0f00 	cmp.w	r8, #0
 8006356:	d005      	beq.n	8006364 <_dtoa_r+0x96c>
 8006358:	45b0      	cmp	r8, r6
 800635a:	d003      	beq.n	8006364 <_dtoa_r+0x96c>
 800635c:	4641      	mov	r1, r8
 800635e:	4628      	mov	r0, r5
 8006360:	f000 fa6a 	bl	8006838 <_Bfree>
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fa66 	bl	8006838 <_Bfree>
 800636c:	e69e      	b.n	80060ac <_dtoa_r+0x6b4>
 800636e:	2400      	movs	r4, #0
 8006370:	4626      	mov	r6, r4
 8006372:	e7e1      	b.n	8006338 <_dtoa_r+0x940>
 8006374:	46c3      	mov	fp, r8
 8006376:	4626      	mov	r6, r4
 8006378:	e59d      	b.n	8005eb6 <_dtoa_r+0x4be>
 800637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80c8 	beq.w	8006512 <_dtoa_r+0xb1a>
 8006382:	9b08      	ldr	r3, [sp, #32]
 8006384:	9306      	str	r3, [sp, #24]
 8006386:	2f00      	cmp	r7, #0
 8006388:	dd05      	ble.n	8006396 <_dtoa_r+0x99e>
 800638a:	4631      	mov	r1, r6
 800638c:	463a      	mov	r2, r7
 800638e:	4628      	mov	r0, r5
 8006390:	f000 fc6a 	bl	8006c68 <__lshift>
 8006394:	4606      	mov	r6, r0
 8006396:	f1b8 0f00 	cmp.w	r8, #0
 800639a:	d05b      	beq.n	8006454 <_dtoa_r+0xa5c>
 800639c:	4628      	mov	r0, r5
 800639e:	6871      	ldr	r1, [r6, #4]
 80063a0:	f000 fa0a 	bl	80067b8 <_Balloc>
 80063a4:	4607      	mov	r7, r0
 80063a6:	b928      	cbnz	r0, 80063b4 <_dtoa_r+0x9bc>
 80063a8:	4602      	mov	r2, r0
 80063aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063ae:	4b81      	ldr	r3, [pc, #516]	; (80065b4 <_dtoa_r+0xbbc>)
 80063b0:	f7ff bb36 	b.w	8005a20 <_dtoa_r+0x28>
 80063b4:	6932      	ldr	r2, [r6, #16]
 80063b6:	f106 010c 	add.w	r1, r6, #12
 80063ba:	3202      	adds	r2, #2
 80063bc:	0092      	lsls	r2, r2, #2
 80063be:	300c      	adds	r0, #12
 80063c0:	f001 fff6 	bl	80083b0 <memcpy>
 80063c4:	2201      	movs	r2, #1
 80063c6:	4639      	mov	r1, r7
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 fc4d 	bl	8006c68 <__lshift>
 80063ce:	46b0      	mov	r8, r6
 80063d0:	4606      	mov	r6, r0
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	9a03      	ldr	r2, [sp, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	9308      	str	r3, [sp, #32]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e0:	9b04      	ldr	r3, [sp, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	930a      	str	r3, [sp, #40]	; 0x28
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	4621      	mov	r1, r4
 80063ec:	3b01      	subs	r3, #1
 80063ee:	4650      	mov	r0, sl
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	f7ff fa75 	bl	80058e0 <quorem>
 80063f6:	4641      	mov	r1, r8
 80063f8:	9006      	str	r0, [sp, #24]
 80063fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063fe:	4650      	mov	r0, sl
 8006400:	f000 fc9e 	bl	8006d40 <__mcmp>
 8006404:	4632      	mov	r2, r6
 8006406:	9009      	str	r0, [sp, #36]	; 0x24
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f000 fcb4 	bl	8006d78 <__mdiff>
 8006410:	68c2      	ldr	r2, [r0, #12]
 8006412:	4607      	mov	r7, r0
 8006414:	bb02      	cbnz	r2, 8006458 <_dtoa_r+0xa60>
 8006416:	4601      	mov	r1, r0
 8006418:	4650      	mov	r0, sl
 800641a:	f000 fc91 	bl	8006d40 <__mcmp>
 800641e:	4602      	mov	r2, r0
 8006420:	4639      	mov	r1, r7
 8006422:	4628      	mov	r0, r5
 8006424:	920c      	str	r2, [sp, #48]	; 0x30
 8006426:	f000 fa07 	bl	8006838 <_Bfree>
 800642a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800642e:	9f08      	ldr	r7, [sp, #32]
 8006430:	ea43 0102 	orr.w	r1, r3, r2
 8006434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006436:	4319      	orrs	r1, r3
 8006438:	d110      	bne.n	800645c <_dtoa_r+0xa64>
 800643a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800643e:	d029      	beq.n	8006494 <_dtoa_r+0xa9c>
 8006440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	dd02      	ble.n	800644c <_dtoa_r+0xa54>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	f883 9000 	strb.w	r9, [r3]
 8006452:	e777      	b.n	8006344 <_dtoa_r+0x94c>
 8006454:	4630      	mov	r0, r6
 8006456:	e7ba      	b.n	80063ce <_dtoa_r+0x9d6>
 8006458:	2201      	movs	r2, #1
 800645a:	e7e1      	b.n	8006420 <_dtoa_r+0xa28>
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	db04      	blt.n	800646c <_dtoa_r+0xa74>
 8006462:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006464:	430b      	orrs	r3, r1
 8006466:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006468:	430b      	orrs	r3, r1
 800646a:	d120      	bne.n	80064ae <_dtoa_r+0xab6>
 800646c:	2a00      	cmp	r2, #0
 800646e:	dded      	ble.n	800644c <_dtoa_r+0xa54>
 8006470:	4651      	mov	r1, sl
 8006472:	2201      	movs	r2, #1
 8006474:	4628      	mov	r0, r5
 8006476:	f000 fbf7 	bl	8006c68 <__lshift>
 800647a:	4621      	mov	r1, r4
 800647c:	4682      	mov	sl, r0
 800647e:	f000 fc5f 	bl	8006d40 <__mcmp>
 8006482:	2800      	cmp	r0, #0
 8006484:	dc03      	bgt.n	800648e <_dtoa_r+0xa96>
 8006486:	d1e1      	bne.n	800644c <_dtoa_r+0xa54>
 8006488:	f019 0f01 	tst.w	r9, #1
 800648c:	d0de      	beq.n	800644c <_dtoa_r+0xa54>
 800648e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006492:	d1d8      	bne.n	8006446 <_dtoa_r+0xa4e>
 8006494:	2339      	movs	r3, #57	; 0x39
 8006496:	9a04      	ldr	r2, [sp, #16]
 8006498:	7013      	strb	r3, [r2, #0]
 800649a:	463b      	mov	r3, r7
 800649c:	461f      	mov	r7, r3
 800649e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2a39      	cmp	r2, #57	; 0x39
 80064a6:	d06b      	beq.n	8006580 <_dtoa_r+0xb88>
 80064a8:	3201      	adds	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	e74a      	b.n	8006344 <_dtoa_r+0x94c>
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	dd07      	ble.n	80064c2 <_dtoa_r+0xaca>
 80064b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064b6:	d0ed      	beq.n	8006494 <_dtoa_r+0xa9c>
 80064b8:	9a04      	ldr	r2, [sp, #16]
 80064ba:	f109 0301 	add.w	r3, r9, #1
 80064be:	7013      	strb	r3, [r2, #0]
 80064c0:	e740      	b.n	8006344 <_dtoa_r+0x94c>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d042      	beq.n	8006554 <_dtoa_r+0xb5c>
 80064ce:	4651      	mov	r1, sl
 80064d0:	2300      	movs	r3, #0
 80064d2:	220a      	movs	r2, #10
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 f9d1 	bl	800687c <__multadd>
 80064da:	45b0      	cmp	r8, r6
 80064dc:	4682      	mov	sl, r0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	f04f 020a 	mov.w	r2, #10
 80064e6:	4641      	mov	r1, r8
 80064e8:	4628      	mov	r0, r5
 80064ea:	d107      	bne.n	80064fc <_dtoa_r+0xb04>
 80064ec:	f000 f9c6 	bl	800687c <__multadd>
 80064f0:	4680      	mov	r8, r0
 80064f2:	4606      	mov	r6, r0
 80064f4:	9b08      	ldr	r3, [sp, #32]
 80064f6:	3301      	adds	r3, #1
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	e775      	b.n	80063e8 <_dtoa_r+0x9f0>
 80064fc:	f000 f9be 	bl	800687c <__multadd>
 8006500:	4631      	mov	r1, r6
 8006502:	4680      	mov	r8, r0
 8006504:	2300      	movs	r3, #0
 8006506:	220a      	movs	r2, #10
 8006508:	4628      	mov	r0, r5
 800650a:	f000 f9b7 	bl	800687c <__multadd>
 800650e:	4606      	mov	r6, r0
 8006510:	e7f0      	b.n	80064f4 <_dtoa_r+0xafc>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	9f03      	ldr	r7, [sp, #12]
 8006518:	4621      	mov	r1, r4
 800651a:	4650      	mov	r0, sl
 800651c:	f7ff f9e0 	bl	80058e0 <quorem>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006526:	f807 9b01 	strb.w	r9, [r7], #1
 800652a:	1afa      	subs	r2, r7, r3
 800652c:	9b06      	ldr	r3, [sp, #24]
 800652e:	4293      	cmp	r3, r2
 8006530:	dd07      	ble.n	8006542 <_dtoa_r+0xb4a>
 8006532:	4651      	mov	r1, sl
 8006534:	2300      	movs	r3, #0
 8006536:	220a      	movs	r2, #10
 8006538:	4628      	mov	r0, r5
 800653a:	f000 f99f 	bl	800687c <__multadd>
 800653e:	4682      	mov	sl, r0
 8006540:	e7ea      	b.n	8006518 <_dtoa_r+0xb20>
 8006542:	9b06      	ldr	r3, [sp, #24]
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfcc      	ite	gt
 800654c:	461f      	movgt	r7, r3
 800654e:	2701      	movle	r7, #1
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	441f      	add	r7, r3
 8006554:	4651      	mov	r1, sl
 8006556:	2201      	movs	r2, #1
 8006558:	4628      	mov	r0, r5
 800655a:	f000 fb85 	bl	8006c68 <__lshift>
 800655e:	4621      	mov	r1, r4
 8006560:	4682      	mov	sl, r0
 8006562:	f000 fbed 	bl	8006d40 <__mcmp>
 8006566:	2800      	cmp	r0, #0
 8006568:	dc97      	bgt.n	800649a <_dtoa_r+0xaa2>
 800656a:	d102      	bne.n	8006572 <_dtoa_r+0xb7a>
 800656c:	f019 0f01 	tst.w	r9, #1
 8006570:	d193      	bne.n	800649a <_dtoa_r+0xaa2>
 8006572:	463b      	mov	r3, r7
 8006574:	461f      	mov	r7, r3
 8006576:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800657a:	2a30      	cmp	r2, #48	; 0x30
 800657c:	d0fa      	beq.n	8006574 <_dtoa_r+0xb7c>
 800657e:	e6e1      	b.n	8006344 <_dtoa_r+0x94c>
 8006580:	9a03      	ldr	r2, [sp, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d18a      	bne.n	800649c <_dtoa_r+0xaa4>
 8006586:	2331      	movs	r3, #49	; 0x31
 8006588:	f10b 0b01 	add.w	fp, fp, #1
 800658c:	e797      	b.n	80064be <_dtoa_r+0xac6>
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <_dtoa_r+0xbc0>)
 8006590:	f7ff ba9f 	b.w	8005ad2 <_dtoa_r+0xda>
 8006594:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f aa77 	bne.w	8005a8a <_dtoa_r+0x92>
 800659c:	4b07      	ldr	r3, [pc, #28]	; (80065bc <_dtoa_r+0xbc4>)
 800659e:	f7ff ba98 	b.w	8005ad2 <_dtoa_r+0xda>
 80065a2:	9b06      	ldr	r3, [sp, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dcb6      	bgt.n	8006516 <_dtoa_r+0xb1e>
 80065a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	f73f aeb5 	bgt.w	800631a <_dtoa_r+0x922>
 80065b0:	e7b1      	b.n	8006516 <_dtoa_r+0xb1e>
 80065b2:	bf00      	nop
 80065b4:	08008fdf 	.word	0x08008fdf
 80065b8:	08008f3a 	.word	0x08008f3a
 80065bc:	08008f63 	.word	0x08008f63

080065c0 <_free_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4605      	mov	r5, r0
 80065c4:	2900      	cmp	r1, #0
 80065c6:	d040      	beq.n	800664a <_free_r+0x8a>
 80065c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065cc:	1f0c      	subs	r4, r1, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfb8      	it	lt
 80065d2:	18e4      	addlt	r4, r4, r3
 80065d4:	f000 f8e4 	bl	80067a0 <__malloc_lock>
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <_free_r+0x8c>)
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	b933      	cbnz	r3, 80065ec <_free_r+0x2c>
 80065de:	6063      	str	r3, [r4, #4]
 80065e0:	6014      	str	r4, [r2, #0]
 80065e2:	4628      	mov	r0, r5
 80065e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e8:	f000 b8e0 	b.w	80067ac <__malloc_unlock>
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d908      	bls.n	8006602 <_free_r+0x42>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	1821      	adds	r1, r4, r0
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf01      	itttt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	1809      	addeq	r1, r1, r0
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	e7ed      	b.n	80065de <_free_r+0x1e>
 8006602:	461a      	mov	r2, r3
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b10b      	cbz	r3, 800660c <_free_r+0x4c>
 8006608:	42a3      	cmp	r3, r4
 800660a:	d9fa      	bls.n	8006602 <_free_r+0x42>
 800660c:	6811      	ldr	r1, [r2, #0]
 800660e:	1850      	adds	r0, r2, r1
 8006610:	42a0      	cmp	r0, r4
 8006612:	d10b      	bne.n	800662c <_free_r+0x6c>
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	4401      	add	r1, r0
 8006618:	1850      	adds	r0, r2, r1
 800661a:	4283      	cmp	r3, r0
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	d1e0      	bne.n	80065e2 <_free_r+0x22>
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4408      	add	r0, r1
 8006626:	6010      	str	r0, [r2, #0]
 8006628:	6053      	str	r3, [r2, #4]
 800662a:	e7da      	b.n	80065e2 <_free_r+0x22>
 800662c:	d902      	bls.n	8006634 <_free_r+0x74>
 800662e:	230c      	movs	r3, #12
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	e7d6      	b.n	80065e2 <_free_r+0x22>
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	1821      	adds	r1, r4, r0
 8006638:	428b      	cmp	r3, r1
 800663a:	bf01      	itttt	eq
 800663c:	6819      	ldreq	r1, [r3, #0]
 800663e:	685b      	ldreq	r3, [r3, #4]
 8006640:	1809      	addeq	r1, r1, r0
 8006642:	6021      	streq	r1, [r4, #0]
 8006644:	6063      	str	r3, [r4, #4]
 8006646:	6054      	str	r4, [r2, #4]
 8006648:	e7cb      	b.n	80065e2 <_free_r+0x22>
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000448 	.word	0x20000448

08006650 <malloc>:
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <malloc+0xc>)
 8006652:	4601      	mov	r1, r0
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f000 b823 	b.w	80066a0 <_malloc_r>
 800665a:	bf00      	nop
 800665c:	20000068 	.word	0x20000068

08006660 <sbrk_aligned>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4e0e      	ldr	r6, [pc, #56]	; (800669c <sbrk_aligned+0x3c>)
 8006664:	460c      	mov	r4, r1
 8006666:	6831      	ldr	r1, [r6, #0]
 8006668:	4605      	mov	r5, r0
 800666a:	b911      	cbnz	r1, 8006672 <sbrk_aligned+0x12>
 800666c:	f001 fe90 	bl	8008390 <_sbrk_r>
 8006670:	6030      	str	r0, [r6, #0]
 8006672:	4621      	mov	r1, r4
 8006674:	4628      	mov	r0, r5
 8006676:	f001 fe8b 	bl	8008390 <_sbrk_r>
 800667a:	1c43      	adds	r3, r0, #1
 800667c:	d00a      	beq.n	8006694 <sbrk_aligned+0x34>
 800667e:	1cc4      	adds	r4, r0, #3
 8006680:	f024 0403 	bic.w	r4, r4, #3
 8006684:	42a0      	cmp	r0, r4
 8006686:	d007      	beq.n	8006698 <sbrk_aligned+0x38>
 8006688:	1a21      	subs	r1, r4, r0
 800668a:	4628      	mov	r0, r5
 800668c:	f001 fe80 	bl	8008390 <_sbrk_r>
 8006690:	3001      	adds	r0, #1
 8006692:	d101      	bne.n	8006698 <sbrk_aligned+0x38>
 8006694:	f04f 34ff 	mov.w	r4, #4294967295
 8006698:	4620      	mov	r0, r4
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	2000044c 	.word	0x2000044c

080066a0 <_malloc_r>:
 80066a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a4:	1ccd      	adds	r5, r1, #3
 80066a6:	f025 0503 	bic.w	r5, r5, #3
 80066aa:	3508      	adds	r5, #8
 80066ac:	2d0c      	cmp	r5, #12
 80066ae:	bf38      	it	cc
 80066b0:	250c      	movcc	r5, #12
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	4607      	mov	r7, r0
 80066b6:	db01      	blt.n	80066bc <_malloc_r+0x1c>
 80066b8:	42a9      	cmp	r1, r5
 80066ba:	d905      	bls.n	80066c8 <_malloc_r+0x28>
 80066bc:	230c      	movs	r3, #12
 80066be:	2600      	movs	r6, #0
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4630      	mov	r0, r6
 80066c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800679c <_malloc_r+0xfc>
 80066cc:	f000 f868 	bl	80067a0 <__malloc_lock>
 80066d0:	f8d8 3000 	ldr.w	r3, [r8]
 80066d4:	461c      	mov	r4, r3
 80066d6:	bb5c      	cbnz	r4, 8006730 <_malloc_r+0x90>
 80066d8:	4629      	mov	r1, r5
 80066da:	4638      	mov	r0, r7
 80066dc:	f7ff ffc0 	bl	8006660 <sbrk_aligned>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	4604      	mov	r4, r0
 80066e4:	d155      	bne.n	8006792 <_malloc_r+0xf2>
 80066e6:	f8d8 4000 	ldr.w	r4, [r8]
 80066ea:	4626      	mov	r6, r4
 80066ec:	2e00      	cmp	r6, #0
 80066ee:	d145      	bne.n	800677c <_malloc_r+0xdc>
 80066f0:	2c00      	cmp	r4, #0
 80066f2:	d048      	beq.n	8006786 <_malloc_r+0xe6>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	4631      	mov	r1, r6
 80066f8:	4638      	mov	r0, r7
 80066fa:	eb04 0903 	add.w	r9, r4, r3
 80066fe:	f001 fe47 	bl	8008390 <_sbrk_r>
 8006702:	4581      	cmp	r9, r0
 8006704:	d13f      	bne.n	8006786 <_malloc_r+0xe6>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	4638      	mov	r0, r7
 800670a:	1a6d      	subs	r5, r5, r1
 800670c:	4629      	mov	r1, r5
 800670e:	f7ff ffa7 	bl	8006660 <sbrk_aligned>
 8006712:	3001      	adds	r0, #1
 8006714:	d037      	beq.n	8006786 <_malloc_r+0xe6>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	442b      	add	r3, r5
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	f8d8 3000 	ldr.w	r3, [r8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d038      	beq.n	8006796 <_malloc_r+0xf6>
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	42a2      	cmp	r2, r4
 8006728:	d12b      	bne.n	8006782 <_malloc_r+0xe2>
 800672a:	2200      	movs	r2, #0
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	e00f      	b.n	8006750 <_malloc_r+0xb0>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	1b52      	subs	r2, r2, r5
 8006734:	d41f      	bmi.n	8006776 <_malloc_r+0xd6>
 8006736:	2a0b      	cmp	r2, #11
 8006738:	d917      	bls.n	800676a <_malloc_r+0xca>
 800673a:	1961      	adds	r1, r4, r5
 800673c:	42a3      	cmp	r3, r4
 800673e:	6025      	str	r5, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	6059      	strne	r1, [r3, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	bf08      	it	eq
 8006748:	f8c8 1000 	streq.w	r1, [r8]
 800674c:	5162      	str	r2, [r4, r5]
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	4638      	mov	r0, r7
 8006752:	f104 060b 	add.w	r6, r4, #11
 8006756:	f000 f829 	bl	80067ac <__malloc_unlock>
 800675a:	f026 0607 	bic.w	r6, r6, #7
 800675e:	1d23      	adds	r3, r4, #4
 8006760:	1af2      	subs	r2, r6, r3
 8006762:	d0ae      	beq.n	80066c2 <_malloc_r+0x22>
 8006764:	1b9b      	subs	r3, r3, r6
 8006766:	50a3      	str	r3, [r4, r2]
 8006768:	e7ab      	b.n	80066c2 <_malloc_r+0x22>
 800676a:	42a3      	cmp	r3, r4
 800676c:	6862      	ldr	r2, [r4, #4]
 800676e:	d1dd      	bne.n	800672c <_malloc_r+0x8c>
 8006770:	f8c8 2000 	str.w	r2, [r8]
 8006774:	e7ec      	b.n	8006750 <_malloc_r+0xb0>
 8006776:	4623      	mov	r3, r4
 8006778:	6864      	ldr	r4, [r4, #4]
 800677a:	e7ac      	b.n	80066d6 <_malloc_r+0x36>
 800677c:	4634      	mov	r4, r6
 800677e:	6876      	ldr	r6, [r6, #4]
 8006780:	e7b4      	b.n	80066ec <_malloc_r+0x4c>
 8006782:	4613      	mov	r3, r2
 8006784:	e7cc      	b.n	8006720 <_malloc_r+0x80>
 8006786:	230c      	movs	r3, #12
 8006788:	4638      	mov	r0, r7
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	f000 f80e 	bl	80067ac <__malloc_unlock>
 8006790:	e797      	b.n	80066c2 <_malloc_r+0x22>
 8006792:	6025      	str	r5, [r4, #0]
 8006794:	e7dc      	b.n	8006750 <_malloc_r+0xb0>
 8006796:	605b      	str	r3, [r3, #4]
 8006798:	deff      	udf	#255	; 0xff
 800679a:	bf00      	nop
 800679c:	20000448 	.word	0x20000448

080067a0 <__malloc_lock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_lock+0x8>)
 80067a2:	f7ff b888 	b.w	80058b6 <__retarget_lock_acquire_recursive>
 80067a6:	bf00      	nop
 80067a8:	20000444 	.word	0x20000444

080067ac <__malloc_unlock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__malloc_unlock+0x8>)
 80067ae:	f7ff b883 	b.w	80058b8 <__retarget_lock_release_recursive>
 80067b2:	bf00      	nop
 80067b4:	20000444 	.word	0x20000444

080067b8 <_Balloc>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	69c6      	ldr	r6, [r0, #28]
 80067bc:	4604      	mov	r4, r0
 80067be:	460d      	mov	r5, r1
 80067c0:	b976      	cbnz	r6, 80067e0 <_Balloc+0x28>
 80067c2:	2010      	movs	r0, #16
 80067c4:	f7ff ff44 	bl	8006650 <malloc>
 80067c8:	4602      	mov	r2, r0
 80067ca:	61e0      	str	r0, [r4, #28]
 80067cc:	b920      	cbnz	r0, 80067d8 <_Balloc+0x20>
 80067ce:	216b      	movs	r1, #107	; 0x6b
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <_Balloc+0x78>)
 80067d2:	4818      	ldr	r0, [pc, #96]	; (8006834 <_Balloc+0x7c>)
 80067d4:	f001 fe00 	bl	80083d8 <__assert_func>
 80067d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067dc:	6006      	str	r6, [r0, #0]
 80067de:	60c6      	str	r6, [r0, #12]
 80067e0:	69e6      	ldr	r6, [r4, #28]
 80067e2:	68f3      	ldr	r3, [r6, #12]
 80067e4:	b183      	cbz	r3, 8006808 <_Balloc+0x50>
 80067e6:	69e3      	ldr	r3, [r4, #28]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067ee:	b9b8      	cbnz	r0, 8006820 <_Balloc+0x68>
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f605 	lsl.w	r6, r1, r5
 80067f6:	1d72      	adds	r2, r6, #5
 80067f8:	4620      	mov	r0, r4
 80067fa:	0092      	lsls	r2, r2, #2
 80067fc:	f001 fe0a 	bl	8008414 <_calloc_r>
 8006800:	b160      	cbz	r0, 800681c <_Balloc+0x64>
 8006802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006806:	e00e      	b.n	8006826 <_Balloc+0x6e>
 8006808:	2221      	movs	r2, #33	; 0x21
 800680a:	2104      	movs	r1, #4
 800680c:	4620      	mov	r0, r4
 800680e:	f001 fe01 	bl	8008414 <_calloc_r>
 8006812:	69e3      	ldr	r3, [r4, #28]
 8006814:	60f0      	str	r0, [r6, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e4      	bne.n	80067e6 <_Balloc+0x2e>
 800681c:	2000      	movs	r0, #0
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	6802      	ldr	r2, [r0, #0]
 8006822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006826:	2300      	movs	r3, #0
 8006828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800682c:	e7f7      	b.n	800681e <_Balloc+0x66>
 800682e:	bf00      	nop
 8006830:	08008f70 	.word	0x08008f70
 8006834:	08008ff0 	.word	0x08008ff0

08006838 <_Bfree>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	69c6      	ldr	r6, [r0, #28]
 800683c:	4605      	mov	r5, r0
 800683e:	460c      	mov	r4, r1
 8006840:	b976      	cbnz	r6, 8006860 <_Bfree+0x28>
 8006842:	2010      	movs	r0, #16
 8006844:	f7ff ff04 	bl	8006650 <malloc>
 8006848:	4602      	mov	r2, r0
 800684a:	61e8      	str	r0, [r5, #28]
 800684c:	b920      	cbnz	r0, 8006858 <_Bfree+0x20>
 800684e:	218f      	movs	r1, #143	; 0x8f
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <_Bfree+0x3c>)
 8006852:	4809      	ldr	r0, [pc, #36]	; (8006878 <_Bfree+0x40>)
 8006854:	f001 fdc0 	bl	80083d8 <__assert_func>
 8006858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800685c:	6006      	str	r6, [r0, #0]
 800685e:	60c6      	str	r6, [r0, #12]
 8006860:	b13c      	cbz	r4, 8006872 <_Bfree+0x3a>
 8006862:	69eb      	ldr	r3, [r5, #28]
 8006864:	6862      	ldr	r2, [r4, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800686c:	6021      	str	r1, [r4, #0]
 800686e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	08008f70 	.word	0x08008f70
 8006878:	08008ff0 	.word	0x08008ff0

0800687c <__multadd>:
 800687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006880:	4607      	mov	r7, r0
 8006882:	460c      	mov	r4, r1
 8006884:	461e      	mov	r6, r3
 8006886:	2000      	movs	r0, #0
 8006888:	690d      	ldr	r5, [r1, #16]
 800688a:	f101 0c14 	add.w	ip, r1, #20
 800688e:	f8dc 3000 	ldr.w	r3, [ip]
 8006892:	3001      	adds	r0, #1
 8006894:	b299      	uxth	r1, r3
 8006896:	fb02 6101 	mla	r1, r2, r1, r6
 800689a:	0c1e      	lsrs	r6, r3, #16
 800689c:	0c0b      	lsrs	r3, r1, #16
 800689e:	fb02 3306 	mla	r3, r2, r6, r3
 80068a2:	b289      	uxth	r1, r1
 80068a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068a8:	4285      	cmp	r5, r0
 80068aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ae:	f84c 1b04 	str.w	r1, [ip], #4
 80068b2:	dcec      	bgt.n	800688e <__multadd+0x12>
 80068b4:	b30e      	cbz	r6, 80068fa <__multadd+0x7e>
 80068b6:	68a3      	ldr	r3, [r4, #8]
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	dc19      	bgt.n	80068f0 <__multadd+0x74>
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4638      	mov	r0, r7
 80068c0:	3101      	adds	r1, #1
 80068c2:	f7ff ff79 	bl	80067b8 <_Balloc>
 80068c6:	4680      	mov	r8, r0
 80068c8:	b928      	cbnz	r0, 80068d6 <__multadd+0x5a>
 80068ca:	4602      	mov	r2, r0
 80068cc:	21ba      	movs	r1, #186	; 0xba
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <__multadd+0x84>)
 80068d0:	480c      	ldr	r0, [pc, #48]	; (8006904 <__multadd+0x88>)
 80068d2:	f001 fd81 	bl	80083d8 <__assert_func>
 80068d6:	6922      	ldr	r2, [r4, #16]
 80068d8:	f104 010c 	add.w	r1, r4, #12
 80068dc:	3202      	adds	r2, #2
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	300c      	adds	r0, #12
 80068e2:	f001 fd65 	bl	80083b0 <memcpy>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff ffa5 	bl	8006838 <_Bfree>
 80068ee:	4644      	mov	r4, r8
 80068f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068f4:	3501      	adds	r5, #1
 80068f6:	615e      	str	r6, [r3, #20]
 80068f8:	6125      	str	r5, [r4, #16]
 80068fa:	4620      	mov	r0, r4
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006900:	08008fdf 	.word	0x08008fdf
 8006904:	08008ff0 	.word	0x08008ff0

08006908 <__s2b>:
 8006908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800690c:	4615      	mov	r5, r2
 800690e:	2209      	movs	r2, #9
 8006910:	461f      	mov	r7, r3
 8006912:	3308      	adds	r3, #8
 8006914:	460c      	mov	r4, r1
 8006916:	fb93 f3f2 	sdiv	r3, r3, r2
 800691a:	4606      	mov	r6, r0
 800691c:	2201      	movs	r2, #1
 800691e:	2100      	movs	r1, #0
 8006920:	429a      	cmp	r2, r3
 8006922:	db09      	blt.n	8006938 <__s2b+0x30>
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff ff47 	bl	80067b8 <_Balloc>
 800692a:	b940      	cbnz	r0, 800693e <__s2b+0x36>
 800692c:	4602      	mov	r2, r0
 800692e:	21d3      	movs	r1, #211	; 0xd3
 8006930:	4b18      	ldr	r3, [pc, #96]	; (8006994 <__s2b+0x8c>)
 8006932:	4819      	ldr	r0, [pc, #100]	; (8006998 <__s2b+0x90>)
 8006934:	f001 fd50 	bl	80083d8 <__assert_func>
 8006938:	0052      	lsls	r2, r2, #1
 800693a:	3101      	adds	r1, #1
 800693c:	e7f0      	b.n	8006920 <__s2b+0x18>
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	2d09      	cmp	r5, #9
 8006942:	6143      	str	r3, [r0, #20]
 8006944:	f04f 0301 	mov.w	r3, #1
 8006948:	6103      	str	r3, [r0, #16]
 800694a:	dd16      	ble.n	800697a <__s2b+0x72>
 800694c:	f104 0909 	add.w	r9, r4, #9
 8006950:	46c8      	mov	r8, r9
 8006952:	442c      	add	r4, r5
 8006954:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006958:	4601      	mov	r1, r0
 800695a:	220a      	movs	r2, #10
 800695c:	4630      	mov	r0, r6
 800695e:	3b30      	subs	r3, #48	; 0x30
 8006960:	f7ff ff8c 	bl	800687c <__multadd>
 8006964:	45a0      	cmp	r8, r4
 8006966:	d1f5      	bne.n	8006954 <__s2b+0x4c>
 8006968:	f1a5 0408 	sub.w	r4, r5, #8
 800696c:	444c      	add	r4, r9
 800696e:	1b2d      	subs	r5, r5, r4
 8006970:	1963      	adds	r3, r4, r5
 8006972:	42bb      	cmp	r3, r7
 8006974:	db04      	blt.n	8006980 <__s2b+0x78>
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	2509      	movs	r5, #9
 800697c:	340a      	adds	r4, #10
 800697e:	e7f6      	b.n	800696e <__s2b+0x66>
 8006980:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006984:	4601      	mov	r1, r0
 8006986:	220a      	movs	r2, #10
 8006988:	4630      	mov	r0, r6
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	f7ff ff76 	bl	800687c <__multadd>
 8006990:	e7ee      	b.n	8006970 <__s2b+0x68>
 8006992:	bf00      	nop
 8006994:	08008fdf 	.word	0x08008fdf
 8006998:	08008ff0 	.word	0x08008ff0

0800699c <__hi0bits>:
 800699c:	0c02      	lsrs	r2, r0, #16
 800699e:	0412      	lsls	r2, r2, #16
 80069a0:	4603      	mov	r3, r0
 80069a2:	b9ca      	cbnz	r2, 80069d8 <__hi0bits+0x3c>
 80069a4:	0403      	lsls	r3, r0, #16
 80069a6:	2010      	movs	r0, #16
 80069a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069ac:	bf04      	itt	eq
 80069ae:	021b      	lsleq	r3, r3, #8
 80069b0:	3008      	addeq	r0, #8
 80069b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069b6:	bf04      	itt	eq
 80069b8:	011b      	lsleq	r3, r3, #4
 80069ba:	3004      	addeq	r0, #4
 80069bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069c0:	bf04      	itt	eq
 80069c2:	009b      	lsleq	r3, r3, #2
 80069c4:	3002      	addeq	r0, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	db05      	blt.n	80069d6 <__hi0bits+0x3a>
 80069ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069ce:	f100 0001 	add.w	r0, r0, #1
 80069d2:	bf08      	it	eq
 80069d4:	2020      	moveq	r0, #32
 80069d6:	4770      	bx	lr
 80069d8:	2000      	movs	r0, #0
 80069da:	e7e5      	b.n	80069a8 <__hi0bits+0xc>

080069dc <__lo0bits>:
 80069dc:	6803      	ldr	r3, [r0, #0]
 80069de:	4602      	mov	r2, r0
 80069e0:	f013 0007 	ands.w	r0, r3, #7
 80069e4:	d00b      	beq.n	80069fe <__lo0bits+0x22>
 80069e6:	07d9      	lsls	r1, r3, #31
 80069e8:	d421      	bmi.n	8006a2e <__lo0bits+0x52>
 80069ea:	0798      	lsls	r0, r3, #30
 80069ec:	bf49      	itett	mi
 80069ee:	085b      	lsrmi	r3, r3, #1
 80069f0:	089b      	lsrpl	r3, r3, #2
 80069f2:	2001      	movmi	r0, #1
 80069f4:	6013      	strmi	r3, [r2, #0]
 80069f6:	bf5c      	itt	pl
 80069f8:	2002      	movpl	r0, #2
 80069fa:	6013      	strpl	r3, [r2, #0]
 80069fc:	4770      	bx	lr
 80069fe:	b299      	uxth	r1, r3
 8006a00:	b909      	cbnz	r1, 8006a06 <__lo0bits+0x2a>
 8006a02:	2010      	movs	r0, #16
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	b2d9      	uxtb	r1, r3
 8006a08:	b909      	cbnz	r1, 8006a0e <__lo0bits+0x32>
 8006a0a:	3008      	adds	r0, #8
 8006a0c:	0a1b      	lsrs	r3, r3, #8
 8006a0e:	0719      	lsls	r1, r3, #28
 8006a10:	bf04      	itt	eq
 8006a12:	091b      	lsreq	r3, r3, #4
 8006a14:	3004      	addeq	r0, #4
 8006a16:	0799      	lsls	r1, r3, #30
 8006a18:	bf04      	itt	eq
 8006a1a:	089b      	lsreq	r3, r3, #2
 8006a1c:	3002      	addeq	r0, #2
 8006a1e:	07d9      	lsls	r1, r3, #31
 8006a20:	d403      	bmi.n	8006a2a <__lo0bits+0x4e>
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	f100 0001 	add.w	r0, r0, #1
 8006a28:	d003      	beq.n	8006a32 <__lo0bits+0x56>
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	4770      	bx	lr
 8006a2e:	2000      	movs	r0, #0
 8006a30:	4770      	bx	lr
 8006a32:	2020      	movs	r0, #32
 8006a34:	4770      	bx	lr
	...

08006a38 <__i2b>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	f7ff febb 	bl	80067b8 <_Balloc>
 8006a42:	4602      	mov	r2, r0
 8006a44:	b928      	cbnz	r0, 8006a52 <__i2b+0x1a>
 8006a46:	f240 1145 	movw	r1, #325	; 0x145
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__i2b+0x24>)
 8006a4c:	4804      	ldr	r0, [pc, #16]	; (8006a60 <__i2b+0x28>)
 8006a4e:	f001 fcc3 	bl	80083d8 <__assert_func>
 8006a52:	2301      	movs	r3, #1
 8006a54:	6144      	str	r4, [r0, #20]
 8006a56:	6103      	str	r3, [r0, #16]
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08008fdf 	.word	0x08008fdf
 8006a60:	08008ff0 	.word	0x08008ff0

08006a64 <__multiply>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	4691      	mov	r9, r2
 8006a6a:	690a      	ldr	r2, [r1, #16]
 8006a6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a70:	460c      	mov	r4, r1
 8006a72:	429a      	cmp	r2, r3
 8006a74:	bfbe      	ittt	lt
 8006a76:	460b      	movlt	r3, r1
 8006a78:	464c      	movlt	r4, r9
 8006a7a:	4699      	movlt	r9, r3
 8006a7c:	6927      	ldr	r7, [r4, #16]
 8006a7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6861      	ldr	r1, [r4, #4]
 8006a86:	eb07 060a 	add.w	r6, r7, sl
 8006a8a:	42b3      	cmp	r3, r6
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	bfb8      	it	lt
 8006a90:	3101      	addlt	r1, #1
 8006a92:	f7ff fe91 	bl	80067b8 <_Balloc>
 8006a96:	b930      	cbnz	r0, 8006aa6 <__multiply+0x42>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a9e:	4b43      	ldr	r3, [pc, #268]	; (8006bac <__multiply+0x148>)
 8006aa0:	4843      	ldr	r0, [pc, #268]	; (8006bb0 <__multiply+0x14c>)
 8006aa2:	f001 fc99 	bl	80083d8 <__assert_func>
 8006aa6:	f100 0514 	add.w	r5, r0, #20
 8006aaa:	462b      	mov	r3, r5
 8006aac:	2200      	movs	r2, #0
 8006aae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ab2:	4543      	cmp	r3, r8
 8006ab4:	d321      	bcc.n	8006afa <__multiply+0x96>
 8006ab6:	f104 0314 	add.w	r3, r4, #20
 8006aba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006abe:	f109 0314 	add.w	r3, r9, #20
 8006ac2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	1b3a      	subs	r2, r7, r4
 8006aca:	3a15      	subs	r2, #21
 8006acc:	f022 0203 	bic.w	r2, r2, #3
 8006ad0:	3204      	adds	r2, #4
 8006ad2:	f104 0115 	add.w	r1, r4, #21
 8006ad6:	428f      	cmp	r7, r1
 8006ad8:	bf38      	it	cc
 8006ada:	2204      	movcc	r2, #4
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9a02      	ldr	r2, [sp, #8]
 8006ae0:	9303      	str	r3, [sp, #12]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d80c      	bhi.n	8006b00 <__multiply+0x9c>
 8006ae6:	2e00      	cmp	r6, #0
 8006ae8:	dd03      	ble.n	8006af2 <__multiply+0x8e>
 8006aea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d05a      	beq.n	8006ba8 <__multiply+0x144>
 8006af2:	6106      	str	r6, [r0, #16]
 8006af4:	b005      	add	sp, #20
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	f843 2b04 	str.w	r2, [r3], #4
 8006afe:	e7d8      	b.n	8006ab2 <__multiply+0x4e>
 8006b00:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b04:	f1ba 0f00 	cmp.w	sl, #0
 8006b08:	d023      	beq.n	8006b52 <__multiply+0xee>
 8006b0a:	46a9      	mov	r9, r5
 8006b0c:	f04f 0c00 	mov.w	ip, #0
 8006b10:	f104 0e14 	add.w	lr, r4, #20
 8006b14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b18:	f8d9 1000 	ldr.w	r1, [r9]
 8006b1c:	fa1f fb82 	uxth.w	fp, r2
 8006b20:	b289      	uxth	r1, r1
 8006b22:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b26:	4461      	add	r1, ip
 8006b28:	f8d9 c000 	ldr.w	ip, [r9]
 8006b2c:	0c12      	lsrs	r2, r2, #16
 8006b2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b32:	fb0a c202 	mla	r2, sl, r2, ip
 8006b36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b3a:	b289      	uxth	r1, r1
 8006b3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b40:	4577      	cmp	r7, lr
 8006b42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b46:	f849 1b04 	str.w	r1, [r9], #4
 8006b4a:	d8e3      	bhi.n	8006b14 <__multiply+0xb0>
 8006b4c:	9a01      	ldr	r2, [sp, #4]
 8006b4e:	f845 c002 	str.w	ip, [r5, r2]
 8006b52:	9a03      	ldr	r2, [sp, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b5a:	f1b9 0f00 	cmp.w	r9, #0
 8006b5e:	d021      	beq.n	8006ba4 <__multiply+0x140>
 8006b60:	46ae      	mov	lr, r5
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	6829      	ldr	r1, [r5, #0]
 8006b68:	f104 0c14 	add.w	ip, r4, #20
 8006b6c:	f8bc b000 	ldrh.w	fp, [ip]
 8006b70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b74:	b289      	uxth	r1, r1
 8006b76:	fb09 220b 	mla	r2, r9, fp, r2
 8006b7a:	4452      	add	r2, sl
 8006b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b80:	f84e 1b04 	str.w	r1, [lr], #4
 8006b84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b8c:	f8be 1000 	ldrh.w	r1, [lr]
 8006b90:	4567      	cmp	r7, ip
 8006b92:	fb09 110a 	mla	r1, r9, sl, r1
 8006b96:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b9e:	d8e5      	bhi.n	8006b6c <__multiply+0x108>
 8006ba0:	9a01      	ldr	r2, [sp, #4]
 8006ba2:	50a9      	str	r1, [r5, r2]
 8006ba4:	3504      	adds	r5, #4
 8006ba6:	e79a      	b.n	8006ade <__multiply+0x7a>
 8006ba8:	3e01      	subs	r6, #1
 8006baa:	e79c      	b.n	8006ae6 <__multiply+0x82>
 8006bac:	08008fdf 	.word	0x08008fdf
 8006bb0:	08008ff0 	.word	0x08008ff0

08006bb4 <__pow5mult>:
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb8:	4615      	mov	r5, r2
 8006bba:	f012 0203 	ands.w	r2, r2, #3
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	d007      	beq.n	8006bd4 <__pow5mult+0x20>
 8006bc4:	4c25      	ldr	r4, [pc, #148]	; (8006c5c <__pow5mult+0xa8>)
 8006bc6:	3a01      	subs	r2, #1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bce:	f7ff fe55 	bl	800687c <__multadd>
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	10ad      	asrs	r5, r5, #2
 8006bd6:	d03d      	beq.n	8006c54 <__pow5mult+0xa0>
 8006bd8:	69f4      	ldr	r4, [r6, #28]
 8006bda:	b97c      	cbnz	r4, 8006bfc <__pow5mult+0x48>
 8006bdc:	2010      	movs	r0, #16
 8006bde:	f7ff fd37 	bl	8006650 <malloc>
 8006be2:	4602      	mov	r2, r0
 8006be4:	61f0      	str	r0, [r6, #28]
 8006be6:	b928      	cbnz	r0, 8006bf4 <__pow5mult+0x40>
 8006be8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006bec:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <__pow5mult+0xac>)
 8006bee:	481d      	ldr	r0, [pc, #116]	; (8006c64 <__pow5mult+0xb0>)
 8006bf0:	f001 fbf2 	bl	80083d8 <__assert_func>
 8006bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	60c4      	str	r4, [r0, #12]
 8006bfc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c04:	b94c      	cbnz	r4, 8006c1a <__pow5mult+0x66>
 8006c06:	f240 2171 	movw	r1, #625	; 0x271
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ff14 	bl	8006a38 <__i2b>
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	f04f 0900 	mov.w	r9, #0
 8006c1e:	07eb      	lsls	r3, r5, #31
 8006c20:	d50a      	bpl.n	8006c38 <__pow5mult+0x84>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4622      	mov	r2, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ff1c 	bl	8006a64 <__multiply>
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	4639      	mov	r1, r7
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fe01 	bl	8006838 <_Bfree>
 8006c36:	4647      	mov	r7, r8
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	d00b      	beq.n	8006c54 <__pow5mult+0xa0>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	b938      	cbnz	r0, 8006c50 <__pow5mult+0x9c>
 8006c40:	4622      	mov	r2, r4
 8006c42:	4621      	mov	r1, r4
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ff0d 	bl	8006a64 <__multiply>
 8006c4a:	6020      	str	r0, [r4, #0]
 8006c4c:	f8c0 9000 	str.w	r9, [r0]
 8006c50:	4604      	mov	r4, r0
 8006c52:	e7e4      	b.n	8006c1e <__pow5mult+0x6a>
 8006c54:	4638      	mov	r0, r7
 8006c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08009140 	.word	0x08009140
 8006c60:	08008f70 	.word	0x08008f70
 8006c64:	08008ff0 	.word	0x08008ff0

08006c68 <__lshift>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	4607      	mov	r7, r0
 8006c70:	4691      	mov	r9, r2
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6849      	ldr	r1, [r1, #4]
 8006c76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c80:	f108 0601 	add.w	r6, r8, #1
 8006c84:	42b3      	cmp	r3, r6
 8006c86:	db0b      	blt.n	8006ca0 <__lshift+0x38>
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff fd95 	bl	80067b8 <_Balloc>
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b948      	cbnz	r0, 8006ca6 <__lshift+0x3e>
 8006c92:	4602      	mov	r2, r0
 8006c94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <__lshift+0xd0>)
 8006c9a:	4828      	ldr	r0, [pc, #160]	; (8006d3c <__lshift+0xd4>)
 8006c9c:	f001 fb9c 	bl	80083d8 <__assert_func>
 8006ca0:	3101      	adds	r1, #1
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	e7ee      	b.n	8006c84 <__lshift+0x1c>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f100 0114 	add.w	r1, r0, #20
 8006cac:	f100 0210 	add.w	r2, r0, #16
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	4553      	cmp	r3, sl
 8006cb4:	db33      	blt.n	8006d1e <__lshift+0xb6>
 8006cb6:	6920      	ldr	r0, [r4, #16]
 8006cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cbc:	f104 0314 	add.w	r3, r4, #20
 8006cc0:	f019 091f 	ands.w	r9, r9, #31
 8006cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ccc:	d02b      	beq.n	8006d26 <__lshift+0xbe>
 8006cce:	468a      	mov	sl, r1
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f1c9 0e20 	rsb	lr, r9, #32
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8006cdc:	4310      	orrs	r0, r2
 8006cde:	f84a 0b04 	str.w	r0, [sl], #4
 8006ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce6:	459c      	cmp	ip, r3
 8006ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cec:	d8f3      	bhi.n	8006cd6 <__lshift+0x6e>
 8006cee:	ebac 0304 	sub.w	r3, ip, r4
 8006cf2:	3b15      	subs	r3, #21
 8006cf4:	f023 0303 	bic.w	r3, r3, #3
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	f104 0015 	add.w	r0, r4, #21
 8006cfe:	4584      	cmp	ip, r0
 8006d00:	bf38      	it	cc
 8006d02:	2304      	movcc	r3, #4
 8006d04:	50ca      	str	r2, [r1, r3]
 8006d06:	b10a      	cbz	r2, 8006d0c <__lshift+0xa4>
 8006d08:	f108 0602 	add.w	r6, r8, #2
 8006d0c:	3e01      	subs	r6, #1
 8006d0e:	4638      	mov	r0, r7
 8006d10:	4621      	mov	r1, r4
 8006d12:	612e      	str	r6, [r5, #16]
 8006d14:	f7ff fd90 	bl	8006838 <_Bfree>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d22:	3301      	adds	r3, #1
 8006d24:	e7c5      	b.n	8006cb2 <__lshift+0x4a>
 8006d26:	3904      	subs	r1, #4
 8006d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2c:	459c      	cmp	ip, r3
 8006d2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d32:	d8f9      	bhi.n	8006d28 <__lshift+0xc0>
 8006d34:	e7ea      	b.n	8006d0c <__lshift+0xa4>
 8006d36:	bf00      	nop
 8006d38:	08008fdf 	.word	0x08008fdf
 8006d3c:	08008ff0 	.word	0x08008ff0

08006d40 <__mcmp>:
 8006d40:	4603      	mov	r3, r0
 8006d42:	690a      	ldr	r2, [r1, #16]
 8006d44:	6900      	ldr	r0, [r0, #16]
 8006d46:	b530      	push	{r4, r5, lr}
 8006d48:	1a80      	subs	r0, r0, r2
 8006d4a:	d10d      	bne.n	8006d68 <__mcmp+0x28>
 8006d4c:	3314      	adds	r3, #20
 8006d4e:	3114      	adds	r1, #20
 8006d50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d60:	4295      	cmp	r5, r2
 8006d62:	d002      	beq.n	8006d6a <__mcmp+0x2a>
 8006d64:	d304      	bcc.n	8006d70 <__mcmp+0x30>
 8006d66:	2001      	movs	r0, #1
 8006d68:	bd30      	pop	{r4, r5, pc}
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d3f4      	bcc.n	8006d58 <__mcmp+0x18>
 8006d6e:	e7fb      	b.n	8006d68 <__mcmp+0x28>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e7f8      	b.n	8006d68 <__mcmp+0x28>
	...

08006d78 <__mdiff>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	4607      	mov	r7, r0
 8006d80:	4611      	mov	r1, r2
 8006d82:	4628      	mov	r0, r5
 8006d84:	4614      	mov	r4, r2
 8006d86:	f7ff ffdb 	bl	8006d40 <__mcmp>
 8006d8a:	1e06      	subs	r6, r0, #0
 8006d8c:	d111      	bne.n	8006db2 <__mdiff+0x3a>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff fd11 	bl	80067b8 <_Balloc>
 8006d96:	4602      	mov	r2, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <__mdiff+0x2e>
 8006d9a:	f240 2137 	movw	r1, #567	; 0x237
 8006d9e:	4b3a      	ldr	r3, [pc, #232]	; (8006e88 <__mdiff+0x110>)
 8006da0:	483a      	ldr	r0, [pc, #232]	; (8006e8c <__mdiff+0x114>)
 8006da2:	f001 fb19 	bl	80083d8 <__assert_func>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dac:	4610      	mov	r0, r2
 8006dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db2:	bfa4      	itt	ge
 8006db4:	4623      	movge	r3, r4
 8006db6:	462c      	movge	r4, r5
 8006db8:	4638      	mov	r0, r7
 8006dba:	6861      	ldr	r1, [r4, #4]
 8006dbc:	bfa6      	itte	ge
 8006dbe:	461d      	movge	r5, r3
 8006dc0:	2600      	movge	r6, #0
 8006dc2:	2601      	movlt	r6, #1
 8006dc4:	f7ff fcf8 	bl	80067b8 <_Balloc>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	b918      	cbnz	r0, 8006dd4 <__mdiff+0x5c>
 8006dcc:	f240 2145 	movw	r1, #581	; 0x245
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <__mdiff+0x110>)
 8006dd2:	e7e5      	b.n	8006da0 <__mdiff+0x28>
 8006dd4:	f102 0814 	add.w	r8, r2, #20
 8006dd8:	46c2      	mov	sl, r8
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	6927      	ldr	r7, [r4, #16]
 8006de0:	60c6      	str	r6, [r0, #12]
 8006de2:	692e      	ldr	r6, [r5, #16]
 8006de4:	f104 0014 	add.w	r0, r4, #20
 8006de8:	f105 0914 	add.w	r9, r5, #20
 8006dec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006df0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006df4:	3410      	adds	r4, #16
 8006df6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006dfa:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dfe:	fa1f f18b 	uxth.w	r1, fp
 8006e02:	4461      	add	r1, ip
 8006e04:	fa1f fc83 	uxth.w	ip, r3
 8006e08:	0c1b      	lsrs	r3, r3, #16
 8006e0a:	eba1 010c 	sub.w	r1, r1, ip
 8006e0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e16:	b289      	uxth	r1, r1
 8006e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e1c:	454e      	cmp	r6, r9
 8006e1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e22:	f84a 1b04 	str.w	r1, [sl], #4
 8006e26:	d8e6      	bhi.n	8006df6 <__mdiff+0x7e>
 8006e28:	1b73      	subs	r3, r6, r5
 8006e2a:	3b15      	subs	r3, #21
 8006e2c:	f023 0303 	bic.w	r3, r3, #3
 8006e30:	3515      	adds	r5, #21
 8006e32:	3304      	adds	r3, #4
 8006e34:	42ae      	cmp	r6, r5
 8006e36:	bf38      	it	cc
 8006e38:	2304      	movcc	r3, #4
 8006e3a:	4418      	add	r0, r3
 8006e3c:	4443      	add	r3, r8
 8006e3e:	461e      	mov	r6, r3
 8006e40:	4605      	mov	r5, r0
 8006e42:	4575      	cmp	r5, lr
 8006e44:	d30e      	bcc.n	8006e64 <__mdiff+0xec>
 8006e46:	f10e 0103 	add.w	r1, lr, #3
 8006e4a:	1a09      	subs	r1, r1, r0
 8006e4c:	f021 0103 	bic.w	r1, r1, #3
 8006e50:	3803      	subs	r0, #3
 8006e52:	4586      	cmp	lr, r0
 8006e54:	bf38      	it	cc
 8006e56:	2100      	movcc	r1, #0
 8006e58:	440b      	add	r3, r1
 8006e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e5e:	b189      	cbz	r1, 8006e84 <__mdiff+0x10c>
 8006e60:	6117      	str	r7, [r2, #16]
 8006e62:	e7a3      	b.n	8006dac <__mdiff+0x34>
 8006e64:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e68:	fa1f f188 	uxth.w	r1, r8
 8006e6c:	4461      	add	r1, ip
 8006e6e:	140c      	asrs	r4, r1, #16
 8006e70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e74:	b289      	uxth	r1, r1
 8006e76:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e7a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e7e:	f846 1b04 	str.w	r1, [r6], #4
 8006e82:	e7de      	b.n	8006e42 <__mdiff+0xca>
 8006e84:	3f01      	subs	r7, #1
 8006e86:	e7e8      	b.n	8006e5a <__mdiff+0xe2>
 8006e88:	08008fdf 	.word	0x08008fdf
 8006e8c:	08008ff0 	.word	0x08008ff0

08006e90 <__ulp>:
 8006e90:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <__ulp+0x3c>)
 8006e92:	400b      	ands	r3, r1
 8006e94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc08      	bgt.n	8006eae <__ulp+0x1e>
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ea2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ea6:	da04      	bge.n	8006eb2 <__ulp+0x22>
 8006ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006eac:	4113      	asrs	r3, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	e008      	b.n	8006ec4 <__ulp+0x34>
 8006eb2:	f1a2 0314 	sub.w	r3, r2, #20
 8006eb6:	2b1e      	cmp	r3, #30
 8006eb8:	bfd6      	itet	le
 8006eba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ebe:	2201      	movgt	r2, #1
 8006ec0:	40da      	lsrle	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	7ff00000 	.word	0x7ff00000

08006ed0 <__b2d>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	6905      	ldr	r5, [r0, #16]
 8006ed4:	f100 0714 	add.w	r7, r0, #20
 8006ed8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006edc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006ee0:	1f2e      	subs	r6, r5, #4
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff fd5a 	bl	800699c <__hi0bits>
 8006ee8:	f1c0 0220 	rsb	r2, r0, #32
 8006eec:	280a      	cmp	r0, #10
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006f5c <__b2d+0x8c>
 8006ef4:	600a      	str	r2, [r1, #0]
 8006ef6:	dc12      	bgt.n	8006f1e <__b2d+0x4e>
 8006ef8:	f1c0 0e0b 	rsb	lr, r0, #11
 8006efc:	fa24 f20e 	lsr.w	r2, r4, lr
 8006f00:	42b7      	cmp	r7, r6
 8006f02:	ea42 010c 	orr.w	r1, r2, ip
 8006f06:	bf2c      	ite	cs
 8006f08:	2200      	movcs	r2, #0
 8006f0a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f0e:	3315      	adds	r3, #21
 8006f10:	fa04 f303 	lsl.w	r3, r4, r3
 8006f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f1e:	42b7      	cmp	r7, r6
 8006f20:	bf2e      	itee	cs
 8006f22:	2200      	movcs	r2, #0
 8006f24:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f28:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f2c:	3b0b      	subs	r3, #11
 8006f2e:	d012      	beq.n	8006f56 <__b2d+0x86>
 8006f30:	f1c3 0520 	rsb	r5, r3, #32
 8006f34:	fa22 f105 	lsr.w	r1, r2, r5
 8006f38:	409c      	lsls	r4, r3
 8006f3a:	430c      	orrs	r4, r1
 8006f3c:	42be      	cmp	r6, r7
 8006f3e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006f42:	bf94      	ite	ls
 8006f44:	2400      	movls	r4, #0
 8006f46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	40ec      	lsrs	r4, r5
 8006f4e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f52:	4322      	orrs	r2, r4
 8006f54:	e7e1      	b.n	8006f1a <__b2d+0x4a>
 8006f56:	ea44 010c 	orr.w	r1, r4, ip
 8006f5a:	e7de      	b.n	8006f1a <__b2d+0x4a>
 8006f5c:	3ff00000 	.word	0x3ff00000

08006f60 <__d2b>:
 8006f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f62:	2101      	movs	r1, #1
 8006f64:	4617      	mov	r7, r2
 8006f66:	461c      	mov	r4, r3
 8006f68:	9e08      	ldr	r6, [sp, #32]
 8006f6a:	f7ff fc25 	bl	80067b8 <_Balloc>
 8006f6e:	4605      	mov	r5, r0
 8006f70:	b930      	cbnz	r0, 8006f80 <__d2b+0x20>
 8006f72:	4602      	mov	r2, r0
 8006f74:	f240 310f 	movw	r1, #783	; 0x30f
 8006f78:	4b22      	ldr	r3, [pc, #136]	; (8007004 <__d2b+0xa4>)
 8006f7a:	4823      	ldr	r0, [pc, #140]	; (8007008 <__d2b+0xa8>)
 8006f7c:	f001 fa2c 	bl	80083d8 <__assert_func>
 8006f80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f84:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f88:	bb24      	cbnz	r4, 8006fd4 <__d2b+0x74>
 8006f8a:	2f00      	cmp	r7, #0
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	d026      	beq.n	8006fde <__d2b+0x7e>
 8006f90:	4668      	mov	r0, sp
 8006f92:	9700      	str	r7, [sp, #0]
 8006f94:	f7ff fd22 	bl	80069dc <__lo0bits>
 8006f98:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f9c:	b1e8      	cbz	r0, 8006fda <__d2b+0x7a>
 8006f9e:	f1c0 0320 	rsb	r3, r0, #32
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	40c2      	lsrs	r2, r0
 8006faa:	616b      	str	r3, [r5, #20]
 8006fac:	9201      	str	r2, [sp, #4]
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2102      	movne	r1, #2
 8006fb6:	2101      	moveq	r1, #1
 8006fb8:	61ab      	str	r3, [r5, #24]
 8006fba:	6129      	str	r1, [r5, #16]
 8006fbc:	b1bc      	cbz	r4, 8006fee <__d2b+0x8e>
 8006fbe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fc2:	4404      	add	r4, r0
 8006fc4:	6034      	str	r4, [r6, #0]
 8006fc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	6018      	str	r0, [r3, #0]
 8006fce:	4628      	mov	r0, r5
 8006fd0:	b003      	add	sp, #12
 8006fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fd8:	e7d7      	b.n	8006f8a <__d2b+0x2a>
 8006fda:	6169      	str	r1, [r5, #20]
 8006fdc:	e7e7      	b.n	8006fae <__d2b+0x4e>
 8006fde:	a801      	add	r0, sp, #4
 8006fe0:	f7ff fcfc 	bl	80069dc <__lo0bits>
 8006fe4:	9b01      	ldr	r3, [sp, #4]
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	616b      	str	r3, [r5, #20]
 8006fea:	3020      	adds	r0, #32
 8006fec:	e7e5      	b.n	8006fba <__d2b+0x5a>
 8006fee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ff2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006ff6:	6030      	str	r0, [r6, #0]
 8006ff8:	6918      	ldr	r0, [r3, #16]
 8006ffa:	f7ff fccf 	bl	800699c <__hi0bits>
 8006ffe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007002:	e7e2      	b.n	8006fca <__d2b+0x6a>
 8007004:	08008fdf 	.word	0x08008fdf
 8007008:	08008ff0 	.word	0x08008ff0

0800700c <__ratio>:
 800700c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	4688      	mov	r8, r1
 8007012:	4669      	mov	r1, sp
 8007014:	4681      	mov	r9, r0
 8007016:	f7ff ff5b 	bl	8006ed0 <__b2d>
 800701a:	460f      	mov	r7, r1
 800701c:	4604      	mov	r4, r0
 800701e:	460d      	mov	r5, r1
 8007020:	4640      	mov	r0, r8
 8007022:	a901      	add	r1, sp, #4
 8007024:	f7ff ff54 	bl	8006ed0 <__b2d>
 8007028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800702c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007030:	468b      	mov	fp, r1
 8007032:	eba3 0c02 	sub.w	ip, r3, r2
 8007036:	e9dd 3200 	ldrd	r3, r2, [sp]
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfd5      	itete	le
 8007044:	460a      	movle	r2, r1
 8007046:	462a      	movgt	r2, r5
 8007048:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800704c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007050:	bfd8      	it	le
 8007052:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007056:	465b      	mov	r3, fp
 8007058:	4602      	mov	r2, r0
 800705a:	4639      	mov	r1, r7
 800705c:	4620      	mov	r0, r4
 800705e:	f7f9 fbd1 	bl	8000804 <__aeabi_ddiv>
 8007062:	b003      	add	sp, #12
 8007064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007068 <__copybits>:
 8007068:	3901      	subs	r1, #1
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	1149      	asrs	r1, r1, #5
 800706e:	6914      	ldr	r4, [r2, #16]
 8007070:	3101      	adds	r1, #1
 8007072:	f102 0314 	add.w	r3, r2, #20
 8007076:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800707a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800707e:	1f05      	subs	r5, r0, #4
 8007080:	42a3      	cmp	r3, r4
 8007082:	d30c      	bcc.n	800709e <__copybits+0x36>
 8007084:	1aa3      	subs	r3, r4, r2
 8007086:	3b11      	subs	r3, #17
 8007088:	f023 0303 	bic.w	r3, r3, #3
 800708c:	3211      	adds	r2, #17
 800708e:	42a2      	cmp	r2, r4
 8007090:	bf88      	it	hi
 8007092:	2300      	movhi	r3, #0
 8007094:	4418      	add	r0, r3
 8007096:	2300      	movs	r3, #0
 8007098:	4288      	cmp	r0, r1
 800709a:	d305      	bcc.n	80070a8 <__copybits+0x40>
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	f853 6b04 	ldr.w	r6, [r3], #4
 80070a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80070a6:	e7eb      	b.n	8007080 <__copybits+0x18>
 80070a8:	f840 3b04 	str.w	r3, [r0], #4
 80070ac:	e7f4      	b.n	8007098 <__copybits+0x30>

080070ae <__any_on>:
 80070ae:	f100 0214 	add.w	r2, r0, #20
 80070b2:	6900      	ldr	r0, [r0, #16]
 80070b4:	114b      	asrs	r3, r1, #5
 80070b6:	4298      	cmp	r0, r3
 80070b8:	b510      	push	{r4, lr}
 80070ba:	db11      	blt.n	80070e0 <__any_on+0x32>
 80070bc:	dd0a      	ble.n	80070d4 <__any_on+0x26>
 80070be:	f011 011f 	ands.w	r1, r1, #31
 80070c2:	d007      	beq.n	80070d4 <__any_on+0x26>
 80070c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070c8:	fa24 f001 	lsr.w	r0, r4, r1
 80070cc:	fa00 f101 	lsl.w	r1, r0, r1
 80070d0:	428c      	cmp	r4, r1
 80070d2:	d10b      	bne.n	80070ec <__any_on+0x3e>
 80070d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070d8:	4293      	cmp	r3, r2
 80070da:	d803      	bhi.n	80070e4 <__any_on+0x36>
 80070dc:	2000      	movs	r0, #0
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	4603      	mov	r3, r0
 80070e2:	e7f7      	b.n	80070d4 <__any_on+0x26>
 80070e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d0f5      	beq.n	80070d8 <__any_on+0x2a>
 80070ec:	2001      	movs	r0, #1
 80070ee:	e7f6      	b.n	80070de <__any_on+0x30>

080070f0 <sulp>:
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	460f      	mov	r7, r1
 80070f6:	4690      	mov	r8, r2
 80070f8:	f7ff feca 	bl	8006e90 <__ulp>
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	f1b8 0f00 	cmp.w	r8, #0
 8007104:	d011      	beq.n	800712a <sulp+0x3a>
 8007106:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800710a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd0b      	ble.n	800712a <sulp+0x3a>
 8007112:	2400      	movs	r4, #0
 8007114:	051b      	lsls	r3, r3, #20
 8007116:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800711a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800711e:	4622      	mov	r2, r4
 8007120:	462b      	mov	r3, r5
 8007122:	f7f9 fa45 	bl	80005b0 <__aeabi_dmul>
 8007126:	4604      	mov	r4, r0
 8007128:	460d      	mov	r5, r1
 800712a:	4620      	mov	r0, r4
 800712c:	4629      	mov	r1, r5
 800712e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007132:	0000      	movs	r0, r0
 8007134:	0000      	movs	r0, r0
	...

08007138 <_strtod_l>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b09f      	sub	sp, #124	; 0x7c
 800713e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007140:	2200      	movs	r2, #0
 8007142:	4604      	mov	r4, r0
 8007144:	921a      	str	r2, [sp, #104]	; 0x68
 8007146:	460d      	mov	r5, r1
 8007148:	f04f 0800 	mov.w	r8, #0
 800714c:	f04f 0900 	mov.w	r9, #0
 8007150:	460a      	mov	r2, r1
 8007152:	9219      	str	r2, [sp, #100]	; 0x64
 8007154:	7811      	ldrb	r1, [r2, #0]
 8007156:	292b      	cmp	r1, #43	; 0x2b
 8007158:	d04a      	beq.n	80071f0 <_strtod_l+0xb8>
 800715a:	d838      	bhi.n	80071ce <_strtod_l+0x96>
 800715c:	290d      	cmp	r1, #13
 800715e:	d832      	bhi.n	80071c6 <_strtod_l+0x8e>
 8007160:	2908      	cmp	r1, #8
 8007162:	d832      	bhi.n	80071ca <_strtod_l+0x92>
 8007164:	2900      	cmp	r1, #0
 8007166:	d03b      	beq.n	80071e0 <_strtod_l+0xa8>
 8007168:	2200      	movs	r2, #0
 800716a:	920e      	str	r2, [sp, #56]	; 0x38
 800716c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800716e:	7832      	ldrb	r2, [r6, #0]
 8007170:	2a30      	cmp	r2, #48	; 0x30
 8007172:	f040 80b2 	bne.w	80072da <_strtod_l+0x1a2>
 8007176:	7872      	ldrb	r2, [r6, #1]
 8007178:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800717c:	2a58      	cmp	r2, #88	; 0x58
 800717e:	d16e      	bne.n	800725e <_strtod_l+0x126>
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007184:	4620      	mov	r0, r4
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	ab1a      	add	r3, sp, #104	; 0x68
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4a8c      	ldr	r2, [pc, #560]	; (80073c0 <_strtod_l+0x288>)
 800718e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007190:	a919      	add	r1, sp, #100	; 0x64
 8007192:	f001 f9bb 	bl	800850c <__gethex>
 8007196:	f010 070f 	ands.w	r7, r0, #15
 800719a:	4605      	mov	r5, r0
 800719c:	d005      	beq.n	80071aa <_strtod_l+0x72>
 800719e:	2f06      	cmp	r7, #6
 80071a0:	d128      	bne.n	80071f4 <_strtod_l+0xbc>
 80071a2:	2300      	movs	r3, #0
 80071a4:	3601      	adds	r6, #1
 80071a6:	9619      	str	r6, [sp, #100]	; 0x64
 80071a8:	930e      	str	r3, [sp, #56]	; 0x38
 80071aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 85a0 	bne.w	8007cf2 <_strtod_l+0xbba>
 80071b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071b4:	b1cb      	cbz	r3, 80071ea <_strtod_l+0xb2>
 80071b6:	4642      	mov	r2, r8
 80071b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	b01f      	add	sp, #124	; 0x7c
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2920      	cmp	r1, #32
 80071c8:	d1ce      	bne.n	8007168 <_strtod_l+0x30>
 80071ca:	3201      	adds	r2, #1
 80071cc:	e7c1      	b.n	8007152 <_strtod_l+0x1a>
 80071ce:	292d      	cmp	r1, #45	; 0x2d
 80071d0:	d1ca      	bne.n	8007168 <_strtod_l+0x30>
 80071d2:	2101      	movs	r1, #1
 80071d4:	910e      	str	r1, [sp, #56]	; 0x38
 80071d6:	1c51      	adds	r1, r2, #1
 80071d8:	9119      	str	r1, [sp, #100]	; 0x64
 80071da:	7852      	ldrb	r2, [r2, #1]
 80071dc:	2a00      	cmp	r2, #0
 80071de:	d1c5      	bne.n	800716c <_strtod_l+0x34>
 80071e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e2:	9519      	str	r5, [sp, #100]	; 0x64
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8582 	bne.w	8007cee <_strtod_l+0xbb6>
 80071ea:	4642      	mov	r2, r8
 80071ec:	464b      	mov	r3, r9
 80071ee:	e7e5      	b.n	80071bc <_strtod_l+0x84>
 80071f0:	2100      	movs	r1, #0
 80071f2:	e7ef      	b.n	80071d4 <_strtod_l+0x9c>
 80071f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80071f6:	b13a      	cbz	r2, 8007208 <_strtod_l+0xd0>
 80071f8:	2135      	movs	r1, #53	; 0x35
 80071fa:	a81c      	add	r0, sp, #112	; 0x70
 80071fc:	f7ff ff34 	bl	8007068 <__copybits>
 8007200:	4620      	mov	r0, r4
 8007202:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007204:	f7ff fb18 	bl	8006838 <_Bfree>
 8007208:	3f01      	subs	r7, #1
 800720a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800720c:	2f04      	cmp	r7, #4
 800720e:	d806      	bhi.n	800721e <_strtod_l+0xe6>
 8007210:	e8df f007 	tbb	[pc, r7]
 8007214:	201d0314 	.word	0x201d0314
 8007218:	14          	.byte	0x14
 8007219:	00          	.byte	0x00
 800721a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800721e:	05e9      	lsls	r1, r5, #23
 8007220:	bf48      	it	mi
 8007222:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	051b      	lsls	r3, r3, #20
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1bb      	bne.n	80071aa <_strtod_l+0x72>
 8007232:	f7fe fb15 	bl	8005860 <__errno>
 8007236:	2322      	movs	r3, #34	; 0x22
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	e7b6      	b.n	80071aa <_strtod_l+0x72>
 800723c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007240:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007244:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007248:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800724c:	e7e7      	b.n	800721e <_strtod_l+0xe6>
 800724e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80073c4 <_strtod_l+0x28c>
 8007252:	e7e4      	b.n	800721e <_strtod_l+0xe6>
 8007254:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007258:	f04f 38ff 	mov.w	r8, #4294967295
 800725c:	e7df      	b.n	800721e <_strtod_l+0xe6>
 800725e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	9219      	str	r2, [sp, #100]	; 0x64
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b30      	cmp	r3, #48	; 0x30
 8007268:	d0f9      	beq.n	800725e <_strtod_l+0x126>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d09d      	beq.n	80071aa <_strtod_l+0x72>
 800726e:	2301      	movs	r3, #1
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	220a      	movs	r2, #10
 8007276:	46d3      	mov	fp, sl
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800727c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007280:	930b      	str	r3, [sp, #44]	; 0x2c
 8007282:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007284:	7806      	ldrb	r6, [r0, #0]
 8007286:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	2909      	cmp	r1, #9
 800728e:	d926      	bls.n	80072de <_strtod_l+0x1a6>
 8007290:	2201      	movs	r2, #1
 8007292:	494d      	ldr	r1, [pc, #308]	; (80073c8 <_strtod_l+0x290>)
 8007294:	f001 f847 	bl	8008326 <strncmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	d030      	beq.n	80072fe <_strtod_l+0x1c6>
 800729c:	2000      	movs	r0, #0
 800729e:	4632      	mov	r2, r6
 80072a0:	4603      	mov	r3, r0
 80072a2:	465e      	mov	r6, fp
 80072a4:	9008      	str	r0, [sp, #32]
 80072a6:	2a65      	cmp	r2, #101	; 0x65
 80072a8:	d001      	beq.n	80072ae <_strtod_l+0x176>
 80072aa:	2a45      	cmp	r2, #69	; 0x45
 80072ac:	d113      	bne.n	80072d6 <_strtod_l+0x19e>
 80072ae:	b91e      	cbnz	r6, 80072b8 <_strtod_l+0x180>
 80072b0:	9a05      	ldr	r2, [sp, #20]
 80072b2:	4302      	orrs	r2, r0
 80072b4:	d094      	beq.n	80071e0 <_strtod_l+0xa8>
 80072b6:	2600      	movs	r6, #0
 80072b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072ba:	1c6a      	adds	r2, r5, #1
 80072bc:	9219      	str	r2, [sp, #100]	; 0x64
 80072be:	786a      	ldrb	r2, [r5, #1]
 80072c0:	2a2b      	cmp	r2, #43	; 0x2b
 80072c2:	d074      	beq.n	80073ae <_strtod_l+0x276>
 80072c4:	2a2d      	cmp	r2, #45	; 0x2d
 80072c6:	d078      	beq.n	80073ba <_strtod_l+0x282>
 80072c8:	f04f 0c00 	mov.w	ip, #0
 80072cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072d0:	2909      	cmp	r1, #9
 80072d2:	d97f      	bls.n	80073d4 <_strtod_l+0x29c>
 80072d4:	9519      	str	r5, [sp, #100]	; 0x64
 80072d6:	2700      	movs	r7, #0
 80072d8:	e09e      	b.n	8007418 <_strtod_l+0x2e0>
 80072da:	2300      	movs	r3, #0
 80072dc:	e7c8      	b.n	8007270 <_strtod_l+0x138>
 80072de:	f1bb 0f08 	cmp.w	fp, #8
 80072e2:	bfd8      	it	le
 80072e4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80072e6:	f100 0001 	add.w	r0, r0, #1
 80072ea:	bfd6      	itet	le
 80072ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80072f0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80072f4:	930a      	strle	r3, [sp, #40]	; 0x28
 80072f6:	f10b 0b01 	add.w	fp, fp, #1
 80072fa:	9019      	str	r0, [sp, #100]	; 0x64
 80072fc:	e7c1      	b.n	8007282 <_strtod_l+0x14a>
 80072fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	9219      	str	r2, [sp, #100]	; 0x64
 8007304:	785a      	ldrb	r2, [r3, #1]
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	d037      	beq.n	800737c <_strtod_l+0x244>
 800730c:	465e      	mov	r6, fp
 800730e:	9008      	str	r0, [sp, #32]
 8007310:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007314:	2b09      	cmp	r3, #9
 8007316:	d912      	bls.n	800733e <_strtod_l+0x206>
 8007318:	2301      	movs	r3, #1
 800731a:	e7c4      	b.n	80072a6 <_strtod_l+0x16e>
 800731c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800731e:	3001      	adds	r0, #1
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	9219      	str	r2, [sp, #100]	; 0x64
 8007324:	785a      	ldrb	r2, [r3, #1]
 8007326:	2a30      	cmp	r2, #48	; 0x30
 8007328:	d0f8      	beq.n	800731c <_strtod_l+0x1e4>
 800732a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800732e:	2b08      	cmp	r3, #8
 8007330:	f200 84e4 	bhi.w	8007cfc <_strtod_l+0xbc4>
 8007334:	9008      	str	r0, [sp, #32]
 8007336:	2000      	movs	r0, #0
 8007338:	4606      	mov	r6, r0
 800733a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800733c:	930b      	str	r3, [sp, #44]	; 0x2c
 800733e:	3a30      	subs	r2, #48	; 0x30
 8007340:	f100 0301 	add.w	r3, r0, #1
 8007344:	d014      	beq.n	8007370 <_strtod_l+0x238>
 8007346:	9908      	ldr	r1, [sp, #32]
 8007348:	eb00 0c06 	add.w	ip, r0, r6
 800734c:	4419      	add	r1, r3
 800734e:	9108      	str	r1, [sp, #32]
 8007350:	4633      	mov	r3, r6
 8007352:	210a      	movs	r1, #10
 8007354:	4563      	cmp	r3, ip
 8007356:	d113      	bne.n	8007380 <_strtod_l+0x248>
 8007358:	1833      	adds	r3, r6, r0
 800735a:	2b08      	cmp	r3, #8
 800735c:	f106 0601 	add.w	r6, r6, #1
 8007360:	4406      	add	r6, r0
 8007362:	dc1a      	bgt.n	800739a <_strtod_l+0x262>
 8007364:	230a      	movs	r3, #10
 8007366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007368:	fb03 2301 	mla	r3, r3, r1, r2
 800736c:	930a      	str	r3, [sp, #40]	; 0x28
 800736e:	2300      	movs	r3, #0
 8007370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007372:	4618      	mov	r0, r3
 8007374:	1c51      	adds	r1, r2, #1
 8007376:	9119      	str	r1, [sp, #100]	; 0x64
 8007378:	7852      	ldrb	r2, [r2, #1]
 800737a:	e7c9      	b.n	8007310 <_strtod_l+0x1d8>
 800737c:	4658      	mov	r0, fp
 800737e:	e7d2      	b.n	8007326 <_strtod_l+0x1ee>
 8007380:	2b08      	cmp	r3, #8
 8007382:	f103 0301 	add.w	r3, r3, #1
 8007386:	dc03      	bgt.n	8007390 <_strtod_l+0x258>
 8007388:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800738a:	434f      	muls	r7, r1
 800738c:	970a      	str	r7, [sp, #40]	; 0x28
 800738e:	e7e1      	b.n	8007354 <_strtod_l+0x21c>
 8007390:	2b10      	cmp	r3, #16
 8007392:	bfd8      	it	le
 8007394:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007398:	e7dc      	b.n	8007354 <_strtod_l+0x21c>
 800739a:	2e10      	cmp	r6, #16
 800739c:	bfdc      	itt	le
 800739e:	230a      	movle	r3, #10
 80073a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073a4:	e7e3      	b.n	800736e <_strtod_l+0x236>
 80073a6:	2300      	movs	r3, #0
 80073a8:	9308      	str	r3, [sp, #32]
 80073aa:	2301      	movs	r3, #1
 80073ac:	e780      	b.n	80072b0 <_strtod_l+0x178>
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	1caa      	adds	r2, r5, #2
 80073b4:	9219      	str	r2, [sp, #100]	; 0x64
 80073b6:	78aa      	ldrb	r2, [r5, #2]
 80073b8:	e788      	b.n	80072cc <_strtod_l+0x194>
 80073ba:	f04f 0c01 	mov.w	ip, #1
 80073be:	e7f8      	b.n	80073b2 <_strtod_l+0x27a>
 80073c0:	08009150 	.word	0x08009150
 80073c4:	7ff00000 	.word	0x7ff00000
 80073c8:	0800914c 	.word	0x0800914c
 80073cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073ce:	1c51      	adds	r1, r2, #1
 80073d0:	9119      	str	r1, [sp, #100]	; 0x64
 80073d2:	7852      	ldrb	r2, [r2, #1]
 80073d4:	2a30      	cmp	r2, #48	; 0x30
 80073d6:	d0f9      	beq.n	80073cc <_strtod_l+0x294>
 80073d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073dc:	2908      	cmp	r1, #8
 80073de:	f63f af7a 	bhi.w	80072d6 <_strtod_l+0x19e>
 80073e2:	3a30      	subs	r2, #48	; 0x30
 80073e4:	9209      	str	r2, [sp, #36]	; 0x24
 80073e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073e8:	920c      	str	r2, [sp, #48]	; 0x30
 80073ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073ec:	1c57      	adds	r7, r2, #1
 80073ee:	9719      	str	r7, [sp, #100]	; 0x64
 80073f0:	7852      	ldrb	r2, [r2, #1]
 80073f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073f6:	f1be 0f09 	cmp.w	lr, #9
 80073fa:	d938      	bls.n	800746e <_strtod_l+0x336>
 80073fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073fe:	1a7f      	subs	r7, r7, r1
 8007400:	2f08      	cmp	r7, #8
 8007402:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007406:	dc03      	bgt.n	8007410 <_strtod_l+0x2d8>
 8007408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800740a:	428f      	cmp	r7, r1
 800740c:	bfa8      	it	ge
 800740e:	460f      	movge	r7, r1
 8007410:	f1bc 0f00 	cmp.w	ip, #0
 8007414:	d000      	beq.n	8007418 <_strtod_l+0x2e0>
 8007416:	427f      	negs	r7, r7
 8007418:	2e00      	cmp	r6, #0
 800741a:	d14f      	bne.n	80074bc <_strtod_l+0x384>
 800741c:	9905      	ldr	r1, [sp, #20]
 800741e:	4301      	orrs	r1, r0
 8007420:	f47f aec3 	bne.w	80071aa <_strtod_l+0x72>
 8007424:	2b00      	cmp	r3, #0
 8007426:	f47f aedb 	bne.w	80071e0 <_strtod_l+0xa8>
 800742a:	2a69      	cmp	r2, #105	; 0x69
 800742c:	d029      	beq.n	8007482 <_strtod_l+0x34a>
 800742e:	dc26      	bgt.n	800747e <_strtod_l+0x346>
 8007430:	2a49      	cmp	r2, #73	; 0x49
 8007432:	d026      	beq.n	8007482 <_strtod_l+0x34a>
 8007434:	2a4e      	cmp	r2, #78	; 0x4e
 8007436:	f47f aed3 	bne.w	80071e0 <_strtod_l+0xa8>
 800743a:	499a      	ldr	r1, [pc, #616]	; (80076a4 <_strtod_l+0x56c>)
 800743c:	a819      	add	r0, sp, #100	; 0x64
 800743e:	f001 faa7 	bl	8008990 <__match>
 8007442:	2800      	cmp	r0, #0
 8007444:	f43f aecc 	beq.w	80071e0 <_strtod_l+0xa8>
 8007448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d12f      	bne.n	80074b0 <_strtod_l+0x378>
 8007450:	4995      	ldr	r1, [pc, #596]	; (80076a8 <_strtod_l+0x570>)
 8007452:	aa1c      	add	r2, sp, #112	; 0x70
 8007454:	a819      	add	r0, sp, #100	; 0x64
 8007456:	f001 faaf 	bl	80089b8 <__hexnan>
 800745a:	2805      	cmp	r0, #5
 800745c:	d128      	bne.n	80074b0 <_strtod_l+0x378>
 800745e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007460:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007464:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007468:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800746c:	e69d      	b.n	80071aa <_strtod_l+0x72>
 800746e:	210a      	movs	r1, #10
 8007470:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007472:	fb01 2107 	mla	r1, r1, r7, r2
 8007476:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800747a:	9209      	str	r2, [sp, #36]	; 0x24
 800747c:	e7b5      	b.n	80073ea <_strtod_l+0x2b2>
 800747e:	2a6e      	cmp	r2, #110	; 0x6e
 8007480:	e7d9      	b.n	8007436 <_strtod_l+0x2fe>
 8007482:	498a      	ldr	r1, [pc, #552]	; (80076ac <_strtod_l+0x574>)
 8007484:	a819      	add	r0, sp, #100	; 0x64
 8007486:	f001 fa83 	bl	8008990 <__match>
 800748a:	2800      	cmp	r0, #0
 800748c:	f43f aea8 	beq.w	80071e0 <_strtod_l+0xa8>
 8007490:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007492:	4987      	ldr	r1, [pc, #540]	; (80076b0 <_strtod_l+0x578>)
 8007494:	3b01      	subs	r3, #1
 8007496:	a819      	add	r0, sp, #100	; 0x64
 8007498:	9319      	str	r3, [sp, #100]	; 0x64
 800749a:	f001 fa79 	bl	8008990 <__match>
 800749e:	b910      	cbnz	r0, 80074a6 <_strtod_l+0x36e>
 80074a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074a2:	3301      	adds	r3, #1
 80074a4:	9319      	str	r3, [sp, #100]	; 0x64
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80076b4 <_strtod_l+0x57c>
 80074ae:	e67c      	b.n	80071aa <_strtod_l+0x72>
 80074b0:	4881      	ldr	r0, [pc, #516]	; (80076b8 <_strtod_l+0x580>)
 80074b2:	f000 ff8b 	bl	80083cc <nan>
 80074b6:	4680      	mov	r8, r0
 80074b8:	4689      	mov	r9, r1
 80074ba:	e676      	b.n	80071aa <_strtod_l+0x72>
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	f1bb 0f00 	cmp.w	fp, #0
 80074c2:	bf08      	it	eq
 80074c4:	46b3      	moveq	fp, r6
 80074c6:	1afb      	subs	r3, r7, r3
 80074c8:	2e10      	cmp	r6, #16
 80074ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074cc:	4635      	mov	r5, r6
 80074ce:	9309      	str	r3, [sp, #36]	; 0x24
 80074d0:	bfa8      	it	ge
 80074d2:	2510      	movge	r5, #16
 80074d4:	f7f8 fff2 	bl	80004bc <__aeabi_ui2d>
 80074d8:	2e09      	cmp	r6, #9
 80074da:	4680      	mov	r8, r0
 80074dc:	4689      	mov	r9, r1
 80074de:	dd13      	ble.n	8007508 <_strtod_l+0x3d0>
 80074e0:	4b76      	ldr	r3, [pc, #472]	; (80076bc <_strtod_l+0x584>)
 80074e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80074e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074ea:	f7f9 f861 	bl	80005b0 <__aeabi_dmul>
 80074ee:	4680      	mov	r8, r0
 80074f0:	4650      	mov	r0, sl
 80074f2:	4689      	mov	r9, r1
 80074f4:	f7f8 ffe2 	bl	80004bc <__aeabi_ui2d>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f8 fea0 	bl	8000244 <__adddf3>
 8007504:	4680      	mov	r8, r0
 8007506:	4689      	mov	r9, r1
 8007508:	2e0f      	cmp	r6, #15
 800750a:	dc36      	bgt.n	800757a <_strtod_l+0x442>
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	f43f ae4b 	beq.w	80071aa <_strtod_l+0x72>
 8007514:	dd22      	ble.n	800755c <_strtod_l+0x424>
 8007516:	2b16      	cmp	r3, #22
 8007518:	dc09      	bgt.n	800752e <_strtod_l+0x3f6>
 800751a:	4968      	ldr	r1, [pc, #416]	; (80076bc <_strtod_l+0x584>)
 800751c:	4642      	mov	r2, r8
 800751e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007522:	464b      	mov	r3, r9
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	f7f9 f842 	bl	80005b0 <__aeabi_dmul>
 800752c:	e7c3      	b.n	80074b6 <_strtod_l+0x37e>
 800752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007530:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007534:	4293      	cmp	r3, r2
 8007536:	db20      	blt.n	800757a <_strtod_l+0x442>
 8007538:	4c60      	ldr	r4, [pc, #384]	; (80076bc <_strtod_l+0x584>)
 800753a:	f1c6 060f 	rsb	r6, r6, #15
 800753e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007542:	4642      	mov	r2, r8
 8007544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007548:	464b      	mov	r3, r9
 800754a:	f7f9 f831 	bl	80005b0 <__aeabi_dmul>
 800754e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007550:	1b9e      	subs	r6, r3, r6
 8007552:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007556:	e9d4 2300 	ldrd	r2, r3, [r4]
 800755a:	e7e5      	b.n	8007528 <_strtod_l+0x3f0>
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	3316      	adds	r3, #22
 8007560:	db0b      	blt.n	800757a <_strtod_l+0x442>
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	4640      	mov	r0, r8
 8007566:	1bdf      	subs	r7, r3, r7
 8007568:	4b54      	ldr	r3, [pc, #336]	; (80076bc <_strtod_l+0x584>)
 800756a:	4649      	mov	r1, r9
 800756c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	f7f9 f946 	bl	8000804 <__aeabi_ddiv>
 8007578:	e79d      	b.n	80074b6 <_strtod_l+0x37e>
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	1b75      	subs	r5, r6, r5
 800757e:	441d      	add	r5, r3
 8007580:	2d00      	cmp	r5, #0
 8007582:	dd70      	ble.n	8007666 <_strtod_l+0x52e>
 8007584:	f015 030f 	ands.w	r3, r5, #15
 8007588:	d00a      	beq.n	80075a0 <_strtod_l+0x468>
 800758a:	494c      	ldr	r1, [pc, #304]	; (80076bc <_strtod_l+0x584>)
 800758c:	4642      	mov	r2, r8
 800758e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007596:	464b      	mov	r3, r9
 8007598:	f7f9 f80a 	bl	80005b0 <__aeabi_dmul>
 800759c:	4680      	mov	r8, r0
 800759e:	4689      	mov	r9, r1
 80075a0:	f035 050f 	bics.w	r5, r5, #15
 80075a4:	d04d      	beq.n	8007642 <_strtod_l+0x50a>
 80075a6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075aa:	dd22      	ble.n	80075f2 <_strtod_l+0x4ba>
 80075ac:	2600      	movs	r6, #0
 80075ae:	46b3      	mov	fp, r6
 80075b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80075b2:	9608      	str	r6, [sp, #32]
 80075b4:	2322      	movs	r3, #34	; 0x22
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80076b4 <_strtod_l+0x57c>
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f43f adf1 	beq.w	80071aa <_strtod_l+0x72>
 80075c8:	4620      	mov	r0, r4
 80075ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075cc:	f7ff f934 	bl	8006838 <_Bfree>
 80075d0:	4620      	mov	r0, r4
 80075d2:	9908      	ldr	r1, [sp, #32]
 80075d4:	f7ff f930 	bl	8006838 <_Bfree>
 80075d8:	4659      	mov	r1, fp
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff f92c 	bl	8006838 <_Bfree>
 80075e0:	4620      	mov	r0, r4
 80075e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075e4:	f7ff f928 	bl	8006838 <_Bfree>
 80075e8:	4631      	mov	r1, r6
 80075ea:	4620      	mov	r0, r4
 80075ec:	f7ff f924 	bl	8006838 <_Bfree>
 80075f0:	e5db      	b.n	80071aa <_strtod_l+0x72>
 80075f2:	4b33      	ldr	r3, [pc, #204]	; (80076c0 <_strtod_l+0x588>)
 80075f4:	4640      	mov	r0, r8
 80075f6:	9305      	str	r3, [sp, #20]
 80075f8:	2300      	movs	r3, #0
 80075fa:	4649      	mov	r1, r9
 80075fc:	469a      	mov	sl, r3
 80075fe:	112d      	asrs	r5, r5, #4
 8007600:	2d01      	cmp	r5, #1
 8007602:	dc21      	bgt.n	8007648 <_strtod_l+0x510>
 8007604:	b10b      	cbz	r3, 800760a <_strtod_l+0x4d2>
 8007606:	4680      	mov	r8, r0
 8007608:	4689      	mov	r9, r1
 800760a:	492d      	ldr	r1, [pc, #180]	; (80076c0 <_strtod_l+0x588>)
 800760c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007610:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007614:	4642      	mov	r2, r8
 8007616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761a:	464b      	mov	r3, r9
 800761c:	f7f8 ffc8 	bl	80005b0 <__aeabi_dmul>
 8007620:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <_strtod_l+0x57c>)
 8007622:	460a      	mov	r2, r1
 8007624:	400b      	ands	r3, r1
 8007626:	4927      	ldr	r1, [pc, #156]	; (80076c4 <_strtod_l+0x58c>)
 8007628:	4680      	mov	r8, r0
 800762a:	428b      	cmp	r3, r1
 800762c:	d8be      	bhi.n	80075ac <_strtod_l+0x474>
 800762e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007632:	428b      	cmp	r3, r1
 8007634:	bf86      	itte	hi
 8007636:	f04f 38ff 	movhi.w	r8, #4294967295
 800763a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80076c8 <_strtod_l+0x590>
 800763e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007642:	2300      	movs	r3, #0
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	e07b      	b.n	8007740 <_strtod_l+0x608>
 8007648:	07ea      	lsls	r2, r5, #31
 800764a:	d505      	bpl.n	8007658 <_strtod_l+0x520>
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 ffad 	bl	80005b0 <__aeabi_dmul>
 8007656:	2301      	movs	r3, #1
 8007658:	9a05      	ldr	r2, [sp, #20]
 800765a:	f10a 0a01 	add.w	sl, sl, #1
 800765e:	3208      	adds	r2, #8
 8007660:	106d      	asrs	r5, r5, #1
 8007662:	9205      	str	r2, [sp, #20]
 8007664:	e7cc      	b.n	8007600 <_strtod_l+0x4c8>
 8007666:	d0ec      	beq.n	8007642 <_strtod_l+0x50a>
 8007668:	426d      	negs	r5, r5
 800766a:	f015 020f 	ands.w	r2, r5, #15
 800766e:	d00a      	beq.n	8007686 <_strtod_l+0x54e>
 8007670:	4b12      	ldr	r3, [pc, #72]	; (80076bc <_strtod_l+0x584>)
 8007672:	4640      	mov	r0, r8
 8007674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007678:	4649      	mov	r1, r9
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f7f9 f8c1 	bl	8000804 <__aeabi_ddiv>
 8007682:	4680      	mov	r8, r0
 8007684:	4689      	mov	r9, r1
 8007686:	112d      	asrs	r5, r5, #4
 8007688:	d0db      	beq.n	8007642 <_strtod_l+0x50a>
 800768a:	2d1f      	cmp	r5, #31
 800768c:	dd1e      	ble.n	80076cc <_strtod_l+0x594>
 800768e:	2600      	movs	r6, #0
 8007690:	46b3      	mov	fp, r6
 8007692:	960b      	str	r6, [sp, #44]	; 0x2c
 8007694:	9608      	str	r6, [sp, #32]
 8007696:	2322      	movs	r3, #34	; 0x22
 8007698:	f04f 0800 	mov.w	r8, #0
 800769c:	f04f 0900 	mov.w	r9, #0
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	e78d      	b.n	80075c0 <_strtod_l+0x488>
 80076a4:	08008f37 	.word	0x08008f37
 80076a8:	08009164 	.word	0x08009164
 80076ac:	08008f2f 	.word	0x08008f2f
 80076b0:	08008f66 	.word	0x08008f66
 80076b4:	7ff00000 	.word	0x7ff00000
 80076b8:	080092f5 	.word	0x080092f5
 80076bc:	08009078 	.word	0x08009078
 80076c0:	08009050 	.word	0x08009050
 80076c4:	7ca00000 	.word	0x7ca00000
 80076c8:	7fefffff 	.word	0x7fefffff
 80076cc:	f015 0310 	ands.w	r3, r5, #16
 80076d0:	bf18      	it	ne
 80076d2:	236a      	movne	r3, #106	; 0x6a
 80076d4:	4640      	mov	r0, r8
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	4649      	mov	r1, r9
 80076da:	2300      	movs	r3, #0
 80076dc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80079a8 <_strtod_l+0x870>
 80076e0:	07ea      	lsls	r2, r5, #31
 80076e2:	d504      	bpl.n	80076ee <_strtod_l+0x5b6>
 80076e4:	e9da 2300 	ldrd	r2, r3, [sl]
 80076e8:	f7f8 ff62 	bl	80005b0 <__aeabi_dmul>
 80076ec:	2301      	movs	r3, #1
 80076ee:	106d      	asrs	r5, r5, #1
 80076f0:	f10a 0a08 	add.w	sl, sl, #8
 80076f4:	d1f4      	bne.n	80076e0 <_strtod_l+0x5a8>
 80076f6:	b10b      	cbz	r3, 80076fc <_strtod_l+0x5c4>
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	b1bb      	cbz	r3, 8007730 <_strtod_l+0x5f8>
 8007700:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007704:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007708:	2b00      	cmp	r3, #0
 800770a:	4649      	mov	r1, r9
 800770c:	dd10      	ble.n	8007730 <_strtod_l+0x5f8>
 800770e:	2b1f      	cmp	r3, #31
 8007710:	f340 8128 	ble.w	8007964 <_strtod_l+0x82c>
 8007714:	2b34      	cmp	r3, #52	; 0x34
 8007716:	bfd8      	it	le
 8007718:	f04f 33ff 	movle.w	r3, #4294967295
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	bfcf      	iteee	gt
 8007722:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007726:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800772a:	4093      	lslle	r3, r2
 800772c:	ea03 0901 	andle.w	r9, r3, r1
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	4640      	mov	r0, r8
 8007736:	4649      	mov	r1, r9
 8007738:	f7f9 f9a2 	bl	8000a80 <__aeabi_dcmpeq>
 800773c:	2800      	cmp	r0, #0
 800773e:	d1a6      	bne.n	800768e <_strtod_l+0x556>
 8007740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007742:	465a      	mov	r2, fp
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4620      	mov	r0, r4
 8007748:	4633      	mov	r3, r6
 800774a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774c:	f7ff f8dc 	bl	8006908 <__s2b>
 8007750:	900b      	str	r0, [sp, #44]	; 0x2c
 8007752:	2800      	cmp	r0, #0
 8007754:	f43f af2a 	beq.w	80075ac <_strtod_l+0x474>
 8007758:	2600      	movs	r6, #0
 800775a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	2a00      	cmp	r2, #0
 8007760:	eba3 0307 	sub.w	r3, r3, r7
 8007764:	bfa8      	it	ge
 8007766:	2300      	movge	r3, #0
 8007768:	46b3      	mov	fp, r6
 800776a:	9312      	str	r3, [sp, #72]	; 0x48
 800776c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007770:	9316      	str	r3, [sp, #88]	; 0x58
 8007772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007774:	4620      	mov	r0, r4
 8007776:	6859      	ldr	r1, [r3, #4]
 8007778:	f7ff f81e 	bl	80067b8 <_Balloc>
 800777c:	9008      	str	r0, [sp, #32]
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f af18 	beq.w	80075b4 <_strtod_l+0x47c>
 8007784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007786:	300c      	adds	r0, #12
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	f103 010c 	add.w	r1, r3, #12
 800778e:	3202      	adds	r2, #2
 8007790:	0092      	lsls	r2, r2, #2
 8007792:	f000 fe0d 	bl	80083b0 <memcpy>
 8007796:	ab1c      	add	r3, sp, #112	; 0x70
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	ab1b      	add	r3, sp, #108	; 0x6c
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4642      	mov	r2, r8
 80077a0:	464b      	mov	r3, r9
 80077a2:	4620      	mov	r0, r4
 80077a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80077a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80077ac:	f7ff fbd8 	bl	8006f60 <__d2b>
 80077b0:	901a      	str	r0, [sp, #104]	; 0x68
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f aefe 	beq.w	80075b4 <_strtod_l+0x47c>
 80077b8:	2101      	movs	r1, #1
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff f93c 	bl	8006a38 <__i2b>
 80077c0:	4683      	mov	fp, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aef6 	beq.w	80075b4 <_strtod_l+0x47c>
 80077c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80077ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077cc:	2f00      	cmp	r7, #0
 80077ce:	bfab      	itete	ge
 80077d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80077d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077d4:	eb07 0a03 	addge.w	sl, r7, r3
 80077d8:	1bdd      	sublt	r5, r3, r7
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	bfa8      	it	ge
 80077de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80077e0:	eba7 0703 	sub.w	r7, r7, r3
 80077e4:	4417      	add	r7, r2
 80077e6:	4b71      	ldr	r3, [pc, #452]	; (80079ac <_strtod_l+0x874>)
 80077e8:	f107 37ff 	add.w	r7, r7, #4294967295
 80077ec:	bfb8      	it	lt
 80077ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80077f2:	429f      	cmp	r7, r3
 80077f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077f8:	f280 80c7 	bge.w	800798a <_strtod_l+0x852>
 80077fc:	1bdb      	subs	r3, r3, r7
 80077fe:	2b1f      	cmp	r3, #31
 8007800:	f04f 0101 	mov.w	r1, #1
 8007804:	eba2 0203 	sub.w	r2, r2, r3
 8007808:	f300 80b3 	bgt.w	8007972 <_strtod_l+0x83a>
 800780c:	fa01 f303 	lsl.w	r3, r1, r3
 8007810:	9313      	str	r3, [sp, #76]	; 0x4c
 8007812:	2300      	movs	r3, #0
 8007814:	9310      	str	r3, [sp, #64]	; 0x40
 8007816:	eb0a 0702 	add.w	r7, sl, r2
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	45ba      	cmp	sl, r7
 800781e:	4415      	add	r5, r2
 8007820:	441d      	add	r5, r3
 8007822:	4653      	mov	r3, sl
 8007824:	bfa8      	it	ge
 8007826:	463b      	movge	r3, r7
 8007828:	42ab      	cmp	r3, r5
 800782a:	bfa8      	it	ge
 800782c:	462b      	movge	r3, r5
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfc2      	ittt	gt
 8007832:	1aff      	subgt	r7, r7, r3
 8007834:	1aed      	subgt	r5, r5, r3
 8007836:	ebaa 0a03 	subgt.w	sl, sl, r3
 800783a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd17      	ble.n	8007870 <_strtod_l+0x738>
 8007840:	4659      	mov	r1, fp
 8007842:	461a      	mov	r2, r3
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff f9b5 	bl	8006bb4 <__pow5mult>
 800784a:	4683      	mov	fp, r0
 800784c:	2800      	cmp	r0, #0
 800784e:	f43f aeb1 	beq.w	80075b4 <_strtod_l+0x47c>
 8007852:	4601      	mov	r1, r0
 8007854:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff f904 	bl	8006a64 <__multiply>
 800785c:	900a      	str	r0, [sp, #40]	; 0x28
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f aea8 	beq.w	80075b4 <_strtod_l+0x47c>
 8007864:	4620      	mov	r0, r4
 8007866:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007868:	f7fe ffe6 	bl	8006838 <_Bfree>
 800786c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786e:	931a      	str	r3, [sp, #104]	; 0x68
 8007870:	2f00      	cmp	r7, #0
 8007872:	f300 808f 	bgt.w	8007994 <_strtod_l+0x85c>
 8007876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd08      	ble.n	800788e <_strtod_l+0x756>
 800787c:	4620      	mov	r0, r4
 800787e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007880:	9908      	ldr	r1, [sp, #32]
 8007882:	f7ff f997 	bl	8006bb4 <__pow5mult>
 8007886:	9008      	str	r0, [sp, #32]
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f ae93 	beq.w	80075b4 <_strtod_l+0x47c>
 800788e:	2d00      	cmp	r5, #0
 8007890:	dd08      	ble.n	80078a4 <_strtod_l+0x76c>
 8007892:	462a      	mov	r2, r5
 8007894:	4620      	mov	r0, r4
 8007896:	9908      	ldr	r1, [sp, #32]
 8007898:	f7ff f9e6 	bl	8006c68 <__lshift>
 800789c:	9008      	str	r0, [sp, #32]
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f ae88 	beq.w	80075b4 <_strtod_l+0x47c>
 80078a4:	f1ba 0f00 	cmp.w	sl, #0
 80078a8:	dd08      	ble.n	80078bc <_strtod_l+0x784>
 80078aa:	4659      	mov	r1, fp
 80078ac:	4652      	mov	r2, sl
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7ff f9da 	bl	8006c68 <__lshift>
 80078b4:	4683      	mov	fp, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f ae7c 	beq.w	80075b4 <_strtod_l+0x47c>
 80078bc:	4620      	mov	r0, r4
 80078be:	9a08      	ldr	r2, [sp, #32]
 80078c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078c2:	f7ff fa59 	bl	8006d78 <__mdiff>
 80078c6:	4606      	mov	r6, r0
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f43f ae73 	beq.w	80075b4 <_strtod_l+0x47c>
 80078ce:	2500      	movs	r5, #0
 80078d0:	68c3      	ldr	r3, [r0, #12]
 80078d2:	4659      	mov	r1, fp
 80078d4:	60c5      	str	r5, [r0, #12]
 80078d6:	930a      	str	r3, [sp, #40]	; 0x28
 80078d8:	f7ff fa32 	bl	8006d40 <__mcmp>
 80078dc:	42a8      	cmp	r0, r5
 80078de:	da6b      	bge.n	80079b8 <_strtod_l+0x880>
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	ea53 0308 	orrs.w	r3, r3, r8
 80078e6:	f040 808f 	bne.w	8007a08 <_strtod_l+0x8d0>
 80078ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 808a 	bne.w	8007a08 <_strtod_l+0x8d0>
 80078f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078f8:	0d1b      	lsrs	r3, r3, #20
 80078fa:	051b      	lsls	r3, r3, #20
 80078fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007900:	f240 8082 	bls.w	8007a08 <_strtod_l+0x8d0>
 8007904:	6973      	ldr	r3, [r6, #20]
 8007906:	b913      	cbnz	r3, 800790e <_strtod_l+0x7d6>
 8007908:	6933      	ldr	r3, [r6, #16]
 800790a:	2b01      	cmp	r3, #1
 800790c:	dd7c      	ble.n	8007a08 <_strtod_l+0x8d0>
 800790e:	4631      	mov	r1, r6
 8007910:	2201      	movs	r2, #1
 8007912:	4620      	mov	r0, r4
 8007914:	f7ff f9a8 	bl	8006c68 <__lshift>
 8007918:	4659      	mov	r1, fp
 800791a:	4606      	mov	r6, r0
 800791c:	f7ff fa10 	bl	8006d40 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	dd71      	ble.n	8007a08 <_strtod_l+0x8d0>
 8007924:	9905      	ldr	r1, [sp, #20]
 8007926:	464b      	mov	r3, r9
 8007928:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <_strtod_l+0x878>)
 800792a:	2900      	cmp	r1, #0
 800792c:	f000 808d 	beq.w	8007a4a <_strtod_l+0x912>
 8007930:	ea02 0109 	and.w	r1, r2, r9
 8007934:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007938:	f300 8087 	bgt.w	8007a4a <_strtod_l+0x912>
 800793c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007940:	f77f aea9 	ble.w	8007696 <_strtod_l+0x55e>
 8007944:	4640      	mov	r0, r8
 8007946:	4649      	mov	r1, r9
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <_strtod_l+0x87c>)
 800794a:	2200      	movs	r2, #0
 800794c:	f7f8 fe30 	bl	80005b0 <__aeabi_dmul>
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <_strtod_l+0x878>)
 8007952:	4680      	mov	r8, r0
 8007954:	400b      	ands	r3, r1
 8007956:	4689      	mov	r9, r1
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f ae35 	bne.w	80075c8 <_strtod_l+0x490>
 800795e:	2322      	movs	r3, #34	; 0x22
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	e631      	b.n	80075c8 <_strtod_l+0x490>
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	ea03 0808 	and.w	r8, r3, r8
 8007970:	e6de      	b.n	8007730 <_strtod_l+0x5f8>
 8007972:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007976:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800797a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800797e:	37e2      	adds	r7, #226	; 0xe2
 8007980:	fa01 f307 	lsl.w	r3, r1, r7
 8007984:	9310      	str	r3, [sp, #64]	; 0x40
 8007986:	9113      	str	r1, [sp, #76]	; 0x4c
 8007988:	e745      	b.n	8007816 <_strtod_l+0x6de>
 800798a:	2300      	movs	r3, #0
 800798c:	9310      	str	r3, [sp, #64]	; 0x40
 800798e:	2301      	movs	r3, #1
 8007990:	9313      	str	r3, [sp, #76]	; 0x4c
 8007992:	e740      	b.n	8007816 <_strtod_l+0x6de>
 8007994:	463a      	mov	r2, r7
 8007996:	4620      	mov	r0, r4
 8007998:	991a      	ldr	r1, [sp, #104]	; 0x68
 800799a:	f7ff f965 	bl	8006c68 <__lshift>
 800799e:	901a      	str	r0, [sp, #104]	; 0x68
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f47f af68 	bne.w	8007876 <_strtod_l+0x73e>
 80079a6:	e605      	b.n	80075b4 <_strtod_l+0x47c>
 80079a8:	08009178 	.word	0x08009178
 80079ac:	fffffc02 	.word	0xfffffc02
 80079b0:	7ff00000 	.word	0x7ff00000
 80079b4:	39500000 	.word	0x39500000
 80079b8:	46ca      	mov	sl, r9
 80079ba:	d165      	bne.n	8007a88 <_strtod_l+0x950>
 80079bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079c2:	b352      	cbz	r2, 8007a1a <_strtod_l+0x8e2>
 80079c4:	4a9e      	ldr	r2, [pc, #632]	; (8007c40 <_strtod_l+0xb08>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d12a      	bne.n	8007a20 <_strtod_l+0x8e8>
 80079ca:	9b05      	ldr	r3, [sp, #20]
 80079cc:	4641      	mov	r1, r8
 80079ce:	b1fb      	cbz	r3, 8007a10 <_strtod_l+0x8d8>
 80079d0:	4b9c      	ldr	r3, [pc, #624]	; (8007c44 <_strtod_l+0xb0c>)
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	ea09 0303 	and.w	r3, r9, r3
 80079da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079de:	d81a      	bhi.n	8007a16 <_strtod_l+0x8de>
 80079e0:	0d1b      	lsrs	r3, r3, #20
 80079e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	4299      	cmp	r1, r3
 80079ec:	d118      	bne.n	8007a20 <_strtod_l+0x8e8>
 80079ee:	4b96      	ldr	r3, [pc, #600]	; (8007c48 <_strtod_l+0xb10>)
 80079f0:	459a      	cmp	sl, r3
 80079f2:	d102      	bne.n	80079fa <_strtod_l+0x8c2>
 80079f4:	3101      	adds	r1, #1
 80079f6:	f43f addd 	beq.w	80075b4 <_strtod_l+0x47c>
 80079fa:	f04f 0800 	mov.w	r8, #0
 80079fe:	4b91      	ldr	r3, [pc, #580]	; (8007c44 <_strtod_l+0xb0c>)
 8007a00:	ea0a 0303 	and.w	r3, sl, r3
 8007a04:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a08:	9b05      	ldr	r3, [sp, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d19a      	bne.n	8007944 <_strtod_l+0x80c>
 8007a0e:	e5db      	b.n	80075c8 <_strtod_l+0x490>
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	e7e9      	b.n	80079ea <_strtod_l+0x8b2>
 8007a16:	4613      	mov	r3, r2
 8007a18:	e7e7      	b.n	80079ea <_strtod_l+0x8b2>
 8007a1a:	ea53 0308 	orrs.w	r3, r3, r8
 8007a1e:	d081      	beq.n	8007924 <_strtod_l+0x7ec>
 8007a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a22:	b1e3      	cbz	r3, 8007a5e <_strtod_l+0x926>
 8007a24:	ea13 0f0a 	tst.w	r3, sl
 8007a28:	d0ee      	beq.n	8007a08 <_strtod_l+0x8d0>
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	9a05      	ldr	r2, [sp, #20]
 8007a32:	b1c3      	cbz	r3, 8007a66 <_strtod_l+0x92e>
 8007a34:	f7ff fb5c 	bl	80070f0 <sulp>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a40:	f7f8 fc00 	bl	8000244 <__adddf3>
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	e7de      	b.n	8007a08 <_strtod_l+0x8d0>
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a54:	f04f 38ff 	mov.w	r8, #4294967295
 8007a58:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a5c:	e7d4      	b.n	8007a08 <_strtod_l+0x8d0>
 8007a5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a60:	ea13 0f08 	tst.w	r3, r8
 8007a64:	e7e0      	b.n	8007a28 <_strtod_l+0x8f0>
 8007a66:	f7ff fb43 	bl	80070f0 <sulp>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a72:	f7f8 fbe5 	bl	8000240 <__aeabi_dsub>
 8007a76:	2200      	movs	r2, #0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4680      	mov	r8, r0
 8007a7c:	4689      	mov	r9, r1
 8007a7e:	f7f8 ffff 	bl	8000a80 <__aeabi_dcmpeq>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0c0      	beq.n	8007a08 <_strtod_l+0x8d0>
 8007a86:	e606      	b.n	8007696 <_strtod_l+0x55e>
 8007a88:	4659      	mov	r1, fp
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7ff fabe 	bl	800700c <__ratio>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a9e:	f7f9 f803 	bl	8000aa8 <__aeabi_dcmple>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d06f      	beq.n	8007b86 <_strtod_l+0xa4e>
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d17c      	bne.n	8007ba6 <_strtod_l+0xa6e>
 8007aac:	f1b8 0f00 	cmp.w	r8, #0
 8007ab0:	d159      	bne.n	8007b66 <_strtod_l+0xa2e>
 8007ab2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d17b      	bne.n	8007bb2 <_strtod_l+0xa7a>
 8007aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4b62      	ldr	r3, [pc, #392]	; (8007c4c <_strtod_l+0xb14>)
 8007ac2:	f7f8 ffe7 	bl	8000a94 <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d15a      	bne.n	8007b80 <_strtod_l+0xa48>
 8007aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4b5f      	ldr	r3, [pc, #380]	; (8007c50 <_strtod_l+0xb18>)
 8007ad2:	f7f8 fd6d 	bl	80005b0 <__aeabi_dmul>
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	460f      	mov	r7, r1
 8007ada:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ade:	9506      	str	r5, [sp, #24]
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ae6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007aea:	4b56      	ldr	r3, [pc, #344]	; (8007c44 <_strtod_l+0xb0c>)
 8007aec:	4a55      	ldr	r2, [pc, #340]	; (8007c44 <_strtod_l+0xb0c>)
 8007aee:	ea0a 0303 	and.w	r3, sl, r3
 8007af2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007af4:	4b57      	ldr	r3, [pc, #348]	; (8007c54 <_strtod_l+0xb1c>)
 8007af6:	ea0a 0202 	and.w	r2, sl, r2
 8007afa:	429a      	cmp	r2, r3
 8007afc:	f040 80b0 	bne.w	8007c60 <_strtod_l+0xb28>
 8007b00:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7ff f9c2 	bl	8006e90 <__ulp>
 8007b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b10:	f7f8 fd4e 	bl	80005b0 <__aeabi_dmul>
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	f7f8 fb94 	bl	8000244 <__adddf3>
 8007b1c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c44 <_strtod_l+0xb0c>
 8007b20:	4a4d      	ldr	r2, [pc, #308]	; (8007c58 <_strtod_l+0xb20>)
 8007b22:	ea01 0a0a 	and.w	sl, r1, sl
 8007b26:	4592      	cmp	sl, r2
 8007b28:	4680      	mov	r8, r0
 8007b2a:	d948      	bls.n	8007bbe <_strtod_l+0xa86>
 8007b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b2e:	4b46      	ldr	r3, [pc, #280]	; (8007c48 <_strtod_l+0xb10>)
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d103      	bne.n	8007b3c <_strtod_l+0xa04>
 8007b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b36:	3301      	adds	r3, #1
 8007b38:	f43f ad3c 	beq.w	80075b4 <_strtod_l+0x47c>
 8007b3c:	f04f 38ff 	mov.w	r8, #4294967295
 8007b40:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c48 <_strtod_l+0xb10>
 8007b44:	4620      	mov	r0, r4
 8007b46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b48:	f7fe fe76 	bl	8006838 <_Bfree>
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	9908      	ldr	r1, [sp, #32]
 8007b50:	f7fe fe72 	bl	8006838 <_Bfree>
 8007b54:	4659      	mov	r1, fp
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7fe fe6e 	bl	8006838 <_Bfree>
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7fe fe6a 	bl	8006838 <_Bfree>
 8007b64:	e605      	b.n	8007772 <_strtod_l+0x63a>
 8007b66:	f1b8 0f01 	cmp.w	r8, #1
 8007b6a:	d103      	bne.n	8007b74 <_strtod_l+0xa3c>
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	f43f ad91 	beq.w	8007696 <_strtod_l+0x55e>
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b39      	ldr	r3, [pc, #228]	; (8007c5c <_strtod_l+0xb24>)
 8007b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b7e:	e016      	b.n	8007bae <_strtod_l+0xa76>
 8007b80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b82:	4f33      	ldr	r7, [pc, #204]	; (8007c50 <_strtod_l+0xb18>)
 8007b84:	e7a9      	b.n	8007ada <_strtod_l+0x9a2>
 8007b86:	4b32      	ldr	r3, [pc, #200]	; (8007c50 <_strtod_l+0xb18>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b8e:	f7f8 fd0f 	bl	80005b0 <__aeabi_dmul>
 8007b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b94:	4605      	mov	r5, r0
 8007b96:	460f      	mov	r7, r1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d09e      	beq.n	8007ada <_strtod_l+0x9a2>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ba4:	e79d      	b.n	8007ae2 <_strtod_l+0x9aa>
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <_strtod_l+0xb14>)
 8007baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bae:	4f27      	ldr	r7, [pc, #156]	; (8007c4c <_strtod_l+0xb14>)
 8007bb0:	e797      	b.n	8007ae2 <_strtod_l+0x9aa>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4b29      	ldr	r3, [pc, #164]	; (8007c5c <_strtod_l+0xb24>)
 8007bb6:	4645      	mov	r5, r8
 8007bb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bbc:	e7f7      	b.n	8007bae <_strtod_l+0xa76>
 8007bbe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	46ca      	mov	sl, r9
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1bc      	bne.n	8007b44 <_strtod_l+0xa0c>
 8007bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d1b5      	bne.n	8007b44 <_strtod_l+0xa0c>
 8007bd8:	4628      	mov	r0, r5
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f9 fab4 	bl	8001148 <__aeabi_d2lz>
 8007be0:	f7f8 fcb8 	bl	8000554 <__aeabi_l2d>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4628      	mov	r0, r5
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fb28 	bl	8000240 <__aeabi_dsub>
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007bf8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfe:	ea4a 0a08 	orr.w	sl, sl, r8
 8007c02:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007c06:	d06c      	beq.n	8007ce2 <_strtod_l+0xbaa>
 8007c08:	a309      	add	r3, pc, #36	; (adr r3, 8007c30 <_strtod_l+0xaf8>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 ff41 	bl	8000a94 <__aeabi_dcmplt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f47f acd8 	bne.w	80075c8 <_strtod_l+0x490>
 8007c18:	a307      	add	r3, pc, #28	; (adr r3, 8007c38 <_strtod_l+0xb00>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c22:	f7f8 ff55 	bl	8000ad0 <__aeabi_dcmpgt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d08c      	beq.n	8007b44 <_strtod_l+0xa0c>
 8007c2a:	e4cd      	b.n	80075c8 <_strtod_l+0x490>
 8007c2c:	f3af 8000 	nop.w
 8007c30:	94a03595 	.word	0x94a03595
 8007c34:	3fdfffff 	.word	0x3fdfffff
 8007c38:	35afe535 	.word	0x35afe535
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	000fffff 	.word	0x000fffff
 8007c44:	7ff00000 	.word	0x7ff00000
 8007c48:	7fefffff 	.word	0x7fefffff
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	3fe00000 	.word	0x3fe00000
 8007c54:	7fe00000 	.word	0x7fe00000
 8007c58:	7c9fffff 	.word	0x7c9fffff
 8007c5c:	bff00000 	.word	0xbff00000
 8007c60:	9b05      	ldr	r3, [sp, #20]
 8007c62:	b333      	cbz	r3, 8007cb2 <_strtod_l+0xb7a>
 8007c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c6a:	d822      	bhi.n	8007cb2 <_strtod_l+0xb7a>
 8007c6c:	a328      	add	r3, pc, #160	; (adr r3, 8007d10 <_strtod_l+0xbd8>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	4628      	mov	r0, r5
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 ff17 	bl	8000aa8 <__aeabi_dcmple>
 8007c7a:	b1a0      	cbz	r0, 8007ca6 <_strtod_l+0xb6e>
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f7f8 ff6e 	bl	8000b60 <__aeabi_d2uiz>
 8007c84:	2801      	cmp	r0, #1
 8007c86:	bf38      	it	cc
 8007c88:	2001      	movcc	r0, #1
 8007c8a:	f7f8 fc17 	bl	80004bc <__aeabi_ui2d>
 8007c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c90:	4605      	mov	r5, r0
 8007c92:	460f      	mov	r7, r1
 8007c94:	bb03      	cbnz	r3, 8007cd8 <_strtod_l+0xba0>
 8007c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c9a:	9014      	str	r0, [sp, #80]	; 0x50
 8007c9c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c9e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ca2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007caa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	9311      	str	r3, [sp, #68]	; 0x44
 8007cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cb6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007cba:	f7ff f8e9 	bl	8006e90 <__ulp>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 fc73 	bl	80005b0 <__aeabi_dmul>
 8007cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cce:	f7f8 fab9 	bl	8000244 <__adddf3>
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	4689      	mov	r9, r1
 8007cd6:	e774      	b.n	8007bc2 <_strtod_l+0xa8a>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ce0:	e7dd      	b.n	8007c9e <_strtod_l+0xb66>
 8007ce2:	a30d      	add	r3, pc, #52	; (adr r3, 8007d18 <_strtod_l+0xbe0>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fed4 	bl	8000a94 <__aeabi_dcmplt>
 8007cec:	e79b      	b.n	8007c26 <_strtod_l+0xaee>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f7ff ba5b 	b.w	80071b2 <_strtod_l+0x7a>
 8007cfc:	2a65      	cmp	r2, #101	; 0x65
 8007cfe:	f43f ab52 	beq.w	80073a6 <_strtod_l+0x26e>
 8007d02:	2a45      	cmp	r2, #69	; 0x45
 8007d04:	f43f ab4f 	beq.w	80073a6 <_strtod_l+0x26e>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f7ff bb87 	b.w	800741c <_strtod_l+0x2e4>
 8007d0e:	bf00      	nop
 8007d10:	ffc00000 	.word	0xffc00000
 8007d14:	41dfffff 	.word	0x41dfffff
 8007d18:	94a03595 	.word	0x94a03595
 8007d1c:	3fcfffff 	.word	0x3fcfffff

08007d20 <_strtod_r>:
 8007d20:	4b01      	ldr	r3, [pc, #4]	; (8007d28 <_strtod_r+0x8>)
 8007d22:	f7ff ba09 	b.w	8007138 <_strtod_l>
 8007d26:	bf00      	nop
 8007d28:	2000006c 	.word	0x2000006c

08007d2c <_strtol_l.constprop.0>:
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d32:	4686      	mov	lr, r0
 8007d34:	4690      	mov	r8, r2
 8007d36:	d001      	beq.n	8007d3c <_strtol_l.constprop.0+0x10>
 8007d38:	2b24      	cmp	r3, #36	; 0x24
 8007d3a:	d906      	bls.n	8007d4a <_strtol_l.constprop.0+0x1e>
 8007d3c:	f7fd fd90 	bl	8005860 <__errno>
 8007d40:	2316      	movs	r3, #22
 8007d42:	6003      	str	r3, [r0, #0]
 8007d44:	2000      	movs	r0, #0
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	4835      	ldr	r0, [pc, #212]	; (8007e24 <_strtol_l.constprop.0+0xf8>)
 8007d4e:	462a      	mov	r2, r5
 8007d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d54:	5d06      	ldrb	r6, [r0, r4]
 8007d56:	f016 0608 	ands.w	r6, r6, #8
 8007d5a:	d1f8      	bne.n	8007d4e <_strtol_l.constprop.0+0x22>
 8007d5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d5e:	d12e      	bne.n	8007dbe <_strtol_l.constprop.0+0x92>
 8007d60:	2601      	movs	r6, #1
 8007d62:	782c      	ldrb	r4, [r5, #0]
 8007d64:	1c95      	adds	r5, r2, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d057      	beq.n	8007e1a <_strtol_l.constprop.0+0xee>
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d109      	bne.n	8007d82 <_strtol_l.constprop.0+0x56>
 8007d6e:	2c30      	cmp	r4, #48	; 0x30
 8007d70:	d107      	bne.n	8007d82 <_strtol_l.constprop.0+0x56>
 8007d72:	782a      	ldrb	r2, [r5, #0]
 8007d74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d78:	2a58      	cmp	r2, #88	; 0x58
 8007d7a:	d149      	bne.n	8007e10 <_strtol_l.constprop.0+0xe4>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	786c      	ldrb	r4, [r5, #1]
 8007d80:	3502      	adds	r5, #2
 8007d82:	2200      	movs	r2, #0
 8007d84:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007d88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d8c:	fbbc f9f3 	udiv	r9, ip, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d96:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007d9a:	2f09      	cmp	r7, #9
 8007d9c:	d814      	bhi.n	8007dc8 <_strtol_l.constprop.0+0x9c>
 8007d9e:	463c      	mov	r4, r7
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	dd20      	ble.n	8007de6 <_strtol_l.constprop.0+0xba>
 8007da4:	1c57      	adds	r7, r2, #1
 8007da6:	d007      	beq.n	8007db8 <_strtol_l.constprop.0+0x8c>
 8007da8:	4581      	cmp	r9, r0
 8007daa:	d319      	bcc.n	8007de0 <_strtol_l.constprop.0+0xb4>
 8007dac:	d101      	bne.n	8007db2 <_strtol_l.constprop.0+0x86>
 8007dae:	45a2      	cmp	sl, r4
 8007db0:	db16      	blt.n	8007de0 <_strtol_l.constprop.0+0xb4>
 8007db2:	2201      	movs	r2, #1
 8007db4:	fb00 4003 	mla	r0, r0, r3, r4
 8007db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dbc:	e7eb      	b.n	8007d96 <_strtol_l.constprop.0+0x6a>
 8007dbe:	2c2b      	cmp	r4, #43	; 0x2b
 8007dc0:	bf04      	itt	eq
 8007dc2:	782c      	ldrbeq	r4, [r5, #0]
 8007dc4:	1c95      	addeq	r5, r2, #2
 8007dc6:	e7ce      	b.n	8007d66 <_strtol_l.constprop.0+0x3a>
 8007dc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007dcc:	2f19      	cmp	r7, #25
 8007dce:	d801      	bhi.n	8007dd4 <_strtol_l.constprop.0+0xa8>
 8007dd0:	3c37      	subs	r4, #55	; 0x37
 8007dd2:	e7e5      	b.n	8007da0 <_strtol_l.constprop.0+0x74>
 8007dd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007dd8:	2f19      	cmp	r7, #25
 8007dda:	d804      	bhi.n	8007de6 <_strtol_l.constprop.0+0xba>
 8007ddc:	3c57      	subs	r4, #87	; 0x57
 8007dde:	e7df      	b.n	8007da0 <_strtol_l.constprop.0+0x74>
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295
 8007de4:	e7e8      	b.n	8007db8 <_strtol_l.constprop.0+0x8c>
 8007de6:	1c53      	adds	r3, r2, #1
 8007de8:	d108      	bne.n	8007dfc <_strtol_l.constprop.0+0xd0>
 8007dea:	2322      	movs	r3, #34	; 0x22
 8007dec:	4660      	mov	r0, ip
 8007dee:	f8ce 3000 	str.w	r3, [lr]
 8007df2:	f1b8 0f00 	cmp.w	r8, #0
 8007df6:	d0a6      	beq.n	8007d46 <_strtol_l.constprop.0+0x1a>
 8007df8:	1e69      	subs	r1, r5, #1
 8007dfa:	e006      	b.n	8007e0a <_strtol_l.constprop.0+0xde>
 8007dfc:	b106      	cbz	r6, 8007e00 <_strtol_l.constprop.0+0xd4>
 8007dfe:	4240      	negs	r0, r0
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	d09f      	beq.n	8007d46 <_strtol_l.constprop.0+0x1a>
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	d1f6      	bne.n	8007df8 <_strtol_l.constprop.0+0xcc>
 8007e0a:	f8c8 1000 	str.w	r1, [r8]
 8007e0e:	e79a      	b.n	8007d46 <_strtol_l.constprop.0+0x1a>
 8007e10:	2430      	movs	r4, #48	; 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1b5      	bne.n	8007d82 <_strtol_l.constprop.0+0x56>
 8007e16:	2308      	movs	r3, #8
 8007e18:	e7b3      	b.n	8007d82 <_strtol_l.constprop.0+0x56>
 8007e1a:	2c30      	cmp	r4, #48	; 0x30
 8007e1c:	d0a9      	beq.n	8007d72 <_strtol_l.constprop.0+0x46>
 8007e1e:	230a      	movs	r3, #10
 8007e20:	e7af      	b.n	8007d82 <_strtol_l.constprop.0+0x56>
 8007e22:	bf00      	nop
 8007e24:	080091a1 	.word	0x080091a1

08007e28 <_strtol_r>:
 8007e28:	f7ff bf80 	b.w	8007d2c <_strtol_l.constprop.0>

08007e2c <__ssputs_r>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	461f      	mov	r7, r3
 8007e32:	688e      	ldr	r6, [r1, #8]
 8007e34:	4682      	mov	sl, r0
 8007e36:	42be      	cmp	r6, r7
 8007e38:	460c      	mov	r4, r1
 8007e3a:	4690      	mov	r8, r2
 8007e3c:	680b      	ldr	r3, [r1, #0]
 8007e3e:	d82c      	bhi.n	8007e9a <__ssputs_r+0x6e>
 8007e40:	898a      	ldrh	r2, [r1, #12]
 8007e42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e46:	d026      	beq.n	8007e96 <__ssputs_r+0x6a>
 8007e48:	6965      	ldr	r5, [r4, #20]
 8007e4a:	6909      	ldr	r1, [r1, #16]
 8007e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e50:	eba3 0901 	sub.w	r9, r3, r1
 8007e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e58:	1c7b      	adds	r3, r7, #1
 8007e5a:	444b      	add	r3, r9
 8007e5c:	106d      	asrs	r5, r5, #1
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	bf38      	it	cc
 8007e62:	461d      	movcc	r5, r3
 8007e64:	0553      	lsls	r3, r2, #21
 8007e66:	d527      	bpl.n	8007eb8 <__ssputs_r+0x8c>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7fe fc19 	bl	80066a0 <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b360      	cbz	r0, 8007ecc <__ssputs_r+0xa0>
 8007e72:	464a      	mov	r2, r9
 8007e74:	6921      	ldr	r1, [r4, #16]
 8007e76:	f000 fa9b 	bl	80083b0 <memcpy>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	6126      	str	r6, [r4, #16]
 8007e88:	444e      	add	r6, r9
 8007e8a:	6026      	str	r6, [r4, #0]
 8007e8c:	463e      	mov	r6, r7
 8007e8e:	6165      	str	r5, [r4, #20]
 8007e90:	eba5 0509 	sub.w	r5, r5, r9
 8007e94:	60a5      	str	r5, [r4, #8]
 8007e96:	42be      	cmp	r6, r7
 8007e98:	d900      	bls.n	8007e9c <__ssputs_r+0x70>
 8007e9a:	463e      	mov	r6, r7
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	f000 fa26 	bl	80082f2 <memmove>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	68a3      	ldr	r3, [r4, #8]
 8007eaa:	1b9b      	subs	r3, r3, r6
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	4433      	add	r3, r6
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb8:	462a      	mov	r2, r5
 8007eba:	f000 fe2a 	bl	8008b12 <_realloc_r>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d1e0      	bne.n	8007e86 <__ssputs_r+0x5a>
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	6921      	ldr	r1, [r4, #16]
 8007ec8:	f7fe fb7a 	bl	80065c0 <_free_r>
 8007ecc:	230c      	movs	r3, #12
 8007ece:	f8ca 3000 	str.w	r3, [sl]
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	e7e9      	b.n	8007eb4 <__ssputs_r+0x88>

08007ee0 <_svfiprintf_r>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	4698      	mov	r8, r3
 8007ee6:	898b      	ldrh	r3, [r1, #12]
 8007ee8:	4607      	mov	r7, r0
 8007eea:	061b      	lsls	r3, r3, #24
 8007eec:	460d      	mov	r5, r1
 8007eee:	4614      	mov	r4, r2
 8007ef0:	b09d      	sub	sp, #116	; 0x74
 8007ef2:	d50e      	bpl.n	8007f12 <_svfiprintf_r+0x32>
 8007ef4:	690b      	ldr	r3, [r1, #16]
 8007ef6:	b963      	cbnz	r3, 8007f12 <_svfiprintf_r+0x32>
 8007ef8:	2140      	movs	r1, #64	; 0x40
 8007efa:	f7fe fbd1 	bl	80066a0 <_malloc_r>
 8007efe:	6028      	str	r0, [r5, #0]
 8007f00:	6128      	str	r0, [r5, #16]
 8007f02:	b920      	cbnz	r0, 8007f0e <_svfiprintf_r+0x2e>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e0d0      	b.n	80080b0 <_svfiprintf_r+0x1d0>
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	616b      	str	r3, [r5, #20]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9309      	str	r3, [sp, #36]	; 0x24
 8007f16:	2320      	movs	r3, #32
 8007f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f1c:	2330      	movs	r3, #48	; 0x30
 8007f1e:	f04f 0901 	mov.w	r9, #1
 8007f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f26:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80080c8 <_svfiprintf_r+0x1e8>
 8007f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f2e:	4623      	mov	r3, r4
 8007f30:	469a      	mov	sl, r3
 8007f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f36:	b10a      	cbz	r2, 8007f3c <_svfiprintf_r+0x5c>
 8007f38:	2a25      	cmp	r2, #37	; 0x25
 8007f3a:	d1f9      	bne.n	8007f30 <_svfiprintf_r+0x50>
 8007f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f40:	d00b      	beq.n	8007f5a <_svfiprintf_r+0x7a>
 8007f42:	465b      	mov	r3, fp
 8007f44:	4622      	mov	r2, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	4638      	mov	r0, r7
 8007f4a:	f7ff ff6f 	bl	8007e2c <__ssputs_r>
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f000 80a9 	beq.w	80080a6 <_svfiprintf_r+0x1c6>
 8007f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f56:	445a      	add	r2, fp
 8007f58:	9209      	str	r2, [sp, #36]	; 0x24
 8007f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80a1 	beq.w	80080a6 <_svfiprintf_r+0x1c6>
 8007f64:	2300      	movs	r3, #0
 8007f66:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f6e:	f10a 0a01 	add.w	sl, sl, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	9307      	str	r3, [sp, #28]
 8007f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f7c:	4654      	mov	r4, sl
 8007f7e:	2205      	movs	r2, #5
 8007f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f84:	4850      	ldr	r0, [pc, #320]	; (80080c8 <_svfiprintf_r+0x1e8>)
 8007f86:	f7fd fc98 	bl	80058ba <memchr>
 8007f8a:	9a04      	ldr	r2, [sp, #16]
 8007f8c:	b9d8      	cbnz	r0, 8007fc6 <_svfiprintf_r+0xe6>
 8007f8e:	06d0      	lsls	r0, r2, #27
 8007f90:	bf44      	itt	mi
 8007f92:	2320      	movmi	r3, #32
 8007f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f98:	0711      	lsls	r1, r2, #28
 8007f9a:	bf44      	itt	mi
 8007f9c:	232b      	movmi	r3, #43	; 0x2b
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa8:	d015      	beq.n	8007fd6 <_svfiprintf_r+0xf6>
 8007faa:	4654      	mov	r4, sl
 8007fac:	2000      	movs	r0, #0
 8007fae:	f04f 0c0a 	mov.w	ip, #10
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fba:	3b30      	subs	r3, #48	; 0x30
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	d94d      	bls.n	800805c <_svfiprintf_r+0x17c>
 8007fc0:	b1b0      	cbz	r0, 8007ff0 <_svfiprintf_r+0x110>
 8007fc2:	9207      	str	r2, [sp, #28]
 8007fc4:	e014      	b.n	8007ff0 <_svfiprintf_r+0x110>
 8007fc6:	eba0 0308 	sub.w	r3, r0, r8
 8007fca:	fa09 f303 	lsl.w	r3, r9, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	46a2      	mov	sl, r4
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	e7d2      	b.n	8007f7c <_svfiprintf_r+0x9c>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	1d19      	adds	r1, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	9103      	str	r1, [sp, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfbb      	ittet	lt
 8007fe2:	425b      	neglt	r3, r3
 8007fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8007fe8:	9307      	strge	r3, [sp, #28]
 8007fea:	9307      	strlt	r3, [sp, #28]
 8007fec:	bfb8      	it	lt
 8007fee:	9204      	strlt	r2, [sp, #16]
 8007ff0:	7823      	ldrb	r3, [r4, #0]
 8007ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ff4:	d10c      	bne.n	8008010 <_svfiprintf_r+0x130>
 8007ff6:	7863      	ldrb	r3, [r4, #1]
 8007ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffa:	d134      	bne.n	8008066 <_svfiprintf_r+0x186>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	3402      	adds	r4, #2
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9203      	str	r2, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfb8      	it	lt
 800800a:	f04f 33ff 	movlt.w	r3, #4294967295
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80080cc <_svfiprintf_r+0x1ec>
 8008014:	2203      	movs	r2, #3
 8008016:	4650      	mov	r0, sl
 8008018:	7821      	ldrb	r1, [r4, #0]
 800801a:	f7fd fc4e 	bl	80058ba <memchr>
 800801e:	b138      	cbz	r0, 8008030 <_svfiprintf_r+0x150>
 8008020:	2240      	movs	r2, #64	; 0x40
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	eba0 000a 	sub.w	r0, r0, sl
 8008028:	4082      	lsls	r2, r0
 800802a:	4313      	orrs	r3, r2
 800802c:	3401      	adds	r4, #1
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008034:	2206      	movs	r2, #6
 8008036:	4826      	ldr	r0, [pc, #152]	; (80080d0 <_svfiprintf_r+0x1f0>)
 8008038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800803c:	f7fd fc3d 	bl	80058ba <memchr>
 8008040:	2800      	cmp	r0, #0
 8008042:	d038      	beq.n	80080b6 <_svfiprintf_r+0x1d6>
 8008044:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <_svfiprintf_r+0x1f4>)
 8008046:	bb1b      	cbnz	r3, 8008090 <_svfiprintf_r+0x1b0>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	3307      	adds	r3, #7
 800804c:	f023 0307 	bic.w	r3, r3, #7
 8008050:	3308      	adds	r3, #8
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	4433      	add	r3, r6
 8008058:	9309      	str	r3, [sp, #36]	; 0x24
 800805a:	e768      	b.n	8007f2e <_svfiprintf_r+0x4e>
 800805c:	460c      	mov	r4, r1
 800805e:	2001      	movs	r0, #1
 8008060:	fb0c 3202 	mla	r2, ip, r2, r3
 8008064:	e7a6      	b.n	8007fb4 <_svfiprintf_r+0xd4>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 0c0a 	mov.w	ip, #10
 800806c:	4619      	mov	r1, r3
 800806e:	3401      	adds	r4, #1
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	4620      	mov	r0, r4
 8008074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008078:	3a30      	subs	r2, #48	; 0x30
 800807a:	2a09      	cmp	r2, #9
 800807c:	d903      	bls.n	8008086 <_svfiprintf_r+0x1a6>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0c6      	beq.n	8008010 <_svfiprintf_r+0x130>
 8008082:	9105      	str	r1, [sp, #20]
 8008084:	e7c4      	b.n	8008010 <_svfiprintf_r+0x130>
 8008086:	4604      	mov	r4, r0
 8008088:	2301      	movs	r3, #1
 800808a:	fb0c 2101 	mla	r1, ip, r1, r2
 800808e:	e7f0      	b.n	8008072 <_svfiprintf_r+0x192>
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	462a      	mov	r2, r5
 8008096:	4638      	mov	r0, r7
 8008098:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <_svfiprintf_r+0x1f8>)
 800809a:	a904      	add	r1, sp, #16
 800809c:	f7fc fba8 	bl	80047f0 <_printf_float>
 80080a0:	1c42      	adds	r2, r0, #1
 80080a2:	4606      	mov	r6, r0
 80080a4:	d1d6      	bne.n	8008054 <_svfiprintf_r+0x174>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	065b      	lsls	r3, r3, #25
 80080aa:	f53f af2d 	bmi.w	8007f08 <_svfiprintf_r+0x28>
 80080ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b0:	b01d      	add	sp, #116	; 0x74
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	ab03      	add	r3, sp, #12
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	462a      	mov	r2, r5
 80080bc:	4638      	mov	r0, r7
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <_svfiprintf_r+0x1f8>)
 80080c0:	a904      	add	r1, sp, #16
 80080c2:	f7fc fe35 	bl	8004d30 <_printf_i>
 80080c6:	e7eb      	b.n	80080a0 <_svfiprintf_r+0x1c0>
 80080c8:	080092a1 	.word	0x080092a1
 80080cc:	080092a7 	.word	0x080092a7
 80080d0:	080092ab 	.word	0x080092ab
 80080d4:	080047f1 	.word	0x080047f1
 80080d8:	08007e2d 	.word	0x08007e2d

080080dc <__sflush_r>:
 80080dc:	898a      	ldrh	r2, [r1, #12]
 80080de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e0:	4605      	mov	r5, r0
 80080e2:	0710      	lsls	r0, r2, #28
 80080e4:	460c      	mov	r4, r1
 80080e6:	d457      	bmi.n	8008198 <__sflush_r+0xbc>
 80080e8:	684b      	ldr	r3, [r1, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dc04      	bgt.n	80080f8 <__sflush_r+0x1c>
 80080ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	dc01      	bgt.n	80080f8 <__sflush_r+0x1c>
 80080f4:	2000      	movs	r0, #0
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d0fa      	beq.n	80080f4 <__sflush_r+0x18>
 80080fe:	2300      	movs	r3, #0
 8008100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008104:	682f      	ldr	r7, [r5, #0]
 8008106:	6a21      	ldr	r1, [r4, #32]
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	d032      	beq.n	8008172 <__sflush_r+0x96>
 800810c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	075a      	lsls	r2, r3, #29
 8008112:	d505      	bpl.n	8008120 <__sflush_r+0x44>
 8008114:	6863      	ldr	r3, [r4, #4]
 8008116:	1ac0      	subs	r0, r0, r3
 8008118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800811a:	b10b      	cbz	r3, 8008120 <__sflush_r+0x44>
 800811c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800811e:	1ac0      	subs	r0, r0, r3
 8008120:	2300      	movs	r3, #0
 8008122:	4602      	mov	r2, r0
 8008124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008126:	4628      	mov	r0, r5
 8008128:	6a21      	ldr	r1, [r4, #32]
 800812a:	47b0      	blx	r6
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	d106      	bne.n	8008140 <__sflush_r+0x64>
 8008132:	6829      	ldr	r1, [r5, #0]
 8008134:	291d      	cmp	r1, #29
 8008136:	d82b      	bhi.n	8008190 <__sflush_r+0xb4>
 8008138:	4a28      	ldr	r2, [pc, #160]	; (80081dc <__sflush_r+0x100>)
 800813a:	410a      	asrs	r2, r1
 800813c:	07d6      	lsls	r6, r2, #31
 800813e:	d427      	bmi.n	8008190 <__sflush_r+0xb4>
 8008140:	2200      	movs	r2, #0
 8008142:	6062      	str	r2, [r4, #4]
 8008144:	6922      	ldr	r2, [r4, #16]
 8008146:	04d9      	lsls	r1, r3, #19
 8008148:	6022      	str	r2, [r4, #0]
 800814a:	d504      	bpl.n	8008156 <__sflush_r+0x7a>
 800814c:	1c42      	adds	r2, r0, #1
 800814e:	d101      	bne.n	8008154 <__sflush_r+0x78>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b903      	cbnz	r3, 8008156 <__sflush_r+0x7a>
 8008154:	6560      	str	r0, [r4, #84]	; 0x54
 8008156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008158:	602f      	str	r7, [r5, #0]
 800815a:	2900      	cmp	r1, #0
 800815c:	d0ca      	beq.n	80080f4 <__sflush_r+0x18>
 800815e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008162:	4299      	cmp	r1, r3
 8008164:	d002      	beq.n	800816c <__sflush_r+0x90>
 8008166:	4628      	mov	r0, r5
 8008168:	f7fe fa2a 	bl	80065c0 <_free_r>
 800816c:	2000      	movs	r0, #0
 800816e:	6360      	str	r0, [r4, #52]	; 0x34
 8008170:	e7c1      	b.n	80080f6 <__sflush_r+0x1a>
 8008172:	2301      	movs	r3, #1
 8008174:	4628      	mov	r0, r5
 8008176:	47b0      	blx	r6
 8008178:	1c41      	adds	r1, r0, #1
 800817a:	d1c8      	bne.n	800810e <__sflush_r+0x32>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0c5      	beq.n	800810e <__sflush_r+0x32>
 8008182:	2b1d      	cmp	r3, #29
 8008184:	d001      	beq.n	800818a <__sflush_r+0xae>
 8008186:	2b16      	cmp	r3, #22
 8008188:	d101      	bne.n	800818e <__sflush_r+0xb2>
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	e7b2      	b.n	80080f4 <__sflush_r+0x18>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	e7ae      	b.n	80080f6 <__sflush_r+0x1a>
 8008198:	690f      	ldr	r7, [r1, #16]
 800819a:	2f00      	cmp	r7, #0
 800819c:	d0aa      	beq.n	80080f4 <__sflush_r+0x18>
 800819e:	0793      	lsls	r3, r2, #30
 80081a0:	bf18      	it	ne
 80081a2:	2300      	movne	r3, #0
 80081a4:	680e      	ldr	r6, [r1, #0]
 80081a6:	bf08      	it	eq
 80081a8:	694b      	ldreq	r3, [r1, #20]
 80081aa:	1bf6      	subs	r6, r6, r7
 80081ac:	600f      	str	r7, [r1, #0]
 80081ae:	608b      	str	r3, [r1, #8]
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	dd9f      	ble.n	80080f4 <__sflush_r+0x18>
 80081b4:	4633      	mov	r3, r6
 80081b6:	463a      	mov	r2, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	6a21      	ldr	r1, [r4, #32]
 80081bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80081c0:	47e0      	blx	ip
 80081c2:	2800      	cmp	r0, #0
 80081c4:	dc06      	bgt.n	80081d4 <__sflush_r+0xf8>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	e790      	b.n	80080f6 <__sflush_r+0x1a>
 80081d4:	4407      	add	r7, r0
 80081d6:	1a36      	subs	r6, r6, r0
 80081d8:	e7ea      	b.n	80081b0 <__sflush_r+0xd4>
 80081da:	bf00      	nop
 80081dc:	dfbffffe 	.word	0xdfbffffe

080081e0 <_fflush_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	690b      	ldr	r3, [r1, #16]
 80081e4:	4605      	mov	r5, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b913      	cbnz	r3, 80081f0 <_fflush_r+0x10>
 80081ea:	2500      	movs	r5, #0
 80081ec:	4628      	mov	r0, r5
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	b118      	cbz	r0, 80081fa <_fflush_r+0x1a>
 80081f2:	6a03      	ldr	r3, [r0, #32]
 80081f4:	b90b      	cbnz	r3, 80081fa <_fflush_r+0x1a>
 80081f6:	f7fd f957 	bl	80054a8 <__sinit>
 80081fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f3      	beq.n	80081ea <_fflush_r+0xa>
 8008202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008204:	07d0      	lsls	r0, r2, #31
 8008206:	d404      	bmi.n	8008212 <_fflush_r+0x32>
 8008208:	0599      	lsls	r1, r3, #22
 800820a:	d402      	bmi.n	8008212 <_fflush_r+0x32>
 800820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820e:	f7fd fb52 	bl	80058b6 <__retarget_lock_acquire_recursive>
 8008212:	4628      	mov	r0, r5
 8008214:	4621      	mov	r1, r4
 8008216:	f7ff ff61 	bl	80080dc <__sflush_r>
 800821a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800821c:	4605      	mov	r5, r0
 800821e:	07da      	lsls	r2, r3, #31
 8008220:	d4e4      	bmi.n	80081ec <_fflush_r+0xc>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	059b      	lsls	r3, r3, #22
 8008226:	d4e1      	bmi.n	80081ec <_fflush_r+0xc>
 8008228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822a:	f7fd fb45 	bl	80058b8 <__retarget_lock_release_recursive>
 800822e:	e7dd      	b.n	80081ec <_fflush_r+0xc>

08008230 <__swhatbuf_r>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	460c      	mov	r4, r1
 8008234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008238:	4615      	mov	r5, r2
 800823a:	2900      	cmp	r1, #0
 800823c:	461e      	mov	r6, r3
 800823e:	b096      	sub	sp, #88	; 0x58
 8008240:	da0c      	bge.n	800825c <__swhatbuf_r+0x2c>
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	2100      	movs	r1, #0
 8008246:	f013 0f80 	tst.w	r3, #128	; 0x80
 800824a:	bf0c      	ite	eq
 800824c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008250:	2340      	movne	r3, #64	; 0x40
 8008252:	2000      	movs	r0, #0
 8008254:	6031      	str	r1, [r6, #0]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	b016      	add	sp, #88	; 0x58
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	466a      	mov	r2, sp
 800825e:	f000 f875 	bl	800834c <_fstat_r>
 8008262:	2800      	cmp	r0, #0
 8008264:	dbed      	blt.n	8008242 <__swhatbuf_r+0x12>
 8008266:	9901      	ldr	r1, [sp, #4]
 8008268:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800826c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008270:	4259      	negs	r1, r3
 8008272:	4159      	adcs	r1, r3
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	e7eb      	b.n	8008252 <__swhatbuf_r+0x22>

0800827a <__smakebuf_r>:
 800827a:	898b      	ldrh	r3, [r1, #12]
 800827c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827e:	079d      	lsls	r5, r3, #30
 8008280:	4606      	mov	r6, r0
 8008282:	460c      	mov	r4, r1
 8008284:	d507      	bpl.n	8008296 <__smakebuf_r+0x1c>
 8008286:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	2301      	movs	r3, #1
 8008290:	6163      	str	r3, [r4, #20]
 8008292:	b002      	add	sp, #8
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	466a      	mov	r2, sp
 8008298:	ab01      	add	r3, sp, #4
 800829a:	f7ff ffc9 	bl	8008230 <__swhatbuf_r>
 800829e:	9900      	ldr	r1, [sp, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7fe f9fc 	bl	80066a0 <_malloc_r>
 80082a8:	b948      	cbnz	r0, 80082be <__smakebuf_r+0x44>
 80082aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ae:	059a      	lsls	r2, r3, #22
 80082b0:	d4ef      	bmi.n	8008292 <__smakebuf_r+0x18>
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	f043 0302 	orr.w	r3, r3, #2
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	e7e3      	b.n	8008286 <__smakebuf_r+0xc>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	6020      	str	r0, [r4, #0]
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	6120      	str	r0, [r4, #16]
 80082cc:	6163      	str	r3, [r4, #20]
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	b15b      	cbz	r3, 80082ea <__smakebuf_r+0x70>
 80082d2:	4630      	mov	r0, r6
 80082d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d8:	f000 f84a 	bl	8008370 <_isatty_r>
 80082dc:	b128      	cbz	r0, 80082ea <__smakebuf_r+0x70>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	f043 0301 	orr.w	r3, r3, #1
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	431d      	orrs	r5, r3
 80082ee:	81a5      	strh	r5, [r4, #12]
 80082f0:	e7cf      	b.n	8008292 <__smakebuf_r+0x18>

080082f2 <memmove>:
 80082f2:	4288      	cmp	r0, r1
 80082f4:	b510      	push	{r4, lr}
 80082f6:	eb01 0402 	add.w	r4, r1, r2
 80082fa:	d902      	bls.n	8008302 <memmove+0x10>
 80082fc:	4284      	cmp	r4, r0
 80082fe:	4623      	mov	r3, r4
 8008300:	d807      	bhi.n	8008312 <memmove+0x20>
 8008302:	1e43      	subs	r3, r0, #1
 8008304:	42a1      	cmp	r1, r4
 8008306:	d008      	beq.n	800831a <memmove+0x28>
 8008308:	f811 2b01 	ldrb.w	r2, [r1], #1
 800830c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008310:	e7f8      	b.n	8008304 <memmove+0x12>
 8008312:	4601      	mov	r1, r0
 8008314:	4402      	add	r2, r0
 8008316:	428a      	cmp	r2, r1
 8008318:	d100      	bne.n	800831c <memmove+0x2a>
 800831a:	bd10      	pop	{r4, pc}
 800831c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008320:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008324:	e7f7      	b.n	8008316 <memmove+0x24>

08008326 <strncmp>:
 8008326:	b510      	push	{r4, lr}
 8008328:	b16a      	cbz	r2, 8008346 <strncmp+0x20>
 800832a:	3901      	subs	r1, #1
 800832c:	1884      	adds	r4, r0, r2
 800832e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008332:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008336:	429a      	cmp	r2, r3
 8008338:	d103      	bne.n	8008342 <strncmp+0x1c>
 800833a:	42a0      	cmp	r0, r4
 800833c:	d001      	beq.n	8008342 <strncmp+0x1c>
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1f5      	bne.n	800832e <strncmp+0x8>
 8008342:	1ad0      	subs	r0, r2, r3
 8008344:	bd10      	pop	{r4, pc}
 8008346:	4610      	mov	r0, r2
 8008348:	e7fc      	b.n	8008344 <strncmp+0x1e>
	...

0800834c <_fstat_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	2300      	movs	r3, #0
 8008350:	4d06      	ldr	r5, [pc, #24]	; (800836c <_fstat_r+0x20>)
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7f9 fb22 	bl	80019a2 <_fstat>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_fstat_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_fstat_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	20000440 	.word	0x20000440

08008370 <_isatty_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	2300      	movs	r3, #0
 8008374:	4d05      	ldr	r5, [pc, #20]	; (800838c <_isatty_r+0x1c>)
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7f9 fb20 	bl	80019c0 <_isatty>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_isatty_r+0x1a>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_isatty_r+0x1a>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20000440 	.word	0x20000440

08008390 <_sbrk_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	2300      	movs	r3, #0
 8008394:	4d05      	ldr	r5, [pc, #20]	; (80083ac <_sbrk_r+0x1c>)
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f9 fb26 	bl	80019ec <_sbrk>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_sbrk_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_sbrk_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	20000440 	.word	0x20000440

080083b0 <memcpy>:
 80083b0:	440a      	add	r2, r1
 80083b2:	4291      	cmp	r1, r2
 80083b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b8:	d100      	bne.n	80083bc <memcpy+0xc>
 80083ba:	4770      	bx	lr
 80083bc:	b510      	push	{r4, lr}
 80083be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c8:	d1f9      	bne.n	80083be <memcpy+0xe>
 80083ca:	bd10      	pop	{r4, pc}

080083cc <nan>:
 80083cc:	2000      	movs	r0, #0
 80083ce:	4901      	ldr	r1, [pc, #4]	; (80083d4 <nan+0x8>)
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	7ff80000 	.word	0x7ff80000

080083d8 <__assert_func>:
 80083d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083da:	4614      	mov	r4, r2
 80083dc:	461a      	mov	r2, r3
 80083de:	4b09      	ldr	r3, [pc, #36]	; (8008404 <__assert_func+0x2c>)
 80083e0:	4605      	mov	r5, r0
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68d8      	ldr	r0, [r3, #12]
 80083e6:	b14c      	cbz	r4, 80083fc <__assert_func+0x24>
 80083e8:	4b07      	ldr	r3, [pc, #28]	; (8008408 <__assert_func+0x30>)
 80083ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083ee:	9100      	str	r1, [sp, #0]
 80083f0:	462b      	mov	r3, r5
 80083f2:	4906      	ldr	r1, [pc, #24]	; (800840c <__assert_func+0x34>)
 80083f4:	f000 fbca 	bl	8008b8c <fiprintf>
 80083f8:	f000 fbda 	bl	8008bb0 <abort>
 80083fc:	4b04      	ldr	r3, [pc, #16]	; (8008410 <__assert_func+0x38>)
 80083fe:	461c      	mov	r4, r3
 8008400:	e7f3      	b.n	80083ea <__assert_func+0x12>
 8008402:	bf00      	nop
 8008404:	20000068 	.word	0x20000068
 8008408:	080092ba 	.word	0x080092ba
 800840c:	080092c7 	.word	0x080092c7
 8008410:	080092f5 	.word	0x080092f5

08008414 <_calloc_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	fba1 5402 	umull	r5, r4, r1, r2
 800841a:	b934      	cbnz	r4, 800842a <_calloc_r+0x16>
 800841c:	4629      	mov	r1, r5
 800841e:	f7fe f93f 	bl	80066a0 <_malloc_r>
 8008422:	4606      	mov	r6, r0
 8008424:	b928      	cbnz	r0, 8008432 <_calloc_r+0x1e>
 8008426:	4630      	mov	r0, r6
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	220c      	movs	r2, #12
 800842c:	2600      	movs	r6, #0
 800842e:	6002      	str	r2, [r0, #0]
 8008430:	e7f9      	b.n	8008426 <_calloc_r+0x12>
 8008432:	462a      	mov	r2, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7fd f9c1 	bl	80057bc <memset>
 800843a:	e7f4      	b.n	8008426 <_calloc_r+0x12>

0800843c <rshift>:
 800843c:	6903      	ldr	r3, [r0, #16]
 800843e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008442:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008446:	f100 0414 	add.w	r4, r0, #20
 800844a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800844e:	dd46      	ble.n	80084de <rshift+0xa2>
 8008450:	f011 011f 	ands.w	r1, r1, #31
 8008454:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008458:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800845c:	d10c      	bne.n	8008478 <rshift+0x3c>
 800845e:	4629      	mov	r1, r5
 8008460:	f100 0710 	add.w	r7, r0, #16
 8008464:	42b1      	cmp	r1, r6
 8008466:	d335      	bcc.n	80084d4 <rshift+0x98>
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	1eea      	subs	r2, r5, #3
 800846e:	4296      	cmp	r6, r2
 8008470:	bf38      	it	cc
 8008472:	2300      	movcc	r3, #0
 8008474:	4423      	add	r3, r4
 8008476:	e015      	b.n	80084a4 <rshift+0x68>
 8008478:	46a1      	mov	r9, r4
 800847a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800847e:	f1c1 0820 	rsb	r8, r1, #32
 8008482:	40cf      	lsrs	r7, r1
 8008484:	f105 0e04 	add.w	lr, r5, #4
 8008488:	4576      	cmp	r6, lr
 800848a:	46f4      	mov	ip, lr
 800848c:	d816      	bhi.n	80084bc <rshift+0x80>
 800848e:	1a9a      	subs	r2, r3, r2
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	3a04      	subs	r2, #4
 8008494:	3501      	adds	r5, #1
 8008496:	42ae      	cmp	r6, r5
 8008498:	bf38      	it	cc
 800849a:	2200      	movcc	r2, #0
 800849c:	18a3      	adds	r3, r4, r2
 800849e:	50a7      	str	r7, [r4, r2]
 80084a0:	b107      	cbz	r7, 80084a4 <rshift+0x68>
 80084a2:	3304      	adds	r3, #4
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	eba3 0204 	sub.w	r2, r3, r4
 80084aa:	bf08      	it	eq
 80084ac:	2300      	moveq	r3, #0
 80084ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084b2:	6102      	str	r2, [r0, #16]
 80084b4:	bf08      	it	eq
 80084b6:	6143      	streq	r3, [r0, #20]
 80084b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084bc:	f8dc c000 	ldr.w	ip, [ip]
 80084c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80084c4:	ea4c 0707 	orr.w	r7, ip, r7
 80084c8:	f849 7b04 	str.w	r7, [r9], #4
 80084cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084d0:	40cf      	lsrs	r7, r1
 80084d2:	e7d9      	b.n	8008488 <rshift+0x4c>
 80084d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80084d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80084dc:	e7c2      	b.n	8008464 <rshift+0x28>
 80084de:	4623      	mov	r3, r4
 80084e0:	e7e0      	b.n	80084a4 <rshift+0x68>

080084e2 <__hexdig_fun>:
 80084e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	d802      	bhi.n	80084f0 <__hexdig_fun+0xe>
 80084ea:	3820      	subs	r0, #32
 80084ec:	b2c0      	uxtb	r0, r0
 80084ee:	4770      	bx	lr
 80084f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084f4:	2b05      	cmp	r3, #5
 80084f6:	d801      	bhi.n	80084fc <__hexdig_fun+0x1a>
 80084f8:	3847      	subs	r0, #71	; 0x47
 80084fa:	e7f7      	b.n	80084ec <__hexdig_fun+0xa>
 80084fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008500:	2b05      	cmp	r3, #5
 8008502:	d801      	bhi.n	8008508 <__hexdig_fun+0x26>
 8008504:	3827      	subs	r0, #39	; 0x27
 8008506:	e7f1      	b.n	80084ec <__hexdig_fun+0xa>
 8008508:	2000      	movs	r0, #0
 800850a:	4770      	bx	lr

0800850c <__gethex>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	4681      	mov	r9, r0
 8008512:	468a      	mov	sl, r1
 8008514:	4617      	mov	r7, r2
 8008516:	680a      	ldr	r2, [r1, #0]
 8008518:	b085      	sub	sp, #20
 800851a:	f102 0b02 	add.w	fp, r2, #2
 800851e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008522:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	32fe      	adds	r2, #254	; 0xfe
 800852a:	eb02 030b 	add.w	r3, r2, fp
 800852e:	46d8      	mov	r8, fp
 8008530:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	2830      	cmp	r0, #48	; 0x30
 8008538:	d0f7      	beq.n	800852a <__gethex+0x1e>
 800853a:	f7ff ffd2 	bl	80084e2 <__hexdig_fun>
 800853e:	4604      	mov	r4, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d138      	bne.n	80085b6 <__gethex+0xaa>
 8008544:	2201      	movs	r2, #1
 8008546:	4640      	mov	r0, r8
 8008548:	49a7      	ldr	r1, [pc, #668]	; (80087e8 <__gethex+0x2dc>)
 800854a:	f7ff feec 	bl	8008326 <strncmp>
 800854e:	4606      	mov	r6, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d169      	bne.n	8008628 <__gethex+0x11c>
 8008554:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008558:	465d      	mov	r5, fp
 800855a:	f7ff ffc2 	bl	80084e2 <__hexdig_fun>
 800855e:	2800      	cmp	r0, #0
 8008560:	d064      	beq.n	800862c <__gethex+0x120>
 8008562:	465a      	mov	r2, fp
 8008564:	7810      	ldrb	r0, [r2, #0]
 8008566:	4690      	mov	r8, r2
 8008568:	2830      	cmp	r0, #48	; 0x30
 800856a:	f102 0201 	add.w	r2, r2, #1
 800856e:	d0f9      	beq.n	8008564 <__gethex+0x58>
 8008570:	f7ff ffb7 	bl	80084e2 <__hexdig_fun>
 8008574:	2301      	movs	r3, #1
 8008576:	fab0 f480 	clz	r4, r0
 800857a:	465e      	mov	r6, fp
 800857c:	0964      	lsrs	r4, r4, #5
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	4642      	mov	r2, r8
 8008582:	4615      	mov	r5, r2
 8008584:	7828      	ldrb	r0, [r5, #0]
 8008586:	3201      	adds	r2, #1
 8008588:	f7ff ffab 	bl	80084e2 <__hexdig_fun>
 800858c:	2800      	cmp	r0, #0
 800858e:	d1f8      	bne.n	8008582 <__gethex+0x76>
 8008590:	2201      	movs	r2, #1
 8008592:	4628      	mov	r0, r5
 8008594:	4994      	ldr	r1, [pc, #592]	; (80087e8 <__gethex+0x2dc>)
 8008596:	f7ff fec6 	bl	8008326 <strncmp>
 800859a:	b978      	cbnz	r0, 80085bc <__gethex+0xb0>
 800859c:	b946      	cbnz	r6, 80085b0 <__gethex+0xa4>
 800859e:	1c6e      	adds	r6, r5, #1
 80085a0:	4632      	mov	r2, r6
 80085a2:	4615      	mov	r5, r2
 80085a4:	7828      	ldrb	r0, [r5, #0]
 80085a6:	3201      	adds	r2, #1
 80085a8:	f7ff ff9b 	bl	80084e2 <__hexdig_fun>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1f8      	bne.n	80085a2 <__gethex+0x96>
 80085b0:	1b73      	subs	r3, r6, r5
 80085b2:	009e      	lsls	r6, r3, #2
 80085b4:	e004      	b.n	80085c0 <__gethex+0xb4>
 80085b6:	2400      	movs	r4, #0
 80085b8:	4626      	mov	r6, r4
 80085ba:	e7e1      	b.n	8008580 <__gethex+0x74>
 80085bc:	2e00      	cmp	r6, #0
 80085be:	d1f7      	bne.n	80085b0 <__gethex+0xa4>
 80085c0:	782b      	ldrb	r3, [r5, #0]
 80085c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085c6:	2b50      	cmp	r3, #80	; 0x50
 80085c8:	d13d      	bne.n	8008646 <__gethex+0x13a>
 80085ca:	786b      	ldrb	r3, [r5, #1]
 80085cc:	2b2b      	cmp	r3, #43	; 0x2b
 80085ce:	d02f      	beq.n	8008630 <__gethex+0x124>
 80085d0:	2b2d      	cmp	r3, #45	; 0x2d
 80085d2:	d031      	beq.n	8008638 <__gethex+0x12c>
 80085d4:	f04f 0b00 	mov.w	fp, #0
 80085d8:	1c69      	adds	r1, r5, #1
 80085da:	7808      	ldrb	r0, [r1, #0]
 80085dc:	f7ff ff81 	bl	80084e2 <__hexdig_fun>
 80085e0:	1e42      	subs	r2, r0, #1
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	2a18      	cmp	r2, #24
 80085e6:	d82e      	bhi.n	8008646 <__gethex+0x13a>
 80085e8:	f1a0 0210 	sub.w	r2, r0, #16
 80085ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085f0:	f7ff ff77 	bl	80084e2 <__hexdig_fun>
 80085f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80085f8:	fa5f fc8c 	uxtb.w	ip, ip
 80085fc:	f1bc 0f18 	cmp.w	ip, #24
 8008600:	d91d      	bls.n	800863e <__gethex+0x132>
 8008602:	f1bb 0f00 	cmp.w	fp, #0
 8008606:	d000      	beq.n	800860a <__gethex+0xfe>
 8008608:	4252      	negs	r2, r2
 800860a:	4416      	add	r6, r2
 800860c:	f8ca 1000 	str.w	r1, [sl]
 8008610:	b1dc      	cbz	r4, 800864a <__gethex+0x13e>
 8008612:	9b01      	ldr	r3, [sp, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	bf14      	ite	ne
 8008618:	f04f 0800 	movne.w	r8, #0
 800861c:	f04f 0806 	moveq.w	r8, #6
 8008620:	4640      	mov	r0, r8
 8008622:	b005      	add	sp, #20
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	4645      	mov	r5, r8
 800862a:	4626      	mov	r6, r4
 800862c:	2401      	movs	r4, #1
 800862e:	e7c7      	b.n	80085c0 <__gethex+0xb4>
 8008630:	f04f 0b00 	mov.w	fp, #0
 8008634:	1ca9      	adds	r1, r5, #2
 8008636:	e7d0      	b.n	80085da <__gethex+0xce>
 8008638:	f04f 0b01 	mov.w	fp, #1
 800863c:	e7fa      	b.n	8008634 <__gethex+0x128>
 800863e:	230a      	movs	r3, #10
 8008640:	fb03 0002 	mla	r0, r3, r2, r0
 8008644:	e7d0      	b.n	80085e8 <__gethex+0xdc>
 8008646:	4629      	mov	r1, r5
 8008648:	e7e0      	b.n	800860c <__gethex+0x100>
 800864a:	4621      	mov	r1, r4
 800864c:	eba5 0308 	sub.w	r3, r5, r8
 8008650:	3b01      	subs	r3, #1
 8008652:	2b07      	cmp	r3, #7
 8008654:	dc0a      	bgt.n	800866c <__gethex+0x160>
 8008656:	4648      	mov	r0, r9
 8008658:	f7fe f8ae 	bl	80067b8 <_Balloc>
 800865c:	4604      	mov	r4, r0
 800865e:	b940      	cbnz	r0, 8008672 <__gethex+0x166>
 8008660:	4602      	mov	r2, r0
 8008662:	21e4      	movs	r1, #228	; 0xe4
 8008664:	4b61      	ldr	r3, [pc, #388]	; (80087ec <__gethex+0x2e0>)
 8008666:	4862      	ldr	r0, [pc, #392]	; (80087f0 <__gethex+0x2e4>)
 8008668:	f7ff feb6 	bl	80083d8 <__assert_func>
 800866c:	3101      	adds	r1, #1
 800866e:	105b      	asrs	r3, r3, #1
 8008670:	e7ef      	b.n	8008652 <__gethex+0x146>
 8008672:	2300      	movs	r3, #0
 8008674:	469b      	mov	fp, r3
 8008676:	f100 0a14 	add.w	sl, r0, #20
 800867a:	f8cd a004 	str.w	sl, [sp, #4]
 800867e:	45a8      	cmp	r8, r5
 8008680:	d344      	bcc.n	800870c <__gethex+0x200>
 8008682:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008686:	4658      	mov	r0, fp
 8008688:	f848 bb04 	str.w	fp, [r8], #4
 800868c:	eba8 080a 	sub.w	r8, r8, sl
 8008690:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008694:	6122      	str	r2, [r4, #16]
 8008696:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800869a:	f7fe f97f 	bl	800699c <__hi0bits>
 800869e:	683d      	ldr	r5, [r7, #0]
 80086a0:	eba8 0800 	sub.w	r8, r8, r0
 80086a4:	45a8      	cmp	r8, r5
 80086a6:	dd59      	ble.n	800875c <__gethex+0x250>
 80086a8:	eba8 0805 	sub.w	r8, r8, r5
 80086ac:	4641      	mov	r1, r8
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7fe fcfd 	bl	80070ae <__any_on>
 80086b4:	4683      	mov	fp, r0
 80086b6:	b1b8      	cbz	r0, 80086e8 <__gethex+0x1dc>
 80086b8:	f04f 0b01 	mov.w	fp, #1
 80086bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80086c0:	1159      	asrs	r1, r3, #5
 80086c2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80086c6:	f003 021f 	and.w	r2, r3, #31
 80086ca:	fa0b f202 	lsl.w	r2, fp, r2
 80086ce:	420a      	tst	r2, r1
 80086d0:	d00a      	beq.n	80086e8 <__gethex+0x1dc>
 80086d2:	455b      	cmp	r3, fp
 80086d4:	dd06      	ble.n	80086e4 <__gethex+0x1d8>
 80086d6:	4620      	mov	r0, r4
 80086d8:	f1a8 0102 	sub.w	r1, r8, #2
 80086dc:	f7fe fce7 	bl	80070ae <__any_on>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d138      	bne.n	8008756 <__gethex+0x24a>
 80086e4:	f04f 0b02 	mov.w	fp, #2
 80086e8:	4641      	mov	r1, r8
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff fea6 	bl	800843c <rshift>
 80086f0:	4446      	add	r6, r8
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	42b3      	cmp	r3, r6
 80086f6:	da41      	bge.n	800877c <__gethex+0x270>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4648      	mov	r0, r9
 80086fc:	f7fe f89c 	bl	8006838 <_Bfree>
 8008700:	2300      	movs	r3, #0
 8008702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008704:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	e789      	b.n	8008620 <__gethex+0x114>
 800870c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008710:	2a2e      	cmp	r2, #46	; 0x2e
 8008712:	d014      	beq.n	800873e <__gethex+0x232>
 8008714:	2b20      	cmp	r3, #32
 8008716:	d106      	bne.n	8008726 <__gethex+0x21a>
 8008718:	9b01      	ldr	r3, [sp, #4]
 800871a:	f843 bb04 	str.w	fp, [r3], #4
 800871e:	f04f 0b00 	mov.w	fp, #0
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	465b      	mov	r3, fp
 8008726:	7828      	ldrb	r0, [r5, #0]
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	f7ff feda 	bl	80084e2 <__hexdig_fun>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	f000 000f 	and.w	r0, r0, #15
 8008734:	4098      	lsls	r0, r3
 8008736:	ea4b 0b00 	orr.w	fp, fp, r0
 800873a:	3304      	adds	r3, #4
 800873c:	e79f      	b.n	800867e <__gethex+0x172>
 800873e:	45a8      	cmp	r8, r5
 8008740:	d8e8      	bhi.n	8008714 <__gethex+0x208>
 8008742:	2201      	movs	r2, #1
 8008744:	4628      	mov	r0, r5
 8008746:	4928      	ldr	r1, [pc, #160]	; (80087e8 <__gethex+0x2dc>)
 8008748:	9303      	str	r3, [sp, #12]
 800874a:	f7ff fdec 	bl	8008326 <strncmp>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	2800      	cmp	r0, #0
 8008752:	d1df      	bne.n	8008714 <__gethex+0x208>
 8008754:	e793      	b.n	800867e <__gethex+0x172>
 8008756:	f04f 0b03 	mov.w	fp, #3
 800875a:	e7c5      	b.n	80086e8 <__gethex+0x1dc>
 800875c:	da0b      	bge.n	8008776 <__gethex+0x26a>
 800875e:	eba5 0808 	sub.w	r8, r5, r8
 8008762:	4621      	mov	r1, r4
 8008764:	4642      	mov	r2, r8
 8008766:	4648      	mov	r0, r9
 8008768:	f7fe fa7e 	bl	8006c68 <__lshift>
 800876c:	4604      	mov	r4, r0
 800876e:	eba6 0608 	sub.w	r6, r6, r8
 8008772:	f100 0a14 	add.w	sl, r0, #20
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	e7ba      	b.n	80086f2 <__gethex+0x1e6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	42b3      	cmp	r3, r6
 8008780:	dd74      	ble.n	800886c <__gethex+0x360>
 8008782:	1b9e      	subs	r6, r3, r6
 8008784:	42b5      	cmp	r5, r6
 8008786:	dc35      	bgt.n	80087f4 <__gethex+0x2e8>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d023      	beq.n	80087d6 <__gethex+0x2ca>
 800878e:	2b03      	cmp	r3, #3
 8008790:	d025      	beq.n	80087de <__gethex+0x2d2>
 8008792:	2b01      	cmp	r3, #1
 8008794:	d115      	bne.n	80087c2 <__gethex+0x2b6>
 8008796:	42b5      	cmp	r5, r6
 8008798:	d113      	bne.n	80087c2 <__gethex+0x2b6>
 800879a:	2d01      	cmp	r5, #1
 800879c:	d10b      	bne.n	80087b6 <__gethex+0x2aa>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	9a02      	ldr	r2, [sp, #8]
 80087a2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	2301      	movs	r3, #1
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	f8ca 3000 	str.w	r3, [sl]
 80087b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b2:	601c      	str	r4, [r3, #0]
 80087b4:	e734      	b.n	8008620 <__gethex+0x114>
 80087b6:	4620      	mov	r0, r4
 80087b8:	1e69      	subs	r1, r5, #1
 80087ba:	f7fe fc78 	bl	80070ae <__any_on>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d1ed      	bne.n	800879e <__gethex+0x292>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4648      	mov	r0, r9
 80087c6:	f7fe f837 	bl	8006838 <_Bfree>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087ce:	f04f 0850 	mov.w	r8, #80	; 0x50
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	e724      	b.n	8008620 <__gethex+0x114>
 80087d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f2      	bne.n	80087c2 <__gethex+0x2b6>
 80087dc:	e7df      	b.n	800879e <__gethex+0x292>
 80087de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1dc      	bne.n	800879e <__gethex+0x292>
 80087e4:	e7ed      	b.n	80087c2 <__gethex+0x2b6>
 80087e6:	bf00      	nop
 80087e8:	0800914c 	.word	0x0800914c
 80087ec:	08008fdf 	.word	0x08008fdf
 80087f0:	080092f6 	.word	0x080092f6
 80087f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80087f8:	f1bb 0f00 	cmp.w	fp, #0
 80087fc:	d133      	bne.n	8008866 <__gethex+0x35a>
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	d004      	beq.n	800880e <__gethex+0x302>
 8008804:	4641      	mov	r1, r8
 8008806:	4620      	mov	r0, r4
 8008808:	f7fe fc51 	bl	80070ae <__any_on>
 800880c:	4683      	mov	fp, r0
 800880e:	2301      	movs	r3, #1
 8008810:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008814:	f008 081f 	and.w	r8, r8, #31
 8008818:	fa03 f308 	lsl.w	r3, r3, r8
 800881c:	f04f 0802 	mov.w	r8, #2
 8008820:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008824:	4631      	mov	r1, r6
 8008826:	4213      	tst	r3, r2
 8008828:	4620      	mov	r0, r4
 800882a:	bf18      	it	ne
 800882c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008830:	1bad      	subs	r5, r5, r6
 8008832:	f7ff fe03 	bl	800843c <rshift>
 8008836:	687e      	ldr	r6, [r7, #4]
 8008838:	f1bb 0f00 	cmp.w	fp, #0
 800883c:	d04a      	beq.n	80088d4 <__gethex+0x3c8>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d016      	beq.n	8008872 <__gethex+0x366>
 8008844:	2b03      	cmp	r3, #3
 8008846:	d018      	beq.n	800887a <__gethex+0x36e>
 8008848:	2b01      	cmp	r3, #1
 800884a:	d109      	bne.n	8008860 <__gethex+0x354>
 800884c:	f01b 0f02 	tst.w	fp, #2
 8008850:	d006      	beq.n	8008860 <__gethex+0x354>
 8008852:	f8da 3000 	ldr.w	r3, [sl]
 8008856:	ea4b 0b03 	orr.w	fp, fp, r3
 800885a:	f01b 0f01 	tst.w	fp, #1
 800885e:	d10f      	bne.n	8008880 <__gethex+0x374>
 8008860:	f048 0810 	orr.w	r8, r8, #16
 8008864:	e036      	b.n	80088d4 <__gethex+0x3c8>
 8008866:	f04f 0b01 	mov.w	fp, #1
 800886a:	e7d0      	b.n	800880e <__gethex+0x302>
 800886c:	f04f 0801 	mov.w	r8, #1
 8008870:	e7e2      	b.n	8008838 <__gethex+0x32c>
 8008872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008874:	f1c3 0301 	rsb	r3, r3, #1
 8008878:	930f      	str	r3, [sp, #60]	; 0x3c
 800887a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0ef      	beq.n	8008860 <__gethex+0x354>
 8008880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008884:	f104 0214 	add.w	r2, r4, #20
 8008888:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	2300      	movs	r3, #0
 8008890:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008894:	4694      	mov	ip, r2
 8008896:	f852 1b04 	ldr.w	r1, [r2], #4
 800889a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800889e:	d01e      	beq.n	80088de <__gethex+0x3d2>
 80088a0:	3101      	adds	r1, #1
 80088a2:	f8cc 1000 	str.w	r1, [ip]
 80088a6:	f1b8 0f02 	cmp.w	r8, #2
 80088aa:	f104 0214 	add.w	r2, r4, #20
 80088ae:	d13d      	bne.n	800892c <__gethex+0x420>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	d10b      	bne.n	80088d0 <__gethex+0x3c4>
 80088b8:	2301      	movs	r3, #1
 80088ba:	1169      	asrs	r1, r5, #5
 80088bc:	f005 051f 	and.w	r5, r5, #31
 80088c0:	fa03 f505 	lsl.w	r5, r3, r5
 80088c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c8:	421d      	tst	r5, r3
 80088ca:	bf18      	it	ne
 80088cc:	f04f 0801 	movne.w	r8, #1
 80088d0:	f048 0820 	orr.w	r8, r8, #32
 80088d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d6:	601c      	str	r4, [r3, #0]
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	601e      	str	r6, [r3, #0]
 80088dc:	e6a0      	b.n	8008620 <__gethex+0x114>
 80088de:	4290      	cmp	r0, r2
 80088e0:	f842 3c04 	str.w	r3, [r2, #-4]
 80088e4:	d8d6      	bhi.n	8008894 <__gethex+0x388>
 80088e6:	68a2      	ldr	r2, [r4, #8]
 80088e8:	4593      	cmp	fp, r2
 80088ea:	db17      	blt.n	800891c <__gethex+0x410>
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	4648      	mov	r0, r9
 80088f0:	3101      	adds	r1, #1
 80088f2:	f7fd ff61 	bl	80067b8 <_Balloc>
 80088f6:	4682      	mov	sl, r0
 80088f8:	b918      	cbnz	r0, 8008902 <__gethex+0x3f6>
 80088fa:	4602      	mov	r2, r0
 80088fc:	2184      	movs	r1, #132	; 0x84
 80088fe:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <__gethex+0x45c>)
 8008900:	e6b1      	b.n	8008666 <__gethex+0x15a>
 8008902:	6922      	ldr	r2, [r4, #16]
 8008904:	f104 010c 	add.w	r1, r4, #12
 8008908:	3202      	adds	r2, #2
 800890a:	0092      	lsls	r2, r2, #2
 800890c:	300c      	adds	r0, #12
 800890e:	f7ff fd4f 	bl	80083b0 <memcpy>
 8008912:	4621      	mov	r1, r4
 8008914:	4648      	mov	r0, r9
 8008916:	f7fd ff8f 	bl	8006838 <_Bfree>
 800891a:	4654      	mov	r4, sl
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	1c51      	adds	r1, r2, #1
 8008920:	6121      	str	r1, [r4, #16]
 8008922:	2101      	movs	r1, #1
 8008924:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008928:	6151      	str	r1, [r2, #20]
 800892a:	e7bc      	b.n	80088a6 <__gethex+0x39a>
 800892c:	6921      	ldr	r1, [r4, #16]
 800892e:	4559      	cmp	r1, fp
 8008930:	dd0b      	ble.n	800894a <__gethex+0x43e>
 8008932:	2101      	movs	r1, #1
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff fd81 	bl	800843c <rshift>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3601      	adds	r6, #1
 800893e:	42b3      	cmp	r3, r6
 8008940:	f6ff aeda 	blt.w	80086f8 <__gethex+0x1ec>
 8008944:	f04f 0801 	mov.w	r8, #1
 8008948:	e7c2      	b.n	80088d0 <__gethex+0x3c4>
 800894a:	f015 051f 	ands.w	r5, r5, #31
 800894e:	d0f9      	beq.n	8008944 <__gethex+0x438>
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	f1c5 0520 	rsb	r5, r5, #32
 8008956:	441a      	add	r2, r3
 8008958:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800895c:	f7fe f81e 	bl	800699c <__hi0bits>
 8008960:	42a8      	cmp	r0, r5
 8008962:	dbe6      	blt.n	8008932 <__gethex+0x426>
 8008964:	e7ee      	b.n	8008944 <__gethex+0x438>
 8008966:	bf00      	nop
 8008968:	08008fdf 	.word	0x08008fdf

0800896c <L_shift>:
 800896c:	f1c2 0208 	rsb	r2, r2, #8
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	f1c2 0620 	rsb	r6, r2, #32
 8008978:	6843      	ldr	r3, [r0, #4]
 800897a:	6804      	ldr	r4, [r0, #0]
 800897c:	fa03 f506 	lsl.w	r5, r3, r6
 8008980:	432c      	orrs	r4, r5
 8008982:	40d3      	lsrs	r3, r2
 8008984:	6004      	str	r4, [r0, #0]
 8008986:	f840 3f04 	str.w	r3, [r0, #4]!
 800898a:	4288      	cmp	r0, r1
 800898c:	d3f4      	bcc.n	8008978 <L_shift+0xc>
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <__match>:
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	b914      	cbnz	r4, 80089a2 <__match+0x12>
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	2001      	movs	r0, #1
 80089a0:	bd30      	pop	{r4, r5, pc}
 80089a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089aa:	2d19      	cmp	r5, #25
 80089ac:	bf98      	it	ls
 80089ae:	3220      	addls	r2, #32
 80089b0:	42a2      	cmp	r2, r4
 80089b2:	d0f0      	beq.n	8008996 <__match+0x6>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7f3      	b.n	80089a0 <__match+0x10>

080089b8 <__hexnan>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	2500      	movs	r5, #0
 80089be:	680b      	ldr	r3, [r1, #0]
 80089c0:	4682      	mov	sl, r0
 80089c2:	115e      	asrs	r6, r3, #5
 80089c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089c8:	f013 031f 	ands.w	r3, r3, #31
 80089cc:	bf18      	it	ne
 80089ce:	3604      	addne	r6, #4
 80089d0:	1f37      	subs	r7, r6, #4
 80089d2:	4690      	mov	r8, r2
 80089d4:	46b9      	mov	r9, r7
 80089d6:	463c      	mov	r4, r7
 80089d8:	46ab      	mov	fp, r5
 80089da:	b087      	sub	sp, #28
 80089dc:	6801      	ldr	r1, [r0, #0]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	f846 5c04 	str.w	r5, [r6, #-4]
 80089e4:	9502      	str	r5, [sp, #8]
 80089e6:	784a      	ldrb	r2, [r1, #1]
 80089e8:	1c4b      	adds	r3, r1, #1
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	b342      	cbz	r2, 8008a40 <__hexnan+0x88>
 80089ee:	4610      	mov	r0, r2
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	9204      	str	r2, [sp, #16]
 80089f4:	f7ff fd75 	bl	80084e2 <__hexdig_fun>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d14f      	bne.n	8008a9c <__hexnan+0xe4>
 80089fc:	9a04      	ldr	r2, [sp, #16]
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	2a20      	cmp	r2, #32
 8008a02:	d818      	bhi.n	8008a36 <__hexnan+0x7e>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	459b      	cmp	fp, r3
 8008a08:	dd13      	ble.n	8008a32 <__hexnan+0x7a>
 8008a0a:	454c      	cmp	r4, r9
 8008a0c:	d206      	bcs.n	8008a1c <__hexnan+0x64>
 8008a0e:	2d07      	cmp	r5, #7
 8008a10:	dc04      	bgt.n	8008a1c <__hexnan+0x64>
 8008a12:	462a      	mov	r2, r5
 8008a14:	4649      	mov	r1, r9
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff ffa8 	bl	800896c <L_shift>
 8008a1c:	4544      	cmp	r4, r8
 8008a1e:	d950      	bls.n	8008ac2 <__hexnan+0x10a>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f1a4 0904 	sub.w	r9, r4, #4
 8008a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	464c      	mov	r4, r9
 8008a2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a32:	9903      	ldr	r1, [sp, #12]
 8008a34:	e7d7      	b.n	80089e6 <__hexnan+0x2e>
 8008a36:	2a29      	cmp	r2, #41	; 0x29
 8008a38:	d155      	bne.n	8008ae6 <__hexnan+0x12e>
 8008a3a:	3102      	adds	r1, #2
 8008a3c:	f8ca 1000 	str.w	r1, [sl]
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d04f      	beq.n	8008ae6 <__hexnan+0x12e>
 8008a46:	454c      	cmp	r4, r9
 8008a48:	d206      	bcs.n	8008a58 <__hexnan+0xa0>
 8008a4a:	2d07      	cmp	r5, #7
 8008a4c:	dc04      	bgt.n	8008a58 <__hexnan+0xa0>
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4649      	mov	r1, r9
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff ff8a 	bl	800896c <L_shift>
 8008a58:	4544      	cmp	r4, r8
 8008a5a:	d934      	bls.n	8008ac6 <__hexnan+0x10e>
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	f1a8 0204 	sub.w	r2, r8, #4
 8008a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a66:	429f      	cmp	r7, r3
 8008a68:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a6c:	d2f9      	bcs.n	8008a62 <__hexnan+0xaa>
 8008a6e:	1b3b      	subs	r3, r7, r4
 8008a70:	f023 0303 	bic.w	r3, r3, #3
 8008a74:	3304      	adds	r3, #4
 8008a76:	3e03      	subs	r6, #3
 8008a78:	3401      	adds	r4, #1
 8008a7a:	42a6      	cmp	r6, r4
 8008a7c:	bf38      	it	cc
 8008a7e:	2304      	movcc	r3, #4
 8008a80:	2200      	movs	r2, #0
 8008a82:	4443      	add	r3, r8
 8008a84:	f843 2b04 	str.w	r2, [r3], #4
 8008a88:	429f      	cmp	r7, r3
 8008a8a:	d2fb      	bcs.n	8008a84 <__hexnan+0xcc>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <__hexnan+0xe0>
 8008a90:	4547      	cmp	r7, r8
 8008a92:	d126      	bne.n	8008ae2 <__hexnan+0x12a>
 8008a94:	2301      	movs	r3, #1
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	2005      	movs	r0, #5
 8008a9a:	e025      	b.n	8008ae8 <__hexnan+0x130>
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	2d08      	cmp	r5, #8
 8008aa0:	f10b 0b01 	add.w	fp, fp, #1
 8008aa4:	dd06      	ble.n	8008ab4 <__hexnan+0xfc>
 8008aa6:	4544      	cmp	r4, r8
 8008aa8:	d9c3      	bls.n	8008a32 <__hexnan+0x7a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2501      	movs	r5, #1
 8008aae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab2:	3c04      	subs	r4, #4
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	f000 000f 	and.w	r0, r0, #15
 8008aba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008abe:	6020      	str	r0, [r4, #0]
 8008ac0:	e7b7      	b.n	8008a32 <__hexnan+0x7a>
 8008ac2:	2508      	movs	r5, #8
 8008ac4:	e7b5      	b.n	8008a32 <__hexnan+0x7a>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0df      	beq.n	8008a8c <__hexnan+0xd4>
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	f1c3 0320 	rsb	r3, r3, #32
 8008ad4:	40da      	lsrs	r2, r3
 8008ad6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ada:	4013      	ands	r3, r2
 8008adc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ae0:	e7d4      	b.n	8008a8c <__hexnan+0xd4>
 8008ae2:	3f04      	subs	r7, #4
 8008ae4:	e7d2      	b.n	8008a8c <__hexnan+0xd4>
 8008ae6:	2004      	movs	r0, #4
 8008ae8:	b007      	add	sp, #28
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008aee <__ascii_mbtowc>:
 8008aee:	b082      	sub	sp, #8
 8008af0:	b901      	cbnz	r1, 8008af4 <__ascii_mbtowc+0x6>
 8008af2:	a901      	add	r1, sp, #4
 8008af4:	b142      	cbz	r2, 8008b08 <__ascii_mbtowc+0x1a>
 8008af6:	b14b      	cbz	r3, 8008b0c <__ascii_mbtowc+0x1e>
 8008af8:	7813      	ldrb	r3, [r2, #0]
 8008afa:	600b      	str	r3, [r1, #0]
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	1e10      	subs	r0, r2, #0
 8008b00:	bf18      	it	ne
 8008b02:	2001      	movne	r0, #1
 8008b04:	b002      	add	sp, #8
 8008b06:	4770      	bx	lr
 8008b08:	4610      	mov	r0, r2
 8008b0a:	e7fb      	b.n	8008b04 <__ascii_mbtowc+0x16>
 8008b0c:	f06f 0001 	mvn.w	r0, #1
 8008b10:	e7f8      	b.n	8008b04 <__ascii_mbtowc+0x16>

08008b12 <_realloc_r>:
 8008b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	4680      	mov	r8, r0
 8008b18:	4614      	mov	r4, r2
 8008b1a:	460e      	mov	r6, r1
 8008b1c:	b921      	cbnz	r1, 8008b28 <_realloc_r+0x16>
 8008b1e:	4611      	mov	r1, r2
 8008b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	f7fd bdbc 	b.w	80066a0 <_malloc_r>
 8008b28:	b92a      	cbnz	r2, 8008b36 <_realloc_r+0x24>
 8008b2a:	f7fd fd49 	bl	80065c0 <_free_r>
 8008b2e:	4625      	mov	r5, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b36:	f000 f842 	bl	8008bbe <_malloc_usable_size_r>
 8008b3a:	4284      	cmp	r4, r0
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	d802      	bhi.n	8008b46 <_realloc_r+0x34>
 8008b40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b44:	d812      	bhi.n	8008b6c <_realloc_r+0x5a>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4640      	mov	r0, r8
 8008b4a:	f7fd fda9 	bl	80066a0 <_malloc_r>
 8008b4e:	4605      	mov	r5, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0ed      	beq.n	8008b30 <_realloc_r+0x1e>
 8008b54:	42bc      	cmp	r4, r7
 8008b56:	4622      	mov	r2, r4
 8008b58:	4631      	mov	r1, r6
 8008b5a:	bf28      	it	cs
 8008b5c:	463a      	movcs	r2, r7
 8008b5e:	f7ff fc27 	bl	80083b0 <memcpy>
 8008b62:	4631      	mov	r1, r6
 8008b64:	4640      	mov	r0, r8
 8008b66:	f7fd fd2b 	bl	80065c0 <_free_r>
 8008b6a:	e7e1      	b.n	8008b30 <_realloc_r+0x1e>
 8008b6c:	4635      	mov	r5, r6
 8008b6e:	e7df      	b.n	8008b30 <_realloc_r+0x1e>

08008b70 <__ascii_wctomb>:
 8008b70:	4603      	mov	r3, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	b141      	cbz	r1, 8008b88 <__ascii_wctomb+0x18>
 8008b76:	2aff      	cmp	r2, #255	; 0xff
 8008b78:	d904      	bls.n	8008b84 <__ascii_wctomb+0x14>
 8008b7a:	228a      	movs	r2, #138	; 0x8a
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	4770      	bx	lr
 8008b84:	2001      	movs	r0, #1
 8008b86:	700a      	strb	r2, [r1, #0]
 8008b88:	4770      	bx	lr
	...

08008b8c <fiprintf>:
 8008b8c:	b40e      	push	{r1, r2, r3}
 8008b8e:	b503      	push	{r0, r1, lr}
 8008b90:	4601      	mov	r1, r0
 8008b92:	ab03      	add	r3, sp, #12
 8008b94:	4805      	ldr	r0, [pc, #20]	; (8008bac <fiprintf+0x20>)
 8008b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9a:	6800      	ldr	r0, [r0, #0]
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	f000 f83d 	bl	8008c1c <_vfiprintf_r>
 8008ba2:	b002      	add	sp, #8
 8008ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ba8:	b003      	add	sp, #12
 8008baa:	4770      	bx	lr
 8008bac:	20000068 	.word	0x20000068

08008bb0 <abort>:
 8008bb0:	2006      	movs	r0, #6
 8008bb2:	b508      	push	{r3, lr}
 8008bb4:	f000 f974 	bl	8008ea0 <raise>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7f8 fea4 	bl	8001906 <_exit>

08008bbe <_malloc_usable_size_r>:
 8008bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc2:	1f18      	subs	r0, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfbc      	itt	lt
 8008bc8:	580b      	ldrlt	r3, [r1, r0]
 8008bca:	18c0      	addlt	r0, r0, r3
 8008bcc:	4770      	bx	lr

08008bce <__sfputc_r>:
 8008bce:	6893      	ldr	r3, [r2, #8]
 8008bd0:	b410      	push	{r4}
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	6093      	str	r3, [r2, #8]
 8008bd8:	da07      	bge.n	8008bea <__sfputc_r+0x1c>
 8008bda:	6994      	ldr	r4, [r2, #24]
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	db01      	blt.n	8008be4 <__sfputc_r+0x16>
 8008be0:	290a      	cmp	r1, #10
 8008be2:	d102      	bne.n	8008bea <__sfputc_r+0x1c>
 8008be4:	bc10      	pop	{r4}
 8008be6:	f7fc bd54 	b.w	8005692 <__swbuf_r>
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	1c58      	adds	r0, r3, #1
 8008bee:	6010      	str	r0, [r2, #0]
 8008bf0:	7019      	strb	r1, [r3, #0]
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	bc10      	pop	{r4}
 8008bf6:	4770      	bx	lr

08008bf8 <__sfputs_r>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	4614      	mov	r4, r2
 8008c00:	18d5      	adds	r5, r2, r3
 8008c02:	42ac      	cmp	r4, r5
 8008c04:	d101      	bne.n	8008c0a <__sfputs_r+0x12>
 8008c06:	2000      	movs	r0, #0
 8008c08:	e007      	b.n	8008c1a <__sfputs_r+0x22>
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c12:	f7ff ffdc 	bl	8008bce <__sfputc_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d1f3      	bne.n	8008c02 <__sfputs_r+0xa>
 8008c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c1c <_vfiprintf_r>:
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c20:	460d      	mov	r5, r1
 8008c22:	4614      	mov	r4, r2
 8008c24:	4698      	mov	r8, r3
 8008c26:	4606      	mov	r6, r0
 8008c28:	b09d      	sub	sp, #116	; 0x74
 8008c2a:	b118      	cbz	r0, 8008c34 <_vfiprintf_r+0x18>
 8008c2c:	6a03      	ldr	r3, [r0, #32]
 8008c2e:	b90b      	cbnz	r3, 8008c34 <_vfiprintf_r+0x18>
 8008c30:	f7fc fc3a 	bl	80054a8 <__sinit>
 8008c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c36:	07d9      	lsls	r1, r3, #31
 8008c38:	d405      	bmi.n	8008c46 <_vfiprintf_r+0x2a>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d402      	bmi.n	8008c46 <_vfiprintf_r+0x2a>
 8008c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c42:	f7fc fe38 	bl	80058b6 <__retarget_lock_acquire_recursive>
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	071b      	lsls	r3, r3, #28
 8008c4a:	d501      	bpl.n	8008c50 <_vfiprintf_r+0x34>
 8008c4c:	692b      	ldr	r3, [r5, #16]
 8008c4e:	b99b      	cbnz	r3, 8008c78 <_vfiprintf_r+0x5c>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fc fd5a 	bl	800570c <__swsetup_r>
 8008c58:	b170      	cbz	r0, 8008c78 <_vfiprintf_r+0x5c>
 8008c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5c:	07dc      	lsls	r4, r3, #31
 8008c5e:	d504      	bpl.n	8008c6a <_vfiprintf_r+0x4e>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	b01d      	add	sp, #116	; 0x74
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	0598      	lsls	r0, r3, #22
 8008c6e:	d4f7      	bmi.n	8008c60 <_vfiprintf_r+0x44>
 8008c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c72:	f7fc fe21 	bl	80058b8 <__retarget_lock_release_recursive>
 8008c76:	e7f3      	b.n	8008c60 <_vfiprintf_r+0x44>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c82:	2330      	movs	r3, #48	; 0x30
 8008c84:	f04f 0901 	mov.w	r9, #1
 8008c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008e3c <_vfiprintf_r+0x220>
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c94:	4623      	mov	r3, r4
 8008c96:	469a      	mov	sl, r3
 8008c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9c:	b10a      	cbz	r2, 8008ca2 <_vfiprintf_r+0x86>
 8008c9e:	2a25      	cmp	r2, #37	; 0x25
 8008ca0:	d1f9      	bne.n	8008c96 <_vfiprintf_r+0x7a>
 8008ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca6:	d00b      	beq.n	8008cc0 <_vfiprintf_r+0xa4>
 8008ca8:	465b      	mov	r3, fp
 8008caa:	4622      	mov	r2, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff ffa2 	bl	8008bf8 <__sfputs_r>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f000 80a9 	beq.w	8008e0c <_vfiprintf_r+0x1f0>
 8008cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbc:	445a      	add	r2, fp
 8008cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80a1 	beq.w	8008e0c <_vfiprintf_r+0x1f0>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd4:	f10a 0a01 	add.w	sl, sl, #1
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	9307      	str	r3, [sp, #28]
 8008cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce2:	4654      	mov	r4, sl
 8008ce4:	2205      	movs	r2, #5
 8008ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cea:	4854      	ldr	r0, [pc, #336]	; (8008e3c <_vfiprintf_r+0x220>)
 8008cec:	f7fc fde5 	bl	80058ba <memchr>
 8008cf0:	9a04      	ldr	r2, [sp, #16]
 8008cf2:	b9d8      	cbnz	r0, 8008d2c <_vfiprintf_r+0x110>
 8008cf4:	06d1      	lsls	r1, r2, #27
 8008cf6:	bf44      	itt	mi
 8008cf8:	2320      	movmi	r3, #32
 8008cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfe:	0713      	lsls	r3, r2, #28
 8008d00:	bf44      	itt	mi
 8008d02:	232b      	movmi	r3, #43	; 0x2b
 8008d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d08:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0e:	d015      	beq.n	8008d3c <_vfiprintf_r+0x120>
 8008d10:	4654      	mov	r4, sl
 8008d12:	2000      	movs	r0, #0
 8008d14:	f04f 0c0a 	mov.w	ip, #10
 8008d18:	9a07      	ldr	r2, [sp, #28]
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d20:	3b30      	subs	r3, #48	; 0x30
 8008d22:	2b09      	cmp	r3, #9
 8008d24:	d94d      	bls.n	8008dc2 <_vfiprintf_r+0x1a6>
 8008d26:	b1b0      	cbz	r0, 8008d56 <_vfiprintf_r+0x13a>
 8008d28:	9207      	str	r2, [sp, #28]
 8008d2a:	e014      	b.n	8008d56 <_vfiprintf_r+0x13a>
 8008d2c:	eba0 0308 	sub.w	r3, r0, r8
 8008d30:	fa09 f303 	lsl.w	r3, r9, r3
 8008d34:	4313      	orrs	r3, r2
 8008d36:	46a2      	mov	sl, r4
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	e7d2      	b.n	8008ce2 <_vfiprintf_r+0xc6>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1d19      	adds	r1, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9103      	str	r1, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfbb      	ittet	lt
 8008d48:	425b      	neglt	r3, r3
 8008d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d4e:	9307      	strge	r3, [sp, #28]
 8008d50:	9307      	strlt	r3, [sp, #28]
 8008d52:	bfb8      	it	lt
 8008d54:	9204      	strlt	r2, [sp, #16]
 8008d56:	7823      	ldrb	r3, [r4, #0]
 8008d58:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5a:	d10c      	bne.n	8008d76 <_vfiprintf_r+0x15a>
 8008d5c:	7863      	ldrb	r3, [r4, #1]
 8008d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d60:	d134      	bne.n	8008dcc <_vfiprintf_r+0x1b0>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	3402      	adds	r4, #2
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	9203      	str	r2, [sp, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bfb8      	it	lt
 8008d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e40 <_vfiprintf_r+0x224>
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	7821      	ldrb	r1, [r4, #0]
 8008d80:	f7fc fd9b 	bl	80058ba <memchr>
 8008d84:	b138      	cbz	r0, 8008d96 <_vfiprintf_r+0x17a>
 8008d86:	2240      	movs	r2, #64	; 0x40
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	eba0 000a 	sub.w	r0, r0, sl
 8008d8e:	4082      	lsls	r2, r0
 8008d90:	4313      	orrs	r3, r2
 8008d92:	3401      	adds	r4, #1
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	2206      	movs	r2, #6
 8008d9c:	4829      	ldr	r0, [pc, #164]	; (8008e44 <_vfiprintf_r+0x228>)
 8008d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da2:	f7fc fd8a 	bl	80058ba <memchr>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d03f      	beq.n	8008e2a <_vfiprintf_r+0x20e>
 8008daa:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <_vfiprintf_r+0x22c>)
 8008dac:	bb1b      	cbnz	r3, 8008df6 <_vfiprintf_r+0x1da>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	3308      	adds	r3, #8
 8008db8:	9303      	str	r3, [sp, #12]
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	443b      	add	r3, r7
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	e768      	b.n	8008c94 <_vfiprintf_r+0x78>
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2001      	movs	r0, #1
 8008dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dca:	e7a6      	b.n	8008d1a <_vfiprintf_r+0xfe>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f04f 0c0a 	mov.w	ip, #10
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dde:	3a30      	subs	r2, #48	; 0x30
 8008de0:	2a09      	cmp	r2, #9
 8008de2:	d903      	bls.n	8008dec <_vfiprintf_r+0x1d0>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0c6      	beq.n	8008d76 <_vfiprintf_r+0x15a>
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	e7c4      	b.n	8008d76 <_vfiprintf_r+0x15a>
 8008dec:	4604      	mov	r4, r0
 8008dee:	2301      	movs	r3, #1
 8008df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df4:	e7f0      	b.n	8008dd8 <_vfiprintf_r+0x1bc>
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <_vfiprintf_r+0x230>)
 8008e00:	a904      	add	r1, sp, #16
 8008e02:	f7fb fcf5 	bl	80047f0 <_printf_float>
 8008e06:	4607      	mov	r7, r0
 8008e08:	1c78      	adds	r0, r7, #1
 8008e0a:	d1d6      	bne.n	8008dba <_vfiprintf_r+0x19e>
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x202>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x202>
 8008e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1a:	f7fc fd4d 	bl	80058b8 <__retarget_lock_release_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	065b      	lsls	r3, r3, #25
 8008e22:	f53f af1d 	bmi.w	8008c60 <_vfiprintf_r+0x44>
 8008e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e28:	e71c      	b.n	8008c64 <_vfiprintf_r+0x48>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4630      	mov	r0, r6
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <_vfiprintf_r+0x230>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	f7fb ff7b 	bl	8004d30 <_printf_i>
 8008e3a:	e7e4      	b.n	8008e06 <_vfiprintf_r+0x1ea>
 8008e3c:	080092a1 	.word	0x080092a1
 8008e40:	080092a7 	.word	0x080092a7
 8008e44:	080092ab 	.word	0x080092ab
 8008e48:	080047f1 	.word	0x080047f1
 8008e4c:	08008bf9 	.word	0x08008bf9

08008e50 <_raise_r>:
 8008e50:	291f      	cmp	r1, #31
 8008e52:	b538      	push	{r3, r4, r5, lr}
 8008e54:	4604      	mov	r4, r0
 8008e56:	460d      	mov	r5, r1
 8008e58:	d904      	bls.n	8008e64 <_raise_r+0x14>
 8008e5a:	2316      	movs	r3, #22
 8008e5c:	6003      	str	r3, [r0, #0]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e66:	b112      	cbz	r2, 8008e6e <_raise_r+0x1e>
 8008e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e6c:	b94b      	cbnz	r3, 8008e82 <_raise_r+0x32>
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 f830 	bl	8008ed4 <_getpid_r>
 8008e74:	462a      	mov	r2, r5
 8008e76:	4601      	mov	r1, r0
 8008e78:	4620      	mov	r0, r4
 8008e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e7e:	f000 b817 	b.w	8008eb0 <_kill_r>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d00a      	beq.n	8008e9c <_raise_r+0x4c>
 8008e86:	1c59      	adds	r1, r3, #1
 8008e88:	d103      	bne.n	8008e92 <_raise_r+0x42>
 8008e8a:	2316      	movs	r3, #22
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	2001      	movs	r0, #1
 8008e90:	e7e7      	b.n	8008e62 <_raise_r+0x12>
 8008e92:	2400      	movs	r4, #0
 8008e94:	4628      	mov	r0, r5
 8008e96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e9a:	4798      	blx	r3
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e7e0      	b.n	8008e62 <_raise_r+0x12>

08008ea0 <raise>:
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <raise+0xc>)
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	6818      	ldr	r0, [r3, #0]
 8008ea6:	f7ff bfd3 	b.w	8008e50 <_raise_r>
 8008eaa:	bf00      	nop
 8008eac:	20000068 	.word	0x20000068

08008eb0 <_kill_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4d06      	ldr	r5, [pc, #24]	; (8008ed0 <_kill_r+0x20>)
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	4611      	mov	r1, r2
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	f7f8 fd12 	bl	80018e6 <_kill>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	d102      	bne.n	8008ecc <_kill_r+0x1c>
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	b103      	cbz	r3, 8008ecc <_kill_r+0x1c>
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	bd38      	pop	{r3, r4, r5, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000440 	.word	0x20000440

08008ed4 <_getpid_r>:
 8008ed4:	f7f8 bd00 	b.w	80018d8 <_getpid>

08008ed8 <_init>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr

08008ee4 <_fini>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr
